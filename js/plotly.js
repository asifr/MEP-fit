(function ($) {
    var pageModifier = 10;
    $.widget('ui.spinner', {
        options: {
            incremental: true,
            max: null,
            min: null,
            numberformat: null,
            step: null,
            value: null
        },
        _create: function () {
            this._draw();
            this._markupOptions();
            this._mousewheel();
            this._aria();
        },
        _markupOptions: function () {
            var _this = this;
            $.each({
                min: -Number.MAX_VALUE,
                max: Number.MAX_VALUE,
                step: 1
            }, function (attr, defaultValue) {
                if (_this.options[attr] === null) {
                    var value = _this.element.attr(attr);
                    _this.options[attr] = typeof value == "string" && value.length > 0 ? _this._parse(value) : defaultValue;
                }
            });
            this.value(this.options.value !== null ? this.options.value : this.element.val() || 0);
        },
        _draw: function () {
            var self = this,
                options = self.options;
            var uiSpinner = this.uiSpinner = self.element.addClass('ui-spinner-input').attr('autocomplete', 'off').wrap(self._uiSpinnerHtml()).parent().append(self._buttonHtml()).hover(function () {
                if (!options.disabled) {
                    $(this).addClass('ui-state-hover');
                }
                self.hovered = true;
            }, function () {
                $(this).removeClass('ui-state-hover');
                self.hovered = false;
            });
            if (!$.support.opacity && uiSpinner.css('display') == 'inline-block' && $.browser.version < 8) {
                uiSpinner.css('display', 'inline');
            }
            this.element.bind('keydown.spinner', function (event) {
                if (self.options.disabled) {
                    return;
                }
                if (self._start(event)) {
                    return self._keydown(event);
                }
                return true;
            }).bind('keyup.spinner', function (event) {
                if (self.options.disabled) {
                    return;
                }
                if (self.spinning) {
                    self._stop(event);
                    self._change(event);
                }
            }).bind('focus.spinner', function () {
                uiSpinner.addClass('ui-state-active');
                self.focused = true;
            }).bind('blur.spinner', function (event) {
                self.value(self.element.val());
                if (!self.hovered) {
                    uiSpinner.removeClass('ui-state-active');
                }
                self.focused = false;
            });
            this.buttons = uiSpinner.find('.ui-spinner-button').attr("tabIndex", -1).button().removeClass("ui-corner-all").bind('mousedown', function (event) {
                if (self.options.disabled) {
                    return;
                }
                if (self._start(event) === false) {
                    return false;
                }
                self._repeat(null, $(this).hasClass('ui-spinner-up') ? 1 : -1, event);
            }).bind('mouseup', function (event) {
                if (self.options.disabled) {
                    return;
                }
                if (self.spinning) {
                    self._stop(event);
                    self._change(event);
                }
            }).bind("mouseenter", function () {
                if (self.options.disabled) {
                    return;
                }
                if ($(this).hasClass("ui-state-active")) {
                    if (self._start(event) === false) {
                        return false;
                    }
                    self._repeat(null, $(this).hasClass('ui-spinner-up') ? 1 : -1, event);
                }
            }).bind("mouseleave", function () {
                if (self.spinning) {
                    self._stop(event);
                    self._change(event);
                }
            });
            if (options.disabled) {
                this.disable();
            }
        },
        _keydown: function (event) {
            var o = this.options,
                KEYS = $.ui.keyCode;
            switch (event.keyCode) {
            case KEYS.UP:
                this._repeat(null, 1, event);
                return false;
            case KEYS.DOWN:
                this._repeat(null, -1, event);
                return false;
            case KEYS.PAGE_UP:
                this._repeat(null, pageModifier, event);
                return false;
            case KEYS.PAGE_DOWN:
                this._repeat(null, -pageModifier, event);
                return false;
            case KEYS.ENTER:
                this.value(this.element.val());
            }
            return true;
        },
        _mousewheel: function () {
            if (!$.fn.mousewheel) {
                return;
            }
            var self = this;
            this.element.bind("mousewheel.spinner", function (event, delta) {
                if (self.options.disabled) {
                    return;
                }
                if (!self.spinning && !self._start(event)) {
                    return false;
                }
                self._spin((delta > 0 ? 1 : -1) * self.options.step, event);
                clearTimeout(self.timeout);
                self.timeout = setTimeout(function () {
                    if (self.spinning) {
                        self._stop(event);
                        self._change(event);
                    }
                }, 100);
                event.preventDefault();
            });
        },
        _uiSpinnerHtml: function () {
            return '<div role="spinbutton" class="ui-spinner ui-state-default ui-widget ui-widget-content ui-corner-all"></div>';
        },
        _buttonHtml: function () {
            return '<a class="ui-spinner-button ui-spinner-up ui-corner-tr"><span class="ui-icon ui-icon-triangle-1-n">&#9650;</span></a>' + '<a class="ui-spinner-button ui-spinner-down ui-corner-br"><span class="ui-icon ui-icon-triangle-1-s">&#9660;</span></a>';
        },
        _start: function (event) {
            if (!this.spinning && this._trigger('start', event) !== false) {
                if (!this.counter) {
                    this.counter = 1;
                }
                this.spinning = true;
                return true;
            }
            return false;
        },
        _repeat: function (i, steps, event) {
            var self = this;
            i = i || 500;
            clearTimeout(this.timer);
            this.timer = setTimeout(function () {
                self._repeat(40, steps, event);
            }, i);
            self._spin(steps * self.options.step, event);
        },
        _spin: function (step, event) {
            if (!this.counter) {
                this.counter = 1;
            }
            var newVal = this.value() + step * (this.options.incremental && this.counter > 20 ? this.counter > 100 ? this.counter > 200 ? 100 : 10 : 2 : 1);
            if (this._trigger('spin', event, {
                value: newVal
            }) !== false) {
                this.value(newVal);
                this.counter++;
            }
        },
        _stop: function (event) {
            this.counter = 0;
            if (this.timer) {
                window.clearTimeout(this.timer);
            }
            this.element[0].focus();
            this.spinning = false;
            this._trigger('stop', event);
        },
        _change: function (event) {
            this._trigger('change', event);
        },
        _setOption: function (key, value) {
            if (key == 'value') {
                value = this._parse(value);
                if (value < this.options.min) {
                    value = this.options.min;
                }
                if (value > this.options.max) {
                    value = this.options.max;
                }
            }
            if (key == 'disabled') {
                if (value) {
                    this.element.attr("disabled", true);
                    this.buttons.button("disable");
                } else {
                    this.element.removeAttr("disabled");
                    this.buttons.button("enable");
                }
            }
            $.Widget.prototype._setOption.call(this, key, value);
        },
        _setOptions: function (options) {
            $.Widget.prototype._setOptions.call(this, options);
            if ("value" in options) {
                this._format(this.options.value);
            }
            this._aria();
        },
        _aria: function () {
            this.uiSpinner.attr('aria-valuemin', this.options.min).attr('aria-valuemax', this.options.max).attr('aria-valuenow', this.options.value);
        },
        _parse: function (val) {
            var input = val;
            if (typeof val == 'string') {
                if (this.options.numberformat == "C" && window.Globalization) {
                    var culture = Globalization.culture || Globalization.cultures['default'];
                    val = val.replace(culture.numberFormat.currency.symbol, "");
                }
                val = window.Globalization && this.options.numberformat ? Globalization.parseFloat(val) : +val;
            }
            return isNaN(val) ? null : val;
        },
        _format: function (num) {
            var num = this.options.value;
            this.element.val(window.Globalization && this.options.numberformat ? Globalization.format(num, this.options.numberformat) : num);
        },
        destroy: function () {
            this.element.removeClass('ui-spinner-input').removeAttr('disabled').removeAttr('autocomplete');
            $.Widget.prototype.destroy.call(this);
            this.uiSpinner.replaceWith(this.element);
        },
        stepUp: function (steps) {
            this._spin((steps || 1) * this.options.step);
        },
        stepDown: function (steps) {
            this._spin((steps || 1) * -this.options.step);
        },
        pageUp: function (pages) {
            this.stepUp((pages || 1) * pageModifier);
        },
        pageDown: function (pages) {
            this.stepDown((pages || 1) * pageModifier);
        },
        value: function (newVal) {
            if (!arguments.length) {
                return this._parse(this.element.val());
            }
            this.option('value', newVal);
        },
        widget: function () {
            return this.uiSpinner;
        }
    });
})(jQuery);
jQuery.cookie = function (name, value, options) {
    if (typeof value != 'undefined') {
        options = options || {};
        if (value === null) {
            value = '';
            options.expires = -1;
        }
        var expires = '';
        if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
            var date;
            if (typeof options.expires == 'number') {
                date = new Date();
                date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
            } else {
                date = options.expires;
            }
            expires = '; expires=' + date.toUTCString();
        }
        var path = options.path ? '; path=' + (options.path) : '';
        var domain = options.domain ? '; domain=' + (options.domain) : '';
        var secure = options.secure ? '; secure' : '';
        document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
    } else {
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
};
(function () {
    var trimLeft = /^[\s,#]+/,
        trimRight = /\s+$/,
        tinyCounter = 0,
        math = Math,
        mathRound = math.round,
        mathMin = math.min,
        mathMax = math.max,
        mathRandom = math.random;

    function tinycolor(color, opts) {
        color = (color) ? color : '';
        opts = opts || {};
        if (typeof color == "object" && color.hasOwnProperty("_tc_id")) {
            return color;
        }
        var rgb = inputToRGB(color);
        var r = rgb.r,
            g = rgb.g,
            b = rgb.b,
            a = rgb.a,
            roundA = mathRound(100 * a) / 100,
            format = opts.format || rgb.format;
        return {
            ok: rgb.ok,
            format: format,
            _tc_id: tinyCounter++,
            alpha: a,
            getAlpha: function () {
                return a;
            },
            setAlpha: function (value) {
                a = boundAlpha(value);
                roundA = mathRound(100 * a) / 100;
            },
            toHsv: function () {
                var hsv = rgbToHsv(r, g, b);
                return {
                    h: hsv.h * 360,
                    s: hsv.s,
                    v: hsv.v,
                    a: a
                };
            },
            toHsvString: function () {
                var hsv = rgbToHsv(r, g, b);
                var h = mathRound(hsv.h * 360),
                    s = mathRound(hsv.s * 100),
                    v = mathRound(hsv.v * 100);
                return (a == 1) ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + roundA + ")";
            },
            toHsl: function () {
                var hsl = rgbToHsl(r, g, b);
                return {
                    h: hsl.h * 360,
                    s: hsl.s,
                    l: hsl.l,
                    a: a
                };
            },
            toHslString: function () {
                var hsl = rgbToHsl(r, g, b);
                var h = mathRound(hsl.h * 360),
                    s = mathRound(hsl.s * 100),
                    l = mathRound(hsl.l * 100);
                return (a == 1) ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + roundA + ")";
            },
            toHex: function (allow3Char) {
                return rgbToHex(r, g, b, allow3Char);
            },
            toHexString: function (allow3Char) {
                return '#' + this.toHex(allow3Char);
            },
            toHex8: function () {
                return rgbaToHex(r, g, b, a);
            },
            toHex8String: function () {
                return '#' + this.toHex8();
            },
            toRgb: function () {
                return {
                    r: mathRound(r),
                    g: mathRound(g),
                    b: mathRound(b),
                    a: a
                };
            },
            toRgbString: function () {
                return (a == 1) ? "rgb(" + mathRound(r) + ", " + mathRound(g) + ", " + mathRound(b) + ")" : "rgba(" + mathRound(r) + ", " + mathRound(g) + ", " + mathRound(b) + ", " + roundA + ")";
            },
            toPercentageRgb: function () {
                return {
                    r: mathRound(bound01(r, 255) * 100) + "%",
                    g: mathRound(bound01(g, 255) * 100) + "%",
                    b: mathRound(bound01(b, 255) * 100) + "%",
                    a: a
                };
            },
            toPercentageRgbString: function () {
                return (a == 1) ? "rgb(" + mathRound(bound01(r, 255) * 100) + "%, " + mathRound(bound01(g, 255) * 100) + "%, " + mathRound(bound01(b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(r, 255) * 100) + "%, " + mathRound(bound01(g, 255) * 100) + "%, " + mathRound(bound01(b, 255) * 100) + "%, " + roundA + ")";
            },
            toName: function () {
                if (a === 0) {
                    return "transparent";
                }
                return hexNames[rgbToHex(r, g, b, true)] || false;
            },
            toFilter: function (secondColor) {
                var hex8String = '#' + rgbaToHex(r, g, b, a);
                var secondHex8String = hex8String;
                var gradientType = opts && opts.gradientType ? "GradientType = 1, " : "";
                if (secondColor) {
                    var s = tinycolor(secondColor);
                    secondHex8String = s.toHex8String();
                }
                return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
            },
            toString: function (format) {
                var formatSet = !!format;
                format = format || this.format;
                var formattedString = false;
                var hasAlphaAndFormatNotSet = !formatSet && a < 1 && a > 0;
                var formatWithAlpha = hasAlphaAndFormatNotSet && (format === "hex" || format === "hex6" || format === "hex3" || format === "name");
                if (format === "rgb") {
                    formattedString = this.toRgbString();
                }
                if (format === "prgb") {
                    formattedString = this.toPercentageRgbString();
                }
                if (format === "hex" || format === "hex6") {
                    formattedString = this.toHexString();
                }
                if (format === "hex3") {
                    formattedString = this.toHexString(true);
                }
                if (format === "hex8") {
                    formattedString = this.toHex8String();
                }
                if (format === "name") {
                    formattedString = this.toName();
                }
                if (format === "hsl") {
                    formattedString = this.toHslString();
                }
                if (format === "hsv") {
                    formattedString = this.toHsvString();
                }
                if (formatWithAlpha) {
                    return this.toRgbString();
                }
                return formattedString || this.toHexString();
            }
        };
    }
    tinycolor.fromRatio = function (color, opts) {
        if (typeof color == "object") {
            var newColor = {};
            for (var i in color) {
                if (color.hasOwnProperty(i)) {
                    if (i === "a") {
                        newColor[i] = color[i];
                    } else {
                        newColor[i] = convertToPercentage(color[i]);
                    }
                }
            }
            color = newColor;
        }
        return tinycolor(color, opts);
    };

    function inputToRGB(color) {
        var rgb = {
            r: 0,
            g: 0,
            b: 0
        };
        var a = 1;
        var ok = false;
        var format = false;
        if (typeof color == "string") {
            color = stringInputToObject(color);
        }
        if (typeof color == "object") {
            if (color.hasOwnProperty("r") && color.hasOwnProperty("g") && color.hasOwnProperty("b")) {
                rgb = rgbToRgb(color.r, color.g, color.b);
                ok = true;
                format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
            } else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("v")) {
                color.s = convertToPercentage(color.s);
                color.v = convertToPercentage(color.v);
                rgb = hsvToRgb(color.h, color.s, color.v);
                ok = true;
                format = "hsv";
            } else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("l")) {
                color.s = convertToPercentage(color.s);
                color.l = convertToPercentage(color.l);
                rgb = hslToRgb(color.h, color.s, color.l);
                ok = true;
                format = "hsl";
            }
            if (color.hasOwnProperty("a")) {
                a = color.a;
            }
        }
        a = boundAlpha(a);
        return {
            ok: ok,
            format: color.format || format,
            r: mathMin(255, mathMax(rgb.r, 0)),
            g: mathMin(255, mathMax(rgb.g, 0)),
            b: mathMin(255, mathMax(rgb.b, 0)),
            a: a
        };
    }

    function rgbToRgb(r, g, b) {
        var range01 = isBound01(r, g, b);
        var max = range01 ? 1 : 255;
        return {
            r: bound01(r, max) * 255,
            g: bound01(g, max) * 255,
            b: bound01(b, max) * 255
        };
    }

    function rgbToHsl(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
            min = mathMin(r, g, b);
        var h, s, l = (max + min) / 2;
        if (max == min) {
            h = s = 0;
        } else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
            }
            h /= 6;
        }
        return {
            h: h,
            s: s,
            l: l
        };
    }

    function hslToRgb(h, s, l) {
        var r, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);

        function hue2rgb(p, q, t) {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        }
        if (s === 0) {
            r = g = b = l;
        } else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return {
            r: r * 255,
            g: g * 255,
            b: b * 255
        };
    }

    function rgbToHsv(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
            min = mathMin(r, g, b);
        var h, s, v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;
        if (max == min) {
            h = 0;
        } else {
            switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
            }
            h /= 6;
        }
        return {
            h: h,
            s: s,
            v: v
        };
    }

    function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = math.floor(h),
            f = h - i,
            p = v * (1 - s),
            q = v * (1 - f * s),
            t = v * (1 - (1 - f) * s),
            mod = i % 6,
            r = [v, q, p, p, t, v][mod],
            g = [t, v, v, q, p, p][mod],
            b = [p, p, t, v, v, q][mod];
        return {
            r: r * 255,
            g: g * 255,
            b: b * 255
        };
    }

    function rgbToHex(r, g, b, allow3Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }
        return hex.join("");
    }

    function rgbaToHex(r, g, b, a) {
        var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
        return hex.join("");
    }
    tinycolor.equals = function (color1, color2) {
        if (!color1 || !color2) {
            return false;
        }
        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
    };
    tinycolor.random = function () {
        return tinycolor.fromRatio({
            r: mathRandom(),
            g: mathRandom(),
            b: mathRandom()
        });
    };
    tinycolor.desaturate = function (color, amount) {
        amount = (amount === 0) ? 0 : (amount || 10);
        var hsl = tinycolor(color).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
    };
    tinycolor.saturate = function (color, amount) {
        amount = (amount === 0) ? 0 : (amount || 10);
        var hsl = tinycolor(color).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
    };
    tinycolor.greyscale = function (color) {
        return tinycolor.desaturate(color, 100);
    };
    tinycolor.lighten = function (color, amount) {
        amount = (amount === 0) ? 0 : (amount || 10);
        var hsl = tinycolor(color).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
    };
    tinycolor.darken = function (color, amount) {
        amount = (amount === 0) ? 0 : (amount || 10);
        var hsl = tinycolor(color).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
    };
    tinycolor.complement = function (color) {
        var hsl = tinycolor(color).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
    };
    tinycolor.triad = function (color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
            h: (h + 120) % 360,
            s: hsl.s,
            l: hsl.l
        }), tinycolor({
            h: (h + 240) % 360,
            s: hsl.s,
            l: hsl.l
        })];
    };
    tinycolor.tetrad = function (color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
            h: (h + 90) % 360,
            s: hsl.s,
            l: hsl.l
        }), tinycolor({
            h: (h + 180) % 360,
            s: hsl.s,
            l: hsl.l
        }), tinycolor({
            h: (h + 270) % 360,
            s: hsl.s,
            l: hsl.l
        })];
    };
    tinycolor.splitcomplement = function (color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
            h: (h + 72) % 360,
            s: hsl.s,
            l: hsl.l
        }), tinycolor({
            h: (h + 216) % 360,
            s: hsl.s,
            l: hsl.l
        })];
    };
    tinycolor.analogous = function (color, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color)];
        for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results;) {
            hsl.h = (hsl.h + part) % 360;
            ret.push(tinycolor(hsl));
        }
        return ret;
    };
    tinycolor.monochromatic = function (color, results) {
        results = results || 6;
        var hsv = tinycolor(color).toHsv();
        var h = hsv.h,
            s = hsv.s,
            v = hsv.v;
        var ret = [];
        var modification = 1 / results;
        while (results--) {
            ret.push(tinycolor({
                h: h,
                s: s,
                v: v
            }));
            v = (v + modification) % 1;
        }
        return ret;
    };
    tinycolor.readability = function (color1, color2) {
        var a = tinycolor(color1).toRgb();
        var b = tinycolor(color2).toRgb();
        var brightnessA = (a.r * 299 + a.g * 587 + a.b * 114) / 1000;
        var brightnessB = (b.r * 299 + b.g * 587 + b.b * 114) / 1000;
        var colorDiff = (Math.max(a.r, b.r) - Math.min(a.r, b.r) +
            Math.max(a.g, b.g) - Math.min(a.g, b.g) +
            Math.max(a.b, b.b) - Math.min(a.b, b.b));
        return {
            brightness: Math.abs(brightnessA - brightnessB),
            color: colorDiff
        };
    };
    tinycolor.readable = function (color1, color2) {
        var readability = tinycolor.readability(color1, color2);
        return readability.brightness > 125 && readability.color > 500;
    };
    tinycolor.mostReadable = function (baseColor, colorList) {
        var bestColor = null;
        var bestScore = 0;
        var bestIsReadable = false;
        for (var i = 0; i < colorList.length; i++) {
            var readability = tinycolor.readability(baseColor, colorList[i]);
            var readable = readability.brightness > 125 && readability.color > 500;
            var score = 3 * (readability.brightness / 125) + (readability.color / 500);
            if ((readable && !bestIsReadable) || (readable && bestIsReadable && score > bestScore) || ((!readable) && (!bestIsReadable) && score > bestScore)) {
                bestIsReadable = readable;
                bestScore = score;
                bestColor = tinycolor(colorList[i]);
            }
        }
        return bestColor;
    };
    var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
    };
    var hexNames = tinycolor.hexNames = flip(names);

    function flip(o) {
        var flipped = {};
        for (var i in o) {
            if (o.hasOwnProperty(i)) {
                flipped[o[i]] = i;
            }
        }
        return flipped;
    }

    function boundAlpha(a) {
        a = parseFloat(a);
        if (isNaN(a) || a < 0 || a > 1) {
            a = 1;
        }
        return a;
    }

    function bound01(n, max) {
        if (isOnePointZero(n)) {
            n = "100%";
        }
        var processPercent = isPercentage(n);
        n = mathMin(max, mathMax(0, parseFloat(n)));
        if (processPercent) {
            n = parseInt(n * max, 10) / 100;
        }
        if ((math.abs(n - max) < 0.000001)) {
            return 1;
        }
        return (n % max) / parseFloat(max);
    }

    function clamp01(val) {
        return mathMin(1, mathMax(0, val));
    }

    function parseIntFromHex(val) {
        return parseInt(val, 16);
    }

    function isOnePointZero(n) {
        return hasDecimalPoint(n) && parseFloat(n) === 1;
    }

    function hasDecimalPoint(n) {
        return typeof n == "string" && n.indexOf('.') != -1;
    }

    function isBound01(r, g, b) {
        return [r, g, b].reduce(function (p, n) {
            return p && hasDecimalPoint(n) && parseFloat(n) <= 1;
        }, true);
    }

    function isPercentage(n) {
        return typeof n === "string" && n.indexOf('%') != -1;
    }

    function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
    }

    function convertToPercentage(n) {
        if (n <= 1) {
            n = (n * 100) + "%";
        }
        return n;
    }

    function convertDecimalToHex(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
    }

    function convertHexToDecimal(h) {
        return (parseIntFromHex(h) / 255);
    }
    var matchers = (function () {
        var CSS_INTEGER = "[-\\+]?\\d+%?";
        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
            rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
            rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
            hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
            hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
            hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
    })();

    function stringInputToObject(color) {
        color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
        var named = false;
        if (names[color]) {
            color = names[color];
            named = true;
        } else if (color == 'transparent') {
            return {
                r: 0,
                g: 0,
                b: 0,
                a: 0,
                format: "name"
            };
        }
        var match;
        if ((match = matchers.rgb.exec(color))) {
            return {
                r: match[1],
                g: match[2],
                b: match[3]
            };
        }
        if ((match = matchers.rgba.exec(color))) {
            return {
                r: match[1],
                g: match[2],
                b: match[3],
                a: match[4]
            };
        }
        if ((match = matchers.hsl.exec(color))) {
            return {
                h: match[1],
                s: match[2],
                l: match[3]
            };
        }
        if ((match = matchers.hsla.exec(color))) {
            return {
                h: match[1],
                s: match[2],
                l: match[3],
                a: match[4]
            };
        }
        if ((match = matchers.hsv.exec(color))) {
            return {
                h: match[1],
                s: match[2],
                v: match[3]
            };
        }
        if ((match = matchers.hex8.exec(color))) {
            return {
                a: convertHexToDecimal(match[1]),
                r: parseIntFromHex(match[2]),
                g: parseIntFromHex(match[3]),
                b: parseIntFromHex(match[4]),
                format: named ? "name" : "hex8"
            };
        }
        if ((match = matchers.hex6.exec(color))) {
            return {
                r: parseIntFromHex(match[1]),
                g: parseIntFromHex(match[2]),
                b: parseIntFromHex(match[3]),
                format: named ? "name" : "hex"
            };
        }
        if ((match = matchers.hex3.exec(color))) {
            return {
                r: parseIntFromHex(match[1] + '' + match[1]),
                g: parseIntFromHex(match[2] + '' + match[2]),
                b: parseIntFromHex(match[3] + '' + match[3]),
                format: named ? "name" : "hex"
            };
        }
        return false;
    }
    if (typeof module !== "undefined" && module.exports) {
        module.exports = tinycolor;
    } else if (typeof define !== "undefined") {
        define(function () {
            return tinycolor;
        });
    } else {
        window.tinycolor = tinycolor;
    }
})();﻿
(function (window, $, undefined) {
    var defaultOpts = {
            beforeShow: noop,
            move: noop,
            change: noop,
            show: noop,
            hide: noop,
            color: false,
            flat: false,
            showInput: false,
            allowEmpty: false,
            showButtons: true,
            clickoutFiresChange: false,
            showInitial: false,
            showPalette: false,
            showPaletteOnly: false,
            showSelectionPalette: true,
            localStorageKey: false,
            appendTo: "body",
            maxSelectionSize: 7,
            cancelText: "cancel",
            chooseText: "choose",
            clearText: "Clear Color Selection",
            preferredFormat: false,
            className: "",
            showAlpha: false,
            theme: "sp-light",
            palette: ['fff', '000'],
            selectionPalette: [],
            disabled: false
        },
        spectrums = [],
        IE = !!/msie/i.exec(window.navigator.userAgent),
        rgbaSupport = (function () {
            function contains(str, substr) {
                return !!~('' + str).indexOf(substr);
            }
            var elem = document.createElement('div');
            var style = elem.style;
            style.cssText = 'background-color:rgba(0,0,0,.5)';
            return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');
        })(),
        inputTypeColorSupport = (function () {
            var colorInput = $("<input type='color' value='!' />")[0];
            return colorInput.type === "color" && colorInput.value !== "!";
        })(),
        replaceInput = ["<div class='sp-replacer'>", "<div class='sp-preview'><div class='sp-preview-inner'></div></div>", "<div class='sp-dd'>&#9660;</div>", "</div>"].join(''),
        markup = (function () {
            var gradientFix = "";
            if (IE) {
                for (var i = 1; i <= 6; i++) {
                    gradientFix += "<div class='sp-" + i + "'></div>";
                }
            }
            return ["<div class='sp-container sp-hidden'>", "<div class='sp-palette-container'>", "<div class='sp-palette sp-thumb sp-cf'></div>", "</div>", "<div class='sp-picker-container'>", "<div class='sp-top sp-cf'>", "<div class='sp-fill'></div>", "<div class='sp-top-inner'>", "<div class='sp-color'>", "<div class='sp-sat'>", "<div class='sp-val'>", "<div class='sp-dragger'></div>", "</div>", "</div>", "</div>", "<div class='sp-clear sp-clear-display'>", "</div>", "<div class='sp-hue'>", "<div class='sp-slider'></div>", gradientFix, "</div>", "</div>", "<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>", "</div>", "<div class='sp-input-container sp-cf'>", "<input class='sp-input' type='text' spellcheck='false'  />", "</div>", "<div class='sp-initial sp-thumb sp-cf'></div>", "<div class='sp-button-container sp-cf'>", "<a class='sp-cancel' href='#'></a>", "<button class='sp-choose'></button>", "</div>", "</div>", "</div>"].join("");
        })();

    function paletteTemplate(p, color, className) {
        var html = [];
        for (var i = 0; i < p.length; i++) {
            var current = p[i];
            if (current) {
                var tiny = tinycolor(current);
                var c = tiny.toHsl().l < 0.5 ? "sp-thumb-el sp-thumb-dark" : "sp-thumb-el sp-thumb-light";
                c += (tinycolor.equals(color, current)) ? " sp-thumb-active" : "";
                var swatchStyle = rgbaSupport ? ("background-color:" + tiny.toRgbString()) : "filter:" + tiny.toFilter();
                html.push('<span title="' + tiny.toRgbString() + '" data-color="' + tiny.toRgbString() + '" class="' + c + '"><span class="sp-thumb-inner" style="' + swatchStyle + ';" /></span>');
            } else {
                var cls = 'sp-clear-display';
                html.push('<span title="No Color Selected" data-color="" style="background-color:transparent;" class="' + cls + '"></span>');
            }
        }
        return "<div class='sp-cf " + className + "'>" + html.join('') + "</div>";
    }

    function hideAll() {
        for (var i = 0; i < spectrums.length; i++) {
            if (spectrums[i]) {
                spectrums[i].hide();
            }
        }
    }

    function instanceOptions(o, callbackContext) {
        var opts = $.extend({}, defaultOpts, o);
        opts.callbacks = {
            'move': bind(opts.move, callbackContext),
            'change': bind(opts.change, callbackContext),
            'show': bind(opts.show, callbackContext),
            'hide': bind(opts.hide, callbackContext),
            'beforeShow': bind(opts.beforeShow, callbackContext)
        };
        return opts;
    }

    function spectrum(element, o) {
        var opts = instanceOptions(o, element),
            flat = opts.flat,
            showSelectionPalette = opts.showSelectionPalette,
            localStorageKey = opts.localStorageKey,
            theme = opts.theme,
            callbacks = opts.callbacks,
            resize = throttle(reflow, 10),
            visible = false,
            dragWidth = 0,
            dragHeight = 0,
            dragHelperHeight = 0,
            slideHeight = 0,
            slideWidth = 0,
            alphaWidth = 0,
            alphaSlideHelperWidth = 0,
            slideHelperHeight = 0,
            currentHue = 0,
            currentSaturation = 0,
            currentValue = 0,
            currentAlpha = 1,
            palette = [],
            paletteArray = [],
            selectionPalette = opts.selectionPalette.slice(0),
            maxSelectionSize = opts.maxSelectionSize,
            draggingClass = "sp-dragging",
            shiftMovementDirection = null;
        var doc = element.ownerDocument,
            body = doc.body,
            boundElement = $(element),
            disabled = false,
            container = $(markup, doc).addClass(theme),
            dragger = container.find(".sp-color"),
            dragHelper = container.find(".sp-dragger"),
            slider = container.find(".sp-hue"),
            slideHelper = container.find(".sp-slider"),
            alphaSliderInner = container.find(".sp-alpha-inner"),
            alphaSlider = container.find(".sp-alpha"),
            alphaSlideHelper = container.find(".sp-alpha-handle"),
            textInput = container.find(".sp-input"),
            paletteContainer = container.find(".sp-palette"),
            initialColorContainer = container.find(".sp-initial"),
            cancelButton = container.find(".sp-cancel"),
            clearButton = container.find(".sp-clear"),
            chooseButton = container.find(".sp-choose"),
            isInput = boundElement.is("input"),
            isInputTypeColor = isInput && inputTypeColorSupport && boundElement.attr("type") === "color",
            shouldReplace = isInput && !flat,
            replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className) : $([]),
            offsetElement = (shouldReplace) ? replacer : boundElement,
            previewElement = replacer.find(".sp-preview-inner"),
            initialColor = opts.color || (isInput && boundElement.val()),
            colorOnShow = false,
            preferredFormat = opts.preferredFormat,
            currentPreferredFormat = preferredFormat,
            clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,
            isEmpty = !initialColor,
            allowEmpty = opts.allowEmpty && !isInputTypeColor;

        function applyOptions() {
            if (opts.showPaletteOnly) {
                opts.showPalette = true;
            }
            if (opts.palette) {
                palette = opts.palette.slice(0);
                paletteArray = $.isArray(palette[0]) ? palette : [palette];
            }
            container.toggleClass("sp-flat", flat);
            container.toggleClass("sp-input-disabled", !opts.showInput);
            container.toggleClass("sp-alpha-enabled", opts.showAlpha);
            container.toggleClass("sp-clear-enabled", allowEmpty);
            container.toggleClass("sp-buttons-disabled", !opts.showButtons);
            container.toggleClass("sp-palette-disabled", !opts.showPalette);
            container.toggleClass("sp-palette-only", opts.showPaletteOnly);
            container.toggleClass("sp-initial-disabled", !opts.showInitial);
            container.addClass(opts.className);
            reflow();
        }

        function initialize() {
            if (IE) {
                container.find("*:not(input)").attr("unselectable", "on");
            }
            applyOptions();
            if (shouldReplace) {
                boundElement.after(replacer).hide();
            }
            if (!allowEmpty) {
                clearButton.hide();
            }
            if (flat) {
                boundElement.after(container).hide();
            } else {
                var appendTo = opts.appendTo === "parent" ? boundElement.parent() : $(opts.appendTo);
                if (appendTo.length !== 1) {
                    appendTo = $("body");
                }
                appendTo.append(container);
            }
            if (localStorageKey && window.localStorage) {
                try {
                    var oldPalette = window.localStorage[localStorageKey].split(",#");
                    if (oldPalette.length > 1) {
                        delete window.localStorage[localStorageKey];
                        $.each(oldPalette, function (i, c) {
                            addColorToSelectionPalette(c);
                        });
                    }
                } catch (e) {}
                try {
                    selectionPalette = window.localStorage[localStorageKey].split(";");
                } catch (e) {}
            }
            offsetElement.bind("click.spectrum touchstart.spectrum", function (e) {
                if (!disabled) {
                    toggle();
                }
                e.stopPropagation();
                if (!$(e.target).is("input")) {
                    e.preventDefault();
                }
            });
            if (boundElement.is(":disabled") || (opts.disabled === true)) {
                disable();
            }
            container.click(stopPropagation);
            textInput.change(setFromTextInput);
            textInput.bind("paste", function () {
                setTimeout(setFromTextInput, 1);
            });
            textInput.keydown(function (e) {
                if (e.keyCode == 13) {
                    setFromTextInput();
                }
            });
            cancelButton.text(opts.cancelText);
            cancelButton.bind("click.spectrum", function (e) {
                e.stopPropagation();
                e.preventDefault();
                hide("cancel");
            });
            clearButton.attr("title", opts.clearText);
            clearButton.bind("click.spectrum", function (e) {
                e.stopPropagation();
                e.preventDefault();
                isEmpty = true;
                move();
                if (flat) {
                    updateOriginalInput(true);
                }
            });
            chooseButton.text(opts.chooseText);
            chooseButton.bind("click.spectrum", function (e) {
                e.stopPropagation();
                e.preventDefault();
                if (isValid()) {
                    updateOriginalInput(true);
                    hide();
                }
            });
            draggable(alphaSlider, function (dragX, dragY, e) {
                currentAlpha = (dragX / alphaWidth);
                isEmpty = false;
                if (e.shiftKey) {
                    currentAlpha = Math.round(currentAlpha * 10) / 10;
                }
                move();
            }, dragStart, dragStop);
            draggable(slider, function (dragX, dragY) {
                currentHue = parseFloat(dragY / slideHeight);
                isEmpty = false;
                if (!opts.showAlpha) {
                    currentAlpha = 1;
                }
                move();
            }, dragStart, dragStop);
            draggable(dragger, function (dragX, dragY, e) {
                if (!e.shiftKey) {
                    shiftMovementDirection = null;
                } else if (!shiftMovementDirection) {
                    var oldDragX = currentSaturation * dragWidth;
                    var oldDragY = dragHeight - (currentValue * dragHeight);
                    var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);
                    shiftMovementDirection = furtherFromX ? "x" : "y";
                }
                var setSaturation = !shiftMovementDirection || shiftMovementDirection === "x";
                var setValue = !shiftMovementDirection || shiftMovementDirection === "y";
                if (setSaturation) {
                    currentSaturation = parseFloat(dragX / dragWidth);
                }
                if (setValue) {
                    currentValue = parseFloat((dragHeight - dragY) / dragHeight);
                }
                isEmpty = false;
                if (!opts.showAlpha) {
                    currentAlpha = 1;
                }
                move();
            }, dragStart, dragStop);
            if (!!initialColor) {
                set(initialColor);
                updateUI();
                currentPreferredFormat = preferredFormat || tinycolor(initialColor).format;
                addColorToSelectionPalette(initialColor);
            } else {
                updateUI();
            }
            if (flat) {
                show();
            }

            function palletElementClick(e) {
                if (e.data && e.data.ignore) {
                    set($(this).data("color"));
                    move();
                } else {
                    set($(this).data("color"));
                    move();
                    updateOriginalInput(true);
                    hide();
                }
                return false;
            }
            var paletteEvent = IE ? "mousedown.spectrum" : "click.spectrum touchstart.spectrum";
            paletteContainer.delegate(".sp-thumb-el", paletteEvent, palletElementClick);
            initialColorContainer.delegate(".sp-thumb-el:nth-child(1)", paletteEvent, {
                ignore: true
            }, palletElementClick);
        }

        function addColorToSelectionPalette(color) {
            if (showSelectionPalette) {
                var colorRgb = tinycolor(color).toRgbString();
                if ($.inArray(colorRgb, selectionPalette) === -1) {
                    selectionPalette.push(colorRgb);
                    while (selectionPalette.length > maxSelectionSize) {
                        selectionPalette.shift();
                    }
                }
                if (localStorageKey && window.localStorage) {
                    try {
                        window.localStorage[localStorageKey] = selectionPalette.join(";");
                    } catch (e) {}
                }
            }
        }

        function getUniqueSelectionPalette() {
            var unique = [];
            var p = selectionPalette;
            var paletteLookup = {};
            var rgb;
            if (opts.showPalette) {
                for (var i = 0; i < paletteArray.length; i++) {
                    for (var j = 0; j < paletteArray[i].length; j++) {
                        rgb = tinycolor(paletteArray[i][j]).toRgbString();
                        paletteLookup[rgb] = true;
                    }
                }
                for (i = 0; i < p.length; i++) {
                    rgb = tinycolor(p[i]).toRgbString();
                    if (!paletteLookup.hasOwnProperty(rgb)) {
                        unique.push(p[i]);
                        paletteLookup[rgb] = true;
                    }
                }
            }
            return unique.reverse().slice(0, opts.maxSelectionSize);
        }

        function drawPalette() {
            var currentColor = get();
            var html = $.map(paletteArray, function (palette, i) {
                return paletteTemplate(palette, currentColor, "sp-palette-row sp-palette-row-" + i);
            });
            if (selectionPalette) {
                html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, "sp-palette-row sp-palette-row-selection"));
            }
            paletteContainer.html(html.join(""));
        }

        function drawInitial() {
            if (opts.showInitial) {
                var initial = colorOnShow;
                var current = get();
                initialColorContainer.html(paletteTemplate([initial, current], current, "sp-palette-row-initial"));
            }
        }

        function dragStart() {
            if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {
                reflow();
            }
            container.addClass(draggingClass);
            shiftMovementDirection = null;
            boundElement.trigger('dragstart.spectrum', [get()]);
        }

        function dragStop() {
            container.removeClass(draggingClass);
            boundElement.trigger('dragstop.spectrum', [get()]);
        }

        function setFromTextInput() {
            var value = textInput.val();
            if ((value === null || value === "") && allowEmpty) {
                set(null);
                updateOriginalInput(true);
            } else {
                var tiny = tinycolor(value);
                if (tiny.ok) {
                    set(tiny);
                    updateOriginalInput(true);
                } else {
                    textInput.addClass("sp-validation-error");
                }
            }
        }

        function toggle() {
            if (visible) {
                hide();
            } else {
                show();
            }
        }

        function show() {
            var event = $.Event('beforeShow.spectrum');
            if (visible) {
                reflow();
                return;
            }
            boundElement.trigger(event, [get()]);
            if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {
                return;
            }
            hideAll();
            visible = true;
            $(doc).bind("click.spectrum", hide);
            $(window).bind("resize.spectrum", resize);
            replacer.addClass("sp-active");
            container.removeClass("sp-hidden");
            reflow();
            updateUI();
            colorOnShow = get();
            drawInitial();
            callbacks.show(colorOnShow);
            boundElement.trigger('show.spectrum', [colorOnShow]);
        }

        function hide(e) {
            if (e && e.type == "click" && e.button == 2) {
                return;
            }
            if (!visible || flat) {
                return;
            }
            visible = false;
            $(doc).unbind("click.spectrum", hide);
            $(window).unbind("resize.spectrum", resize);
            replacer.removeClass("sp-active");
            container.addClass("sp-hidden");
            var colorHasChanged = !tinycolor.equals(get(), colorOnShow);
            if (colorHasChanged) {
                if (clickoutFiresChange && e !== "cancel") {
                    updateOriginalInput(true);
                } else {
                    revert();
                }
            }
            callbacks.hide(get());
            boundElement.trigger('hide.spectrum', [get()]);
        }

        function revert() {
            set(colorOnShow, true);
        }

        function set(color, ignoreFormatChange) {
            if (tinycolor.equals(color, get())) {
                updateUI();
                return;
            }
            var newColor, newHsv;
            if (!color && allowEmpty) {
                isEmpty = true;
            } else {
                isEmpty = false;
                newColor = tinycolor(color);
                newHsv = newColor.toHsv();
                currentHue = (newHsv.h % 360) / 360;
                currentSaturation = newHsv.s;
                currentValue = newHsv.v;
                currentAlpha = newHsv.a;
            }
            updateUI();
            if (newColor && newColor.ok && !ignoreFormatChange) {
                currentPreferredFormat = preferredFormat || newColor.format;
            }
        }

        function get(opts) {
            opts = opts || {};
            if (allowEmpty && isEmpty) {
                return null;
            }
            return tinycolor.fromRatio({
                h: currentHue,
                s: currentSaturation,
                v: currentValue,
                a: Math.round(currentAlpha * 100) / 100
            }, {
                format: opts.format || currentPreferredFormat
            });
        }

        function isValid() {
            return !textInput.hasClass("sp-validation-error");
        }

        function move() {
            updateUI();
            callbacks.move(get());
            boundElement.trigger('move.spectrum', [get()]);
        }

        function updateUI() {
            textInput.removeClass("sp-validation-error");
            updateHelperLocations();
            var flatColor = tinycolor.fromRatio({
                h: currentHue,
                s: 1,
                v: 1
            });
            dragger.css("background-color", flatColor.toHexString());
            var format = currentPreferredFormat;
            if (currentAlpha < 1 && !(currentAlpha === 0 && format === "name")) {
                if (format === "hex" || format === "hex3" || format === "hex6" || format === "name") {
                    format = "rgb";
                }
            }
            var realColor = get({
                    format: format
                }),
                displayColor = '';
            previewElement.removeClass("sp-clear-display");
            previewElement.css('background-color', 'transparent');
            if (!realColor && allowEmpty) {
                previewElement.addClass("sp-clear-display");
            } else {
                var realHex = realColor.toHexString(),
                    realRgb = realColor.toRgbString();
                if (rgbaSupport || realColor.alpha === 1) {
                    previewElement.css("background-color", realRgb);
                } else {
                    previewElement.css("background-color", "transparent");
                    previewElement.css("filter", realColor.toFilter());
                }
                if (opts.showAlpha) {
                    var rgb = realColor.toRgb();
                    rgb.a = 0;
                    var realAlpha = tinycolor(rgb).toRgbString();
                    var gradient = "linear-gradient(left, " + realAlpha + ", " + realHex + ")";
                    if (IE) {
                        alphaSliderInner.css("filter", tinycolor(realAlpha).toFilter({
                            gradientType: 1
                        }, realHex));
                    } else {
                        alphaSliderInner.css("background", "-webkit-" + gradient);
                        alphaSliderInner.css("background", "-moz-" + gradient);
                        alphaSliderInner.css("background", "-ms-" + gradient);
                        alphaSliderInner.css("background", "linear-gradient(to right, " + realAlpha + ", " + realHex + ")");
                    }
                }
                displayColor = realColor.toString(format);
            }
            if (opts.showInput) {
                textInput.val(displayColor);
            }
            if (opts.showPalette) {
                drawPalette();
            }
            drawInitial();
        }

        function updateHelperLocations() {
            var s = currentSaturation;
            var v = currentValue;
            if (allowEmpty && isEmpty) {
                alphaSlideHelper.hide();
                slideHelper.hide();
                dragHelper.hide();
            } else {
                alphaSlideHelper.show();
                slideHelper.show();
                dragHelper.show();
                var dragX = s * dragWidth;
                var dragY = dragHeight - (v * dragHeight);
                dragX = Math.max(-dragHelperHeight, Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight));
                dragY = Math.max(-dragHelperHeight, Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight));
                dragHelper.css({
                    "top": dragY + "px",
                    "left": dragX + "px"
                });
                var alphaX = currentAlpha * alphaWidth;
                alphaSlideHelper.css({
                    "left": (alphaX - (alphaSlideHelperWidth / 2)) + "px"
                });
                var slideY = (currentHue) * slideHeight;
                slideHelper.css({
                    "top": (slideY - slideHelperHeight) + "px"
                });
            }
        }

        function updateOriginalInput(fireCallback) {
            var color = get(),
                displayColor = '',
                hasChanged = !tinycolor.equals(color, colorOnShow);
            if (color) {
                displayColor = color.toString(currentPreferredFormat);
                addColorToSelectionPalette(color);
            }
            if (isInput) {
                boundElement.val(displayColor);
            }
            colorOnShow = color;
            if (fireCallback && hasChanged) {
                callbacks.change(color);
                boundElement.trigger('change', [color]);
            }
        }

        function reflow() {
            dragWidth = dragger.width();
            dragHeight = dragger.height();
            dragHelperHeight = dragHelper.height();
            slideWidth = slider.width();
            slideHeight = slider.height();
            slideHelperHeight = slideHelper.height();
            alphaWidth = alphaSlider.width();
            alphaSlideHelperWidth = alphaSlideHelper.width();
            if (!flat) {
                container.css("position", "absolute");
                container.offset(getOffset(container, offsetElement));
            }
            updateHelperLocations();
            if (opts.showPalette) {
                drawPalette();
            }
            boundElement.trigger('reflow.spectrum');
        }

        function destroy() {
            boundElement.show();
            offsetElement.unbind("click.spectrum touchstart.spectrum");
            container.remove();
            replacer.remove();
            spectrums[spect.id] = null;
        }

        function option(optionName, optionValue) {
            if (optionName === undefined) {
                return $.extend({}, opts);
            }
            if (optionValue === undefined) {
                return opts[optionName];
            }
            opts[optionName] = optionValue;
            applyOptions();
        }

        function enable() {
            disabled = false;
            boundElement.attr("disabled", false);
            offsetElement.removeClass("sp-disabled");
        }

        function disable() {
            hide();
            disabled = true;
            boundElement.attr("disabled", true);
            offsetElement.addClass("sp-disabled");
        }
        initialize();
        var spect = {
            show: show,
            hide: hide,
            toggle: toggle,
            reflow: reflow,
            option: option,
            enable: enable,
            disable: disable,
            set: function (c) {
                set(c);
                updateOriginalInput();
            },
            get: get,
            destroy: destroy,
            container: container
        };
        spect.id = spectrums.push(spect) - 1;
        return spect;
    }

    function getOffset(picker, input) {
        var extraY = 0;
        var dpWidth = picker.outerWidth();
        var dpHeight = picker.outerHeight();
        var inputHeight = input.outerHeight();
        var doc = picker[0].ownerDocument;
        var docElem = doc.documentElement;
        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();
        var viewHeight = docElem.clientHeight + $(doc).scrollTop();
        var offset = input.offset();
        offset.top += inputHeight;
        offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
        offset.top -= Math.min(offset.top, ((offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ? Math.abs(dpHeight + inputHeight - extraY) : extraY));
        return offset;
    }

    function noop() {}

    function stopPropagation(e) {
        e.stopPropagation();
    }

    function bind(func, obj) {
        var slice = Array.prototype.slice;
        var args = slice.call(arguments, 2);
        return function () {
            return func.apply(obj, args.concat(slice.call(arguments)));
        };
    }

    function draggable(element, onmove, onstart, onstop) {
        onmove = onmove || function () {};
        onstart = onstart || function () {};
        onstop = onstop || function () {};
        var doc = element.ownerDocument || document;
        var dragging = false;
        var offset = {};
        var maxHeight = 0;
        var maxWidth = 0;
        var hasTouch = ('ontouchstart' in window);
        var duringDragEvents = {};
        duringDragEvents["selectstart"] = prevent;
        duringDragEvents["dragstart"] = prevent;
        duringDragEvents["touchmove mousemove"] = move;
        duringDragEvents["touchend mouseup"] = stop;

        function prevent(e) {
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            if (e.preventDefault) {
                e.preventDefault();
            }
            e.returnValue = false;
        }

        function move(e) {
            if (dragging) {
                if (IE && document.documentMode < 9 && !e.button) {
                    return stop();
                }
                var touches = e.originalEvent.touches;
                var pageX = touches ? touches[0].pageX : e.pageX;
                var pageY = touches ? touches[0].pageY : e.pageY;
                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));
                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));
                if (hasTouch) {
                    prevent(e);
                }
                onmove.apply(element, [dragX, dragY, e]);
            }
        }

        function start(e) {
            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);
            var touches = e.originalEvent.touches;
            if (!rightclick && !dragging) {
                if (onstart.apply(element, arguments) !== false) {
                    dragging = true;
                    maxHeight = $(element).height();
                    maxWidth = $(element).width();
                    offset = $(element).offset();
                    $(doc).bind(duringDragEvents);
                    $(doc.body).addClass("sp-dragging");
                    if (!hasTouch) {
                        move(e);
                    }
                    prevent(e);
                }
            }
        }

        function stop() {
            if (dragging) {
                $(doc).unbind(duringDragEvents);
                $(doc.body).removeClass("sp-dragging");
                onstop.apply(element, arguments);
            }
            dragging = false;
        }
        $(element).bind("touchstart mousedown", start);
    }

    function throttle(func, wait, debounce) {
        var timeout;
        return function () {
            var context = this,
                args = arguments;
            var throttler = function () {
                timeout = null;
                func.apply(context, args);
            };
            if (debounce) clearTimeout(timeout);
            if (debounce || !timeout) timeout = setTimeout(throttler, wait);
        };
    }

    function log() {
        if (window.console) {
            if (Function.prototype.bind) log = Function.prototype.bind.call(console.log, console);
            else log = function () {
                Function.prototype.apply.call(console.log, console, arguments);
            };
            log.apply(this, arguments);
        }
    }
    var dataID = "spectrum.id";
    $.fn.spectrum = function (opts, extra) {
        if (typeof opts == "string") {
            var returnValue = this;
            var args = Array.prototype.slice.call(arguments, 1);
            this.each(function () {
                var spect = spectrums[$(this).data(dataID)];
                if (spect) {
                    var method = spect[opts];
                    if (!method) {
                        throw new Error("Spectrum: no such method: '" + opts + "'");
                    }
                    if (opts == "get") {
                        returnValue = spect.get();
                    } else if (opts == "container") {
                        returnValue = spect.container;
                    } else if (opts == "option") {
                        returnValue = spect.option.apply(spect, args);
                    } else if (opts == "destroy") {
                        spect.destroy();
                        $(this).removeData(dataID);
                    } else {
                        method.apply(spect, args);
                    }
                }
            });
            return returnValue;
        }
        return this.spectrum("destroy").each(function () {
            var options = $.extend({}, opts, $(this).data());
            var spect = spectrum(this, options);
            $(this).data(dataID, spect.id);
        });
    };
    $.fn.spectrum.load = true;
    $.fn.spectrum.loadOpts = {};
    $.fn.spectrum.draggable = draggable;
    $.fn.spectrum.defaults = defaultOpts;
    $.spectrum = {};
    $.spectrum.localization = {};
    $.spectrum.palettes = {};
    $.fn.spectrum.processNativeColorInputs = function () {
        if (!inputTypeColorSupport) {
            $("input[type=color]").spectrum({
                preferredFormat: "hex6"
            });
        }
    };
    $(function () {
        if ($.fn.spectrum.load) {
            $.fn.spectrum.processNativeColorInputs();
        }
    });
})(window, jQuery);

function FileFabric(initObj) {
    var _createFileTable = function () {
        var _data = that._data;
        var _cols = that._cols;
        var _containerDiv = that._containerDiv;
        var tableHtml;
        var tableEl;
        var tableBody;
        var firstContainerChild;
        var navBar;
        var _tableHeader = function (_cols) {
            var tblHeader = document.createElement('THEAD');
            var headerRow = document.createElement('TR');
            var col;
            var downArrow;
            var headerCell;
            var headerDiv;
            headerRow.appendChild(document.createElement('TH'));
            for (var i = 0; i < _cols.length; i++) {
                col = _cols[i];
                headerCell = document.createElement('TH');
                headerDiv = document.createElement('DIV');
                headerDiv.className = 'ff-header-content';
                if (col.onHeaderClick !== undefined) {
                    downArrow = '<div class="ff-dd-arrow"></div>';
                    headerCell.className = 'ff-header-menu';
                    headerCell.setAttribute('data-key', col.key);
                    headerDiv.innerHTML = (['<div>', col.name, '</div>', '<div class="ff-dd-arrow"></div>']).join('');
                    headerDiv.addEventListener('click', col.onHeaderClick);
                } else {
                    headerDiv.innerHTML = (['<div>', col.name, '</div>']).join('');
                }
                headerCell.appendChild(headerDiv);
                headerRow.appendChild(headerCell);
            }
            tblHeader.appendChild(headerRow);
            return tblHeader;
        };
        var _navBar = function () {
            var d = document.createElement('DIV');
            d.className = 'ff-nav-bar js-ff-nav-bar';
            return d;
        };
        var _insertTableRows = function (tableEl, _data) {
            var node;
            if (_data.length == 0 && that._emptyFolder !== undefined) {
                that.makeAnnouncement(that._emptyFolder);
            }
            for (var i = 0; i < _data.length; i++) {
                node = _data[i];
                _appendRow(node, tableEl);
            }
        };
        tableEl = document.createElement('TABLE');
        tableEl.className = 'ff-table';
        tableEl.appendChild(_tableHeader(_cols));
        tableEl.appendChild(document.createElement('TBODY'));
        firstContainerChild = initObj.containerDiv.firstChild;
        navBar = _navBar();
        if (firstContainerChild === null) {
            initObj.containerDiv.appendChild(navBar);
            initObj.containerDiv.appendChild(tableEl);
        } else {
            initObj.containerDiv.insertBefore(navBar, firstContainerChild);
            initObj.containerDiv.insertBefore(tableEl, firstContainerChild);
        }
        _drawBreadcrumbs();
        tableBody = initObj.containerDiv.getElementsByTagName('tbody')[0];
        _insertTableRows(tableBody, _data['ff-root']);
    }
    var _changeFolder = function (e) {
        var el = e.target;
        var folderId = el.getAttribute('data-id');
        var fileJson = that._data[folderId];
        var folderName = el.innerText || el.textContent;
        var folderObj = {
            containerDiv: that._containerDiv,
            folderId: folderId,
            folderName: folderName,
            fileJson: fileJson
        };
        for (var i = 0; i < that._breadcrumbs.length; i++) {
            var crumb = that._breadcrumbs[i];
            if (crumb.id == folderId) {
                that._breadcrumbs = that._breadcrumbs.slice(0, i);
                break;
            }
        }
        that.showFolder(folderObj);
    }
    var _addCheckBox = function (xtraCls) {
        if (xtraCls === undefined) xtraCls = '';
        return '<div class="ff-checkbox ff-unchecked ' + xtraCls + '"></div>';
    }
    var _defaultCellTemplate = function (col, node) {
        return node[col['key']];
    }
    var _appendCell = function (row, col, node) {
        var cellHtml = node[col['key']];
        var newCell = row.insertCell(-1);
        var cellLink;
        var icon;
        newCell.setAttribute('data-key', col['key']);
        if ('template' in col) {
            newCell.innerHTML = (col['template']).apply(that, [node]);
        } else {
            newCell.innerHTML = _defaultCellTemplate(col, node);
        }
        if ('onCellClick' in col) {
            cellLink = newCell.getElementsByTagName('a')[0];
            if (cellLink !== undefined) {
                cellLink.addEventListener('click', col['onCellClick'], false);
                cellLink.setAttribute('data-dismiss', 'modal');
                if (that._contextMenu !== undefined) {
                    cellLink.addEventListener('contextmenu', that._contextMenu, false);
                }
            }
        }
        if ('cellClasses' in col) {
            newCell.className = col['cellClasses'];
        }
    }
    var _selectAll = function (el) {
        var foundRow = false;
        var rowsUp = [];
        var rowsDown = [];
        var rowUp = el;
        var rowDown = el;
        var travelUp = true;
        do {
            if (rowUp !== null) {
                rowUp = rowUp.previousSibling;
                if (rowUp !== null) {
                    rowsUp.push(rowUp);
                    if (rowUp.className.indexOf('ff-selected') >= 0) {
                        foundRow = true;
                    }
                }
            }
            if (rowDown !== null) {
                rowDown = rowDown.nextSibling;
                if (rowDown !== null) {
                    rowsDown.push(rowDown);
                    if (rowDown.className.indexOf('ff-selected') >= 0) {
                        foundRow = true;
                        travelUp = false;
                    }
                }
            }
        }
        while (foundRow == false && ((rowUp !== null) || (rowDown !== null)));
        if (foundRow) {
            var rowsToSelect = (travelUp) ? rowsUp : rowsDown;
            for (var i = 0; i < rowsToSelect.length; i++) {
                _toggleRow(rowsToSelect[i], true);
            }
        }
    }
    var _checkboxOnClick = function (e) {
        var el = e.target;
    }
    var _rowOnClick = function (e) {
        var el = e.target;
        var selectRow = true;
        var row = that.parentRow(el);
        var cls;
        if (row == false) {
            return;
        }
        if (!el.classList.contains('ff-checkbox')) {
            return;
        }
        cls = row.className;
        if (cls.indexOf('ff-selected') >= 0) {
            selectRow = false;
        }
        _toggleRow(row, selectRow);
        if (selectRow && e.shiftKey) {
            _selectAll(row);
        }
        _updateCheckboxStatus();
    }
    var _toggleRow = function (row, selectRow) {
        var checkbox = row.getElementsByClassName('ff-checkbox')[0];
        var _toggleCheckbox = function (el, drawCheckbox) {
            var oldCls = 'ff-checked'
            var newCls = 'ff-unchecked';
            if (drawCheckbox) {
                oldCls = 'ff-unchecked';
                newCls = 'ff-checked';
            }
            el.className = el.className.replace(oldCls, newCls);
        }
        if (selectRow) {
            row.className = row.className + ' ff-selected';
        } else {
            var regex = new RegExp('ff-selected', 'g');
            row.className = row.className.replace(regex, '');
        }
        _toggleCheckbox(checkbox, selectRow);
    }
    var _drawBreadcrumbs = function () {
        var _breadcrumbs = that._breadcrumbs;
        var _containerDiv = that._containerDiv;
        var navBar = _containerDiv.getElementsByClassName('js-ff-nav-bar')[0];
        var checkAllDiv = document.createElement('DIV');
        navBar.innerHTML = '';
        checkAllDiv.innerHTML = _addCheckBox('js-check-all');
        checkAllDiv.innerHTML = checkAllDiv.getElementsByTagName('DIV')[0].outerHTML;
        checkAllDiv.addEventListener('click', that.toggleCheckboxes);
        navBar.appendChild(checkAllDiv);
        for (var i = 0; i < _breadcrumbs.length; i++) {
            var crumb = _breadcrumbs[i],
                crumbWrapper = document.createElement('span'),
                crumbLink = document.createElement('A'),
                crumbText = crumb['name'].substring(0, 9);
            if (crumbText.length = 10) {
                crumbText += '...';
            }
            crumbLink.setAttribute('href', '#')
            crumbLink.setAttribute('data-id', crumb['id']);
            crumbLink.innerHTML = crumb['name'];
            crumbLink.addEventListener('click', _changeFolder, false);
            crumbWrapper.appendChild(crumbLink);
            navBar.appendChild(crumbWrapper);
        }
    }
    var _appendRow = function (node, tableEl, position) {
        var newRow;
        var checkboxCell;
        var _cols = that._cols;
        that.unannounce();
        if (position == 'first') {
            console.log('prepending row(s): ', node, tableEl);
        }
        if (position != 'first') position = 'last';
        if (position == 'last') {
            newRow = tableEl.insertRow(-1);
        } else {
            try {
                newRow = tableEl.insertRow(0);
            } catch (e) {
                console.log('couldnt insert row at pos 0, trying pos 1');
                newRow = tableEl.insertRow(1);
            }
        }
        newRow.className = 'ff-table-row';
        newRow.setAttribute('draggable', true);
        newRow.addEventListener('click', _rowOnClick, false);
        if (that._contextMenu !== undefined) {
            newRow.addEventListener('contextmenu', _contextMenu, false);
        }
        var attrKeys = Object.keys(node.attr);
        for (var i = 0; i < attrKeys.length; i++) {
            newRow.setAttribute(attrKeys[i], node.attr[attrKeys[i]]);
        }
        checkboxCell = newRow.insertCell(-1);
        checkboxCell.innerHTML = _addCheckBox();
        checkboxCell.addEventListener('click', _checkboxOnClick, false);
        for (var j = 0; j < _cols.length; j++) {
            _appendCell(newRow, _cols[j], node, j);
        }
    };
    var _contextMenu = function (e) {
        var el = e.target,
            row = that.parentRow(el);
        _toggleRow(row, true);
        that._contextMenu(e, row, that._containerDiv);
    };
    var _updateCheckboxStatus = function () {
        var allRows = that._containerDiv.querySelectorAll('tr.ff-table-row').length;
        var selectedRows = that.getCheckedItems().length;
        var checkboxStates = ['ff-checked', 'ff-unchecked', 'ff-partial'];
        var selectAllControllers = that._containerDiv.getElementsByClassName('js-check-all');
        var controller;
        var state;
        var regex;
        if (selectedRows === 0) {
            state = 'ff-unchecked';
        } else if (allRows == selectedRows) {
            state = 'ff-checked';
        } else if (selectedRows < allRows) {
            state = 'ff-partial';
        }
        checkboxStates.splice(checkboxStates.indexOf(state), 1);
        for (var i = 0; i < selectAllControllers.length; i++) {
            controller = selectAllControllers[i];
            if (controller.className.indexOf(state) < 0) {
                controller.className = ([controller.className, state]).join(' ');
            }
            for (var j = 0; j < checkboxStates.length; j++) {
                regex = new RegExp(checkboxStates[j], 'g');
                controller.className = controller.className.replace(regex, '');
            }
        }
        jQuery(document).trigger('_updateCheckboxStatus', [that]);
    };
    this.parentRow = function (el) {
        var count = 0;
        if (el.tagName !== 'TR' && el.className.indexOf('ff-table-row') < 0) {
            do {
                el = el.parentNode;
                count++;
            } while (el.className.indexOf('ff-table-row') < 0 && count < 1000)
        }
        if (count >= 1000) return false;
        return el;
    }
    this.showFolder = function (folderObj) {
        var node;
        var _cols = that._cols;
        var tableEl = that._containerDiv.getElementsByTagName('tbody')[0];
        try {
            var newData = JSON.parse(folderObj.fileJson);
        } catch (e) {
            var newData = folderObj.fileJson;
        }
        if (newData === undefined) {
            console.log('showFolder found no file data to display');
            return false;
        }
        console.log('showFolder-->clearing tableEl', tableEl);
        tableEl.innerHTML = '';
        console.log()
        if (newData.length == 0 && that._emptyFolder !== undefined) {
            that.makeAnnouncement(that._emptyFolder);
        }
        for (var i = 0; i < newData.length; i++) {
            node = newData[i];
            _appendRow(node, tableEl);
        }
        that._breadcrumbs.push({
            name: folderObj.folderName,
            id: folderObj.folderId
        });
        _drawBreadcrumbs();
        that._data[folderObj.folderId] = newData;
        if (that._changeFolder !== undefined) {
            that._changeFolder(that);
        }
    }
    this.retrieveFolder = function (fid) {
        if (fid in that._data) {
            return that._data[fid];
        } else {
            return false;
        }
    }
    this.renameCell = function (fid, key, txt) {
        var cells = document.getElementById(fid).getElementsByTagName('TD');
        for (var i = 0; i < cells.length; i++) {
            var cell = cells[i];
            if (cell.getAttribute('data-key') == key) {
                break;
            }
        }
        if (cell.getElementsByTagName('A').length > 0) {
            cell = cell.getElementsByTagName('A')[0];
        }
        var icon = '';
        if (cell.getElementsByTagName('I').length > 0) {
            icon = cell.getElementsByTagName('I')[0];
        }
        cell.innerHTML = icon.outerHTML + txt;
        var currentFolderId = this._breadcrumbs[this._breadcrumbs.length - 1].id;
        for (var j = 0; j < this._data[currentFolderId].length; j++) {
            if (this._data[currentFolderId][j].attr.id == fid) {
                this._data[currentFolderId][j][key] = txt;
            }
        }
    }
    this.getCheckedItems = function () {
        return that._containerDiv.querySelectorAll('tr.ff-selected');
    }
    this.moveCheckedItems = function (pid) {
        var rows = that.getCheckedItems();
        var currentFolderId = that._breadcrumbs[that._breadcrumbs.length - 1].id;
        var loadedFolders = Object.keys(that._data);
        var row;
        var rowData;
        var rowFid
        var dataFid;
        console.log('moving ' + rows.length + ' rows to parent with id ' + pid);
        console.log('pid: ', pid, 'current folder id: ', currentFolderId);
        if (pid == currentFolderId) return;
        if ((pid in loadedFolders) === false) that._data[pid] = [];
        for (var i = 0; i < rows.length; i++) {
            row = rows[i];
            rowFid = row.getAttribute('id');
            for (var j = 0; j < that._data[currentFolderId].length; j++) {
                dataFid = that._data[currentFolderId][j].attr.id;
                if (rowFid == dataFid) {
                    console.log('found item to move', rowFid);
                    rowData = that._data[currentFolderId].splice(j, 1)
                    rowData = rowData[0];
                    console.log('moving row data', rowData);
                    that._data[pid].push(rowData);
                    j = j - 1;
                }
            }
            row.parentNode.removeChild(row);
        }
    }
    this.removeCheckedItems = function () {
        var rows = that.getCheckedItems();
        var currentFolderId = that.getCurrentFolder().id;
        var row;
        var fid;
        for (var i = 0; i < rows.length; i++) {
            row = rows[i];
            fid = row.getAttribute('id');
            for (var j = 0; j < that._data[currentFolderId].length; j++) {
                if (that._data[currentFolderId][j].attr.id == fid) {
                    that._data[currentFolderId].splice(j, 1)
                    j = j - 1;
                }
            }
            row.parentNode.removeChild(row);
        }
    }
    this.addItems = function (fileJson, position) {
        var tableEl = that._containerDiv.getElementsByTagName('tbody')[0];
        var fileItem;
        var folder = that._data[that.getCurrentFolder().id];
        if (position === undefined) position = 'last';
        fileJson = JSON.parse(fileJson);
        for (var i = 0; i < fileJson.length; i++) {
            fileItem = fileJson[i];
            if (position == 'last') {
                folder.push(fileItem);
            } else {
                folder.unshift(fileItem);
            }
            _appendRow(fileItem, tableEl, position);
        }
    }
    this.setItemAttributes = function (id, attributes) {
        var loadedFolders = that._data;
        var folderItems;
        var item;
        var domItem;
        var folderKeys = Object.keys(loadedFolders);
        var attrKeys = Object.keys(attributes);
        var key;
        var val;
        domItem = document.getElementById(id);
        for (var i = 0; i < attrKeys.length; i++) {
            key = attrKeys[i];
            val = attributes[key];
            domItem.setAttribute(key, val);
        }
        var searchForNode = function (folderKey, i, arr) {
            itemsInFolder = that._data[folderKey];
            for (var j = itemsInFolder.length - 1; j >= 0; j--) {
                item = itemsInFolder[j];
                if (item['attr']['id'] == id) {
                    for (var i = 0; i < attrKeys.length; i++) {
                        key = attrKeys[i];
                        val = attributes[key];
                        item['attr'][key] = val;
                        return;
                    }
                }
            };
        };
        console.log('search for nodes to set attributes');
        folderKeys.forEach(searchForNode);
        return;
    }
    this.redrawOne = function (newNode) {
        var tbl = document.createElement('TABLE');
        var nodeId = newNode.attr.id;
        var oldRow = document.getElementById(nodeId);
        var newRow;
        var oldNode;
        if (oldRow === null) {
            console.log('redrawOne() tried to redraw a file item with id ' + nodeId + ' that does not exist, calling addItems()');
            that.addItems(JSON.stringify([newNode]), 'first');
            return false;
        }
        _appendRow(newNode, tbl);
        newRow = tbl.getElementsByTagName('TR')[0];
        oldRow.parentNode.replaceChild(newRow, oldRow);
        oldNode = that.getItemsByAttribute('id', nodeId)[0];
        oldNode = newNode;
    }
    this.createOrUpdateOne = function (node, position) {
        console.log('FF --> createOrUpdateOne');
        if (position === undefined) {
            position = 'first';
        }
        var nodeId = node.attr.id;
        var nodeAttributes = node.attr;
        var nodeExists = false;
        var tableEl = that._containerDiv.querySelectorAll('table.ff-table')[0].getElementsByTagName('tbody')[0];
        var rootFolder = that._data['ff-root'];
        var matchingNode;
        matchingNode = that.getItemsByAttribute('id', nodeId);
        nodeExists = Boolean(matchingNode.length);
        console.log('createOrUpdateOne --> ', node, position, matchingNode);
        if (nodeExists) {
            that.setItemAttributes(nodeId, nodeAttributes);
        } else {
            rootFolder.unshift(node);
            _appendRow(node, tableEl, position);
        }
        console.log('returning from createOrUpdateOne');
    }
    this.getItemsByAttribute = function (key, val) {
        var loadedFolders = that._data;
        var folderItems;
        var item;
        var folderKeys = Object.keys(loadedFolders);
        var matchingNodes = [];
        var collectNodes = function (folderKey, i, arr) {
            folderItems = that._data[folderKey];
            for (var j = folderItems.length - 1; j >= 0; j--) {
                item = folderItems[j];
                if (item['attr'][key] == val) {
                    matchingNodes.push(item);
                }
            };
        };
        folderKeys.forEach(collectNodes);
        return matchingNodes;
    }
    this.getCurrentFolder = function () {
        return that._breadcrumbs[that._breadcrumbs.length - 1];
    }
    this.toggleCheckboxes = function () {
        console.log('toggle all checkboxes');
        var numCheckboxes = that.getCheckedItems().length;
        if (numCheckboxes == 0) {
            that.selectAllItems();
        } else {
            that.selectAllItems(false);
        }
    }
    this.selectAllItems = function (state) {
        if (state === undefined) state = true;
        var allRows = that._containerDiv.querySelectorAll('tr.ff-table-row');
        var checkEl;
        for (var i = 0; i < allRows.length; i++) {
            _toggleRow(allRows[i], state);
        }
        _updateCheckboxStatus();
    }
    this.makeAnnouncement = function (template) {
        var colspan = that._cols.length + 1;
        var tblBody = that._containerDiv.getElementsByTagName('tbody')[0];
        var messageRow = tblBody.insertRow(0);
        var messageCell = document.createElement('TD');
        that.unannounce();
        messageRow.className = 'ff-announcement';
        messageCell.setAttribute('colspan', colspan);
        messageCell.innerHTML = template(that);
        messageRow.appendChild(messageCell);
    }
    this.unannounce = function () {
        var announcements = that._containerDiv.getElementsByClassName('ff-announcement');
        var singleAnnouncement;
        var parent;
        for (var i = 0; i < announcements.length; i++) {
            singleAnnouncement = announcements[i];
            parent = singleAnnouncement.parentNode;
            parent.removeChild(singleAnnouncement);
        }
    }
    this.getColumnKeys = function () {
        var keys = [];
        for (var i = 0; i < that._cols.length; i++) {
            keys.push(that._cols[i].key);
        }
        return keys;
    }
    this.addFilter = function (colKey, filterKeyword, behavior) {
        var keys = that.getColumnKeys();
        var headerElem = that._containerDiv.querySelectorAll('TH[data-key=' + colKey + ']')[0];
        if (behavior === undefined) {
            behavior = 'inclusive';
        }
        if (keys.indexOf(colKey) < 0) {
            throw {
                name: 'File Fabric',
                message: 'Column ID does not exist.'
            };
        }
        if (that._columnFilters[colKey] === undefined) {
            that._columnFilters[colKey] = {
                'exclusive': [],
                'inclusive': []
            };
        }
        if (behavior == 'exclusive') {
            that._columnFilters[colKey][behavior] = [];
        }
        that._columnFilters[colKey][behavior].push(filterKeyword);
        if (headerElem.className.indexOf('ff-active-header') < 0) {
            headerElem.className += ' ff-active-header';
        }
    }
    this.removeFilter = function (colKey, filterKeyword) {
        var filterTypes = ['inclusive', 'exclusive']
        var ft;
        var filterIndex;
        var headerElem;
        var regex;
        for (i in filterTypes) {
            ft = filterTypes[i];
            filterIndex = (that._columnFilters[colKey][ft]).indexOf(filterKeyword);
            if (filterIndex > -1) {
                (that._columnFilters[colKey][ft]).splice(filterIndex, 1);
            }
        }
        if (that.getAllFilters().length == 0) {
            headerElem = that._containerDiv.querySelectorAll('TH[data-key=' + colKey + ']')[0];
            regex = new RegExp('ff-active-header', 'g');
            headerElem.className = headerElem.className.replace(regex, '');
        }
    }
    this.getAllFilters = function () {
        var filterStrings = [];
        var columnKeys = Object.keys(that._columnFilters);
        var columnFilters;
        for (var i = 0; i < columnKeys.length; i++) {
            columnFilters = that._columnFilters[columnKeys[i]];
            filterStrings = filterStrings.concat(columnFilters['inclusive'], columnFilters['exclusive']);
        }
        return filterStrings;
    }
    var that = this;
    this._data = {};
    this._data['ff-root'] = JSON.parse(initObj.fileJson);
    this._cols = initObj.columns;
    this._containerDiv = initObj.containerDiv;
    this._breadcrumbs = [{
        id: 'ff-root',
        name: 'Home'
    }];
    this._contextMenu = initObj.contextMenu;
    this._changeFolder = initObj.changeFolder;
    this._emptyFolder = initObj.emptyFolder;
    this._columnFilters = {};
    _createFileTable();
}
var Hogan = {};
(function (Hogan, useArrayBuffer) {
    Hogan.Template = function (renderFunc, text, compiler, options) {
        this.r = renderFunc || this.r;
        this.c = compiler;
        this.options = options;
        this.text = text || '';
        this.buf = (useArrayBuffer) ? [] : '';
    }
    Hogan.Template.prototype = {
        r: function (context, partials, indent) {
            return '';
        },
        v: hoganEscape,
        t: coerceToString,
        render: function render(context, partials, indent) {
            return this.ri([context], partials || {}, indent);
        },
        ri: function (context, partials, indent) {
            return this.r(context, partials, indent);
        },
        rp: function (name, context, partials, indent) {
            var partial = partials[name];
            if (!partial) {
                return '';
            }
            if (this.c && typeof partial == 'string') {
                partial = this.c.compile(partial, this.options);
            }
            return partial.ri(context, partials, indent);
        },
        rs: function (context, partials, section) {
            var tail = context[context.length - 1];
            if (!isArray(tail)) {
                section(context, partials, this);
                return;
            }
            for (var i = 0; i < tail.length; i++) {
                context.push(tail[i]);
                section(context, partials, this);
                context.pop();
            }
        },
        s: function (val, ctx, partials, inverted, start, end, tags) {
            var pass;
            if (isArray(val) && val.length === 0) {
                return false;
            }
            if (typeof val == 'function') {
                val = this.ls(val, ctx, partials, inverted, start, end, tags);
            }
            pass = (val === '') || !!val;
            if (!inverted && pass && ctx) {
                ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
            }
            return pass;
        },
        d: function (key, ctx, partials, returnFound) {
            var names = key.split('.'),
                val = this.f(names[0], ctx, partials, returnFound),
                cx = null;
            if (key === '.' && isArray(ctx[ctx.length - 2])) {
                return ctx[ctx.length - 1];
            }
            for (var i = 1; i < names.length; i++) {
                if (val && typeof val == 'object' && names[i] in val) {
                    cx = val;
                    val = val[names[i]];
                } else {
                    val = '';
                }
            }
            if (returnFound && !val) {
                return false;
            }
            if (!returnFound && typeof val == 'function') {
                ctx.push(cx);
                val = this.lv(val, ctx, partials);
                ctx.pop();
            }
            return val;
        },
        f: function (key, ctx, partials, returnFound) {
            var val = false,
                v = null,
                found = false;
            for (var i = ctx.length - 1; i >= 0; i--) {
                v = ctx[i];
                if (v && typeof v == 'object' && key in v) {
                    val = v[key];
                    found = true;
                    break;
                }
            }
            if (!found) {
                return (returnFound) ? false : "";
            }
            if (!returnFound && typeof val == 'function') {
                val = this.lv(val, ctx, partials);
            }
            return val;
        },
        ho: function (val, cx, partials, text, tags) {
            var compiler = this.c;
            var options = this.options;
            options.delimiters = tags;
            var text = val.call(cx, text);
            text = (text == null) ? String(text) : text.toString();
            this.b(compiler.compile(text, options).render(cx, partials));
            return false;
        },
        b: (useArrayBuffer) ? function (s) {
            this.buf.push(s);
        } : function (s) {
            this.buf += s;
        },
        fl: (useArrayBuffer) ? function () {
            var r = this.buf.join('');
            this.buf = [];
            return r;
        } : function () {
            var r = this.buf;
            this.buf = '';
            return r;
        },
        ls: function (val, ctx, partials, inverted, start, end, tags) {
            var cx = ctx[ctx.length - 1],
                t = null;
            if (!inverted && this.c && val.length > 0) {
                return this.ho(val, cx, partials, this.text.substring(start, end), tags);
            }
            t = val.call(cx);
            if (typeof t == 'function') {
                if (inverted) {
                    return true;
                } else if (this.c) {
                    return this.ho(t, cx, partials, this.text.substring(start, end), tags);
                }
            }
            return t;
        },
        lv: function (val, ctx, partials) {
            var cx = ctx[ctx.length - 1];
            var result = val.call(cx);
            if (typeof result == 'function') {
                result = coerceToString(result.call(cx));
                if (this.c && ~result.indexOf("{\u007B")) {
                    return this.c.compile(result, this.options).render(cx, partials);
                }
            }
            return coerceToString(result);
        }
    };
    var rAmp = /&/g,
        rLt = /</g,
        rGt = />/g,
        rApos = /\'/g,
        rQuot = /\"/g,
        hChars = /[&<>\"\']/;

    function coerceToString(val) {
        return String((val === null || val === undefined) ? '' : val);
    }

    function hoganEscape(str) {
        str = coerceToString(str);
        return hChars.test(str) ? str.replace(rAmp, '&amp;').replace(rLt, '&lt;').replace(rGt, '&gt;').replace(rApos, '&#39;').replace(rQuot, '&quot;') : str;
    }
    var isArray = Array.isArray || function (a) {
        return Object.prototype.toString.call(a) === '[object Array]';
    };
})(typeof exports !== 'undefined' ? exports : Hogan);
(function (Hogan) {
    var rIsWhitespace = /\S/,
        rQuot = /\"/g,
        rNewline = /\n/g,
        rCr = /\r/g,
        rSlash = /\\/g,
        tagTypes = {
            '#': 1,
            '^': 2,
            '/': 3,
            '!': 4,
            '>': 5,
            '<': 6,
            '=': 7,
            '_v': 8,
            '{': 9,
            '&': 10
        };
    Hogan.scan = function scan(text, delimiters) {
        var len = text.length,
            IN_TEXT = 0,
            IN_TAG_TYPE = 1,
            IN_TAG = 2,
            state = IN_TEXT,
            tagType = null,
            tag = null,
            buf = '',
            tokens = [],
            seenTag = false,
            i = 0,
            lineStart = 0,
            otag = '{{',
            ctag = '}}';

        function addBuf() {
            if (buf.length > 0) {
                tokens.push(new String(buf));
                buf = '';
            }
        }

        function lineIsWhitespace() {
            var isAllWhitespace = true;
            for (var j = lineStart; j < tokens.length; j++) {
                isAllWhitespace = (tokens[j].tag && tagTypes[tokens[j].tag] < tagTypes['_v']) || (!tokens[j].tag && tokens[j].match(rIsWhitespace) === null);
                if (!isAllWhitespace) {
                    return false;
                }
            }
            return isAllWhitespace;
        }

        function filterLine(haveSeenTag, noNewLine) {
            addBuf();
            if (haveSeenTag && lineIsWhitespace()) {
                for (var j = lineStart, next; j < tokens.length; j++) {
                    if (!tokens[j].tag) {
                        if ((next = tokens[j + 1]) && next.tag == '>') {
                            next.indent = tokens[j].toString()
                        }
                        tokens.splice(j, 1);
                    }
                }
            } else if (!noNewLine) {
                tokens.push({
                    tag: '\n'
                });
            }
            seenTag = false;
            lineStart = tokens.length;
        }

        function changeDelimiters(text, index) {
            var close = '=' + ctag,
                closeIndex = text.indexOf(close, index),
                delimiters = trim(text.substring(text.indexOf('=', index) + 1, closeIndex)).split(' ');
            otag = delimiters[0];
            ctag = delimiters[1];
            return closeIndex + close.length - 1;
        }
        if (delimiters) {
            delimiters = delimiters.split(' ');
            otag = delimiters[0];
            ctag = delimiters[1];
        }
        for (i = 0; i < len; i++) {
            if (state == IN_TEXT) {
                if (tagChange(otag, text, i)) {
                    --i;
                    addBuf();
                    state = IN_TAG_TYPE;
                } else {
                    if (text.charAt(i) == '\n') {
                        filterLine(seenTag);
                    } else {
                        buf += text.charAt(i);
                    }
                }
            } else if (state == IN_TAG_TYPE) {
                i += otag.length - 1;
                tag = tagTypes[text.charAt(i + 1)];
                tagType = tag ? text.charAt(i + 1) : '_v';
                if (tagType == '=') {
                    i = changeDelimiters(text, i);
                    state = IN_TEXT;
                } else {
                    if (tag) {
                        i++;
                    }
                    state = IN_TAG;
                }
                seenTag = i;
            } else {
                if (tagChange(ctag, text, i)) {
                    tokens.push({
                        tag: tagType,
                        n: trim(buf),
                        otag: otag,
                        ctag: ctag,
                        i: (tagType == '/') ? seenTag - ctag.length : i + otag.length
                    });
                    buf = '';
                    i += ctag.length - 1;
                    state = IN_TEXT;
                    if (tagType == '{') {
                        if (ctag == '}}') {
                            i++;
                        } else {
                            cleanTripleStache(tokens[tokens.length - 1]);
                        }
                    }
                } else {
                    buf += text.charAt(i);
                }
            }
        }
        filterLine(seenTag, true);
        return tokens;
    }

    function cleanTripleStache(token) {
        if (token.n.substr(token.n.length - 1) === '}') {
            token.n = token.n.substring(0, token.n.length - 1);
        }
    }

    function trim(s) {
        if (s.trim) {
            return s.trim();
        }
        return s.replace(/^\s*|\s*$/g, '');
    }

    function tagChange(tag, text, index) {
        if (text.charAt(index) != tag.charAt(0)) {
            return false;
        }
        for (var i = 1, l = tag.length; i < l; i++) {
            if (text.charAt(index + i) != tag.charAt(i)) {
                return false;
            }
        }
        return true;
    }

    function buildTree(tokens, kind, stack, customTags) {
        var instructions = [],
            opener = null,
            token = null;
        while (tokens.length > 0) {
            token = tokens.shift();
            if (token.tag == '#' || token.tag == '^' || isOpener(token, customTags)) {
                stack.push(token);
                token.nodes = buildTree(tokens, token.tag, stack, customTags);
                instructions.push(token);
            } else if (token.tag == '/') {
                if (stack.length === 0) {
                    throw new Error('Closing tag without opener: /' + token.n);
                }
                opener = stack.pop();
                if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {
                    throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);
                }
                opener.end = token.i;
                return instructions;
            } else {
                instructions.push(token);
            }
        }
        if (stack.length > 0) {
            throw new Error('missing closing tag: ' + stack.pop().n);
        }
        return instructions;
    }

    function isOpener(token, tags) {
        for (var i = 0, l = tags.length; i < l; i++) {
            if (tags[i].o == token.n) {
                token.tag = '#';
                return true;
            }
        }
    }

    function isCloser(close, open, tags) {
        for (var i = 0, l = tags.length; i < l; i++) {
            if (tags[i].c == close && tags[i].o == open) {
                return true;
            }
        }
    }
    Hogan.generate = function (tree, text, options) {
        var code = 'var _=this;_.b(i=i||"");' + walk(tree) + 'return _.fl();';
        if (options.asString) {
            return 'function(c,p,i){' + code + ';}';
        }
        return new Hogan.Template(new Function('c', 'p', 'i', code), text, Hogan, options);
    }

    function esc(s) {
        return s.replace(rSlash, '\\\\').replace(rQuot, '\\\"').replace(rNewline, '\\n').replace(rCr, '\\r');
    }

    function chooseMethod(s) {
        return (~s.indexOf('.')) ? 'd' : 'f';
    }

    function walk(tree) {
        var code = '';
        for (var i = 0, l = tree.length; i < l; i++) {
            var tag = tree[i].tag;
            if (tag == '#') {
                code += section(tree[i].nodes, tree[i].n, chooseMethod(tree[i].n), tree[i].i, tree[i].end, tree[i].otag + " " + tree[i].ctag);
            } else if (tag == '^') {
                code += invertedSection(tree[i].nodes, tree[i].n, chooseMethod(tree[i].n));
            } else if (tag == '<' || tag == '>') {
                code += partial(tree[i]);
            } else if (tag == '{' || tag == '&') {
                code += tripleStache(tree[i].n, chooseMethod(tree[i].n));
            } else if (tag == '\n') {
                code += text('"\\n"' + (tree.length - 1 == i ? '' : ' + i'));
            } else if (tag == '_v') {
                code += variable(tree[i].n, chooseMethod(tree[i].n));
            } else if (tag === undefined) {
                code += text('"' + esc(tree[i]) + '"');
            }
        }
        return code;
    }

    function section(nodes, id, method, start, end, tags) {
        return 'if(_.s(_.' + method + '("' + esc(id) + '",c,p,1),' + 'c,p,0,' + start + ',' + end + ',"' + tags + '")){' + '_.rs(c,p,' + 'function(c,p,_){' +
            walk(nodes) + '});c.pop();}';
    }

    function invertedSection(nodes, id, method) {
        return 'if(!_.s(_.' + method + '("' + esc(id) + '",c,p,1),c,p,1,0,0,"")){' +
            walk(nodes) + '};';
    }

    function partial(tok) {
        return '_.b(_.rp("' + esc(tok.n) + '",c,p,"' + (tok.indent || '') + '"));';
    }

    function tripleStache(id, method) {
        return '_.b(_.t(_.' + method + '("' + esc(id) + '",c,p,0)));';
    }

    function variable(id, method) {
        return '_.b(_.v(_.' + method + '("' + esc(id) + '",c,p,0)));';
    }

    function text(id) {
        return '_.b(' + id + ');';
    }
    Hogan.parse = function (tokens, text, options) {
        options = options || {};
        return buildTree(tokens, '', [], options.sectionTags || []);
    }, Hogan.cache = {};
    Hogan.compile = function (text, options) {
        options = options || {};
        var key = text + '||' + !!options.asString;
        var t = this.cache[key];
        if (t) {
            return t;
        }
        t = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);
        return this.cache[key] = t;
    };
})(typeof exports !== 'undefined' ? exports : Hogan);
! function ($) {
    "use strict"
    var Clickover = function (element, options) {
        this.cinit('clickover', element, options);
    }
    Clickover.prototype = $.extend({}, $.fn.popover.Constructor.prototype, {
        constructor: Clickover,
        cinit: function (type, element, options) {
            this.attr = {};
            this.attr.me = ((Math.random() * 10) + "").replace(/\D/g, '');
            this.attr.click_event_ns = "click." + this.attr.me + " touchstart." + this.attr.me;
            if (!options) options = {};
            options.trigger = 'manual';
            this.init(type, element, options);
            this.$element.on('click', this.options.selector, $.proxy(this.clickery, this));
        },
        clickery: function (e) {
            if (e) {
                e.preventDefault();
                e.stopPropagation();
            }
            this.options.width && this.tip().width(this.options.width);
            this.options.height && this.tip().height(this.options.height);
            this.options.tip_id && this.tip().attr('id', this.options.tip_id);
            this.options.class_name && this.tip().addClass(this.options.class_name);
            this[this.isShown() ? 'hide' : 'show']();
            if (this.isShown()) {
                var that = this;
                this.options.global_close && $('body').on(this.attr.click_event_ns, function (e) {
                    if (!that.tip().has(e.target).length) {
                        that.clickery();
                    }
                });
                this.options.esc_close && $(document).bind('keyup.clickery', function (e) {
                    if (e.keyCode == 27) {
                        that.clickery();
                    }
                    return;
                });
                !this.options.allow_multiple && $('[data-clickover-open=1]').each(function () {
                    $(this).data('clickover') && $(this).data('clickover').clickery();
                });
                this.$element.attr('data-clickover-open', 1);
                this.tip().on('click', '[data-dismiss="clickover"]', $.proxy(this.clickery, this));
                if (this.options.auto_close && this.options.auto_close > 0) {
                    this.attr.tid = setTimeout($.proxy(this.clickery, this), this.options.auto_close);
                }
                typeof this.options.onShown == 'function' && this.options.onShown.call(this);
                this.$element.trigger('shown');
            } else {
                this.$element.removeAttr('data-clickover-open');
                this.options.esc_close && $(document).unbind('keyup.clickery');
                $('body').off(this.attr.click_event_ns);
                if (typeof this.attr.tid == "number") {
                    clearTimeout(this.attr.tid);
                    delete this.attr.tid;
                }
                typeof this.options.onHidden == 'function' && this.options.onHidden.call(this);
                this.$element.trigger('hidden');
            }
        },
        isShown: function () {
            return this.tip().hasClass('in');
        },
        resetPosition: function () {
            var $tip, inside, pos, actualWidth, actualHeight, placement, tp
            if (this.hasContent() && this.enabled) {
                $tip = this.tip()
                placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement
                inside = /in/.test(placement)
                pos = this.getPosition(inside)
                actualWidth = $tip[0].offsetWidth
                actualHeight = $tip[0].offsetHeight
                switch (inside ? placement.split(' ')[1] : placement) {
                case 'bottom':
                    tp = {
                        top: pos.top + pos.height,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    }
                    break
                case 'top':
                    tp = {
                        top: pos.top - actualHeight,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    }
                    break
                case 'left':
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left - actualWidth
                    }
                    break
                case 'right':
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left + pos.width
                    }
                    break
                }
                $tip.css(tp)
            }
        },
        debughide: function () {
            var dt = new Date().toString();
            console.log(dt + ": clickover hide");
            this.hide();
        }
    })
    $.fn.clickover = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('clickover'),
                options = typeof option == 'object' && option
            if (!data) $this.data('clickover', (data = new Clickover(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }
    $.fn.clickover.Constructor = Clickover
    $.fn.clickover.defaults = $.extend({}, $.fn.popover.defaults, {
        trigger: 'manual',
        auto_close: 0,
        global_close: 1,
        esc_close: 1,
        onShown: null,
        onHidden: null,
        width: null,
        height: null,
        tip_id: null,
        class_name: 'clickover',
        allow_multiple: 0
    })
}(window.jQuery);
(function ($) {
    function maybeCall(thing, ctx) {
        return (typeof thing == 'function') ? (thing.call(ctx)) : thing;
    };

    function isElementInDOM(ele) {
        while (ele = ele.parentNode) {
            if (ele == document) return true;
        }
        return false;
    };

    function Tipsy(element, options) {
        this.$element = $(element);
        this.options = options;
        this.enabled = true;
        this.fixTitle();
    };
    Tipsy.prototype = {
        show: function () {
            var title = this.getTitle();
            if (title && this.enabled) {
                var $tip = this.tip();
                $tip.find('.tipsy-inner')[this.options.html ? 'html' : 'text'](title);
                $tip[0].className = 'tipsy';
                $tip.remove().css({
                    top: 0,
                    left: 0,
                    visibility: 'hidden',
                    display: 'block'
                }).prependTo(document.body);
                var pos = $.extend({}, this.$element.offset(), {
                    width: this.$element[0].offsetWidth,
                    height: this.$element[0].offsetHeight
                });
                var actualWidth = $tip[0].offsetWidth,
                    actualHeight = $tip[0].offsetHeight,
                    gravity = maybeCall(this.options.gravity, this.$element[0]);
                var tp;
                switch (gravity.charAt(0)) {
                case 'n':
                    tp = {
                        top: pos.top + pos.height + this.options.offset,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;
                case 's':
                    tp = {
                        top: pos.top - actualHeight - this.options.offset,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;
                case 'e':
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left - actualWidth - this.options.offset
                    };
                    break;
                case 'w':
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left + pos.width + this.options.offset
                    };
                    break;
                }
                if (gravity.length == 2) {
                    if (gravity.charAt(1) == 'w') {
                        tp.left = pos.left + pos.width / 2 - 15;
                    } else {
                        tp.left = pos.left + pos.width / 2 - actualWidth + 15;
                    }
                }
                $tip.css(tp).addClass('tipsy-' + gravity);
                $tip.find('.tipsy-arrow')[0].className = 'tipsy-arrow tipsy-arrow-' + gravity.charAt(0);
                if (this.options.className) {
                    $tip.addClass(maybeCall(this.options.className, this.$element[0]));
                }
                if (this.options.fade) {
                    $tip.stop().css({
                        opacity: 0,
                        display: 'block',
                        visibility: 'visible'
                    }).animate({
                        opacity: this.options.opacity
                    });
                } else {
                    $tip.css({
                        visibility: 'visible',
                        opacity: this.options.opacity
                    });
                }
            }
        },
        hide: function () {
            if (this.options.fade) {
                this.tip().stop().fadeOut(function () {
                    $(this).remove();
                });
            } else {
                this.tip().remove();
            }
        },
        fixTitle: function () {
            var $e = this.$element;
            if ($e.attr('title') || typeof ($e.attr('original-title')) != 'string') {
                $e.attr('original-title', $e.attr('title') || '').removeAttr('title');
            }
        },
        getTitle: function () {
            var title, $e = this.$element,
                o = this.options;
            this.fixTitle();
            var title, o = this.options;
            if (typeof o.title == 'string') {
                title = $e.attr(o.title == 'title' ? 'original-title' : o.title);
            } else if (typeof o.title == 'function') {
                title = o.title.call($e[0]);
            }
            title = ('' + title).replace(/(^\s*|\s*$)/, "");
            return title || o.fallback;
        },
        tip: function () {
            if (!this.$tip) {
                this.$tip = $('<div class="tipsy"></div>').html('<div class="tipsy-arrow"></div><div class="tipsy-inner"></div>');
                this.$tip.data('tipsy-pointee', this.$element[0]);
            }
            return this.$tip;
        },
        validate: function () {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null;
            }
        },
        enable: function () {
            this.enabled = true;
        },
        disable: function () {
            this.enabled = false;
        },
        toggleEnabled: function () {
            this.enabled = !this.enabled;
        }
    };
    $.fn.tipsy = function (options) {
        if (options === true) {
            return this.data('tipsy');
        } else if (typeof options == 'string') {
            var tipsy = this.data('tipsy');
            if (tipsy) tipsy[options]();
            return this;
        }
        options = $.extend({}, $.fn.tipsy.defaults, options);

        function get(ele) {
            var tipsy = $.data(ele, 'tipsy');
            if (!tipsy) {
                tipsy = new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
                $.data(ele, 'tipsy', tipsy);
            }
            return tipsy;
        }

        function enter() {
            var tipsy = get(this);
            tipsy.hoverState = 'in';
            if (options.delayIn == 0) {
                tipsy.show();
            } else {
                tipsy.fixTitle();
                setTimeout(function () {
                    if (tipsy.hoverState == 'in') tipsy.show();
                }, options.delayIn);
            }
        };

        function leave() {
            var tipsy = get(this);
            tipsy.hoverState = 'out';
            if (options.delayOut == 0) {
                tipsy.hide();
            } else {
                setTimeout(function () {
                    if (tipsy.hoverState == 'out') tipsy.hide();
                }, options.delayOut);
            }
        };
        if (!options.live) this.each(function () {
            get(this);
        });
        if (options.trigger != 'manual') {
            var binder = options.live ? 'live' : 'bind',
                eventIn = options.trigger == 'hover' ? 'mouseenter' : 'focus',
                eventOut = options.trigger == 'hover' ? 'mouseleave' : 'blur';
            this[binder](eventIn, enter)[binder](eventOut, leave);
        }
        return this;
    };
    $.fn.tipsy.defaults = {
        className: null,
        delayIn: 0,
        delayOut: 0,
        fade: false,
        fallback: '',
        gravity: 'n',
        html: false,
        live: false,
        offset: 0,
        opacity: 0.8,
        title: 'title',
        trigger: 'hover'
    };
    $.fn.tipsy.revalidate = function () {
        $('.tipsy').each(function () {
            var pointee = $.data(this, 'tipsy-pointee');
            if (!pointee || !isElementInDOM(pointee)) {
                $(this).remove();
            }
        });
    };
    $.fn.tipsy.elementOptions = function (ele, options) {
        return $.metadata ? $.extend({}, options, $(ele).metadata()) : options;
    };
    $.fn.tipsy.autoNS = function () {
        return $(this).offset().top > ($(document).scrollTop() + $(window).height() / 2) ? 's' : 'n';
    };
    $.fn.tipsy.autoWE = function () {
        return $(this).offset().left > ($(document).scrollLeft() + $(window).width() / 2) ? 'e' : 'w';
    };
    $.fn.tipsy.autoBounds = function (margin, prefer) {
        return function () {
            var dir = {
                    ns: prefer[0],
                    ew: (prefer.length > 1 ? prefer[1] : false)
                },
                boundTop = $(document).scrollTop() + margin,
                boundLeft = $(document).scrollLeft() + margin,
                $this = $(this);
            if ($this.offset().top < boundTop) dir.ns = 'n';
            if ($this.offset().left < boundLeft) dir.ew = 'w';
            if ($(window).width() + $(document).scrollLeft() - $this.offset().left < margin) dir.ew = 'e';
            if ($(window).height() + $(document).scrollTop() - $this.offset().top < margin) dir.ns = 's';
            return dir.ns + (dir.ew ? dir.ew : '');
        }
    };
})(jQuery);
window.PR_SHOULD_USE_CONTINUATION = !0,
    function () {
        function L(e) {
            function a(e) {
                var t = e.charCodeAt(0);
                if (t !== 92) return t;
                var n = e.charAt(1);
                return t = u[n], t ? t : "0" <= n && n <= "7" ? parseInt(e.substring(1), 8) : n === "u" || n === "x" ? parseInt(e.substring(2), 16) : e.charCodeAt(1)
            }

            function f(e) {
                if (e < 32) return (e < 16 ? "\\x0" : "\\x") + e.toString(16);
                var t = String.fromCharCode(e);
                if (t === "\\" || t === "-" || t === "[" || t === "]") t = "\\" + t;
                return t
            }

            function l(e) {
                var t = e.substring(1, e.length - 1).match(new RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]", "g")),
                    n = [],
                    r = [],
                    i = t[0] === "^";
                for (var s = i ? 1 : 0, o = t.length; s < o; ++s) {
                    var u = t[s];
                    if (/\\[bdsw]/i.test(u)) n.push(u);
                    else {
                        var l = a(u),
                            c;
                        s + 2 < o && "-" === t[s + 1] ? (c = a(t[s + 2]), s += 2) : c = l, r.push([l, c]), c < 65 || l > 122 || (c < 65 || l > 90 || r.push([Math.max(65, l) | 32, Math.min(c, 90) | 32]), c < 97 || l > 122 || r.push([Math.max(97, l) & -33, Math.min(c, 122) & -33]))
                    }
                }
                r.sort(function (e, t) {
                    return e[0] - t[0] || t[1] - e[1]
                });
                var h = [],
                    p = [NaN, NaN];
                for (var s = 0; s < r.length; ++s) {
                    var d = r[s];
                    d[0] <= p[1] + 1 ? p[1] = Math.max(p[1], d[1]) : h.push(p = d)
                }
                var v = ["["];
                i && v.push("^"), v.push.apply(v, n);
                for (var s = 0; s < h.length; ++s) {
                    var d = h[s];
                    v.push(f(d[0])), d[1] > d[0] && (d[1] + 1 > d[0] && v.push("-"), v.push(f(d[1])))
                }
                return v.push("]"), v.join("")
            }

            function c(e) {
                var r = e.source.match(new RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)", "g")),
                    i = r.length,
                    s = [];
                for (var o = 0, u = 0; o < i; ++o) {
                    var a = r[o];
                    if (a === "(")++u;
                    else if ("\\" === a.charAt(0)) {
                        var f = +a.substring(1);
                        f && f <= u && (s[f] = -1)
                    }
                }
                for (var o = 1; o < s.length; ++o) - 1 === s[o] && (s[o] = ++t);
                for (var o = 0, u = 0; o < i; ++o) {
                    var a = r[o];
                    if (a === "(")++u, s[u] === undefined && (r[o] = "(?:");
                    else if ("\\" === a.charAt(0)) {
                        var f = +a.substring(1);
                        f && f <= u && (r[o] = "\\" + s[u])
                    }
                }
                for (var o = 0, u = 0; o < i; ++o) "^" === r[o] && "^" !== r[o + 1] && (r[o] = "");
                if (e.ignoreCase && n)
                    for (var o = 0; o < i; ++o) {
                        var a = r[o],
                            c = a.charAt(0);
                        a.length >= 2 && c === "[" ? r[o] = l(a) : c !== "\\" && (r[o] = a.replace(/[a-zA-Z]/g, function (e) {
                            var t = e.charCodeAt(0);
                            return "[" + String.fromCharCode(t & -33, t | 32) + "]"
                        }))
                    }
                return r.join("")
            }
            var t = 0,
                n = !1,
                r = !1;
            for (var i = 0, s = e.length; i < s; ++i) {
                var o = e[i];
                if (o.ignoreCase) r = !0;
                else if (/[a-z]/i.test(o.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi, ""))) {
                    n = !0, r = !1;
                    break
                }
            }
            var u = {
                    b: 8,
                    t: 9,
                    n: 10,
                    v: 11,
                    f: 12,
                    r: 13
                },
                h = [];
            for (var i = 0, s = e.length; i < s; ++i) {
                var o = e[i];
                if (o.global || o.multiline) throw new Error("" + o);
                h.push("(?:" + c(o) + ")")
            }
            return new RegExp(h.join("|"), r ? "gi" : "g")
        }

        function A(e) {
            function a(e) {
                switch (e.nodeType) {
                case 1:
                    if (t.test(e.className)) return;
                    for (var o = e.firstChild; o; o = o.nextSibling) a(o);
                    var f = e.nodeName;
                    if ("BR" === f || "LI" === f) n[s] = "\n", i[s << 1] = r++, i[s++ << 1 | 1] = e;
                    break;
                case 3:
                case 4:
                    var l = e.nodeValue;
                    l.length && (u ? l = l.replace(/\r\n?/g, "\n") : l = l.replace(/[ \t\r\n]+/g, " "), n[s] = l, i[s << 1] = r, r += l.length, i[s++ << 1 | 1] = e)
                }
            }
            var t = /(?:^|\s)nocode(?:\s|$)/,
                n = [],
                r = 0,
                i = [],
                s = 0,
                o;
            e.currentStyle ? o = e.currentStyle.whiteSpace : window.getComputedStyle && (o = document.defaultView.getComputedStyle(e, null).getPropertyValue("white-space"));
            var u = o && "pre" === o.substring(0, 3);
            return a(e), {
                sourceCode: n.join("").replace(/\n$/, ""),
                spans: i
            }
        }

        function O(e, t, n, r) {
            if (!t) return;
            var i = {
                sourceCode: t,
                basePos: e
            };
            n(i), r.push.apply(r, i.decorations)
        }

        function _(e) {
            var t = undefined;
            for (var n = e.firstChild; n; n = n.nextSibling) {
                var r = n.nodeType;
                t = r === 1 ? t ? e : n : r === 3 ? M.test(n.nodeValue) ? e : t : t
            }
            return t === e ? undefined : t
        }

        function D(e, t) {
            var n = {},
                r;
            (function () {
                var i = e.concat(t),
                    s = [],
                    o = {};
                for (var u = 0, a = i.length; u < a; ++u) {
                    var f = i[u],
                        l = f[3];
                    if (l)
                        for (var c = l.length; --c >= 0;) n[l.charAt(c)] = f;
                    var h = f[1],
                        p = "" + h;
                    o.hasOwnProperty(p) || (s.push(h), o[p] = null)
                }
                s.push(/[\0-\uffff]/), r = L(s)
            })();
            var i = t.length,
                s = function (e) {
                    var o = e.sourceCode,
                        u = e.basePos,
                        a = [u, w],
                        f = 0,
                        l = o.match(r) || [],
                        c = {};
                    for (var h = 0, p = l.length; h < p; ++h) {
                        var d = l[h],
                            v = c[d],
                            m = void 0,
                            g;
                        if (typeof v == "string") g = !1;
                        else {
                            var y = n[d.charAt(0)];
                            if (y) m = d.match(y[1]), v = y[0];
                            else {
                                for (var b = 0; b < i; ++b) {
                                    y = t[b], m = d.match(y[1]);
                                    if (m) {
                                        v = y[0];
                                        break
                                    }
                                }
                                m || (v = w)
                            }
                            g = v.length >= 5 && "lang-" === v.substring(0, 5), g && (!m || typeof m[1] != "string") && (g = !1, v = x), g || (c[d] = v)
                        }
                        var E = f;
                        f += d.length;
                        if (!g) a.push(u + E, v);
                        else {
                            var S = m[1],
                                T = d.indexOf(S),
                                N = T + S.length;
                            m[2] && (N = d.length - m[2].length, T = N - S.length);
                            var C = v.substring(5);
                            O(u + E, d.substring(0, T), s, a), O(u + E + T, S, q(C, S), a), O(u + E + N, d.substring(N), s, a)
                        }
                    }
                    e.decorations = a
                };
            return s
        }

        function P(e) {
            var t = [],
                n = [];
            e.tripleQuotedStrings ? t.push([d, /^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/, null, "'\""]) : e.multiLineStrings ? t.push([d, /^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/, null, "'\"`"]) : t.push([d, /^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/, null, "\"'"]), e.verbatimStrings;
            var r = e.hashComments;
            r && (e.cStyleComments ? (r > 1 ? t.push([m, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, "#"]) : t.push([m, /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\r\n]*)/, null, "#"]), n.push([d, /^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/, null])) : t.push([m, /^#[^\r\n]*/, null, "#"])), e.cStyleComments && (n.push([m, /^\/\/[^\r\n]*/, null]), n.push([m, /^\/\*[\s\S]*?(?:\*\/|$)/, null]));
            if (e.regexLiterals) {
                var i = "/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/";
                n.push(["lang-regex", new RegExp("^" + k + "(" + i + ")")])
            }
            var s = e.types;
            s && n.push([g, s]);
            var o = ("" + e.keywords).replace(/^ | $/g, "");
            return o.length && n.push([v, new RegExp("^(?:" + o.replace(/[\s,]+/g, "|") + ")\\b"), null]), t.push([w, /^\s+/, null, " \r\n	\u00a0"]), n.push([y, /^@[a-z_$][a-z_$@0-9]*/i, null], [g, /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/, null], [w, /^[a-z_$][a-z_$@0-9]*/i, null], [y, new RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*", "i"), null, "0123456789"], [w, /^\\[\s\S]?/, null], [b, /^.[^\s\w\.$@\'\"\`\/\#\\]*/, null]), D(t, n)
        }

        function B(e, t) {
            function f(e) {
                switch (e.nodeType) {
                case 1:
                    if (n.test(e.className)) break;
                    if ("BR" === e.nodeName) l(e), e.parentNode && e.parentNode.removeChild(e);
                    else
                        for (var t = e.firstChild; t; t = t.nextSibling) f(t);
                    break;
                case 3:
                case 4:
                    if (o) {
                        var s = e.nodeValue,
                            u = s.match(r);
                        if (u) {
                            var a = s.substring(0, u.index);
                            e.nodeValue = a;
                            var c = s.substring(u.index + u[0].length);
                            if (c) {
                                var h = e.parentNode;
                                h.insertBefore(i.createTextNode(c), e.nextSibling)
                            }
                            l(e), a || e.parentNode.removeChild(e)
                        }
                    }
                }
            }

            function l(e) {
                function t(e, n) {
                    var r = n ? e.cloneNode(!1) : e,
                        i = e.parentNode;
                    if (i) {
                        var s = t(i, 1),
                            o = e.nextSibling;
                        s.appendChild(r);
                        for (var u = o; u; u = o) o = u.nextSibling, s.appendChild(u)
                    }
                    return r
                }
                while (!e.nextSibling) {
                    e = e.parentNode;
                    if (!e) return
                }
                var n = t(e.nextSibling, 0);
                for (var r;
                    (r = n.parentNode) && r.nodeType === 1;) n = r;
                a.push(n)
            }
            var n = /(?:^|\s)nocode(?:\s|$)/,
                r = /\r\n?|\n/,
                i = e.ownerDocument,
                s;
            e.currentStyle ? s = e.currentStyle.whiteSpace : window.getComputedStyle && (s = i.defaultView.getComputedStyle(e, null).getPropertyValue("white-space"));
            var o = s && "pre" === s.substring(0, 3),
                u = i.createElement("LI");
            while (e.firstChild) u.appendChild(e.firstChild);
            var a = [u];
            for (var c = 0; c < a.length; ++c) f(a[c]);
            t === (t | 0) && a[0].setAttribute("value", t);
            var h = i.createElement("OL");
            h.className = "linenums";
            var p = Math.max(0, t - 1 | 0) || 0;
            for (var c = 0, d = a.length; c < d; ++c) u = a[c], u.className = "L" + (c + p) % 10, u.firstChild || u.appendChild(i.createTextNode("\u00a0")), h.appendChild(u);
            e.appendChild(h)
        }

        function j(e) {
            var t = /\bMSIE\b/.test(navigator.userAgent),
                n = /\n/g,
                r = e.sourceCode,
                i = r.length,
                s = 0,
                o = e.spans,
                u = o.length,
                a = 0,
                f = e.decorations,
                l = f.length,
                c = 0;
            f[l] = i;
            var h, p;
            for (p = h = 0; p < l;) f[p] !== f[p + 2] ? (f[h++] = f[p++], f[h++] = f[p++]) : p += 2;
            l = h;
            for (p = h = 0; p < l;) {
                var d = f[p],
                    v = f[p + 1],
                    m = p + 2;
                while (m + 2 <= l && f[m + 1] === v) m += 2;
                f[h++] = d, f[h++] = v, p = m
            }
            l = f.length = h;
            var g = null;
            while (a < u) {
                var y = o[a],
                    b = o[a + 2] || i,
                    w = f[c],
                    E = f[c + 2] || i,
                    m = Math.min(b, E),
                    S = o[a + 1],
                    x;
                if (S.nodeType !== 1 && (x = r.substring(s, m))) {
                    t && (x = x.replace(n, "\r")), S.nodeValue = x;
                    var T = S.ownerDocument,
                        N = T.createElement("SPAN");
                    N.className = f[c + 1];
                    var C = S.parentNode;
                    C.replaceChild(N, S), N.appendChild(S), s < b && (o[a + 1] = S = T.createTextNode(r.substring(m, b)), C.insertBefore(S, N.nextSibling))
                }
                s = m, s >= b && (a += 2), s >= E && (c += 2)
            }
        }

        function I(e, t) {
            for (var n = t.length; --n >= 0;) {
                var r = t[n];
                F.hasOwnProperty(r) ? window.console && console.warn("cannot override language handler %s", r) : F[r] = e
            }
        }

        function q(e, t) {
            if (!e || !F.hasOwnProperty(e)) e = /^\s*</.test(t) ? "default-markup" : "default-code";
            return F[e]
        }

        function R(e) {
            var t = e.langExtension;
            try {
                var n = A(e.sourceNode),
                    r = n.sourceCode;
                e.sourceCode = r, e.spans = n.spans, e.basePos = 0, q(t, r)(e), j(e)
            } catch (i) {
                "console" in window && console.log(i && i.stack ? i.stack : i)
            }
        }

        function U(e, t, n) {
            var r = document.createElement("PRE");
            r.innerHTML = e, n && B(r, n);
            var i = {
                langExtension: t,
                numberLines: n,
                sourceNode: r
            };
            return R(i), r.innerHTML
        }

        function z(e) {
            function t(e) {
                return document.getElementsByTagName(e)
            }

            function h() {
                var t = window.PR_SHOULD_USE_CONTINUATION ? u.now() + 250 : Infinity;
                for (; a < r.length && u.now() < t; a++) {
                    var n = r[a],
                        i = n.className;
                    if (i.indexOf("prettyprint") >= 0) {
                        var s = i.match(l),
                            o;
                        !s && (o = _(n)) && "CODE" === o.tagName && (s = o.className.match(l)), s && (s = s[1]);
                        var c = !1;
                        for (var p = n.parentNode; p; p = p.parentNode)
                            if ((p.tagName === "pre" || p.tagName === "code" || p.tagName === "xmp") && p.className && p.className.indexOf("prettyprint") >= 0) {
                                c = !0;
                                break
                            }
                        if (!c) {
                            var d = n.className.match(/\blinenums\b(?::(\d+))?/);
                            d = d ? d[1] && d[1].length ? +d[1] : !0 : !1, d && B(n, d), f = {
                                langExtension: s,
                                sourceNode: n,
                                numberLines: d
                            }, R(f)
                        }
                    }
                }
                a < r.length ? setTimeout(h, 250) : e && e()
            }
            var n = [t("pre"), t("code"), t("xmp")],
                r = [];
            for (var i = 0; i < n.length; ++i)
                for (var s = 0, o = n[i].length; s < o; ++s) r.push(n[i][s]);
            n = null;
            var u = Date;
            u.now || (u = {
                now: function () {
                    return +(new Date)
                }
            });
            var a = 0,
                f, l = /\blang(?:uage)?-([\w.]+)(?!\S)/,
                c = /\bprettyprint\b/;
            h()
        }
        var e = ["break,continue,do,else,for,if,return,while"],
            t = [e, "auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],
            n = [t, "catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],
            r = [n, "alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],
            i = [n, "abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"],
            s = [i, "as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var"],
            o = "all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes",
            u = [n, "debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],
            a = "caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",
            f = [e, "and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],
            l = [e, "alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],
            c = [e, "case,done,elif,esac,eval,fi,function,in,local,set,then,until"],
            h = [r, s, u, a + f, l, c],
            p = /^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)/,
            d = "str",
            v = "kwd",
            m = "com",
            g = "typ",
            y = "lit",
            b = "pun",
            w = "pln",
            E = "tag",
            S = "dec",
            x = "src",
            T = "atn",
            N = "atv",
            C = "nocode",
            k = "(?:^^\\.?|[+-]|\\!|\\!=|\\!==|\\#|\\%|\\%=|&|&&|&&=|&=|\\(|\\*|\\*=|\\+=|\\,|\\-=|\\->|\\/|\\/=|:|::|\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\@|\\[|\\^|\\^=|\\^\\^|\\^\\^=|\\{|\\||\\|=|\\|\\||\\|\\|=|\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*",
            M = /\S/,
            H = P({
                keywords: h,
                hashComments: !0,
                cStyleComments: !0,
                multiLineStrings: !0,
                regexLiterals: !0
            }),
            F = {};
        I(H, ["default-code"]), I(D([], [
            [w, /^[^<?]+/],
            [S, /^<!\w[^>]*(?:>|$)/],
            [m, /^<\!--[\s\S]*?(?:-\->|$)/],
            ["lang-", /^<\?([\s\S]+?)(?:\?>|$)/],
            ["lang-", /^<%([\s\S]+?)(?:%>|$)/],
            [b, /^(?:<[%?]|[%?]>)/],
            ["lang-", /^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],
            ["lang-js", /^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],
            ["lang-css", /^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],
            ["lang-in.tag", /^(<\/?[a-z][^<>]*>)/i]
        ]), ["default-markup", "htm", "html", "mxml", "xhtml", "xml", "xsl"]), I(D([
            [w, /^[\s]+/, null, " 	\r\n"],
            [N, /^(?:\"[^\"]*\"?|\'[^\']*\'?)/, null, "\"'"]
        ], [
            [E, /^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],
            [T, /^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],
            ["lang-uq.val", /^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],
            [b, /^[=<>\/]+/],
            ["lang-js", /^on\w+\s*=\s*\"([^\"]+)\"/i],
            ["lang-js", /^on\w+\s*=\s*\'([^\']+)\'/i],
            ["lang-js", /^on\w+\s*=\s*([^\"\'>\s]+)/i],
            ["lang-css", /^style\s*=\s*\"([^\"]+)\"/i],
            ["lang-css", /^style\s*=\s*\'([^\']+)\'/i],
            ["lang-css", /^style\s*=\s*([^\"\'>\s]+)/i]
        ]), ["in.tag"]), I(D([], [
            [N, /^[\s\S]+/]
        ]), ["uq.val"]), I(P({
            keywords: r,
            hashComments: !0,
            cStyleComments: !0,
            types: p
        }), ["c", "cc", "cpp", "cxx", "cyc", "m"]), I(P({
            keywords: "null,true,false"
        }), ["json"]), I(P({
            keywords: s,
            hashComments: !0,
            cStyleComments: !0,
            verbatimStrings: !0,
            types: p
        }), ["cs"]), I(P({
            keywords: i,
            cStyleComments: !0
        }), ["java"]), I(P({
            keywords: c,
            hashComments: !0,
            multiLineStrings: !0
        }), ["bsh", "csh", "sh"]), I(P({
            keywords: f,
            hashComments: !0,
            multiLineStrings: !0,
            tripleQuotedStrings: !0
        }), ["cv", "py"]), I(P({
            keywords: a,
            hashComments: !0,
            multiLineStrings: !0,
            regexLiterals: !0
        }), ["perl", "pl", "pm"]), I(P({
            keywords: l,
            hashComments: !0,
            multiLineStrings: !0,
            regexLiterals: !0
        }), ["rb"]), I(P({
            keywords: u,
            cStyleComments: !0,
            regexLiterals: !0
        }), ["js"]), I(P({
            keywords: o,
            hashComments: 3,
            cStyleComments: !0,
            multilineStrings: !0,
            tripleQuotedStrings: !0,
            regexLiterals: !0
        }), ["coffee"]), I(D([], [
            [d, /^[\s\S]+/]
        ]), ["regex"]), window.prettyPrintOne = U, window.prettyPrint = z, window.PR = {
            createSimpleLexer: D,
            registerLangHandler: I,
            sourceDecorator: P,
            PR_ATTRIB_NAME: T,
            PR_ATTRIB_VALUE: N,
            PR_COMMENT: m,
            PR_DECLARATION: S,
            PR_KEYWORD: v,
            PR_LITERAL: y,
            PR_NOCODE: C,
            PR_PLAIN: w,
            PR_PUNCTUATION: b,
            PR_SOURCE: x,
            PR_STRING: d,
            PR_TAG: E,
            PR_TYPE: g
        }
    }();

function alphanum(a, b) {
    function chunkify(t) {
        var tz = new Array();
        var x = 0,
            y = -1,
            n = 0,
            i, j;
        while (i = (j = t.charAt(x++)).charCodeAt(0)) {
            var m = (i == 46 || (i >= 48 && i <= 57));
            if (m !== n) {
                tz[++y] = "";
                n = m;
            }
            tz[y] += j;
        }
        return tz;
    }
    var aa = chunkify(a);
    var bb = chunkify(b);
    for (x = 0; aa[x] && bb[x]; x++) {
        if (aa[x] !== bb[x]) {
            var c = Number(aa[x]),
                d = Number(bb[x]);
            if (c == aa[x] && d == bb[x]) {
                return c - d;
            } else return (aa[x] > bb[x]) ? 1 : -1;
        }
    }
    return aa.length - bb.length;
}

function alphanumCase(a, b) {
    function chunkify(t) {
        var tz = new Array();
        var x = 0,
            y = -1,
            n = 0,
            i, j;
        while (i = (j = t.charAt(x++)).charCodeAt(0)) {
            var m = (i == 46 || (i >= 48 && i <= 57));
            if (m !== n) {
                tz[++y] = "";
                n = m;
            }
            tz[y] += j;
        }
        return tz;
    }
    var aa = chunkify(a.toLowerCase());
    var bb = chunkify(b.toLowerCase());
    for (x = 0; aa[x] && bb[x]; x++) {
        if (aa[x] !== bb[x]) {
            var c = Number(aa[x]),
                d = Number(bb[x]);
            if (c == aa[x] && d == bb[x]) {
                return c - d;
            } else return (aa[x] > bb[x]) ? 1 : -1;
        }
    }
    return aa.length - bb.length;
}
window.CodeMirror = function () {
    "use strict";

    function E(e, n) {
        if (!(this instanceof E)) return new E(e, n);
        this.options = n = n || {};
        for (var r in On)!n.hasOwnProperty(r) && On.hasOwnProperty(r) && (n[r] = On[r]);
        D(n);
        var i = typeof n.value == "string" ? 0 : n.value.first,
            s = this.display = S(e, i);
        s.wrapper.CodeMirror = this, O(this), n.autofocus && !d && Ct(this), this.state = {
            keyMaps: [],
            overlays: [],
            modeGen: 0,
            overwrite: !1,
            focused: !1,
            suppressEdits: !1,
            pasteIncoming: !1,
            draggingText: !1,
            highlight: new Ei
        }, this.nextOpId = 0, L(this), n.lineWrapping && (this.display.wrapper.className += " CodeMirror-wrap");
        var o = n.value;
        typeof o == "string" && (o = new Pr(n.value, n.mode)), yt(this, Fr)(this, o), t && setTimeout(Mi(Nt, this, !0), 20), Lt(this);
        var u;
        try {
            u = document.activeElement == s.input
        } catch (a) {}
        u || n.autofocus && !d ? setTimeout(Mi(Qt, this), 20) : Gt(this), yt(this, function () {
            for (var e in An) An.propertyIsEnumerable(e) && An[e](this, n[e], _n);
            for (var t = 0; t < Bn.length; ++t) Bn[t](this)
        })()
    }

    function S(e, t) {
        var r = {},
            s = r.input = Bi("textarea", null, null, "position: absolute; padding: 0; width: 1px; height: 1em; outline: none;");
        i ? s.style.width = "1000px" : s.setAttribute("wrap", "off"), s.setAttribute("autocorrect", "off"), s.setAttribute("autocapitalize", "off"), r.inputDiv = Bi("div", [s], null, "overflow: hidden; position: relative; width: 3px; height: 0px;"), r.scrollbarH = Bi("div", [Bi("div", null, null, "height: 1px")], "CodeMirror-hscrollbar"), r.scrollbarV = Bi("div", [Bi("div", null, null, "width: 1px")], "CodeMirror-vscrollbar"), r.scrollbarFiller = Bi("div", null, "CodeMirror-scrollbar-filler"), r.lineDiv = Bi("div"), r.selectionDiv = Bi("div", null, null, "position: relative; z-index: 1"), r.cursor = Bi("div", "\u00a0", "CodeMirror-cursor"), r.otherCursor = Bi("div", "\u00a0", "CodeMirror-cursor CodeMirror-secondarycursor"), r.measure = Bi("div", null, "CodeMirror-measure"), r.lineSpace = Bi("div", [r.measure, r.selectionDiv, r.lineDiv, r.cursor, r.otherCursor], null, "position: relative; outline: none"), r.mover = Bi("div", [Bi("div", [r.lineSpace], "CodeMirror-lines")], null, "position: relative"), r.sizer = Bi("div", [r.mover], "CodeMirror-sizer"), r.heightForcer = Bi("div", "\u00a0", null, "position: absolute; height: " + bi + "px"), r.gutters = Bi("div", null, "CodeMirror-gutters"), r.lineGutter = null;
        var o = Bi("div", [r.sizer, r.heightForcer, r.gutters], null, "position: relative; min-height: 100%");
        return r.scroller = Bi("div", [o], "CodeMirror-scroll"), r.scroller.setAttribute("tabIndex", "-1"), r.wrapper = Bi("div", [r.inputDiv, r.scrollbarH, r.scrollbarV, r.scrollbarFiller, r.scroller], "CodeMirror"), n && (r.gutters.style.zIndex = -1, r.scroller.style.paddingRight = 0), e.appendChild ? e.appendChild(r.wrapper) : e(r.wrapper), p && (s.style.width = "0px"), i || (r.scroller.draggable = !0), f ? (r.inputDiv.style.height = "1px", r.inputDiv.style.position = "absolute") : n && (r.scrollbarH.style.minWidth = r.scrollbarV.style.minWidth = "18px"), r.viewOffset = r.lastSizeC = 0, r.showingFrom = r.showingTo = t, r.lineNumWidth = r.lineNumInnerWidth = r.lineNumChars = null, r.prevInput = "", r.alignWidgets = !1, r.pollingFast = !1, r.poll = new Ei, r.draggingText = !1, r.cachedCharWidth = r.cachedTextHeight = null, r.measureLineCache = [], r.measureLineCachePos = 0, r.inaccurateSelection = !1, r.maxLine = null, r.maxLineLength = 0, r.maxLineChanged = !1, r.wheelDX = r.wheelDY = r.wheelStartX = r.wheelStartY = null, r
    }

    function x(e) {
        e.doc.mode = E.getMode(e.options, e.doc.modeOption), e.doc.iter(function (e) {
            e.stateAfter && (e.stateAfter = null), e.styles && (e.styles = null)
        }), e.doc.frontier = e.doc.first, Y(e, 100), e.state.modeGen++, e.curOp && Et(e)
    }

    function T(e) {
        e.options.lineWrapping ? (e.display.wrapper.className += " CodeMirror-wrap", e.display.sizer.style.minWidth = "") : (e.display.wrapper.className = e.display.wrapper.className.replace(" CodeMirror-wrap", ""), _(e)), C(e), Et(e), ut(e), setTimeout(function () {
            P(e.display, e.doc.height)
        }, 100)
    }

    function N(e) {
        var t = dt(e.display),
            n = e.options.lineWrapping,
            r = n && Math.max(5, e.display.scroller.clientWidth / vt(e.display) - 3);
        return function (e) {
            return ur(e) ? 0 : n ? (Math.ceil(e.text.length / r) || 1) * t : t
        }
    }

    function C(e) {
        var t = e.doc,
            n = N(e);
        t.iter(function (e) {
            var t = n(e);
            t != e.height && Ur(e, t)
        })
    }

    function k(e) {
        var t = qn[e.options.keyMap].style;
        e.display.wrapper.className = e.display.wrapper.className.replace(/\s*cm-keymap-\S+/g, "") + (t ? " cm-keymap-" + t : "")
    }

    function L(e) {
        e.display.wrapper.className = e.display.wrapper.className.replace(/\s*cm-s-\S+/g, "") + e.options.theme.replace(/(^|\s)\s*/g, " cm-s-"), ut(e)
    }

    function A(e) {
        O(e), Et(e)
    }

    function O(e) {
        var t = e.display.gutters,
            n = e.options.gutters;
        ji(t);
        for (var r = 0; r < n.length; ++r) {
            var i = n[r],
                s = t.appendChild(Bi("div", null, "CodeMirror-gutter " + i));
            i == "CodeMirror-linenumbers" && (e.display.lineGutter = s, s.style.width = (e.display.lineNumWidth || 1) + "px")
        }
        t.style.display = r ? "" : "none"
    }

    function M(e, t) {
        if (t.height == 0) return 0;
        var n = t.text.length,
            r, i = t;
        while (r = ir(i)) {
            var s = r.find();
            i = Ir(e, s.from.line), n += s.from.ch - s.to.ch
        }
        i = t;
        while (r = sr(i)) {
            var s = r.find();
            n -= i.text.length - s.from.ch, i = Ir(e, s.to.line), n += i.text.length - s.to.ch
        }
        return n
    }

    function _(e) {
        var t = e.display,
            n = e.doc;
        t.maxLine = Ir(n, n.first), t.maxLineLength = M(n, t.maxLine), t.maxLineChanged = !0, n.iter(function (e) {
            var r = M(n, e);
            r > t.maxLineLength && (t.maxLineLength = r, t.maxLine = e)
        })
    }

    function D(e) {
        var t = !1;
        for (var n = 0; n < e.gutters.length; ++n) e.gutters[n] == "CodeMirror-linenumbers" && (e.lineNumbers ? t = !0 : e.gutters.splice(n--, 1));
        !t && e.lineNumbers && e.gutters.push("CodeMirror-linenumbers")
    }

    function P(e, t) {
        var n = t + 2 * nt(e);
        e.sizer.style.minHeight = e.heightForcer.style.top = n + "px";
        var r = Math.max(n, e.scroller.scrollHeight),
            i = e.scroller.scrollWidth > e.scroller.clientWidth,
            s = r > e.scroller.clientHeight;
        s ? (e.scrollbarV.style.display = "block", e.scrollbarV.style.bottom = i ? zi(e.measure) + "px" : "0", e.scrollbarV.firstChild.style.height = r - e.scroller.clientHeight + e.scrollbarV.clientHeight + "px") : e.scrollbarV.style.display = "", i ? (e.scrollbarH.style.display = "block", e.scrollbarH.style.right = s ? zi(e.measure) + "px" : "0", e.scrollbarH.firstChild.style.width = e.scroller.scrollWidth - e.scroller.clientWidth + e.scrollbarH.clientWidth + "px") : e.scrollbarH.style.display = "", i && s ? (e.scrollbarFiller.style.display = "block", e.scrollbarFiller.style.height = e.scrollbarFiller.style.width = zi(e.measure) + "px") : e.scrollbarFiller.style.display = "", l && zi(e.measure) === 0 && (e.scrollbarV.style.minWidth = e.scrollbarH.style.minHeight = c ? "18px" : "12px")
    }

    function H(e, t, n) {
        var r = e.scroller.scrollTop,
            i = e.wrapper.clientHeight;
        typeof n == "number" ? r = n : n && (r = n.top, i = n.bottom - n.top), r = Math.floor(r - nt(e));
        var s = Math.ceil(r + i);
        return {
            from: Xr(t, r),
            to: Xr(t, s)
        }
    }

    function B(e) {
        var t = e.display;
        if (!t.alignWidgets && (!t.gutters.firstChild || !e.options.fixedGutter)) return;
        var n = I(t) - t.scroller.scrollLeft + e.doc.scrollLeft,
            r = t.gutters.offsetWidth,
            i = n + "px";
        for (var s = t.lineDiv.firstChild; s; s = s.nextSibling)
            if (s.alignable)
                for (var o = 0, u = s.alignable; o < u.length; ++o) u[o].style.left = i;
        e.options.fixedGutter && (t.gutters.style.left = n + r + "px")
    }

    function j(e) {
        if (!e.options.lineNumbers) return !1;
        var t = e.doc,
            n = F(e.options, t.first + t.size - 1),
            r = e.display;
        if (n.length != r.lineNumChars) {
            var i = r.measure.appendChild(Bi("div", [Bi("div", n)], "CodeMirror-linenumber CodeMirror-gutter-elt")),
                s = i.firstChild.offsetWidth,
                o = i.offsetWidth - s;
            return r.lineGutter.style.width = "", r.lineNumInnerWidth = Math.max(s, r.lineGutter.offsetWidth - o), r.lineNumWidth = r.lineNumInnerWidth + o, r.lineNumChars = r.lineNumInnerWidth ? n.length : -1, r.lineGutter.style.width = r.lineNumWidth + "px", !0
        }
        return !1
    }

    function F(e, t) {
        return String(e.lineNumberFormatter(t + e.firstLineNumber))
    }

    function I(e) {
        return e.scroller.getBoundingClientRect().left - e.sizer.getBoundingClientRect().left
    }

    function q(e, t, n) {
        var r = e.display.showingFrom,
            i = e.display.showingTo,
            s = R(e, t, n);
        return s && (gi(e, "update", e), (e.display.showingFrom != r || e.display.showingTo != i) && gi(e, "viewportChange", e, e.display.showingFrom, e.display.showingTo)), J(e), P(e.display, e.doc.height), s
    }

    function R(e, t, r) {
        var i = e.display,
            s = e.doc;
        if (!i.wrapper.clientWidth) {
            i.showingFrom = i.showingTo = s.first, i.viewOffset = 0;
            return
        }
        var o = H(i, s, r);
        if (t.length == 0 && o.from > i.showingFrom && o.to < i.showingTo) return;
        j(e) && (t = [{
            from: s.first,
            to: s.first + s.size
        }]);
        var u = i.sizer.style.marginLeft = i.gutters.offsetWidth + "px";
        i.scrollbarH.style.left = e.options.fixedGutter ? u : "0";
        if (w)
            for (var a = 0; a < t.length; ++a) {
                var f = t[a],
                    l;
                while (l = ir(Ir(s, f.from))) {
                    var c = l.find().from.line;
                    f.diff && (f.diff -= f.from - c), f.from = c
                }
            }
        var h = Infinity;
        if (e.options.lineNumbers)
            for (var a = 0; a < t.length; ++a)
                if (t[a].diff) {
                    h = t[a].from;
                    break
                }
        var p = s.first + s.size,
            c = Math.max(o.from - e.options.viewportMargin, s.first),
            d = Math.min(p, o.to + e.options.viewportMargin);
        i.showingFrom < c && c - i.showingFrom < 20 && (c = Math.max(s.first, i.showingFrom)), i.showingTo > d && i.showingTo - d < 20 && (d = Math.min(p, i.showingTo));
        if (w) {
            c = zr(or(s, Ir(s, c)));
            while (d < p && ur(Ir(s, d)))++d
        }
        var v = z([{
                from: i.showingFrom,
                to: i.showingTo
            }], t),
            m = 0;
        for (var a = 0; a < v.length; ++a) {
            var g = v[a];
            g.from < c && (g.from = c), g.to > d && (g.to = d), g.from >= g.to ? v.splice(a--, 1) : m += g.to - g.from
        }
        if (m == d - c && c == i.showingFrom && d == i.showingTo) {
            U(e);
            return
        }
        v.sort(function (e, t) {
            return e.from - t.from
        });
        var y = document.activeElement;
        m < (d - c) * .7 && (i.lineDiv.style.display = "none"), X(e, c, d, v, h), i.lineDiv.style.display = "", document.activeElement != y && y.offsetHeight && y.focus();
        var b = c != i.showingFrom || d != i.showingTo || i.lastSizeC != i.wrapper.clientHeight;
        b && (i.lastSizeC = i.wrapper.clientHeight), i.showingFrom = c, i.showingTo = d, Y(e, 100);
        var E = i.lineDiv.offsetTop;
        for (var S = i.lineDiv.firstChild, x; S; S = S.nextSibling)
            if (S.lineObj) {
                if (n) {
                    var T = S.offsetTop + S.offsetHeight;
                    x = T - E, E = T
                } else {
                    var N = S.getBoundingClientRect();
                    x = N.bottom - N.top
                }
                var C = S.lineObj.height - x;
                x < 2 && (x = dt(i));
                if (C > .001 || C < -0.001) {
                    Ur(S.lineObj, x);
                    var k = S.lineObj.widgets;
                    if (k)
                        for (var a = 0; a < k.length; ++a) k[a].height = k[a].node.offsetHeight
                }
            }
        return U(e), H(i, s, r).to >= d && R(e, [], r), !0
    }

    function U(e) {
        var t = e.display.viewOffset = Vr(e, Ir(e.doc, e.display.showingFrom));
        e.display.mover.style.top = t + "px"
    }

    function z(e, t) {
        for (var n = 0, r = t.length || 0; n < r; ++n) {
            var i = t[n],
                s = [],
                o = i.diff || 0;
            for (var u = 0, a = e.length; u < a; ++u) {
                var f = e[u];
                i.to <= f.from && i.diff ? s.push({
                    from: f.from + o,
                    to: f.to + o
                }) : i.to <= f.from || i.from >= f.to ? s.push(f) : (i.from > f.from && s.push({
                    from: f.from,
                    to: i.from
                }), i.to < f.to && s.push({
                    from: i.to + o,
                    to: f.to + o
                }))
            }
            e = s
        }
        return e
    }

    function W(e) {
        var t = e.display,
            n = {},
            r = {};
        for (var i = t.gutters.firstChild, s = 0; i; i = i.nextSibling, ++s) n[e.options.gutters[s]] = i.offsetLeft, r[e.options.gutters[s]] = i.offsetWidth;
        return {
            fixedPos: I(t),
            gutterTotalWidth: t.gutters.offsetWidth,
            gutterLeft: n,
            gutterWidth: r,
            wrapperWidth: t.wrapper.clientWidth
        }
    }

    function X(e, t, n, r, s) {
        function c(t) {
            var n = t.nextSibling;
            return i && v && e.display.currentWheelTarget == t ? (t.style.display = "none", t.lineObj = null) : t.parentNode.removeChild(t), n
        }
        var o = W(e),
            u = e.display,
            a = e.options.lineNumbers;
        !r.length && (!i || !e.display.currentWheelTarget) && ji(u.lineDiv);
        var f = u.lineDiv,
            l = f.firstChild,
            h = r.shift(),
            p = t;
        e.doc.iter(t, n, function (t) {
            h && h.to == p && (h = r.shift());
            if (ur(t)) {
                t.height != 0 && Ur(t, 0);
                if (t.widgets && l.previousSibling)
                    for (var n = 0; n < t.widgets.length; ++n)
                        if (t.widgets[n].showIfHidden) {
                            var i = l.previousSibling;
                            if (/pre/i.test(i.nodeName)) {
                                var u = Bi("div", null, null, "position: relative");
                                i.parentNode.replaceChild(u, i), u.appendChild(i), i = u
                            }
                            i.appendChild($(t.widgets[n], i, o))
                        }
            } else if (h && h.from <= p && h.to > p) {
                while (l.lineObj != t) l = c(l);
                a && s <= p && l.lineNumber && Ii(l.lineNumber, F(e.options, p)), l = l.nextSibling
            } else {
                if (t.widgets)
                    for (var d = 0, v = l, m; v && d < 20; ++d, v = v.nextSibling)
                        if (v.lineObj == t && /div/i.test(v.nodeName)) {
                            m = v;
                            break
                        }
                var g = V(e, t, p, o, m);
                if (g != m) f.insertBefore(g, l);
                else {
                    while (l != m) l = c(l);
                    l = l.nextSibling
                }
                g.lineObj = t
            }++p
        });
        while (l) l = c(l)
    }

    function V(e, t, r, i, s) {
        var o = Tr(e, t),
            u = t.gutterMarkers,
            a = e.display,
            f;
        if (!e.options.lineNumbers && !u && !t.bgClass && !t.wrapClass && !t.widgets) return o;
        if (s) {
            var l = !0,
                c = 0;
            for (var h = s.firstChild, p; h; h = p) {
                p = h.nextSibling;
                if (!/\bCodeMirror-linewidget\b/.test(h.className)) s.removeChild(h);
                else {
                    for (var d = 0, v = !0; d < t.widgets.length; ++d) {
                        var m = t.widgets[d],
                            g = !1;
                        m.above || (g = v, v = !1);
                        if (m.node == h.firstChild) {
                            c++, g && s.insertBefore(o, h);
                            break
                        }
                    }
                    if (d == t.widgets.length) {
                        l = !1;
                        break
                    }
                }
            }
            l && c == t.widgets.length && (f = s, s.className = t.wrapClass || "", s.alignable = null)
        }
        f || (f = Bi("div", null, t.wrapClass, "position: relative"), f.appendChild(o)), t.bgClass && f.insertBefore(Bi("div", "\u00a0", t.bgClass + " CodeMirror-linebackground"), f.firstChild);
        if (e.options.lineNumbers || u) {
            var y = f.insertBefore(Bi("div", null, null, "position: absolute; left: " + (e.options.fixedGutter ? i.fixedPos : -i.gutterTotalWidth) + "px"), f.firstChild);
            e.options.fixedGutter && (f.alignable = [y]), e.options.lineNumbers && (!u || !u["CodeMirror-linenumbers"]) && (f.lineNumber = y.appendChild(Bi("div", F(e.options, r), "CodeMirror-linenumber CodeMirror-gutter-elt", "left: " + i.gutterLeft["CodeMirror-linenumbers"] + "px; width: " + a.lineNumInnerWidth + "px")));
            if (u)
                for (var b = 0; b < e.options.gutters.length; ++b) {
                    var w = e.options.gutters[b],
                        E = u.hasOwnProperty(w) && u[w];
                    E && y.appendChild(Bi("div", [E], "CodeMirror-gutter-elt", "left: " + i.gutterLeft[w] + "px; width: " + i.gutterWidth[w] + "px"))
                }
        }
        n && (f.style.zIndex = 2);
        if (t.widgets && f != s)
            for (var d = 0, S = t.widgets; d < S.length; ++d) {
                var m = S[d],
                    x = $(m, f, i);
                m.above ? f.insertBefore(x, e.options.lineNumbers && t.height != 0 ? y : o) : f.appendChild(x), gi(m, "redraw")
            }
        return f
    }

    function $(e, t, n) {
        var r = Bi("div", [e.node], "CodeMirror-linewidget");
        r.widget = e;
        if (e.noHScroll) {
            (t.alignable || (t.alignable = [])).push(r);
            var i = n.wrapperWidth;
            r.style.left = n.fixedPos + "px", e.coverGutter || (i -= n.gutterTotalWidth, r.style.paddingLeft = n.gutterTotalWidth + "px"), r.style.width = i + "px"
        }
        return e.coverGutter && (r.style.zIndex = 5, r.style.position = "relative", e.noHScroll || (r.style.marginLeft = -n.gutterTotalWidth + "px")), r
    }

    function J(e) {
        var t = e.display,
            n = ln(e.doc.sel.from, e.doc.sel.to);
        n || e.options.showCursorWhenSelecting ? K(e) : t.cursor.style.display = t.otherCursor.style.display = "none", n ? t.selectionDiv.style.display = "none" : Q(e);
        var r = lt(e, e.doc.sel.head, "div"),
            i = t.wrapper.getBoundingClientRect(),
            s = t.lineDiv.getBoundingClientRect();
        t.inputDiv.style.top = Math.max(0, Math.min(t.wrapper.clientHeight - 10, r.top + s.top - i.top)) + "px", t.inputDiv.style.left = Math.max(0, Math.min(t.wrapper.clientWidth - 10, r.left + s.left - i.left)) + "px"
    }

    function K(e) {
        var t = e.display,
            n = lt(e, e.doc.sel.head, "div");
        t.cursor.style.left = n.left + "px", t.cursor.style.top = n.top + "px", t.cursor.style.height = Math.max(0, n.bottom - n.top) * e.options.cursorHeight + "px", t.cursor.style.display = "", n.other ? (t.otherCursor.style.display = "", t.otherCursor.style.left = n.other.left + "px", t.otherCursor.style.top = n.other.top + "px", t.otherCursor.style.height = (n.other.bottom - n.other.top) * .85 + "px") : t.otherCursor.style.display = "none"
    }

    function Q(e) {
        function u(e, t, n, r) {
            t < 0 && (t = 0), i.appendChild(Bi("div", null, "CodeMirror-selected", "position: absolute; left: " + e + "px; top: " + t + "px; width: " + (n == null ? s - e : n) + "px; height: " + (r - t) + "px"))
        }

        function a(t, r, i, a) {
            function h(n) {
                return ft(e, {
                    line: t,
                    ch: n
                }, "div", f)
            }
            var f = Ir(n, t),
                l = f.text.length,
                c = a ? Infinity : -Infinity;
            return Qi($r(f), r || 0, i == null ? l : i, function (e, t, n) {
                var f = h(n == "rtl" ? t - 1 : e),
                    p = h(n == "rtl" ? e : t - 1),
                    d = f.left,
                    v = p.right;
                p.top - f.top > 3 && (u(d, f.top, null, f.bottom), d = o, f.bottom < p.top && u(d, f.bottom, null, p.top)), i == null && t == l && (v = s), r == null && e == 0 && (d = o), c = a ? Math.min(p.top, c) : Math.max(p.bottom, c), d < o + 1 && (d = o), u(d, p.top, v - d, p.bottom)
            }), c
        }
        var t = e.display,
            n = e.doc,
            r = e.doc.sel,
            i = document.createDocumentFragment(),
            s = t.lineSpace.offsetWidth,
            o = rt(e.display);
        if (r.from.line == r.to.line) a(r.from.line, r.from.ch, r.to.ch);
        else {
            var f = Ir(n, r.from.line),
                l = f,
                c, h = [r.from.line, r.from.ch],
                p;
            while (c = sr(l)) {
                var d = c.find();
                h.push(d.from.ch, d.to.line, d.to.ch);
                if (d.to.line == r.to.line) {
                    h.push(r.to.ch), p = !0;
                    break
                }
                l = Ir(n, d.to.line)
            }
            if (p)
                for (var v = 0; v < h.length; v += 3) a(h[v], h[v + 1], h[v + 2]);
            else {
                var m, g, y = Ir(n, r.to.line);
                r.from.ch ? m = a(r.from.line, r.from.ch, null, !1) : m = Vr(e, f) - t.viewOffset, r.to.ch ? g = a(r.to.line, ir(y) ? null : 0, r.to.ch, !0) : g = Vr(e, y) - t.viewOffset, m < g && u(o, m, null, g)
            }
        }
        Fi(t.selectionDiv, i), t.selectionDiv.style.display = ""
    }

    function G(e) {
        var t = e.display;
        clearInterval(t.blinker);
        var n = !0;
        t.cursor.style.visibility = t.otherCursor.style.visibility = "", t.blinker = setInterval(function () {
            if (!t.cursor.offsetHeight) return;
            t.cursor.style.visibility = t.otherCursor.style.visibility = (n = !n) ? "" : "hidden"
        }, e.options.cursorBlinkRate)
    }

    function Y(e, t) {
        e.doc.mode.startState && e.doc.frontier < e.display.showingTo && e.state.highlight.set(t, Mi(Z, e))
    }

    function Z(e) {
        var t = e.doc;
        t.frontier < t.first && (t.frontier = t.first);
        if (t.frontier >= e.display.showingTo) return;
        var n = +(new Date) + e.options.workTime,
            r = jn(t.mode, tt(e, t.frontier)),
            i = [],
            s;
        t.iter(t.frontier, Math.min(t.first + t.size, e.display.showingTo + 500), function (o) {
            if (t.frontier >= e.display.showingFrom) {
                var u = o.styles;
                o.styles = br(e, o, r);
                var a = !u || u.length != o.styles.length;
                for (var f = 0; !a && f < u.length; ++f) a = u[f] != o.styles[f];
                a && (s && s.end == t.frontier ? s.end++ : i.push(s = {
                    start: t.frontier,
                    end: t.frontier + 1
                })), o.stateAfter = jn(t.mode, r)
            } else Er(e, o, r), o.stateAfter = t.frontier % 5 == 0 ? jn(t.mode, r) : null;
            ++t.frontier;
            if (+(new Date) > n) return Y(e, e.options.workDelay), !0
        }), i.length && yt(e, function () {
            for (var e = 0; e < i.length; ++e) Et(this, i[e].start, i[e].end)
        })()
    }

    function et(e, t) {
        var n, r, i = e.doc;
        for (var s = t, o = t - 100; s > o; --s) {
            if (s <= i.first) return i.first;
            var u = Ir(i, s - 1);
            if (u.stateAfter) return s;
            var a = Si(u.text, null, e.options.tabSize);
            if (r == null || n > a) r = s - 1, n = a
        }
        return r
    }

    function tt(e, t) {
        var n = e.doc,
            r = e.display;
        if (!n.mode.startState) return !0;
        var i = et(e, t),
            s = i > n.first && Ir(n, i - 1).stateAfter;
        return s ? s = jn(n.mode, s) : s = Fn(n.mode), n.iter(i, t, function (o) {
            Er(e, o, s);
            var u = i == t - 1 || i % 5 == 0 || i >= r.showingFrom && i < r.showingTo;
            o.stateAfter = u ? jn(n.mode, s) : null, ++i
        }), s
    }

    function nt(e) {
        return e.lineSpace.offsetTop
    }

    function rt(e) {
        var t = Fi(e.measure, Bi("pre")).appendChild(Bi("span", "x"));
        return t.offsetLeft
    }

    function it(e, t, n, r) {
        var i = -1;
        r = r || st(e, t);
        for (var s = n;; s += i) {
            var o = r[s];
            if (o) break;
            i < 0 && s == 0 && (i = 1)
        }
        return {
            left: s < n ? o.right : o.left,
            right: s > n ? o.left : o.right,
            top: o.top,
            bottom: o.bottom
        }
    }

    function st(e, t) {
        var n = e.display,
            r = e.display.measureLineCache;
        for (var i = 0; i < r.length; ++i) {
            var s = r[i];
            if (s.text == t.text && s.markedSpans == t.markedSpans && n.scroller.clientWidth == s.width) return s.measure
        }
        var o = ot(e, t),
            s = {
                text: t.text,
                width: n.scroller.clientWidth,
                markedSpans: t.markedSpans,
                measure: o
            };
        return r.length == 16 ? r[++n.measureLineCachePos % 16] = s : r.push(s), o
    }

    function ot(e, r) {
        var i = e.display,
            s = Oi(r.text.length),
            o = Tr(e, r, s);
        if (t && !n && !e.options.lineWrapping && o.childNodes.length > 100) {
            var u = document.createDocumentFragment(),
                a = 10,
                f = o.childNodes.length;
            for (var l = 0, c = Math.ceil(f / a); l < c; ++l) {
                var h = Bi("div", null, null, "display: inline-block");
                for (var p = 0; p < a && f; ++p) h.appendChild(o.firstChild), --f;
                u.appendChild(h)
            }
            o.appendChild(u)
        }
        Fi(i.measure, o);
        var d = i.lineDiv.getBoundingClientRect(),
            v = [],
            m = Oi(r.text.length),
            g = o.offsetHeight;
        for (var l = 0, y; l < s.length; ++l)
            if (y = s[l]) {
                var b = y.getBoundingClientRect(),
                    w = Math.max(0, b.top - d.top),
                    E = Math.min(b.bottom - d.top, g);
                for (var p = 0; p < v.length; p += 2) {
                    var S = v[p],
                        x = v[p + 1];
                    if (S > E || x < w) continue;
                    if (S <= w && x >= E || w <= S && E >= x || Math.min(E, x) - Math.max(w, S) >= E - w >> 1) {
                        v[p] = Math.min(w, S), v[p + 1] = Math.max(E, x);
                        break
                    }
                }
                p == v.length && v.push(w, E), m[l] = {
                    left: b.left - d.left,
                    right: b.right - d.left,
                    top: p
                }
            }
        for (var l = 0, y; l < m.length; ++l)
            if (y = m[l]) {
                var T = y.top;
                y.top = v[T], y.bottom = v[T + 1]
            }
        return m
    }

    function ut(e) {
        e.display.measureLineCache.length = e.display.measureLineCachePos = 0, e.display.cachedCharWidth = e.display.cachedTextHeight = null, e.display.maxLineChanged = !0, e.display.lineNumChars = null
    }

    function at(e, t, n, r) {
        if (t.widgets)
            for (var i = 0; i < t.widgets.length; ++i)
                if (t.widgets[i].above) {
                    var s = pr(t.widgets[i]);
                    n.top += s, n.bottom += s
                }
        if (r == "line") return n;
        r || (r = "local");
        var o = Vr(e, t);
        r != "local" && (o -= e.display.viewOffset);
        if (r == "page") {
            var u = e.display.lineSpace.getBoundingClientRect();
            o += u.top + (window.pageYOffset || (document.documentElement || document.body).scrollTop);
            var a = u.left + (window.pageXOffset || (document.documentElement || document.body).scrollLeft);
            n.left += a, n.right += a
        }
        return n.top += o, n.bottom += o, n
    }

    function ft(e, t, n, r) {
        return r || (r = Ir(e.doc, t.line)), at(e, r, it(e, r, t.ch), n)
    }

    function lt(e, t, n, r, i) {
        function s(t, s) {
            var o = it(e, r, t, i);
            return s ? o.left = o.right : o.right = o.left, at(e, r, o, n)
        }
        r = r || Ir(e.doc, t.line), i || (i = st(e, r));
        var o = $r(r),
            u = t.ch;
        if (!o) return s(u);
        var a, f, l = o[0].level;
        for (var c = 0; c < o.length; ++c) {
            var h = o[c],
                p = h.level % 2,
                d, v;
            if (h.from < u && h.to > u) return s(u, p);
            var m = p ? h.to : h.from,
                g = p ? h.from : h.to;
            if (m == u) c && h.level < (d = o[c - 1]).level ? v = s(d.level % 2 ? d.from : d.to - 1, !0) : v = s(p && h.from != h.to ? u - 1 : u), p == l ? a = v : f = v;
            else if (g == u) {
                var d = c < o.length - 1 && o[c + 1];
                if (!p && d && d.from == d.to) continue;
                d && h.level < d.level ? v = s(d.level % 2 ? d.to - 1 : d.from) : v = s(p ? u : u - 1, !0), p == l ? a = v : f = v
            }
        }
        return l && !u && (f = s(o[0].to - 1)), a ? (f && (a.other = f), a) : f
    }

    function ct(e, t, n) {
        var r = e.doc;
        n += e.display.viewOffset;
        if (n < 0) return {
            line: r.first,
            ch: 0,
            outside: !0
        };
        var i = Xr(r, n),
            s = r.first + r.size - 1;
        if (i > s) return {
            line: r.size - 1,
            ch: Ir(r, s).text.length
        };
        t < 0 && (t = 0);
        for (;;) {
            var o = Ir(r, i),
                u = ht(e, o, i, t, n),
                a = sr(o),
                f = a && a.find();
            if (!(a && u.ch >= f.from.ch)) return u;
            i = f.to.line
        }
    }

    function ht(e, t, n, r, i) {
        function f(r) {
            var i = lt(e, {
                line: n,
                ch: r
            }, "line", t, a);
            return o = !0, s > i.bottom ? Math.max(0, i.left - u) : s < i.top ? i.left + u : (o = !1, i.left)
        }
        var s = i - Vr(e, t),
            o = !1,
            u = e.display.wrapper.clientWidth,
            a = st(e, t),
            l = $r(t),
            c = t.text.length,
            h = Zi(t),
            p = es(t),
            d = rt(e.display),
            v = f(p);
        if (r > v) return {
            line: n,
            ch: p,
            outside: o
        };
        for (;;) {
            if (l ? p == h || p == rs(t, h, 1) : p - h <= 1) {
                var m = r - d < v - r,
                    g = m ? h : p;
                while (Hi.test(t.text.charAt(g)))++g;
                return {
                    line: n,
                    ch: g,
                    after: m,
                    outside: o
                }
            }
            var y = Math.ceil(c / 2),
                b = h + y;
            if (l) {
                b = h;
                for (var w = 0; w < y; ++w) b = rs(t, b, 1)
            }
            var E = f(b);
            E > r ? (p = b, v = E, o && (v += 1e3), c -= y) : (h = b, d = E, c = y)
        }
    }

    function dt(e) {
        if (e.cachedTextHeight != null) return e.cachedTextHeight;
        if (pt == null) {
            pt = Bi("pre");
            for (var t = 0; t < 49; ++t) pt.appendChild(document.createTextNode("x")), pt.appendChild(Bi("br"));
            pt.appendChild(document.createTextNode("x"))
        }
        Fi(e.measure, pt);
        var n = pt.offsetHeight / 50;
        return n > 3 && (e.cachedTextHeight = n), ji(e.measure), n || 1
    }

    function vt(e) {
        if (e.cachedCharWidth != null) return e.cachedCharWidth;
        var t = Bi("span", "x"),
            n = Bi("pre", [t]);
        Fi(e.measure, n);
        var r = t.offsetWidth;
        return r > 2 && (e.cachedCharWidth = r), r || 10
    }

    function mt(e) {
        e.curOp = {
            changes: [],
            updateInput: null,
            userSelChange: null,
            textChanged: null,
            selectionChanged: !1,
            updateMaxLine: !1,
            updateScrollPos: !1,
            id: ++e.nextOpId
        }, mi++ || (vi = [])
    }

    function gt(e) {
        var t = e.curOp,
            n = e.doc,
            r;
        --mi || (r = vi, vi = null), e.curOp = null;
        var i = e.display;
        t.updateMaxLine && _(e);
        if (e.display.maxLineChanged && !e.options.lineWrapping) {
            var s = it(e, e.display.maxLine, e.display.maxLine.text.length).right;
            i.sizer.style.minWidth = s + 3 + bi + "px", e.display.maxLineChanged = !1;
            var o = Math.max(0, i.sizer.offsetLeft + i.sizer.offsetWidth - i.scroller.clientWidth);
            o < n.scrollLeft && !t.updateScrollPos && Ft(e, Math.min(i.scroller.scrollLeft, o), !0)
        }
        var u, a;
        if (t.updateScrollPos) u = t.updateScrollPos;
        else if (t.selectionChanged) {
            var f = lt(e, n.sel.head);
            u = xn(e, f.left, f.top, f.left, f.bottom)
        }
        if (t.changes.length || u && u.scrollTop != null) a = q(e, t.changes, u && u.scrollTop);
        !a && t.selectionChanged && J(e), t.updateScrollPos ? (e.display.scroller.scrollTop = e.display.scrollbarV.scrollTop = n.scrollTop = u.scrollTop, e.display.scroller.scrollLeft = e.display.scrollbarH.scrollLeft = n.scrollLeft = u.scrollLeft, B(e)) : u && wn(e), t.selectionChanged && G(e), e.state.focused && t.updateInput && Nt(e, t.userSelChange);
        var l = t.maybeHiddenMarkers,
            c = t.maybeUnhiddenMarkers;
        if (l)
            for (var h = 0; h < l.length; ++h) l[h].lines.length || di(l[h], "hide");
        if (c)
            for (var h = 0; h < c.length; ++h) c[h].lines.length && di(c[h], "unhide");
        t.textChanged && di(e, "change", e, t.textChanged), t.selectionChanged && di(e, "cursorActivity", e);
        if (r)
            for (var h = 0; h < r.length; ++h) r[h](e)
    }

    function yt(e, t) {
        return function () {
            var n = e || this,
                r = !n.curOp;
            r && mt(n);
            try {
                var i = t.apply(n, arguments)
            } finally {
                r && gt(n)
            }
            return i
        }
    }

    function bt(e) {
        return function () {
            var t = this.cm && !this.cm.curOp,
                n;
            t && mt(this.cm);
            try {
                n = e.apply(this, arguments)
            } finally {
                t && gt(this.cm)
            }
            return n
        }
    }

    function wt(e, t) {
        var n = !e.curOp,
            r;
        n && mt(e);
        try {
            r = t()
        } finally {
            n && gt(e)
        }
        return r
    }

    function Et(e, t, n, r) {
        t == null && (t = e.doc.first), n == null && (n = e.doc.first + e.doc.size), e.curOp.changes.push({
            from: t,
            to: n,
            diff: r
        })
    }

    function St(e) {
        if (e.display.pollingFast) return;
        e.display.poll.set(e.options.pollInterval, function () {
            Tt(e), e.state.focused && St(e)
        })
    }

    function xt(e) {
        function n() {
            var r = Tt(e);
            !r && !t ? (t = !0, e.display.poll.set(60, n)) : (e.display.pollingFast = !1, St(e))
        }
        var t = !1;
        e.display.pollingFast = !0, e.display.poll.set(20, n)
    }

    function Tt(e) {
        var t = e.display.input,
            n = e.display.prevInput,
            r = e.doc,
            i = r.sel;
        if (!e.state.focused || $i(t) || kt(e)) return !1;
        var s = t.value;
        if (s == n && ln(i.from, i.to)) return !1;
        var o = !e.curOp;
        o && mt(e), i.shift = !1;
        var u = 0,
            a = Math.min(n.length, s.length);
        while (u < a && n[u] == s[u])++u;
        var f = i.from,
            l = i.to;
        u < n.length ? f = {
            line: f.line,
            ch: f.ch - (n.length - u)
        } : e.state.overwrite && ln(f, l) && !e.state.pasteIncoming && (l = {
            line: l.line,
            ch: Math.min(Ir(r, l.line).text.length, l.ch + (s.length - u))
        });
        var c = e.curOp.updateInput;
        return nn(e.doc, {
            from: f,
            to: l,
            text: Vi(s.slice(u)),
            origin: e.state.pasteIncoming ? "paste" : "input"
        }, "end"), e.curOp.updateInput = c, s.length > 1e3 ? t.value = e.display.prevInput = "" : e.display.prevInput = s, o && gt(e), e.state.pasteIncoming = !1, !0
    }

    function Nt(e, t) {
        var n, r, i = e.doc;
        ln(i.sel.from, i.sel.to) ? t && (e.display.prevInput = e.display.input.value = "") : (e.display.prevInput = "", n = Ji && (i.sel.to.line - i.sel.from.line > 100 || (r = e.getSelection()).length > 1e3), n ? e.display.input.value = "-" : e.display.input.value = r || e.getSelection(), e.state.focused && Ci(e.display.input)), e.display.inaccurateSelection = n
    }

    function Ct(e) {
        e.options.readOnly != "nocursor" && (t || document.activeElement != e.display.input) && e.display.input.focus()
    }

    function kt(e) {
        return e.options.readOnly || e.doc.cantEdit
    }

    function Lt(t) {
        function r() {
            t.state.focused && setTimeout(Mi(Ct, t), 0)
        }

        function i() {
            n.cachedCharWidth = n.cachedTextHeight = null, ut(t), wt(t, Mi(Et, t))
        }

        function s() {
            for (var e = n.wrapper.parentNode; e && e != document.body; e = e.parentNode);
            e ? setTimeout(s, 5e3) : pi(window, "resize", i)
        }

        function o(e) {
            if (t.options.onDragEvent && t.options.onDragEvent(t, si(e))) return;
            ai(e)
        }

        function u() {
            n.inaccurateSelection && (n.prevInput = "", n.inaccurateSelection = !1, n.input.value = t.getSelection(), Ci(n.input))
        }
        var n = t.display;
        hi(n.scroller, "mousedown", yt(t, Dt)), hi(n.scroller, "dblclick", yt(t, oi)), hi(n.lineSpace, "selectstart", function (e) {
            At(n, e) || oi(e)
        }), e || hi(n.scroller, "contextmenu", function (e) {
            Zt(t, e)
        }), hi(n.scroller, "scroll", function () {
            jt(t, n.scroller.scrollTop), Ft(t, n.scroller.scrollLeft, !0), di(t, "scroll", t)
        }), hi(n.scrollbarV, "scroll", function () {
            jt(t, n.scrollbarV.scrollTop)
        }), hi(n.scrollbarH, "scroll", function () {
            Ft(t, n.scrollbarH.scrollLeft)
        }), hi(n.scroller, "mousewheel", function (e) {
            Rt(t, e)
        }), hi(n.scroller, "DOMMouseScroll", function (e) {
            Rt(t, e)
        }), hi(n.scrollbarH, "mousedown", r), hi(n.scrollbarV, "mousedown", r), hi(n.wrapper, "scroll", function () {
            n.wrapper.scrollTop = n.wrapper.scrollLeft = 0
        }), hi(window, "resize", i), setTimeout(s, 5e3), hi(n.input, "keyup", yt(t, function (e) {
            if (t.options.onKeyEvent && t.options.onKeyEvent(t, si(e))) return;
            ci(e, "keyCode") == 16 && (t.doc.sel.shift = !1)
        })), hi(n.input, "input", Mi(xt, t)), hi(n.input, "keydown", yt(t, Jt)), hi(n.input, "keypress", yt(t, Kt)), hi(n.input, "focus", Mi(Qt, t)), hi(n.input, "blur", Mi(Gt, t)), t.options.dragDrop && (hi(n.scroller, "dragstart", function (e) {
            Bt(t, e)
        }), hi(n.scroller, "dragenter", o), hi(n.scroller, "dragover", o), hi(n.scroller, "drop", yt(t, Pt))), hi(n.scroller, "paste", function (e) {
            if (At(n, e)) return;
            Ct(t), xt(t)
        }), hi(n.input, "paste", function () {
            t.state.pasteIncoming = !0, xt(t)
        }), hi(n.input, "cut", u), hi(n.input, "copy", u), f && hi(n.sizer, "mouseup", function () {
            document.activeElement == n.input && n.input.blur(), Ct(t)
        })
    }

    function At(e, t) {
        for (var n = fi(t); n != e.wrapper; n = n.parentNode) {
            if (!n) return !0;
            if (/\bCodeMirror-(?:line)?widget\b/.test(n.className) || n.parentNode == e.sizer && n != e.mover) return !0
        }
    }

    function Ot(e, t, n) {
        var r = e.display;
        if (!n) {
            var i = fi(t);
            if (i == r.scrollbarH || i == r.scrollbarH.firstChild || i == r.scrollbarV || i == r.scrollbarV.firstChild || i == r.scrollbarFiller) return null
        }
        var s, o, u = r.lineSpace.getBoundingClientRect();
        try {
            s = t.clientX, o = t.clientY
        } catch (t) {
            return null
        }
        return ct(e, s - u.left, o - u.top)
    }

    function Dt(n) {
        function m(e) {
            if (l == "single") {
                mn(r.doc, dn(o, a), e);
                return
            }
            d = dn(o, d), v = dn(o, v);
            if (l == "double") {
                var t = kn(Ir(o, e.line).text, e);
                cn(e, d) ? mn(r.doc, t.from, v) : mn(r.doc, d, t.to)
            } else l == "triple" && (cn(e, d) ? mn(r.doc, v, dn(o, {
                line: e.line,
                ch: 0
            })) : mn(r.doc, d, dn(o, {
                line: e.line + 1,
                ch: 0
            })))
        }

        function b(e) {
            var t = ++y,
                n = Ot(r, e, !0);
            if (!n) return;
            if (!ln(n, h)) {
                r.state.focused || Qt(r), h = n, m(n);
                var i = H(s, o);
                (n.line >= i.to || n.line < i.from) && setTimeout(yt(r, function () {
                    y == t && b(e)
                }), 150)
            } else {
                var u = e.clientY < g.top ? -20 : e.clientY > g.bottom ? 20 : 0;
                u && setTimeout(yt(r, function () {
                    if (y != t) return;
                    s.scroller.scrollTop += u, b(e)
                }), 50)
            }
        }

        function w(e) {
            y = Infinity;
            var t = Ot(r, e);
            t && m(t), oi(e), Ct(r), pi(document, "mousemove", E), pi(document, "mouseup", S)
        }
        var r = this,
            s = r.display,
            o = r.doc,
            u = o.sel;
        u.shift = ci(n, "shiftKey");
        if (At(s, n)) {
            i || (s.scroller.draggable = !1, setTimeout(function () {
                s.scroller.draggable = !0
            }, 100));
            return
        }
        if (Ht(r, n)) return;
        var a = Ot(r, n);
        switch (li(n)) {
        case 3:
            e && Zt.call(r, r, n);
            return;
        case 2:
            a && mn(r.doc, a), setTimeout(Mi(Ct, r), 20), oi(n);
            return
        }
        if (!a) {
            fi(n) == s.scroller && oi(n);
            return
        }
        r.state.focused || Qt(r);
        var f = +(new Date),
            l = "single";
        if (_t && _t.time > f - 400 && ln(_t.pos, a)) l = "triple", oi(n), setTimeout(Mi(Ct, r), 20), Ln(r, a.line);
        else if (Mt && Mt.time > f - 400 && ln(Mt.pos, a)) {
            l = "double", _t = {
                time: f,
                pos: a
            }, oi(n);
            var c = kn(Ir(o, a.line).text, a);
            mn(r.doc, c.from, c.to)
        } else Mt = {
            time: f,
            pos: a
        };
        var h = a;
        if (r.options.dragDrop && qi && !kt(r) && !ln(u.from, u.to) && !cn(a, u.from) && !cn(u.to, a) && l == "single") {
            var p = yt(r, function (e) {
                i && (s.scroller.draggable = !1), r.state.draggingText = !1, pi(document, "mouseup", p), pi(s.scroller, "drop", p), Math.abs(n.clientX - e.clientX) + Math.abs(n.clientY - e.clientY) < 10 && (oi(e), mn(r.doc, a), Ct(r))
            });
            i && (s.scroller.draggable = !0), r.state.draggingText = p, s.scroller.dragDrop && s.scroller.dragDrop(), hi(document, "mouseup", p), hi(s.scroller, "drop", p);
            return
        }
        oi(n), l == "single" && mn(r.doc, dn(o, a));
        var d = u.from,
            v = u.to,
            g = s.wrapper.getBoundingClientRect(),
            y = 0,
            E = yt(r, function (e) {
                !t && !li(e) ? w(e) : b(e)
            }),
            S = yt(r, w);
        hi(document, "mousemove", E), hi(document, "mouseup", S)
    }

    function Pt(e) {
        var t = this;
        if (At(t.display, e) || t.options.onDragEvent && t.options.onDragEvent(t, si(e))) return;
        oi(e);
        var n = Ot(t, e, !0),
            r = e.dataTransfer.files;
        if (!n || kt(t)) return;
        if (r && r.length && window.FileReader && window.File) {
            var i = r.length,
                s = Array(i),
                o = 0,
                u = function (e, r) {
                    var u = new FileReader;
                    u.onload = function () {
                        s[r] = u.result, ++o == i && (n = dn(t.doc, n), fn(t.doc, s.join(""), n, "around", "paste"))
                    }, u.readAsText(e)
                };
            for (var a = 0; a < i; ++a) u(r[a], a)
        } else {
            if (t.state.draggingText && !cn(n, t.doc.sel.from) && !cn(t.doc.sel.to, n)) {
                t.state.draggingText(e), setTimeout(Mi(Ct, t), 20);
                return
            }
            try {
                var s = e.dataTransfer.getData("Text");
                if (s) {
                    var f = t.doc.sel.from,
                        l = t.doc.sel.to;
                    gn(t.doc, n, n), t.state.draggingText && fn(t.doc, "", f, l, "paste"), t.replaceSelection(s, null, "paste"), Ct(t), Qt(t)
                }
            } catch (e) {}
        }
    }

    function Ht(e, t) {
        var n = e.display;
        try {
            var r = t.clientX,
                i = t.clientY
        } catch (t) {
            return !1
        }
        if (r >= Math.floor(n.gutters.getBoundingClientRect().right)) return !1;
        oi(t);
        if (!yi(e, "gutterClick")) return !0;
        var s = n.lineDiv.getBoundingClientRect();
        if (i > s.bottom) return !0;
        i -= s.top - n.viewOffset;
        for (var o = 0; o < e.options.gutters.length; ++o) {
            var u = n.gutters.childNodes[o];
            if (u && u.getBoundingClientRect().right >= r) {
                var a = Xr(e.doc, i),
                    f = e.options.gutters[o];
                gi(e, "gutterClick", e, a, f, t);
                break
            }
        }
        return !0
    }

    function Bt(e, t) {
        if (At(e.display, t)) return;
        var n = e.getSelection();
        t.dataTransfer.setData("Text", n);
        if (t.dataTransfer.setDragImage && !a) {
            var r = Bi("img", null, null, "position: fixed; left: 0; top: 0;");
            u && (r.width = r.height = 1, e.display.wrapper.appendChild(r), r._top = r.offsetTop), t.dataTransfer.setDragImage(r, 0, 0), u && r.parentNode.removeChild(r)
        }
    }

    function jt(t, n) {
        if (Math.abs(t.doc.scrollTop - n) < 2) return;
        t.doc.scrollTop = n, e || q(t, [], n), t.display.scroller.scrollTop != n && (t.display.scroller.scrollTop = n), t.display.scrollbarV.scrollTop != n && (t.display.scrollbarV.scrollTop = n), e && q(t, [])
    }

    function Ft(e, t, n) {
        if (n ? t == e.doc.scrollLeft : Math.abs(e.doc.scrollLeft - t) < 2) return;
        t = Math.min(t, e.display.scroller.scrollWidth - e.display.scroller.clientWidth), e.doc.scrollLeft = t, B(e), e.display.scroller.scrollLeft != t && (e.display.scroller.scrollLeft = t), e.display.scrollbarH.scrollLeft != t && (e.display.scrollbarH.scrollLeft = t)
    }

    function Rt(t, n) {
        var r = n.wheelDeltaX,
            s = n.wheelDeltaY;
        r == null && n.detail && n.axis == n.HORIZONTAL_AXIS && (r = n.detail), s == null && n.detail && n.axis == n.VERTICAL_AXIS ? s = n.detail : s == null && (s = n.wheelDelta);
        if (s && v && i)
            for (var o = n.target; o != f; o = o.parentNode)
                if (o.lineObj) {
                    t.display.currentWheelTarget = o;
                    break
                }
        var a = t.display,
            f = a.scroller;
        if (r && !e && !u && qt != null) {
            s && jt(t, Math.max(0, Math.min(f.scrollTop + s * qt, f.scrollHeight - f.clientHeight))), Ft(t, Math.max(0, Math.min(f.scrollLeft + r * qt, f.scrollWidth - f.clientWidth))), oi(n), a.wheelStartX = null;
            return
        }
        if (s && qt != null) {
            var l = s * qt,
                c = t.doc.scrollTop,
                h = c + a.wrapper.clientHeight;
            l < 0 ? c = Math.max(0, c + l - 50) : h = Math.min(t.doc.height, h + l + 50), q(t, [], {
                top: c,
                bottom: h
            })
        }
        It < 20 && (a.wheelStartX == null ? (a.wheelStartX = f.scrollLeft, a.wheelStartY = f.scrollTop, a.wheelDX = r, a.wheelDY = s, setTimeout(function () {
            if (a.wheelStartX == null) return;
            var e = f.scrollLeft - a.wheelStartX,
                t = f.scrollTop - a.wheelStartY,
                n = t && a.wheelDY && t / a.wheelDY || e && a.wheelDX && e / a.wheelDX;
            a.wheelStartX = a.wheelStartY = null;
            if (!n) return;
            qt = (qt * It + n) / (It + 1), ++It
        }, 200)) : (a.wheelDX += r, a.wheelDY += s))
    }

    function Ut(e, t, n) {
        if (typeof t == "string") {
            t = In[t];
            if (!t) return !1
        }
        e.display.pollingFast && Tt(e) && (e.display.pollingFast = !1);
        var r = e.doc,
            i = r.sel.shift;
        try {
            kt(e) && (e.state.suppressEdits = !0), n && (r.sel.shift = !1), t(e)
        } catch (s) {
            if (s != wi) throw s;
            return !1
        } finally {
            r.sel.shift = i, e.state.suppressEdits = !1
        }
        return !0
    }

    function zt(e) {
        var t = e.state.keyMaps.slice(0);
        return t.push(e.options.keyMap), e.options.extraKeys && t.unshift(e.options.extraKeys), t
    }

    function Xt(e, t) {
        function a() {
            u = !0
        }
        var n = Rn(e.options.keyMap),
            i = n.auto;
        clearTimeout(Wt), i && !zn(t) && (Wt = setTimeout(function () {
            Rn(e.options.keyMap) == n && (e.options.keyMap = i.call ? i.call(null, e) : i)
        }, 50));
        var s = Ki[ci(t, "keyCode")],
            o = !1;
        if (s == null || t.altGraphKey) return !1;
        ci(t, "altKey") && (s = "Alt-" + s), ci(t, y ? "metaKey" : "ctrlKey") && (s = "Ctrl-" + s), ci(t, y ? "ctrlKey" : "metaKey") && (s = "Cmd-" + s);
        var u = !1,
            f = zt(e);
        return ci(t, "shiftKey") ? o = Un("Shift-" + s, f, function (t) {
            return Ut(e, t, !0)
        }, a) || Un(s, f, function (t) {
            if (typeof t == "string" && /^go[A-Z]/.test(t)) return Ut(e, t)
        }, a) : o = Un(s, f, function (t) {
            return Ut(e, t)
        }, a), u && (o = !1), o && (oi(t), G(e), r && (t.oldKeyCode = t.keyCode, t.keyCode = 0)), o
    }

    function Vt(e, t, n) {
        var r = Un("'" + n + "'", zt(e), function (t) {
            return Ut(e, t, !0)
        });
        return r && (oi(t), G(e)), r
    }

    function Jt(e) {
        var n = this;
        n.state.focused || Qt(n), t && e.keyCode == 27 && (e.returnValue = !1);
        if (n.options.onKeyEvent && n.options.onKeyEvent(n, si(e))) return;
        var r = ci(e, "keyCode");
        n.doc.sel.shift = r == 16 || ci(e, "shiftKey");
        var i = Xt(n, e);
        u && ($t = i ? r : null, !i && r == 88 && !Ji && ci(e, v ? "metaKey" : "ctrlKey") && n.replaceSelection(""))
    }

    function Kt(e) {
        var t = this;
        if (t.options.onKeyEvent && t.options.onKeyEvent(t, si(e))) return;
        var n = ci(e, "keyCode"),
            r = ci(e, "charCode");
        if (u && n == $t) {
            $t = null, oi(e);
            return
        }
        if ((u && (!e.which || e.which < 10) || f) && Xt(t, e)) return;
        var i = String.fromCharCode(r == null ? n : r);
        this.options.electricChars && this.doc.mode.electricChars && this.options.smartIndent && !kt(this) && this.doc.mode.electricChars.indexOf(i) > -1 && setTimeout(yt(t, function () {
            Tn(t, t.doc.sel.to.line, "smart")
        }), 75);
        if (Vt(t, e, i)) return;
        xt(t)
    }

    function Qt(e) {
        if (e.options.readOnly == "nocursor") return;
        e.state.focused || (di(e, "focus", e), e.state.focused = !0, e.display.wrapper.className.search(/\bCodeMirror-focused\b/) == -1 && (e.display.wrapper.className += " CodeMirror-focused"), Nt(e, !0)), St(e), G(e)
    }

    function Gt(e) {
        e.state.focused && (di(e, "blur", e), e.state.focused = !1, e.display.wrapper.className = e.display.wrapper.className.replace(" CodeMirror-focused", "")), clearInterval(e.display.blinker), setTimeout(function () {
            e.state.focused || (e.doc.sel.shift = !1)
        }, 150)
    }

    function Zt(t, n) {
        function l() {
            i.inputDiv.style.position = "relative", i.input.style.cssText = f, r && (i.scrollbarV.scrollTop = i.scroller.scrollTop = a), St(t);
            if (i.input.selectionStart != null) {
                clearTimeout(Yt);
                var e = i.input.value = " " + (ln(s.from, s.to) ? "" : i.input.value),
                    n = 0;
                i.prevInput = " ", i.input.selectionStart = 1, i.input.selectionEnd = e.length;
                var o = function () {
                    i.prevInput == " " && i.input.selectionStart == 0 ? yt(t, In.selectAll)(t) : n++ < 10 ? Yt = setTimeout(o, 500) : Nt(t)
                };
                Yt = setTimeout(o, 200)
            }
        }
        var i = t.display,
            s = t.doc.sel;
        if (At(i, n)) return;
        var o = Ot(t, n),
            a = i.scroller.scrollTop;
        if (!o || u) return;
        (ln(s.from, s.to) || cn(o, s.from) || !cn(o, s.to)) && yt(t, gn)(t.doc, o, o);
        var f = i.input.style.cssText;
        i.inputDiv.style.position = "absolute", i.input.style.cssText = "position: fixed; width: 30px; height: 30px; top: " +
            (n.clientY - 5) + "px; left: " + (n.clientX - 5) + "px; z-index: 1000; background: white; outline: none;" + "border-width: 0; outline: none; overflow: hidden; opacity: .05; filter: alpha(opacity=5);", Ct(t), Nt(t, !0), ln(s.from, s.to) && (i.input.value = i.prevInput = " ");
        if (e) {
            ai(n);
            var c = function () {
                pi(window, "mouseup", c), setTimeout(l, 20)
            };
            hi(window, "mouseup", c)
        } else setTimeout(l, 50)
    }

    function en(e) {
        return {
            line: e.from.line + e.text.length - 1,
            ch: Ni(e.text).length + (e.text.length == 1 ? e.from.ch : 0)
        }
    }

    function tn(e, t, n) {
        if (n && typeof n == "object") return n;
        if (n == "start") return {
            anchor: t.from,
            head: t.from
        };
        var r = en(t);
        if (n == "around") return {
            anchor: t.from,
            head: r
        };
        if (n == "end") return {
            anchor: r,
            head: r
        };
        var i = function (e) {
            if (cn(e, t.from)) return e;
            if (!cn(t.to, e)) return r;
            var n = e.line + t.text.length - (t.to.line - t.from.line) - 1,
                i = e.ch;
            return e.line == t.to.line && (i += r.ch - t.to.ch), {
                line: n,
                ch: i
            }
        };
        return {
            anchor: i(e.anchor),
            head: i(e.head)
        }
    }

    function nn(e, t, n, r) {
        if (e.cm) {
            if (!e.cm.curOp) return yt(e.cm, nn)(e, t, n, r);
            if (e.cm.state.suppressEdits) return
        }
        var i = b && !r && nr(e, t.from, t.to);
        if (i) {
            for (var s = i.length - 1; s >= 1; --s) rn(e, {
                from: i[s].from,
                to: i[s].to,
                text: [""]
            });
            i.length && rn(e, {
                from: i[0].from,
                to: i[0].to,
                text: t.text
            }, n)
        } else rn(e, t, n)
    }

    function rn(e, t, n) {
        var r = tn(e.sel, t, n);
        Gr(e, t, r, e.cm ? e.cm.curOp.id : NaN), un(e, t, r, er(e, t));
        var i = [];
        jr(e, function (e, n) {
            !n && ki(i, e.history) == -1 && (ri(e.history, t), i.push(e.history)), un(e, t, null, er(e, t))
        })
    }

    function sn(e, t) {
        var n = e.history,
            r = (t == "undo" ? n.done : n.undone).pop();
        if (!r) return;
        n.dirtyCounter += t == "undo" ? -1 : 1;
        var i = {
            changes: [],
            anchorBefore: r.anchorAfter,
            headBefore: r.headAfter,
            anchorAfter: r.anchorBefore,
            headAfter: r.headBefore
        };
        (t == "undo" ? n.undone : n.done).push(i);
        for (var s = r.changes.length - 1; s >= 0; --s) {
            var o = r.changes[s];
            o.origin = t, i.changes.push(Qr(e, o));
            var u = s ? tn(e.sel, o, null) : {
                anchor: r.anchorBefore,
                head: r.headBefore
            };
            un(e, o, u, tr(e, o));
            var a = [];
            jr(e, function (e, t) {
                !t && ki(a, e.history) == -1 && (ri(e.history, o), a.push(e.history)), un(e, o, null, tr(e, o))
            })
        }
    }

    function on(e, t) {
        function n(e) {
            return {
                line: e.line + t,
                ch: e.ch
            }
        }
        e.first += t, e.cm && Et(e.cm, e.first, e.first, t), e.sel.head = n(e.sel.head), e.sel.anchor = n(e.sel.anchor), e.sel.from = n(e.sel.from), e.sel.to = n(e.sel.to)
    }

    function un(e, t, n, r) {
        if (e.cm && !e.cm.curOp) return yt(e.cm, un)(e, t, n, r);
        if (t.to.line < e.first) {
            on(e, t.text.length - 1 - (t.to.line - t.from.line));
            return
        }
        if (t.from.line > e.lastLine()) return;
        if (t.from.line < e.first) {
            var i = t.text.length - 1 - (e.first - t.from.line);
            on(e, i), t = {
                from: {
                    line: e.first,
                    ch: 0
                },
                to: {
                    line: t.to.line + i,
                    ch: t.to.ch
                },
                text: [Ni(t.text)],
                origin: t.origin
            }
        }
        var s = e.lastLine();
        t.to.line > s && (t = {
            from: t.from,
            to: {
                line: s,
                ch: Ir(e, s).text.length
            },
            text: [t.text[0]],
            origin: t.origin
        }), n || (n = tn(e.sel, t, null)), e.cm ? an(e.cm, t, r, n) : Or(e, t, r, n)
    }

    function an(e, t, n, r) {
        var i = e.doc,
            s = e.display,
            o = t.from,
            u = t.to,
            a = !1,
            f = o.line;
        e.options.lineWrapping || (f = zr(or(i, Ir(i, o.line))), i.iter(f, u.line + 1, function (e) {
            if (e == s.maxLine) return a = !0, !0
        })), Or(i, t, n, r, N(e)), e.options.lineWrapping || (i.iter(f, o.line + t.text.length, function (e) {
            var t = M(i, e);
            t > s.maxLineLength && (s.maxLine = e, s.maxLineLength = t, s.maxLineChanged = !0, a = !1)
        }), a && (e.curOp.updateMaxLine = !0)), i.frontier = Math.min(i.frontier, o.line), Y(e, 400);
        var l = t.text.length - (u.line - o.line) - 1;
        Et(e, o.line, u.line + 1, l);
        if (yi(e, "change")) {
            var c = {
                from: o,
                to: u,
                text: t.text,
                origin: t.origin
            };
            if (e.curOp.textChanged) {
                for (var h = e.curOp.textChanged; h.next; h = h.next);
                h.next = c
            } else e.curOp.textChanged = c
        }
    }

    function fn(e, t, n, r, i) {
        r || (r = n);
        if (cn(r, n)) {
            var s = r;
            r = n, n = s
        }
        typeof t == "string" && (t = Vi(t)), nn(e, {
            from: n,
            to: r,
            text: t,
            origin: i
        }, null)
    }

    function ln(e, t) {
        return e.line == t.line && e.ch == t.ch
    }

    function cn(e, t) {
        return e.line < t.line || e.line == t.line && e.ch < t.ch
    }

    function hn(e) {
        return {
            line: e.line,
            ch: e.ch
        }
    }

    function pn(e, t) {
        return Math.max(e.first, Math.min(t, e.first + e.size - 1))
    }

    function dn(e, t) {
        if (t.line < e.first) return {
            line: e.first,
            ch: 0
        };
        var n = e.first + e.size - 1;
        if (t.line > n) return {
            line: n,
            ch: Ir(e, n).text.length
        };
        var r = t.ch,
            i = Ir(e, t.line).text.length;
        return r == null || r > i ? {
            line: t.line,
            ch: i
        } : r < 0 ? {
            line: t.line,
            ch: 0
        } : t
    }

    function vn(e, t) {
        return t >= e.first && t < e.first + e.size
    }

    function mn(e, t, n, r) {
        if (e.sel.shift || e.sel.extend) {
            var i = e.sel.anchor;
            if (n) {
                var s = cn(t, i);
                s != cn(n, i) ? (i = t, t = n) : s != cn(t, n) && (t = n)
            }
            gn(e, i, t, r)
        } else gn(e, t, n || t, r);
        e.cm && (e.cm.curOp.userSelChange = !0)
    }

    function gn(e, t, n, r, i) {
        var s = e.sel;
        s.goalColumn = null;
        if (i || !ln(t, s.anchor)) t = bn(e, t, r, i != "push");
        if (i || !ln(n, s.head)) n = bn(e, n, r, i != "push");
        if (ln(s.anchor, t) && ln(s.head, n)) return;
        s.anchor = t, s.head = n;
        var o = cn(n, t);
        s.from = o ? n : t, s.to = o ? t : n, e.cm && (e.cm.curOp.updateInput = e.cm.curOp.selectionChanged = !0)
    }

    function yn(e) {
        gn(e.doc, e.doc.sel.from, e.doc.sel.to, null, "push")
    }

    function bn(e, t, n, r) {
        var i = !1,
            s = t,
            o = n || 1;
        e.cantEdit = !1;
        e: for (;;) {
            var u = Ir(e, s.line),
                a;
            if (u.markedSpans) {
                for (var f = 0; f < u.markedSpans.length; ++f) {
                    var l = u.markedSpans[f],
                        c = l.marker;
                    if ((l.from == null || (c.inclusiveLeft ? l.from <= s.ch : l.from < s.ch)) && (l.to == null || (c.inclusiveRight ? l.to >= s.ch : l.to > s.ch))) {
                        if (r && c.clearOnEnter) {
                            (a || (a = [])).push(c);
                            continue
                        }
                        if (!c.atomic) continue;
                        var h = c.find()[o < 0 ? "from" : "to"];
                        if (ln(h, s)) {
                            h.ch += o, h.ch < 0 ? h.line > e.first ? h = dn(e, {
                                line: h.line - 1
                            }) : h = null : h.ch > u.text.length && (h.line < e.first + e.size - 1 ? h = {
                                line: h.line + 1,
                                ch: 0
                            } : h = null);
                            if (!h) {
                                if (i) return r ? (e.cantEdit = !0, {
                                    line: e.first,
                                    ch: 0
                                }) : bn(e, t, n, !0);
                                i = !0, h = t, o = -o
                            }
                        }
                        s = h;
                        continue e
                    }
                }
                if (a)
                    for (var f = 0; f < a.length; ++f) a[f].clear()
            }
            return s
        }
    }

    function wn(e) {
        var t = En(e, e.doc.sel.head);
        if (!e.state.focused) return;
        var n = e.display,
            r = n.sizer.getBoundingClientRect(),
            i = null;
        t.top + r.top < 0 ? i = !0 : t.bottom + r.top > (window.innerHeight || document.documentElement.clientHeight) && (i = !1);
        if (i != null && !h) {
            var s = n.cursor.style.display == "none";
            s && (n.cursor.style.display = "", n.cursor.style.left = t.left + "px", n.cursor.style.top = t.top - n.viewOffset + "px"), n.cursor.scrollIntoView(i), s && (n.cursor.style.display = "none")
        }
    }

    function En(e, t) {
        for (;;) {
            var n = !1,
                r = lt(e, t),
                i = xn(e, r.left, r.top, r.left, r.bottom),
                s = e.doc.scrollTop,
                o = e.doc.scrollLeft;
            i.scrollTop != null && (jt(e, i.scrollTop), Math.abs(e.doc.scrollTop - s) > 1 && (n = !0)), i.scrollLeft != null && (Ft(e, i.scrollLeft), Math.abs(e.doc.scrollLeft - o) > 1 && (n = !0));
            if (!n) return r
        }
    }

    function Sn(e, t, n, r, i) {
        var s = xn(e, t, n, r, i);
        s.scrollTop != null && jt(e, s.scrollTop), s.scrollLeft != null && Ft(e, s.scrollLeft)
    }

    function xn(e, t, n, r, i) {
        var s = e.display,
            o = nt(s);
        n += o, i += o;
        var u = s.scroller.clientHeight - bi,
            a = s.scroller.scrollTop,
            f = {},
            l = e.doc.height + 2 * o,
            c = n < o + 10,
            h = i + o > l - 10;
        n < a ? f.scrollTop = c ? 0 : Math.max(0, n) : i > a + u && (f.scrollTop = (h ? l : i) - u);
        var p = s.scroller.clientWidth - bi,
            d = s.scroller.scrollLeft;
        t += s.gutters.offsetWidth, r += s.gutters.offsetWidth;
        var v = s.gutters.offsetWidth,
            m = t < v + 10;
        return t < d + v || m ? (m && (t = 0), f.scrollLeft = Math.max(0, t - 10 - v)) : r > p + d - 3 && (f.scrollLeft = r + 10 - p), f
    }

    function Tn(e, t, n, r) {
        var i = e.doc;
        n || (n = "add");
        if (n == "smart")
            if (!e.doc.mode.indent) n = "prev";
            else var s = tt(e, t);
        var o = e.options.tabSize,
            u = Ir(i, t),
            a = Si(u.text, null, o),
            f = u.text.match(/^\s*/)[0],
            l;
        if (n == "smart") {
            l = e.doc.mode.indent(s, u.text.slice(f.length), u.text);
            if (l == wi) {
                if (!r) return;
                n = "prev"
            }
        }
        n == "prev" ? t > i.first ? l = Si(Ir(i, t - 1).text, null, o) : l = 0 : n == "add" ? l = a + e.options.indentUnit : n == "subtract" && (l = a - e.options.indentUnit), l = Math.max(0, l);
        var c = "",
            h = 0;
        if (e.options.indentWithTabs)
            for (var p = Math.floor(l / o); p; --p) h += o, c += "	";
        h < l && (c += Ti(l - h)), c != f && fn(e.doc, c, {
            line: t,
            ch: 0
        }, {
            line: t,
            ch: f.length
        }, "input"), u.stateAfter = null
    }

    function Nn(e, t, n) {
        var r = t,
            i = t,
            s = e.doc;
        return typeof t == "number" ? i = Ir(s, pn(s, t)) : r = zr(t), r == null ? null : n(i, r) ? (Et(e, r, r + 1), i) : null
    }

    function Cn(e, t, n, r) {
        function a() {
            var n = s + t;
            return n < e.first || n >= e.first + e.size ? !1 : (s = n, u = Ir(e, n))
        }

        function f(e) {
            var n = (r ? rs : is)(u, o, t, !0);
            if (n == null) {
                if (!!e || !a()) return !1;
                r ? o = (t < 0 ? es : Zi)(u) : o = t < 0 ? u.text.length : 0
            } else o = n;
            return !0
        }
        var i = e.sel.head,
            s = i.line,
            o = i.ch,
            u = Ir(e, s);
        if (n == "char") f();
        else if (n == "column") f(!0);
        else if (n == "word") {
            var l = !1;
            for (;;) {
                if (t < 0 && !f()) break;
                if (Di(u.text.charAt(o))) l = !0;
                else if (l) {
                    t < 0 && (t = 1, f());
                    break
                }
                if (t > 0 && !f()) break
            }
        }
        return bn(e, {
            line: s,
            ch: o
        }, t, !0)
    }

    function kn(e, t) {
        var n = t.ch,
            r = t.ch;
        if (e) {
            t.after === !1 || r == e.length ? --n : ++r;
            var i = e.charAt(n),
                s = Di(i) ? Di : /\s/.test(i) ? function (e) {
                    return /\s/.test(e)
                } : function (e) {
                    return !/\s/.test(e) && !Di(e)
                };
            while (n > 0 && s(e.charAt(n - 1)))--n;
            while (r < e.length && s(e.charAt(r)))++r
        }
        return {
            from: {
                line: t.line,
                ch: n
            },
            to: {
                line: t.line,
                ch: r
            }
        }
    }

    function Ln(e, t) {
        mn(e.doc, {
            line: t,
            ch: 0
        }, dn(e.doc, {
            line: t + 1,
            ch: 0
        }))
    }

    function Mn(e, t, n, r) {
        E.defaults[e] = t, n && (An[e] = r ? function (e, t, r) {
            r != _n && n(e, t, r)
        } : n)
    }

    function jn(e, t) {
        if (t === !0) return t;
        if (e.copyState) return e.copyState(t);
        var n = {};
        for (var r in t) {
            var i = t[r];
            i instanceof Array && (i = i.concat([])), n[r] = i
        }
        return n
    }

    function Fn(e, t, n) {
        return e.startState ? e.startState(t, n) : !0
    }

    function Rn(e) {
        return typeof e == "string" ? qn[e] : e
    }

    function Un(e, t, n, r) {
        function i(t) {
            t = Rn(t);
            var s = t[e];
            if (s === !1) return r && r(), !0;
            if (s != null && n(s)) return !0;
            if (t.nofallthrough) return r && r(), !0;
            var o = t.fallthrough;
            if (o == null) return !1;
            if (Object.prototype.toString.call(o) != "[object Array]") return i(o);
            for (var u = 0, a = o.length; u < a; ++u)
                if (i(o[u])) return !0;
            return !1
        }
        for (var s = 0; s < t.length; ++s)
            if (i(t[s])) return !0
    }

    function zn(e) {
        var t = Ki[ci(e, "keyCode")];
        return t == "Ctrl" || t == "Alt" || t == "Shift" || t == "Mod"
    }

    function Wn(e, t) {
        this.pos = this.start = 0, this.string = e, this.tabSize = t || 8
    }

    function Xn(e, t) {
        this.lines = [], this.type = t, this.doc = e
    }

    function Vn(e, t, n, r, i) {
        if (r && r.shared) return Jn(e, t, n, r, i);
        if (e.cm && !e.cm.curOp) return yt(e.cm, Vn)(e, t, n, r, i);
        var s = new Xn(e, i);
        if (i == "range" && !cn(t, n)) return s;
        r && Ai(r, s), s.replacedWith && (s.collapsed = !0, s.replacedWith = Bi("span", [s.replacedWith], "CodeMirror-widget")), s.collapsed && (w = !0);
        var o = t.line,
            u = 0,
            a, f, l = e.cm,
            c;
        e.iter(o, n.line + 1, function (r) {
            l && s.collapsed && !l.options.lineWrapping && or(e, r) == l.display.maxLine && (c = !0);
            var i = {
                from: null,
                to: null,
                marker: s
            };
            u += r.text.length, o == t.line && (i.from = t.ch, u -= t.ch), o == n.line && (i.to = n.ch, u -= r.text.length - n.ch), s.collapsed && (o == n.line && (f = rr(r, n.ch)), o == t.line ? a = rr(r, t.ch) : Ur(r, 0)), Gn(r, i), ++o
        }), s.collapsed && e.iter(t.line, n.line + 1, function (e) {
            ur(e) && Ur(e, 0)
        }), s.readOnly && (b = !0, (e.history.done.length || e.history.undone.length) && e.clearHistory());
        if (s.collapsed) {
            if (a != f) throw new Error("Inserting collapsed marker overlapping an existing one");
            s.size = u, s.atomic = !0
        }
        return l && (c && (l.curOp.updateMaxLine = !0), (s.className || s.startStyle || s.endStyle || s.collapsed) && Et(l, t.line, n.line + 1), s.atomic && yn(l)), s
    }

    function $n(e, t) {
        this.markers = e, this.primary = t;
        for (var n = 0, r = this; n < e.length; ++n) e[n].parent = this, hi(e[n], "clear", function () {
            r.clear()
        })
    }

    function Jn(e, t, n, r, i) {
        r = Ai(r), r.shared = !1;
        var s = [Vn(e, t, n, r, i)],
            o = s[0];
        return jr(e, function (e) {
            s.push(Vn(e, dn(e, t), dn(e, n), r, i));
            for (var u = 0; u < e.linked.length; ++u)
                if (e.linked[u].isParent) return;
            o = Ni(s)
        }), new $n(s, o)
    }

    function Kn(e, t) {
        if (e)
            for (var n = 0; n < e.length; ++n) {
                var r = e[n];
                if (r.marker == t) return r
            }
    }

    function Qn(e, t) {
        for (var n, r = 0; r < e.length; ++r) e[r] != t && (n || (n = [])).push(e[r]);
        return n
    }

    function Gn(e, t) {
        e.markedSpans = e.markedSpans ? e.markedSpans.concat([t]) : [t], t.marker.attachLine(e)
    }

    function Yn(e, t) {
        if (e)
            for (var n = 0, r; n < e.length; ++n) {
                var i = e[n],
                    s = i.marker,
                    o = i.from == null || (s.inclusiveLeft ? i.from <= t : i.from < t);
                if (o || s.type == "bookmark" && i.from == t) {
                    var u = i.to == null || (s.inclusiveRight ? i.to >= t : i.to > t);
                    (r || (r = [])).push({
                        from: i.from,
                        to: u ? null : i.to,
                        marker: s
                    })
                }
            }
        return r
    }

    function Zn(e, t, n) {
        if (e)
            for (var r = 0, i; r < e.length; ++r) {
                var s = e[r],
                    o = s.marker,
                    u = s.to == null || (o.inclusiveRight ? s.to >= n : s.to > n);
                if (u || o.type == "bookmark" && s.from == n && s.from != t) {
                    var a = s.from == null || (o.inclusiveLeft ? s.from <= n : s.from < n);
                    (i || (i = [])).push({
                        from: a ? null : s.from - n,
                        to: s.to == null ? null : s.to - n,
                        marker: o
                    })
                }
            }
        return i
    }

    function er(e, t) {
        var n = vn(e, t.from.line) && Ir(e, t.from.line).markedSpans,
            r = vn(e, t.to.line) && Ir(e, t.to.line).markedSpans;
        if (!n && !r) return null;
        var i = t.from.ch,
            s = t.to.ch,
            o = Yn(n, i),
            u = Zn(r, t.from.line == t.to.line ? i : NaN, s),
            a = t.text.length == 1,
            f = Ni(t.text).length + (a ? i : 0);
        if (o)
            for (var l = 0; l < o.length; ++l) {
                var c = o[l];
                if (c.to == null) {
                    var h = Kn(u, c.marker);
                    h ? a && (c.to = h.to == null ? null : h.to + f) : c.to = i
                }
            }
        if (u)
            for (var l = 0; l < u.length; ++l) {
                var c = u[l];
                c.to != null && (c.to += f);
                if (c.from == null) {
                    var h = Kn(o, c.marker);
                    h || (c.from = f, a && (o || (o = [])).push(c))
                } else c.from += f, a && (o || (o = [])).push(c)
            }
        var p = [o];
        if (!a) {
            var d = t.text.length - 2,
                v;
            if (d > 0 && o)
                for (var l = 0; l < o.length; ++l) o[l].to == null && (v || (v = [])).push({
                    from: null,
                    to: null,
                    marker: o[l].marker
                });
            for (var l = 0; l < d; ++l) p.push(v);
            p.push(u)
        }
        return p
    }

    function tr(e, t) {
        var n = Zr(e, t),
            r = er(e, t);
        if (!n) return r;
        if (!r) return n;
        for (var i = 0; i < n.length; ++i) {
            var s = n[i],
                o = r[i];
            if (s && o) e: for (var u = 0; u < o.length; ++u) {
                var a = o[u];
                for (var f = 0; f < s.length; ++f)
                    if (s[f].marker == a.marker) continue e;
                s.push(a)
            } else o && (n[i] = o)
        }
        return n
    }

    function nr(e, t, n) {
        var r = null;
        e.iter(t.line, n.line + 1, function (e) {
            if (e.markedSpans)
                for (var t = 0; t < e.markedSpans.length; ++t) {
                    var n = e.markedSpans[t].marker;
                    n.readOnly && (!r || ki(r, n) == -1) && (r || (r = [])).push(n)
                }
        });
        if (!r) return null;
        var i = [{
            from: t,
            to: n
        }];
        for (var s = 0; s < r.length; ++s) {
            var o = r[s].find();
            for (var u = 0; u < i.length; ++u) {
                var a = i[u];
                if (!cn(o.from, a.to) || cn(o.to, a.from)) continue;
                var f = [u, 1];
                cn(a.from, o.from) && f.push({
                    from: a.from,
                    to: o.from
                }), cn(o.to, a.to) && f.push({
                    from: o.to,
                    to: a.to
                }), i.splice.apply(i, f), u += f.length - 1
            }
        }
        return i
    }

    function rr(e, t) {
        var n = w && e.markedSpans,
            r;
        if (n)
            for (var i, s = 0; s < n.length; ++s) {
                i = n[s];
                if (!i.marker.collapsed) continue;
                (i.from == null || i.from < t) && (i.to == null || i.to > t) && (!r || r.width < i.marker.width) && (r = i.marker)
            }
        return r
    }

    function ir(e) {
        return rr(e, -1)
    }

    function sr(e) {
        return rr(e, e.text.length + 1)
    }

    function or(e, t) {
        var n;
        while (n = ir(t)) t = Ir(e, n.find().from.line);
        return t
    }

    function ur(e) {
        var t = w && e.markedSpans;
        if (t)
            for (var n, r = 0; r < t.length; ++r) {
                n = t[r];
                if (!n.marker.collapsed) continue;
                if (n.from == null) return !0;
                if (n.from == 0 && n.marker.inclusiveLeft && ar(e, n)) return !0
            }
    }

    function ar(e, t) {
        if (t.to == null) {
            var n = t.marker.find().to,
                r = Ir(Wr(e), n.line);
            return ar(r, Kn(r.markedSpans, t.marker))
        }
        if (t.marker.inclusiveRight && t.to == e.text.length) return !0;
        for (var i, s = 0; s < e.markedSpans.length; ++s) {
            i = e.markedSpans[s];
            if (i.marker.collapsed && i.from == t.to && (i.marker.inclusiveLeft || t.marker.inclusiveRight) && ar(e, i)) return !0
        }
    }

    function fr(e) {
        var t = e.markedSpans;
        if (!t) return;
        for (var n = 0; n < t.length; ++n) t[n].marker.detachLine(e);
        e.markedSpans = null
    }

    function lr(e, t) {
        if (!t) return;
        for (var n = 0; n < t.length; ++n) t[n].marker.attachLine(e);
        e.markedSpans = t
    }

    function hr(e) {
        return function () {
            var t = !this.cm.curOp;
            t && mt(this.cm);
            try {
                var n = e.apply(this, arguments)
            } finally {
                t && gt(this.cm)
            }
            return n
        }
    }

    function pr(e) {
        return e.height != null ? e.height : ((!e.node.parentNode || e.node.parentNode.nodeType != 1) && Fi(e.cm.display.measure, Bi("div", [e.node], null, "position: relative")), e.height = e.node.offsetHeight)
    }

    function dr(e, t, n, r) {
        var i = new cr(e, n, r);
        return i.noHScroll && (e.display.alignWidgets = !0), Nn(e, t, function (t) {
            (t.widgets || (t.widgets = [])).push(i), i.line = t;
            if (!ur(t) || i.showIfHidden) {
                var n = Vr(e, t) < e.display.scroller.scrollTop;
                Ur(t, t.height + pr(i)), n && (e.curOp.updateScrollPos = {
                    scrollTop: e.doc.scrollTop + i.height,
                    scrollLeft: e.doc.scrollLeft
                })
            }
            return !0
        }), i
    }

    function vr(e, t, n) {
        var r = {
            text: e
        };
        return lr(r, t), r.height = n ? n(r) : 1, r
    }

    function mr(e, t, n, r) {
        e.text = t, e.stateAfter && (e.stateAfter = null), e.styles && (e.styles = null), e.order != null && (e.order = null), fr(e), lr(e, n);
        var i = r ? r(e) : 1;
        i != e.height && Ur(e, i), gi(e, "change")
    }

    function gr(e) {
        e.parent = null, fr(e)
    }

    function yr(e, t, n, r, i) {
        var s = e.options.flattenSpans,
            o = "",
            u = null,
            a = new Wn(t, e.options.tabSize);
        t == "" && n.blankLine && n.blankLine(r);
        while (!a.eol()) {
            var f = n.token(a, r);
            a.pos > 5e3 && (s = !1, a.pos = Math.min(t.length, a.start + 5e4), f = null);
            var l = a.current();
            a.start = a.pos, !s || u != f ? (o && i(o, u), o = l, u = f) : o += l
        }
        o && i(o, u)
    }

    function br(e, t, n) {
        var r = [e.state.modeGen];
        yr(e, t.text, e.doc.mode, n, function (e, t) {
            r.push(e, t)
        });
        for (var i = 0; i < e.state.overlays.length; ++i) {
            var s = e.state.overlays[i],
                o = 1;
            yr(e, t.text, s.mode, !0, function (e, t) {
                var n = o,
                    i = e.length;
                while (i) {
                    var u = r[o],
                        a = u.length;
                    a <= i ? i -= a : (r.splice(o, 1, u.slice(0, i), r[o + 1], u.slice(i)), i = 0), o += 2
                }
                if (!t) return;
                if (s.opaque) r.splice(n, o - n, e, t), o = n + 2;
                else
                    for (; n < o; n += 2) {
                        var u = r[n + 1];
                        r[n + 1] = u ? u + " " + t : t
                    }
            })
        }
        return r
    }

    function wr(e, t) {
        if (!t.styles || t.styles[0] != e.state.modeGen) t.styles = br(e, t, t.stateAfter = tt(e, zr(t)));
        return t.styles
    }

    function Er(e, t, n) {
        var r = e.doc.mode,
            i = new Wn(t.text, e.options.tabSize);
        t.text == "" && r.blankLine && r.blankLine(n);
        while (!i.eol() && i.pos <= 5e3) r.token(i, n), i.start = i.pos
    }

    function xr(e) {
        return e ? Sr[e] || (Sr[e] = "cm-" + e.replace(/ +/g, " cm-")) : null
    }

    function Tr(e, t, n) {
        var r, i = t,
            s, o, u = !0;
        while (r = ir(i)) u = !1, i = Ir(e.doc, r.find().from.line), s || (s = i);
        var a = {
            pre: Bi("pre"),
            col: 0,
            pos: 0,
            display: !n,
            measure: null,
            addedOne: !1,
            cm: e
        };
        i.textClass && (a.pre.className = i.textClass);
        do {
            a.measure = i == t && n, a.pos = 0, a.addToken = a.measure ? kr : Cr, n && o && i != t && !a.addedOne && (n[0] = a.pre.appendChild(Xi(e.display.measure)), a.addedOne = !0);
            var f = Ar(i, a, wr(e, i));
            o = i == s, f && (i = Ir(e.doc, f.to.line), u = !1)
        } while (f);
        return n && !a.addedOne && (n[0] = a.pre.appendChild(u ? Bi("span", "\u00a0") : Xi(e.display.measure))), !a.pre.firstChild && !ur(t) && a.pre.appendChild(document.createTextNode("\u00a0")), a.pre
    }

    function Cr(e, t, n, r, i) {
        if (!t) return;
        if (!Nr.test(t)) {
            e.col += t.length;
            var s = document.createTextNode(t)
        } else {
            var s = document.createDocumentFragment(),
                o = 0;
            for (;;) {
                Nr.lastIndex = o;
                var u = Nr.exec(t),
                    a = u ? u.index - o : t.length - o;
                a && (s.appendChild(document.createTextNode(t.slice(o, o + a))), e.col += a);
                if (!u) break;
                o += a + 1;
                if (u[0] == "	") {
                    var f = e.cm.options.tabSize,
                        l = f - e.col % f;
                    s.appendChild(Bi("span", Ti(l), "cm-tab")), e.col += l
                } else {
                    var c = Bi("span", "\u2022", "cm-invalidchar");
                    c.title = "\\u" + u[0].charCodeAt(0).toString(16), s.appendChild(c), e.col += 1
                }
            }
        } if (n || r || i || e.measure) {
            var h = n || "";
            return r && (h += r), i && (h += i), e.pre.appendChild(Bi("span", [s], h))
        }
        e.pre.appendChild(s)
    }

    function kr(e, t, n, r, i) {
        for (var s = 0; s < t.length; ++s) s && s < t.length && e.cm.options.lineWrapping && Ri.test(t.slice(s - 1, s + 1)) && e.pre.appendChild(Bi("wbr")), e.measure[e.pos++] = Cr(e, t.charAt(s), n, s == 0 && r, s == t.length - 1 && i);
        t.length && (e.addedOne = !0)
    }

    function Lr(e, t, n) {
        n && (e.display || (n = n.cloneNode(!0)), e.pre.appendChild(n), e.measure && t && (e.measure[e.pos] = n, e.addedOne = !0)), e.pos += t
    }

    function Ar(e, t, n) {
        var r = e.markedSpans;
        if (!r) {
            for (var i = 1; i < n.length; i += 2) t.addToken(t, n[i], xr(n[i + 1]));
            return
        }
        var s = e.text,
            o = s.length,
            u = 0,
            i = 1,
            a = "",
            f, l = 0,
            c, h, p, d;
        for (;;) {
            if (l == u) {
                c = h = p = "", d = null, l = Infinity;
                var v = null;
                for (var m = 0; m < r.length; ++m) {
                    var g = r[m],
                        y = g.marker;
                    g.from <= u && (g.to == null || g.to > u) ? (g.to != null && l > g.to && (l = g.to, h = ""), y.className && (c += " " + y.className), y.startStyle && g.from == u && (p += " " + y.startStyle), y.endStyle && g.to == l && (h += " " + y.endStyle), y.collapsed && (!d || d.marker.width < y.width) && (d = g)) : g.from > u && l > g.from && (l = g.from), y.type == "bookmark" && g.from == u && y.replacedWith && (v = y.replacedWith)
                }
                if (d && (d.from || 0) == u) {
                    Lr(t, (d.to == null ? o : d.to) - u, d.from != null && d.marker.replacedWith);
                    if (d.to == null) return d.marker.find()
                }
                v && !d && Lr(t, 0, v)
            }
            if (u >= o) break;
            var b = Math.min(o, l);
            for (;;) {
                if (a) {
                    var w = u + a.length;
                    if (!d) {
                        var E = w > b ? a.slice(0, b - u) : a;
                        t.addToken(t, E, f + c, p, u + E.length == l ? h : "")
                    }
                    if (w >= b) {
                        a = a.slice(b - u), u = b;
                        break
                    }
                    u = w, p = ""
                }
                a = n[i++], f = xr(n[i++])
            }
        }
    }

    function Or(e, t, n, r, i) {
        function s(e) {
            return n ? n[e] : null
        }
        var o = t.from,
            u = t.to,
            a = t.text,
            f = Ir(e, o.line),
            l = Ir(e, u.line),
            c = Ni(a),
            h = s(a.length - 1),
            p = u.line - o.line;
        if (o.ch == 0 && u.ch == 0 && c == "") {
            for (var d = 0, v = a.length - 1, m = []; d < v; ++d) m.push(vr(a[d], s(d), i));
            mr(l, l.text, h, i), p && e.remove(o.line, p), m.length && e.insert(o.line, m)
        } else if (f == l)
            if (a.length == 1) mr(f, f.text.slice(0, o.ch) + c + f.text.slice(u.ch), h, i);
            else {
                for (var m = [], d = 1, v = a.length - 1; d < v; ++d) m.push(vr(a[d], s(d), i));
                m.push(vr(c + f.text.slice(u.ch), h, i)), mr(f, f.text.slice(0, o.ch) + a[0], s(0), i), e.insert(o.line + 1, m)
            } else if (a.length == 1) mr(f, f.text.slice(0, o.ch) + a[0] + l.text.slice(u.ch), s(0), i), e.remove(o.line + 1, p);
        else {
            mr(f, f.text.slice(0, o.ch) + a[0], s(0), i), mr(l, c + l.text.slice(u.ch), h, i);
            for (var d = 1, v = a.length - 1, m = []; d < v; ++d) m.push(vr(a[d], s(d), i));
            p > 1 && e.remove(o.line + 1, p - 1), e.insert(o.line + 1, m)
        }
        gn(e, r.anchor, r.head, null, !0)
    }

    function Mr(e) {
        this.lines = e, this.parent = null;
        for (var t = 0, n = e.length, r = 0; t < n; ++t) e[t].parent = this, r += e[t].height;
        this.height = r
    }

    function _r(e) {
        this.children = e;
        var t = 0,
            n = 0;
        for (var r = 0, i = e.length; r < i; ++r) {
            var s = e[r];
            t += s.chunkSize(), n += s.height, s.parent = this
        }
        this.size = t, this.height = n, this.parent = null
    }

    function jr(e, t, n) {
        function r(e, i, s) {
            if (e.linked)
                for (var o = 0; o < e.linked.length; ++o) {
                    var u = e.linked[o];
                    if (u.doc == i) continue;
                    var a = s && u.sharedHist;
                    if (n && !a) continue;
                    t(u.doc, a), r(u.doc, e, a)
                }
        }
        r(e, null, !0)
    }

    function Fr(e, t) {
        if (t.cm) throw new Error("This document is already in use.");
        e.doc = t, t.cm = e, C(e), x(e), e.options.lineWrapping || _(e), e.options.mode = t.modeOption, Et(e)
    }

    function Ir(e, t) {
        t -= e.first;
        while (!e.lines)
            for (var n = 0;; ++n) {
                var r = e.children[n],
                    i = r.chunkSize();
                if (t < i) {
                    e = r;
                    break
                }
                t -= i
            }
        return e.lines[t]
    }

    function qr(e, t, n) {
        var r = [],
            i = t.line;
        return e.iter(t.line, n.line + 1, function (e) {
            var s = e.text;
            i == n.line && (s = s.slice(0, n.ch)), i == t.line && (s = s.slice(t.ch)), r.push(s), ++i
        }), r
    }

    function Rr(e, t, n) {
        var r = [];
        return e.iter(t, n, function (e) {
            r.push(e.text)
        }), r
    }

    function Ur(e, t) {
        var n = t - e.height;
        for (var r = e; r; r = r.parent) r.height += n
    }

    function zr(e) {
        if (e.parent == null) return null;
        var t = e.parent,
            n = ki(t.lines, e);
        for (var r = t.parent; r; t = r, r = r.parent)
            for (var i = 0;; ++i) {
                if (r.children[i] == t) break;
                n += r.children[i].chunkSize()
            }
        return n + t.first
    }

    function Wr(e) {
        for (var t = e.parent; t.parent; t = t.parent);
        return t
    }

    function Xr(e, t) {
        var n = e.first;
        e: do {
            for (var r = 0, i = e.children.length; r < i; ++r) {
                var s = e.children[r],
                    o = s.height;
                if (t < o) {
                    e = s;
                    continue e
                }
                t -= o, n += s.chunkSize()
            }
            return n
        } while (!e.lines);
        for (var r = 0, i = e.lines.length; r < i; ++r) {
            var u = e.lines[r],
                a = u.height;
            if (t < a) break;
            t -= a
        }
        return n + r
    }

    function Vr(e, t) {
        t = or(e.doc, t);
        var n = 0,
            r = t.parent;
        for (var i = 0; i < r.lines.length; ++i) {
            var s = r.lines[i];
            if (s == t) break;
            n += s.height
        }
        for (var o = r.parent; o; r = o, o = r.parent)
            for (var i = 0; i < o.children.length; ++i) {
                var u = o.children[i];
                if (u == r) break;
                n += u.height
            }
        return n
    }

    function $r(e) {
        var t = e.order;
        return t == null && (t = e.order = ss(e.text)), t
    }

    function Jr() {
        return {
            done: [],
            undone: [],
            undoDepth: Infinity,
            lastTime: 0,
            lastOp: null,
            lastOrigin: null,
            dirtyCounter: 0
        }
    }

    function Kr(e, t, n, r) {
        var i = t["spans_" + e.id],
            s = 0;
        e.iter(Math.max(e.first, n), Math.min(e.first + e.size, r), function (n) {
            n.markedSpans && ((i || (i = t["spans_" + e.id] = {}))[s] = n.markedSpans), ++s
        })
    }

    function Qr(e, t) {
        var n = {
            from: t.from,
            to: en(t),
            text: qr(e, t.from, t.to)
        };
        return Kr(e, n, t.from.line, t.to.line + 1), jr(e, function (e) {
            Kr(e, n, t.from.line, t.to.line + 1)
        }, !0), n
    }

    function Gr(e, t, n, r) {
        var i = e.history;
        i.undone.length = 0;
        var s = +(new Date),
            o = Ni(i.done);
        if (o && (i.lastOp == r || i.lastOrigin == t.origin && (t.origin == "input" || t.origin == "delete") && i.lastTime > s - 600)) {
            var u = Ni(o.changes);
            ln(t.from, t.to) && ln(t.from, u.to) ? u.to = en(t) : o.changes.push(Qr(e, t)), o.anchorAfter = n.anchor, o.headAfter = n.head
        } else {
            o = {
                changes: [Qr(e, t)],
                anchorBefore: e.sel.anchor,
                headBefore: e.sel.head,
                anchorAfter: n.anchor,
                headAfter: n.head
            }, i.done.push(o);
            while (i.done.length > i.undoDepth) i.done.shift();
            i.dirtyCounter < 0 ? i.dirtyCounter = NaN : i.dirtyCounter++
        }
        i.lastTime = s, i.lastOp = r, i.lastOrigin = t.origin
    }

    function Yr(e) {
        if (!e) return null;
        for (var t = 0, n; t < e.length; ++t) e[t].marker.explicitlyCleared ? n || (n = e.slice(0, t)) : n && n.push(e[t]);
        return n ? n.length ? n : null : e
    }

    function Zr(e, t) {
        var n = t["spans_" + e.id];
        if (!n) return null;
        for (var r = 0, i = []; r < t.text.length; ++r) i.push(Yr(n[r]));
        return i
    }

    function ei(e, t) {
        for (var n = 0, r = []; n < e.length; ++n) {
            var i = e[n],
                s = i.changes,
                o = [];
            r.push({
                changes: o,
                anchorBefore: i.anchorBefore,
                headBefore: i.headBefore,
                anchorAfter: i.anchorAfter,
                headAfter: i.headAfter
            });
            for (var u = 0; u < s.length; ++u) {
                var a = s[u],
                    f;
                o.push({
                    from: a.from,
                    to: a.to,
                    text: a.text
                });
                if (t)
                    for (var l in a)(f = l.match(/^spans_(\d+)$/)) && ki(t, Number(f[1])) > -1 && (Ni(o)[l] = a[l], delete a[l])
            }
        }
        return r
    }

    function ti(e, t, n, r) {
        n < e.line ? e.line += r : t < e.line && (e.line = t, e.ch = 0)
    }

    function ni(e, t, n, r) {
        for (var i = 0; i < e.length; ++i) {
            var s = e[i],
                o = !0;
            for (var u = 0; u < s.changes.length; ++u) {
                var a = s.changes[u];
                s.copied || (a.from = hn(a.from), a.to = hn(a.to));
                if (n < a.from.line) a.from.line += r, a.to.line += r;
                else if (t <= a.to.line) {
                    o = !1;
                    break
                }
            }
            s.copied || (s.anchorBefore = hn(s.anchorBefore), s.headBefore = hn(s.headBefore), s.anchorAfter = hn(s.anchorAfter), s.readAfter = hn(s.headAfter), s.copied = !0), o ? (ti(s.anchorBefore), ti(s.headBefore), ti(s.anchorAfter), ti(s.headAfter)) : (e.splice(0, i + 1), i = 0)
        }
    }

    function ri(e, t) {
        var n = t.from.line,
            r = t.to.line,
            i = t.text.length - (r - n) - 1;
        ni(e.done, n, r, i), ni(e.undone, n, r, i)
    }

    function ii() {
        ai(this)
    }

    function si(e) {
        return e.stop || (e.stop = ii), e
    }

    function oi(e) {
        e.preventDefault ? e.preventDefault() : e.returnValue = !1
    }

    function ui(e) {
        e.stopPropagation ? e.stopPropagation() : e.cancelBubble = !0
    }

    function ai(e) {
        oi(e), ui(e)
    }

    function fi(e) {
        return e.target || e.srcElement
    }

    function li(e) {
        var t = e.which;
        return t == null && (e.button & 1 ? t = 1 : e.button & 2 ? t = 3 : e.button & 4 && (t = 2)), v && e.ctrlKey && t == 1 && (t = 3), t
    }

    function ci(e, t) {
        var n = e.override && e.override.hasOwnProperty(t);
        return n ? e.override[t] : e[t]
    }

    function hi(e, t, n) {
        if (e.addEventListener) e.addEventListener(t, n, !1);
        else if (e.attachEvent) e.attachEvent("on" + t, n);
        else {
            var r = e._handlers || (e._handlers = {}),
                i = r[t] || (r[t] = []);
            i.push(n)
        }
    }

    function pi(e, t, n) {
        if (e.removeEventListener) e.removeEventListener(t, n, !1);
        else if (e.detachEvent) e.detachEvent("on" + t, n);
        else {
            var r = e._handlers && e._handlers[t];
            if (!r) return;
            for (var i = 0; i < r.length; ++i)
                if (r[i] == n) {
                    r.splice(i, 1);
                    break
                }
        }
    }

    function di(e, t) {
        var n = e._handlers && e._handlers[t];
        if (!n) return;
        var r = Array.prototype.slice.call(arguments, 2);
        for (var i = 0; i < n.length; ++i) n[i].apply(null, r)
    }

    function gi(e, t) {
        function i(e) {
            return function () {
                e.apply(null, r)
            }
        }
        var n = e._handlers && e._handlers[t];
        if (!n) return;
        var r = Array.prototype.slice.call(arguments, 2);
        for (var s = 0; s < n.length; ++s) vi ? vi.push(i(n[s])) : n[s].apply(null, r)
    }

    function yi(e, t) {
        var n = e._handlers && e._handlers[t];
        return n && n.length > 0
    }

    function Ei() {
        this.id = null
    }

    function Si(e, t, n) {
        t == null && (t = e.search(/[^\s\u00a0]/), t == -1 && (t = e.length));
        for (var r = 0, i = 0; r < t; ++r) e.charAt(r) == "	" ? i += n - i % n : ++i;
        return i
    }

    function Ti(e) {
        while (xi.length <= e) xi.push(Ni(xi) + " ");
        return xi[e]
    }

    function Ni(e) {
        return e[e.length - 1]
    }

    function Ci(e) {
        p ? (e.selectionStart = 0, e.selectionEnd = e.value.length) : e.select()
    }

    function ki(e, t) {
        if (e.indexOf) return e.indexOf(t);
        for (var n = 0, r = e.length; n < r; ++n)
            if (e[n] == t) return n;
        return -1
    }

    function Li(e, t) {
        if (!e) return;
        Li.prototype = e;
        var n = new Li;
        return t && Ai(t, n), n
    }

    function Ai(e, t) {
        t || (t = {});
        for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
        return t
    }

    function Oi(e) {
        for (var t = [], n = 0; n < e; ++n) t.push(undefined);
        return t
    }

    function Mi(e) {
        var t = Array.prototype.slice.call(arguments, 1);
        return function () {
            return e.apply(null, t)
        }
    }

    function Di(e) {
        return /\w/.test(e) || e > "\u0080" && (e.toUpperCase() != e.toLowerCase() || _i.test(e))
    }

    function Pi(e) {
        for (var t in e)
            if (e.hasOwnProperty(t) && e[t]) return !1;
        return !0
    }

    function Bi(e, t, n, r) {
        var i = document.createElement(e);
        n && (i.className = n), r && (i.style.cssText = r);
        if (typeof t == "string") Ii(i, t);
        else if (t)
            for (var s = 0; s < t.length; ++s) i.appendChild(t[s]);
        return i
    }

    function ji(e) {
        if (!t) e.innerHTML = "";
        else
            while (e.firstChild) e.removeChild(e.firstChild);
        return e
    }

    function Fi(e, t) {
        return ji(e).appendChild(t)
    }

    function Ii(e, t) {
        r ? (e.innerHTML = "", e.appendChild(document.createTextNode(t))) : e.textContent = t
    }

    function zi(e) {
        if (Ui != null) return Ui;
        var t = Bi("div", null, null, "width: 50px; height: 50px; overflow-x: scroll");
        return Fi(e, t), t.offsetWidth && (Ui = t.offsetHeight - t.clientHeight), Ui || 0
    }

    function Xi(e) {
        if (Wi == null) {
            var t = Bi("span", "\u200b");
            Fi(e, Bi("span", [t, document.createTextNode("x")])), e.firstChild.offsetHeight != 0 && (Wi = t.offsetWidth <= 1 && t.offsetHeight > 2 && !n)
        }
        return Wi ? Bi("span", "\u200b") : Bi("span", "\u00a0", null, "display: inline-block; width: 1px; margin-right: -1px")
    }

    function Qi(e, t, n, r) {
        if (!e) return r(t, n, "ltr");
        for (var i = 0; i < e.length; ++i) {
            var s = e[i];
            (s.from < n && s.to > t || t == n && s.to == t) && r(Math.max(s.from, t), Math.min(s.to, n), s.level == 1 ? "rtl" : "ltr")
        }
    }

    function Gi(e) {
        return e.level % 2 ? e.to : e.from
    }

    function Yi(e) {
        return e.level % 2 ? e.from : e.to
    }

    function Zi(e) {
        var t = $r(e);
        return t ? Gi(t[0]) : 0
    }

    function es(e) {
        var t = $r(e);
        return t ? Yi(Ni(t)) : e.text.length
    }

    function ts(e, t) {
        var n = Ir(e.doc, t),
            r = or(e.doc, n);
        r != n && (t = zr(r));
        var i = $r(r),
            s = i ? i[0].level % 2 ? es(r) : Zi(r) : 0;
        return {
            line: t,
            ch: s
        }
    }

    function ns(e, t) {
        var n, r;
        while (n = sr(r = Ir(e.doc, t))) t = n.find().to.line;
        var i = $r(r),
            s = i ? i[0].level % 2 ? Zi(r) : es(r) : r.text.length;
        return {
            line: t,
            ch: s
        }
    }

    function rs(e, t, n, r) {
        var i = $r(e);
        if (!i) return is(e, t, n, r);
        var s = r ? function (t, n) {
                do t += n; while (t > 0 && Hi.test(e.text.charAt(t)));
                return t
            } : function (e, t) {
                return e + t
            },
            o = i[0].level;
        for (var u = 0; u < i.length; ++u) {
            var a = i[u],
                f = a.level % 2 == o;
            if (a.from < t && a.to > t || f && (a.from == t || a.to == t)) break
        }
        var l = s(t, a.level % 2 ? -n : n);
        while (l != null)
            if (a.level % 2 == o) {
                if (!(l < a.from || l > a.to)) break;
                a = i[u += n], l = a && (n > 0 == a.level % 2 ? s(a.to, -1) : s(a.from, 1))
            } else if (l == Gi(a)) a = i[--u], l = a && Yi(a);
        else {
            if (l != Yi(a)) break;
            a = i[++u], l = a && Gi(a)
        }
        return l < 0 || l > e.text.length ? null : l
    }

    function is(e, t, n, r) {
        var i = t + n;
        if (r)
            while (i > 0 && Hi.test(e.text.charAt(i))) i += n;
        return i < 0 || i > e.text.length ? null : i
    }
    var e = /gecko\/\d/i.test(navigator.userAgent),
        t = /MSIE \d/.test(navigator.userAgent),
        n = t && (document.documentMode == null || document.documentMode < 8),
        r = t && (document.documentMode == null || document.documentMode < 9),
        i = /WebKit\//.test(navigator.userAgent),
        s = i && /Qt\/\d+\.\d+/.test(navigator.userAgent),
        o = /Chrome\//.test(navigator.userAgent),
        u = /Opera\//.test(navigator.userAgent),
        a = /Apple Computer/.test(navigator.vendor),
        f = /KHTML\//.test(navigator.userAgent),
        l = /Mac OS X 1\d\D([7-9]|\d\d)\D/.test(navigator.userAgent),
        c = /Mac OS X 1\d\D([8-9]|\d\d)\D/.test(navigator.userAgent),
        h = /PhantomJS/.test(navigator.userAgent),
        p = /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent),
        d = p || /Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent),
        v = p || /Mac/.test(navigator.platform),
        m = /windows/i.test(navigator.platform),
        g = u && navigator.userAgent.match(/Version\/(\d*\.\d*)/);
    g && (g = Number(g[1]));
    var y = v && (s || u && (g == null || g < 12.11)),
        b = !1,
        w = !1,
        pt, Mt, _t, It = 0,
        qt = null;
    t ? qt = -0.53 : e ? qt = 15 : o ? qt = -0.7 : a && (qt = -1 / 3);
    var Wt, $t = null,
        Yt;
    E.prototype = {
        focus: function () {
            window.focus(), Ct(this), Qt(this), xt(this)
        },
        setOption: function (e, t) {
            var n = this.options,
                r = n[e];
            if (n[e] == t && e != "mode") return;
            n[e] = t, An.hasOwnProperty(e) && yt(this, An[e])(this, t, r)
        },
        getOption: function (e) {
            return this.options[e]
        },
        getDoc: function () {
            return this.doc
        },
        addKeyMap: function (e) {
            this.state.keyMaps.push(e)
        },
        removeKeyMap: function (e) {
            var t = this.state.keyMaps;
            for (var n = 0; n < t.length; ++n)
                if ((typeof e == "string" ? t[n].name : t[n]) == e) return t.splice(n, 1), !0
        },
        addOverlay: yt(null, function (e, t) {
            var n = e.token ? e : E.getMode(this.options, e);
            if (n.startState) throw new Error("Overlays may not be stateful.");
            this.state.overlays.push({
                mode: n,
                modeSpec: e,
                opaque: t && t.opaque
            }), this.state.modeGen++, Et(this)
        }),
        removeOverlay: yt(null, function (e) {
            var t = this.state.overlays;
            for (var n = 0; n < t.length; ++n)
                if (t[n].modeSpec == e) {
                    t.splice(n, 1), this.state.modeGen++, Et(this);
                    return
                }
        }),
        indentLine: yt(null, function (e, t, n) {
            typeof t != "string" && (t == null ? t = this.options.smartIndent ? "smart" : "prev" : t = t ? "add" : "subtract"), vn(this.doc, e) && Tn(this, e, t, n)
        }),
        indentSelection: yt(null, function (e) {
            var t = this.doc.sel;
            if (ln(t.from, t.to)) return Tn(this, t.from.line, e);
            var n = t.to.line - (t.to.ch ? 0 : 1);
            for (var r = t.from.line; r <= n; ++r) Tn(this, r, e)
        }),
        getTokenAt: function (e) {
            var t = this.doc;
            e = dn(t, e);
            var n = tt(this, e.line),
                r = this.doc.mode,
                i = Ir(t, e.line),
                s = new Wn(i.text, this.options.tabSize);
            while (s.pos < e.ch && !s.eol()) {
                s.start = s.pos;
                var o = r.token(s, n)
            }
            return {
                start: s.start,
                end: s.pos,
                string: s.current(),
                className: o || null,
                type: o || null,
                state: n
            }
        },
        getStateAfter: function (e) {
            var t = this.doc;
            return e = pn(t, e == null ? t.first + t.size - 1 : e), tt(this, e + 1)
        },
        cursorCoords: function (e, t) {
            var n, r = this.doc.sel;
            return e == null ? n = r.head : typeof e == "object" ? n = dn(this.doc, e) : n = e ? r.from : r.to, lt(this, n, t || "page")
        },
        charCoords: function (e, t) {
            return ft(this, dn(this.doc, e), t || "page")
        },
        coordsChar: function (e) {
            var t = this.display.lineSpace.getBoundingClientRect();
            return ct(this, e.left - t.left, e.top - t.top)
        },
        defaultTextHeight: function () {
            return dt(this.display)
        },
        setGutterMarker: yt(null, function (e, t, n) {
            return Nn(this, e, function (e) {
                var r = e.gutterMarkers || (e.gutterMarkers = {});
                return r[t] = n, !n && Pi(r) && (e.gutterMarkers = null), !0
            })
        }),
        clearGutter: yt(null, function (e) {
            var t = this,
                n = t.doc,
                r = n.first;
            n.iter(function (n) {
                n.gutterMarkers && n.gutterMarkers[e] && (n.gutterMarkers[e] = null, Et(t, r, r + 1), Pi(n.gutterMarkers) && (n.gutterMarkers = null)), ++r
            })
        }),
        addLineClass: yt(null, function (e, t, n) {
            return Nn(this, e, function (e) {
                var r = t == "text" ? "textClass" : t == "background" ? "bgClass" : "wrapClass";
                if (!e[r]) e[r] = n;
                else {
                    if ((new RegExp("\\b" + n + "\\b")).test(e[r])) return !1;
                    e[r] += " " + n
                }
                return !0
            })
        }),
        removeLineClass: yt(null, function (e, t, n) {
            return Nn(this, e, function (e) {
                var r = t == "text" ? "textClass" : t == "background" ? "bgClass" : "wrapClass",
                    i = e[r];
                if (!i) return !1;
                if (n == null) e[r] = null;
                else {
                    var s = i.replace(new RegExp("^" + n + "\\b\\s*|\\s*\\b" + n + "\\b"), "");
                    if (s == i) return !1;
                    e[r] = s || null
                }
                return !0
            })
        }),
        addLineWidget: yt(null, function (e, t, n) {
            return dr(this, e, t, n)
        }),
        removeLineWidget: function (e) {
            e.clear()
        },
        lineInfo: function (e) {
            if (typeof e == "number") {
                if (!vn(this.doc, e)) return null;
                var t = e;
                e = Ir(this.doc, e);
                if (!e) return null
            } else {
                var t = zr(e);
                if (t == null) return null
            }
            return {
                line: t,
                handle: e,
                text: e.text,
                gutterMarkers: e.gutterMarkers,
                textClass: e.textClass,
                bgClass: e.bgClass,
                wrapClass: e.wrapClass,
                widgets: e.widgets
            }
        },
        getViewport: function () {
            return {
                from: this.display.showingFrom,
                to: this.display.showingTo
            }
        },
        addWidget: function (e, t, n, r, i) {
            var s = this.display;
            e = lt(this, dn(this.doc, e));
            var o = e.top,
                u = e.left;
            t.style.position = "absolute", s.sizer.appendChild(t);
            if (r == "over") o = e.top;
            else if (r == "near") {
                var a = Math.max(s.wrapper.clientHeight, this.doc.height),
                    f = Math.max(s.sizer.clientWidth, s.lineSpace.clientWidth);
                e.bottom + t.offsetHeight > a && e.top > t.offsetHeight && (o = e.top - t.offsetHeight), u + t.offsetWidth > f && (u = f - t.offsetWidth)
            }
            t.style.top = o + nt(s) + "px", t.style.left = t.style.right = "", i == "right" ? (u = s.sizer.clientWidth - t.offsetWidth, t.style.right = "0px") : (i == "left" ? u = 0 : i == "middle" && (u = (s.sizer.clientWidth - t.offsetWidth) / 2), t.style.left = u + "px"), n && Sn(this, u, o, u + t.offsetWidth, o + t.offsetHeight)
        },
        triggerOnKeyDown: yt(null, Jt),
        execCommand: function (e) {
            return In[e](this)
        },
        moveH: yt(null, function (e, t) {
            var n = this.doc.sel,
                r = e < 0 ? n.from : n.to;
            if (n.shift || n.extend || ln(n.from, n.to)) r = Cn(this.doc, e, t, this.options.rtlMoveVisually);
            mn(this.doc, r, r, e)
        }),
        deleteH: yt(null, function (e, t) {
            var n = this.doc.sel;
            ln(n.from, n.to) ? fn(this.doc, "", n.from, Cn(this.doc, e, t, !1), "delete") : fn(this.doc, "", n.from, n.to, "delete"), this.curOp.userSelChange = !0
        }),
        moveV: yt(null, function (e, t) {
            var n = this.doc,
                r = this.display,
                i = n.sel.head,
                s = lt(this, i, "div"),
                o = s.left,
                u;
            n.sel.goalColumn != null && (o = n.sel.goalColumn);
            if (t == "page") {
                var a = Math.min(r.wrapper.clientHeight, window.innerHeight || document.documentElement.clientHeight);
                u = s.top + e * a
            } else t == "line" && (u = e > 0 ? s.bottom + 3 : s.top - 3);
            do {
                var f = ct(this, o, u);
                u += e * 5
            } while (f.outside && (e < 0 ? u > 0 : u < n.height));
            t == "page" && (r.scrollbarV.scrollTop += ft(this, f, "div").top - s.top), mn(this.doc, f, f, e), n.sel.goalColumn = o
        }),
        toggleOverwrite: function () {
            (this.state.overwrite = !this.state.overwrite) ? this.display.cursor.className += " CodeMirror-overwrite": this.display.cursor.className = this.display.cursor.className.replace(" CodeMirror-overwrite", "")
        },
        scrollTo: function (e, t) {
            e != null && (this.display.scrollbarH.scrollLeft = this.display.scroller.scrollLeft = e), t != null && (this.display.scrollbarV.scrollTop = this.display.scroller.scrollTop = t), q(this, [])
        },
        getScrollInfo: function () {
            var e = this.display.scroller,
                t = bi;
            return {
                left: e.scrollLeft,
                top: e.scrollTop,
                height: e.scrollHeight - t,
                width: e.scrollWidth - t,
                clientHeight: e.clientHeight - t,
                clientWidth: e.clientWidth - t
            }
        },
        scrollIntoView: function (e) {
            typeof e == "number" && (e = {
                line: e,
                ch: 0
            }), !e || e.line != null ? (e = e ? dn(this.doc, e) : this.doc.sel.head, En(this, e)) : Sn(this, e.left, e.top, e.right, e.bottom)
        },
        setSize: function (e, t) {
            function n(e) {
                return typeof e == "number" || /^\d+$/.test(String(e)) ? e + "px" : e
            }
            e != null && (this.display.wrapper.style.width = n(e)), t != null && (this.display.wrapper.style.height = n(t)), this.refresh()
        },
        on: function (e, t) {
            hi(this, e, t)
        },
        off: function (e, t) {
            pi(this, e, t)
        },
        operation: function (e) {
            return wt(this, e)
        },
        refresh: yt(null, function () {
            ut(this), this.curOp.updateScrollPos = {
                scrollTop: this.doc.scrollTop,
                scrollLeft: this.doc.scrollLeft
            }, Et(this)
        }),
        swapDoc: yt(null, function (e) {
            var t = this.doc;
            return t.cm = null, Fr(this, e), ut(this), this.curOp.updateScrollPos = {
                scrollTop: e.scrollTop,
                scrollLeft: e.scrollLeft
            }, t
        }),
        getInputField: function () {
            return this.display.input
        },
        getWrapperElement: function () {
            return this.display.wrapper
        },
        getScrollerElement: function () {
            return this.display.scroller
        },
        getGutterElement: function () {
            return this.display.gutters
        }
    };
    var An = E.optionHandlers = {},
        On = E.defaults = {},
        _n = E.Init = {
            toString: function () {
                return "CodeMirror.Init"
            }
        };
    Mn("value", "", function (e, t) {
        e.setValue(t)
    }, !0), Mn("mode", null, function (e, t) {
        e.doc.modeOption = t, x(e)
    }, !0), Mn("indentUnit", 2, x, !0), Mn("indentWithTabs", !1), Mn("smartIndent", !0), Mn("tabSize", 4, function (e) {
        x(e), ut(e), Et(e)
    }, !0), Mn("electricChars", !0), Mn("rtlMoveVisually", !m), Mn("theme", "default", function (e) {
        L(e), A(e)
    }, !0), Mn("keyMap", "default", k), Mn("extraKeys", null), Mn("onKeyEvent", null), Mn("onDragEvent", null), Mn("lineWrapping", !1, T, !0), Mn("gutters", [], function (e) {
        D(e.options), A(e)
    }, !0), Mn("fixedGutter", !0, function (e, t) {
        e.display.gutters.style.left = t ? I(e.display) + "px" : "0", e.refresh()
    }, !0), Mn("lineNumbers", !1, function (e) {
        D(e.options), A(e)
    }, !0), Mn("firstLineNumber", 1, A, !0), Mn("lineNumberFormatter", function (e) {
        return e
    }, A, !0), Mn("showCursorWhenSelecting", !1, J, !0), Mn("readOnly", !1, function (e, t) {
        t == "nocursor" ? (Gt(e), e.display.input.blur()) : t || Nt(e, !0)
    }), Mn("dragDrop", !0), Mn("cursorBlinkRate", 530), Mn("cursorHeight", 1), Mn("workTime", 100), Mn("workDelay", 100), Mn("flattenSpans", !0), Mn("pollInterval", 100), Mn("undoDepth", 40, function (e, t) {
        e.doc.history.undoDepth = t
    }), Mn("viewportMargin", 10, function (e) {
        e.refresh()
    }, !0), Mn("tabindex", null, function (e, t) {
        e.display.input.tabIndex = t || ""
    }), Mn("autofocus", null);
    var Dn = E.modes = {},
        Pn = E.mimeModes = {};
    E.defineMode = function (e, t) {
        !E.defaults.mode && e != "null" && (E.defaults.mode = e);
        if (arguments.length > 2) {
            t.dependencies = [];
            for (var n = 2; n < arguments.length; ++n) t.dependencies.push(arguments[n])
        }
        Dn[e] = t
    }, E.defineMIME = function (e, t) {
        Pn[e] = t
    }, E.resolveMode = function (e) {
        if (typeof e == "string" && Pn.hasOwnProperty(e)) e = Pn[e];
        else if (typeof e == "string" && /^[\w\-]+\/[\w\-]+\+xml$/.test(e)) return E.resolveMode("application/xml");
        return typeof e == "string" ? {
            name: e
        } : e || {
            name: "null"
        }
    }, E.getMode = function (e, t) {
        t = E.resolveMode(t);
        var n = Dn[t.name];
        if (!n) return E.getMode(e, "text/plain");
        var r = n(e, t);
        if (Hn.hasOwnProperty(t.name)) {
            var i = Hn[t.name];
            for (var s in i) {
                if (!i.hasOwnProperty(s)) continue;
                r.hasOwnProperty(s) && (r["_" + s] = r[s]), r[s] = i[s]
            }
        }
        return r.name = t.name, r
    }, E.defineMode("null", function () {
        return {
            token: function (e) {
                e.skipToEnd()
            }
        }
    }), E.defineMIME("text/plain", "null");
    var Hn = E.modeExtensions = {};
    E.extendMode = function (e, t) {
        var n = Hn.hasOwnProperty(e) ? Hn[e] : Hn[e] = {};
        Ai(t, n)
    }, E.defineExtension = function (e, t) {
        E.prototype[e] = t
    }, E.defineOption = Mn;
    var Bn = [];
    E.defineInitHook = function (e) {
        Bn.push(e)
    }, E.copyState = jn, E.startState = Fn, E.innerMode = function (e, t) {
        while (e.innerMode) {
            var n = e.innerMode(t);
            t = n.state, e = n.mode
        }
        return n || {
            mode: e,
            state: t
        }
    };
    var In = E.commands = {
            selectAll: function (e) {
                e.setSelection({
                    line: e.firstLine(),
                    ch: 0
                }, {
                    line: e.lastLine()
                })
            },
            killLine: function (e) {
                var t = e.getCursor(!0),
                    n = e.getCursor(!1),
                    r = !ln(t, n);
                !r && e.getLine(t.line).length == t.ch ? e.replaceRange("", t, {
                    line: t.line + 1,
                    ch: 0
                }, "delete") : e.replaceRange("", t, r ? n : {
                    line: t.line
                }, "delete")
            },
            deleteLine: function (e) {
                var t = e.getCursor().line;
                e.replaceRange("", {
                    line: t,
                    ch: 0
                }, {
                    line: t
                }, "delete")
            },
            undo: function (e) {
                e.undo()
            },
            redo: function (e) {
                e.redo()
            },
            goDocStart: function (e) {
                e.extendSelection({
                    line: e.firstLine(),
                    ch: 0
                })
            },
            goDocEnd: function (e) {
                e.extendSelection({
                    line: e.lastLine()
                })
            },
            goLineStart: function (e) {
                e.extendSelection(ts(e, e.getCursor().line))
            },
            goLineStartSmart: function (e) {
                var t = e.getCursor(),
                    n = ts(e, t.line),
                    r = e.getLineHandle(n.line),
                    i = $r(r);
                if (!i || i[0].level == 0) {
                    var s = Math.max(0, r.text.search(/\S/)),
                        o = t.line == n.line && t.ch <= s && t.ch;
                    e.extendSelection({
                        line: n.line,
                        ch: o ? 0 : s
                    })
                } else e.extendSelection(n)
            },
            goLineEnd: function (e) {
                e.extendSelection(ns(e, e.getCursor().line))
            },
            goLineUp: function (e) {
                e.moveV(-1, "line")
            },
            goLineDown: function (e) {
                e.moveV(1, "line")
            },
            goPageUp: function (e) {
                e.moveV(-1, "page")
            },
            goPageDown: function (e) {
                e.moveV(1, "page")
            },
            goCharLeft: function (e) {
                e.moveH(-1, "char")
            },
            goCharRight: function (e) {
                e.moveH(1, "char")
            },
            goColumnLeft: function (e) {
                e.moveH(-1, "column")
            },
            goColumnRight: function (e) {
                e.moveH(1, "column")
            },
            goWordLeft: function (e) {
                e.moveH(-1, "word")
            },
            goWordRight: function (e) {
                e.moveH(1, "word")
            },
            delCharBefore: function (e) {
                e.deleteH(-1, "char")
            },
            delCharAfter: function (e) {
                e.deleteH(1, "char")
            },
            delWordBefore: function (e) {
                e.deleteH(-1, "word")
            },
            delWordAfter: function (e) {
                e.deleteH(1, "word")
            },
            indentAuto: function (e) {
                e.indentSelection("smart")
            },
            indentMore: function (e) {
                e.indentSelection("add")
            },
            indentLess: function (e) {
                e.indentSelection("subtract")
            },
            insertTab: function (e) {
                e.replaceSelection("	", "end", "input")
            },
            defaultTab: function (e) {
                e.somethingSelected() ? e.indentSelection("add") : e.replaceSelection("	", "end", "input")
            },
            transposeChars: function (e) {
                var t = e.getCursor(),
                    n = e.getLine(t.line);
                t.ch > 0 && t.ch < n.length - 1 && e.replaceRange(n.charAt(t.ch) + n.charAt(t.ch - 1), {
                    line: t.line,
                    ch: t.ch - 1
                }, {
                    line: t.line,
                    ch: t.ch + 1
                })
            },
            newlineAndIndent: function (e) {
                yt(e, function () {
                    e.replaceSelection("\n", "end", "input"), e.indentLine(e.getCursor().line, null, !0)
                })()
            },
            toggleOverwrite: function (e) {
                e.toggleOverwrite()
            }
        },
        qn = E.keyMap = {};
    qn.basic = {
        Left: "goCharLeft",
        Right: "goCharRight",
        Up: "goLineUp",
        Down: "goLineDown",
        End: "goLineEnd",
        Home: "goLineStartSmart",
        PageUp: "goPageUp",
        PageDown: "goPageDown",
        Delete: "delCharAfter",
        Backspace: "delCharBefore",
        Tab: "defaultTab",
        "Shift-Tab": "indentAuto",
        Enter: "newlineAndIndent",
        Insert: "toggleOverwrite"
    }, qn.pcDefault = {
        "Ctrl-A": "selectAll",
        "Ctrl-D": "deleteLine",
        "Ctrl-Z": "undo",
        "Shift-Ctrl-Z": "redo",
        "Ctrl-Y": "redo",
        "Ctrl-Home": "goDocStart",
        "Alt-Up": "goDocStart",
        "Ctrl-End": "goDocEnd",
        "Ctrl-Down": "goDocEnd",
        "Ctrl-Left": "goWordLeft",
        "Ctrl-Right": "goWordRight",
        "Alt-Left": "goLineStart",
        "Alt-Right": "goLineEnd",
        "Ctrl-Backspace": "delWordBefore",
        "Ctrl-Delete": "delWordAfter",
        "Ctrl-S": "save",
        "Ctrl-F": "find",
        "Ctrl-G": "findNext",
        "Shift-Ctrl-G": "findPrev",
        "Shift-Ctrl-F": "replace",
        "Shift-Ctrl-R": "replaceAll",
        "Ctrl-[": "indentLess",
        "Ctrl-]": "indentMore",
        fallthrough: "basic"
    }, qn.macDefault = {
        "Cmd-A": "selectAll",
        "Cmd-D": "deleteLine",
        "Cmd-Z": "undo",
        "Shift-Cmd-Z": "redo",
        "Cmd-Y": "redo",
        "Cmd-Up": "goDocStart",
        "Cmd-End": "goDocEnd",
        "Cmd-Down": "goDocEnd",
        "Alt-Left": "goWordLeft",
        "Alt-Right": "goWordRight",
        "Cmd-Left": "goLineStart",
        "Cmd-Right": "goLineEnd",
        "Alt-Backspace": "delWordBefore",
        "Ctrl-Alt-Backspace": "delWordAfter",
        "Alt-Delete": "delWordAfter",
        "Cmd-S": "save",
        "Cmd-F": "find",
        "Cmd-G": "findNext",
        "Shift-Cmd-G": "findPrev",
        "Cmd-Alt-F": "replace",
        "Shift-Cmd-Alt-F": "replaceAll",
        "Cmd-[": "indentLess",
        "Cmd-]": "indentMore",
        fallthrough: ["basic", "emacsy"]
    }, qn["default"] = v ? qn.macDefault : qn.pcDefault, qn.emacsy = {
        "Ctrl-F": "goCharRight",
        "Ctrl-B": "goCharLeft",
        "Ctrl-P": "goLineUp",
        "Ctrl-N": "goLineDown",
        "Alt-F": "goWordRight",
        "Alt-B": "goWordLeft",
        "Ctrl-A": "goLineStart",
        "Ctrl-E": "goLineEnd",
        "Ctrl-V": "goPageDown",
        "Shift-Ctrl-V": "goPageUp",
        "Ctrl-D": "delCharAfter",
        "Ctrl-H": "delCharBefore",
        "Alt-D": "delWordAfter",
        "Alt-Backspace": "delWordBefore",
        "Ctrl-K": "killLine",
        "Ctrl-T": "transposeChars"
    }, E.isModifierKey = zn, E.fromTextArea = function (e, t) {
        function i() {
            e.value = a.getValue()
        }
        t || (t = {}), t.value = e.value, !t.tabindex && e.tabindex && (t.tabindex = e.tabindex);
        if (t.autofocus == null) {
            var n = document.body;
            try {
                n = document.activeElement
            } catch (r) {}
            t.autofocus = n == e || e.getAttribute("autofocus") != null && n == document.body
        }
        if (e.form) {
            hi(e.form, "submit", i);
            var s = e.form,
                o = s.submit;
            try {
                var u = s.submit = function () {
                    i(), s.submit = o, s.submit(), s.submit = u
                }
            } catch (r) {}
        }
        e.style.display = "none";
        var a = E(function (t) {
            e.parentNode.insertBefore(t, e.nextSibling)
        }, t);
        return a.save = i, a.getTextArea = function () {
            return e
        }, a.toTextArea = function () {
            i(), e.parentNode.removeChild(a.getWrapperElement()), e.style.display = "", e.form && (pi(e.form, "submit", i), typeof e.form.submit == "function" && (e.form.submit = o))
        }, a
    }, Wn.prototype = {
        eol: function () {
            return this.pos >= this.string.length
        },
        sol: function () {
            return this.pos == 0
        },
        peek: function () {
            return this.string.charAt(this.pos) || undefined
        },
        next: function () {
            if (this.pos < this.string.length) return this.string.charAt(this.pos++)
        },
        eat: function (e) {
            var t = this.string.charAt(this.pos);
            if (typeof e == "string") var n = t == e;
            else var n = t && (e.test ? e.test(t) : e(t)); if (n) return ++this.pos, t
        },
        eatWhile: function (e) {
            var t = this.pos;
            while (this.eat(e));
            return this.pos > t
        },
        eatSpace: function () {
            var e = this.pos;
            while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))++this.pos;
            return this.pos > e
        },
        skipToEnd: function () {
            this.pos = this.string.length
        },
        skipTo: function (e) {
            var t = this.string.indexOf(e, this.pos);
            if (t > -1) return this.pos = t, !0
        },
        backUp: function (e) {
            this.pos -= e
        },
        column: function () {
            return Si(this.string, this.start, this.tabSize)
        },
        indentation: function () {
            return Si(this.string, null, this.tabSize)
        },
        match: function (e, t, n) {
            if (typeof e != "string") {
                var i = this.string.slice(this.pos).match(e);
                return i && i.index > 0 ? null : (i && t !== !1 && (this.pos += i[0].length), i)
            }
            var r = function (e) {
                return n ? e.toLowerCase() : e
            };
            if (r(this.string).indexOf(r(e), this.pos) == this.pos) return t !== !1 && (this.pos += e.length), !0
        },
        current: function () {
            return this.string.slice(this.start, this.pos)
        }
    }, E.StringStream = Wn, E.TextMarker = Xn, Xn.prototype.clear = function () {
        if (this.explicitlyCleared) return;
        var e = this.doc.cm,
            t = e && !e.curOp;
        t && mt(e);
        var n = null,
            r = null;
        for (var i = 0; i < this.lines.length; ++i) {
            var s = this.lines[i],
                o = Kn(s.markedSpans, this);
            o.to != null && (r = zr(s)), s.markedSpans = Qn(s.markedSpans, o), o.from != null ? n = zr(s) : this.collapsed && !ur(s) && e && Ur(s, dt(e.display))
        }
        if (e && this.collapsed && !e.options.lineWrapping)
            for (var i = 0; i < this.lines.length; ++i) {
                var u = or(e.doc, this.lines[i]),
                    a = M(e.doc, u);
                a > e.display.maxLineLength && (e.display.maxLine = u, e.display.maxLineLength = a, e.display.maxLineChanged = !0)
            }
        n != null && e && Et(e, n, r + 1), this.lines.length = 0, this.explicitlyCleared = !0, this.collapsed && this.doc.cantEdit && (this.doc.cantEdit = !1, e && yn(e)), t && gt(e), gi(this, "clear")
    }, Xn.prototype.find = function () {
        var e, t;
        for (var n = 0; n < this.lines.length; ++n) {
            var r = this.lines[n],
                i = Kn(r.markedSpans, this);
            if (i.from != null || i.to != null) {
                var s = zr(r);
                i.from != null && (e = {
                    line: s,
                    ch: i.from
                }), i.to != null && (t = {
                    line: s,
                    ch: i.to
                })
            }
        }
        return this.type == "bookmark" ? e : e && {
            from: e,
            to: t
        }
    }, Xn.prototype.getOptions = function (e) {
        var t = this.replacedWith;
        return {
            className: this.className,
            inclusiveLeft: this.inclusiveLeft,
            inclusiveRight: this.inclusiveRight,
            atomic: this.atomic,
            collapsed: this.collapsed,
            clearOnEnter: this.clearOnEnter,
            replacedWith: e ? t && t.cloneNode(!0) : t,
            readOnly: this.readOnly,
            startStyle: this.startStyle,
            endStyle: this.endStyle
        }
    }, Xn.prototype.attachLine = function (e) {
        if (!this.lines.length && this.doc.cm) {
            var t = this.doc.cm.curOp;
            (!t.maybeHiddenMarkers || ki(t.maybeHiddenMarkers, this) == -1) && (t.maybeUnhiddenMarkers || (t.maybeUnhiddenMarkers = [])).push(this)
        }
        this.lines.push(e)
    }, Xn.prototype.detachLine = function (e) {
        this.lines.splice(ki(this.lines, e), 1);
        if (!this.lines.length && this.doc.cm) {
            var t = this.doc.cm.curOp;
            (t.maybeHiddenMarkers || (t.maybeHiddenMarkers = [])).push(this)
        }
    }, E.SharedTextMarker = $n, $n.prototype.clear = function () {
        if (this.explicitlyCleared) return;
        this.explicitlyCleared = !0;
        for (var e = 0; e < this.markers.length; ++e) this.markers[e].clear();
        gi(this, "clear")
    }, $n.prototype.find = function () {
        return this.primary.find()
    }, $n.prototype.getOptions = function (e) {
        var t = this.primary.getOptions(e);
        return t.shared = !0, t
    };
    var cr = E.LineWidget = function (e, t, n) {
        for (var r in n) n.hasOwnProperty(r) && (this[r] = n[r]);
        this.cm = e, this.node = t
    };
    cr.prototype.clear = hr(function () {
        var e = this.line.widgets,
            t = zr(this.line);
        if (t == null || !e) return;
        for (var n = 0; n < e.length; ++n) e[n] == this && e.splice(n--, 1);
        e.length || (this.line.widgets = null), Ur(this.line, Math.max(0, this.line.height - pr(this))), Et(this.cm, t, t + 1)
    }), cr.prototype.changed = hr(function () {
        var e = this.height;
        this.height = null;
        var t = pr(this) - e;
        if (!t) return;
        Ur(this.line, this.line.height + t);
        var n = zr(this.line);
        Et(this.cm, n, n + 1)
    });
    var Sr = {},
        Nr = /[\t\u0000-\u0019\u200b\u2028\u2029\uFEFF]/g;
    Mr.prototype = {
        chunkSize: function () {
            return this.lines.length
        },
        removeInner: function (e, t) {
            for (var n = e, r = e + t; n < r; ++n) {
                var i = this.lines[n];
                this.height -= i.height, gr(i), gi(i, "delete")
            }
            this.lines.splice(e, t)
        },
        collapse: function (e) {
            e.splice.apply(e, [e.length, 0].concat(this.lines))
        },
        insertInner: function (e, t, n) {
            this.height += n, this.lines = this.lines.slice(0, e).concat(t).concat(this.lines.slice(e));
            for (var r = 0, i = t.length; r < i; ++r) t[r].parent = this
        },
        iterN: function (e, t, n) {
            for (var r = e + t; e < r; ++e)
                if (n(this.lines[e])) return !0
        }
    }, _r.prototype = {
        chunkSize: function () {
            return this.size
        },
        removeInner: function (e, t) {
            this.size -= t;
            for (var n = 0; n < this.children.length; ++n) {
                var r = this.children[n],
                    i = r.chunkSize();
                if (e < i) {
                    var s = Math.min(t, i - e),
                        o = r.height;
                    r.removeInner(e, s), this.height -= o - r.height, i == s && (this.children.splice(n--, 1), r.parent = null);
                    if ((t -= s) == 0) break;
                    e = 0
                } else e -= i
            }
            if (this.size - t < 25) {
                var u = [];
                this.collapse(u), this.children = [new Mr(u)], this.children[0].parent = this
            }
        },
        collapse: function (e) {
            for (var t = 0, n = this.children.length; t < n; ++t) this.children[t].collapse(e)
        },
        insertInner: function (e, t, n) {
            this.size += t.length, this.height += n;
            for (var r = 0, i = this.children.length; r < i; ++r) {
                var s = this.children[r],
                    o = s.chunkSize();
                if (e <= o) {
                    s.insertInner(e, t, n);
                    if (s.lines && s.lines.length > 50) {
                        while (s.lines.length > 50) {
                            var u = s.lines.splice(s.lines.length - 25, 25),
                                a = new Mr(u);
                            s.height -= a.height, this.children.splice(r + 1, 0, a), a.parent = this
                        }
                        this.maybeSpill()
                    }
                    break
                }
                e -= o
            }
        },
        maybeSpill: function () {
            if (this.children.length <= 10) return;
            var e = this;
            do {
                var t = e.children.splice(e.children.length - 5, 5),
                    n = new _r(t);
                if (!e.parent) {
                    var r = new _r(e.children);
                    r.parent = e, e.children = [r, n], e = r
                } else {
                    e.size -= n.size, e.height -= n.height;
                    var i = ki(e.parent.children, e);
                    e.parent.children.splice(i + 1, 0, n)
                }
                n.parent = e.parent
            } while (e.children.length > 10);
            e.parent.maybeSpill()
        },
        iterN: function (e, t, n) {
            for (var r = 0, i = this.children.length; r < i; ++r) {
                var s = this.children[r],
                    o = s.chunkSize();
                if (e < o) {
                    var u = Math.min(t, o - e);
                    if (s.iterN(e, u, n)) return !0;
                    if ((t -= u) == 0) break;
                    e = 0
                } else e -= o
            }
        }
    };
    var Dr = 0,
        Pr = E.Doc = function (e, t, n) {
            if (!(this instanceof Pr)) return new Pr(e, t, n);
            n == null && (n = 0), _r.call(this, [new Mr([vr("", null)])]), this.first = n, this.scrollTop = this.scrollLeft = 0, this.cantEdit = !1, this.history = Jr(), this.frontier = n;
            var r = {
                line: n,
                ch: 0
            };
            this.sel = {
                from: r,
                to: r,
                head: r,
                anchor: r,
                shift: !1,
                extend: !1,
                goalColumn: null
            }, this.id = ++Dr, this.modeOption = t, typeof e == "string" && (e = Vi(e)), Or(this, {
                from: r,
                to: r,
                text: e
            }, null, {
                head: r,
                anchor: r
            })
        };
    Pr.prototype = Li(_r.prototype, {
        iter: function (e, t, n) {
            n ? this.iterN(e - this.first, t - (e - this.first), n) : this.iterN(this.first, this.first + this.size, e)
        },
        insert: function (e, t) {
            var n = 0;
            for (var r = 0, i = t.length; r < i; ++r) n += t[r].height;
            this.insertInner(e - this.first, t, n)
        },
        remove: function (e, t) {
            this.removeInner(e - this.first, t)
        },
        getValue: function (e) {
            var t = Rr(this, this.first, this.first + this.size);
            return e === !1 ? t : t.join(e || "\n")
        },
        setValue: function (e) {
            var t = {
                    line: this.first,
                    ch: 0
                },
                n = this.first + this.size - 1;
            nn(this, {
                from: t,
                to: {
                    line: n,
                    ch: Ir(this, n).text.length
                },
                text: Vi(e),
                origin: "setValue"
            }, {
                head: t,
                anchor: t
            }, !0)
        },
        replaceRange: function (e, t, n) {
            t = dn(this, t), n = n ? dn(this, n) : t, fn(this, e, t, n)
        },
        getRange: function (e, t, n) {
            var r = qr(this, dn(this, e), dn(this, t));
            return n === !1 ? r : r.join(n || "\n")
        },
        getLine: function (e) {
            var t = this.getLineHandle(e);
            return t && t.text
        },
        setLine: function (e, t) {
            vn(this, e) && fn(this, t, {
                line: e,
                ch: 0
            }, {
                line: e,
                ch: Ir(this, e).text.length
            })
        },
        removeLine: function (e) {
            vn(this, e) && fn(this, "", {
                line: e,
                ch: 0
            }, dn(this, {
                line: e + 1,
                ch: 0
            }))
        },
        getLineHandle: function (e) {
            if (vn(this, e)) return Ir(this, e)
        },
        getLineNumber: function (e) {
            return zr(e)
        },
        lineCount: function () {
            return this.size
        },
        firstLine: function () {
            return this.first
        },
        lastLine: function () {
            return this.first + this.size - 1
        },
        clipPos: function (e) {
            return dn(this, e)
        },
        getCursor: function (e) {
            var t = this.sel,
                n;
            return e == null || e == "head" ? n = t.head : e == "anchor" ? n = t.anchor : e == "end" || e === !1 ? n = t.to : n = t.from, hn(n)
        },
        somethingSelected: function () {
            return !ln(this.sel.head, this.sel.anchor)
        },
        setCursor: bt(function (e, t, n) {
            var r = dn(this, typeof e == "number" ? {
                line: e,
                ch: t || 0
            } : e);
            n ? mn(this, r) : gn(this, r, r)
        }),
        setSelection: bt(function (e, t) {
            gn(this, dn(this, e), dn(this, t || e))
        }),
        extendSelection: bt(function (e, t) {
            mn(this, dn(this, e), t && dn(this, t))
        }),
        getSelection: function (e) {
            return this.getRange(this.sel.from, this.sel.to, e)
        },
        replaceSelection: function (e, t, n) {
            nn(this, {
                from: this.sel.from,
                to: this.sel.to,
                text: Vi(e),
                origin: n
            }, t || "around")
        },
        undo: function () {
            sn(this, "undo")
        },
        redo: function () {
            sn(this, "redo")
        },
        setExtending: function (e) {
            this.sel.extend = e
        },
        historySize: function () {
            var e = this.history;
            return {
                undo: e.done.length,
                redo: e.undone.length
            }
        },
        clearHistory: function () {
            this.history = Jr()
        },
        markClean: function () {
            this.history.dirtyCounter = 0, this.history.lastOp = this.history.lastOrigin = null
        },
        isClean: function () {
            return this.history.dirtyCounter == 0
        },
        getHistory: function () {
            return {
                done: ei(this.history.done),
                undone: ei(this.history.undone)
            }
        },
        setHistory: function (e) {
            var t = this.history = Jr();
            t.done = e.done.slice(0), t.undone = e.undone.slice(0)
        },
        markText: function (e, t, n) {
            return Vn(this, dn(this, e), dn(this, t), n, "range")
        },
        setBookmark: function (e, t) {
            return e = dn(this, e), Vn(this, e, e, t ? {
                replacedWith: t
            } : {}, "bookmark")
        },
        findMarksAt: function (e) {
            e = dn(this, e);
            var t = [],
                n = Ir(this, e.line).markedSpans;
            if (n)
                for (var r = 0; r < n.length; ++r) {
                    var i = n[r];
                    (i.from == null || i.from <= e.ch) && (i.to == null || i.to >= e.ch) && t.push(i.marker.parent || i.marker)
                }
            return t
        },
        posFromIndex: function (e) {
            var t, n = this.first;
            return this.iter(function (r) {
                var i = r.text.length + 1;
                if (i > e) return t = e, !0;
                e -= i, ++n
            }), dn(this, {
                line: n,
                ch: t
            })
        },
        indexFromPos: function (e) {
            e = dn(this, e);
            var t = e.ch;
            return e.line < this.first || e.ch < 0 ? 0 : (this.iter(this.first, e.line, function (e) {
                t += e.text.length + 1
            }), t)
        },
        copy: function (e) {
            var t = new Pr(Rr(this, this.first, this.first + this.size), this.modeOption, this.first);
            return t.scrollTop = this.scrollTop, t.scrollLeft = this.scrollLeft, t.sel = {
                from: this.sel.from,
                to: this.sel.to,
                head: this.sel.head,
                anchor: this.sel.anchor,
                shift: this.sel.shift,
                extend: !1,
                goalColumn: this.sel.goalColumn
            }, e && (t.history.undoDepth = this.history.undoDepth, t.setHistory(this.getHistory())), t
        },
        linkedDoc: function (e) {
            e || (e = {});
            var t = this.first,
                n = this.first + this.size;
            e.from != null && e.from > t && (t = e.from), e.to != null && e.to < n && (n = e.to);
            var r = new Pr(Rr(this, t, n), e.mode || this.modeOption, t);
            return e.sharedHist && (r.history = this.history), (this.linked || (this.linked = [])).push({
                doc: r,
                sharedHist: e.sharedHist
            }), r.linked = [{
                doc: this,
                isParent: !0,
                sharedHist: e.sharedHist
            }], r
        },
        unlinkDoc: function (e) {
            e instanceof E && (e = e.doc);
            if (this.linked)
                for (var t = 0; t < this.linked.length; ++t) {
                    var n = this.linked[t];
                    if (n.doc != e) continue;
                    this.linked.splice(t, 1), e.unlinkDoc(this);
                    break
                }
            if (e.history == this.history) {
                var r = [e.id];
                jr(e, function (e) {
                    r.push(e.id)
                }, !0), e.history = Jr(), e.history.done = ei(this.history.done, r), e.history.undone = ei(this.history.undone, r)
            }
        },
        iterLinkedDocs: function (e) {
            jr(this, e)
        },
        getMode: function () {
            return this.mode
        },
        getEditor: function () {
            return this.cm
        }
    });
    var Hr = "setValue getValue getSelection replaceSelection undo redo historySize clearHistory markClean isClean getHistory setHistory markText setBookmark findMarksAt lineCount firstLine lastLine clipPos getCursor somethingSelected setCursor setSelection extendSelection setExtending getLine setLine removeLine getMode replaceRange getRange getLineHandle getLineNumber posFromIndex indexFromPos linkedDoc unlinkDoc iterLinkedDocs".split(" ");
    for (var Br = 0; Br < Hr.length; ++Br)(function (e) {
        var t = Pr.prototype[e];
        E.prototype[e] = function () {
            return t.apply(this.doc, arguments)
        }
    })(Hr[Br]);
    E.e_stop = ai, E.e_preventDefault = oi, E.e_stopPropagation = ui;
    var vi, mi = 0;
    E.on = hi, E.off = pi, E.signal = di;
    var bi = 30,
        wi = E.Pass = {
            toString: function () {
                return "CodeMirror.Pass"
            }
        };
    Ei.prototype = {
        set: function (e, t) {
            clearTimeout(this.id), this.id = setTimeout(t, e)
        }
    }, E.countColumn = Si;
    var xi = [""],
        _i = /[\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc]/,
        Hi = /[\u0300-\u036F\u0483-\u0487\u0488-\u0489\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\uA66F\uA670-\uA672\uA674-\uA67D\uA69F]/,
        qi = function () {
            if (r) return !1;
            var e = Bi("div");
            return "draggable" in e || "dragDrop" in e
        }(),
        Ri = /^$/;
    e ? Ri = /$'/ : a ? Ri = /\-[^ \-?]|\?[^ !'\"\),.\-\/:;\?\]\}]/ : o && (Ri = /\-[^ \-\.?]|\?[^ \-\.?\]\}:;!'\"\),\/]|[\.!\"#&%\)*+,:;=>\]|\}~][\(\{\[<]|\$'/);
    var Ui, Wi, Vi = "\n\nb".split(/\n/).length != 3 ? function (e) {
        var t = 0,
            n = [],
            r = e.length;
        while (t <= r) {
            var i = e.indexOf("\n", t);
            i == -1 && (i = e.length);
            var s = e.slice(t, e.charAt(i - 1) == "\r" ? i - 1 : i),
                o = s.indexOf("\r");
            o != -1 ? (n.push(s.slice(0, o)), t += o + 1) : (n.push(s), t = i + 1)
        }
        return n
    } : function (e) {
        return e.split(/\r\n?|\n/)
    };
    E.splitLines = Vi;
    var $i = window.getSelection ? function (e) {
            try {
                return e.selectionStart != e.selectionEnd
            } catch (t) {
                return !1
            }
        } : function (e) {
            try {
                var t = e.ownerDocument.selection.createRange()
            } catch (n) {}
            return !t || t.parentElement() != e ? !1 : t.compareEndPoints("StartToEnd", t) != 0
        },
        Ji = function () {
            var e = Bi("div");
            return "oncopy" in e ? !0 : (e.setAttribute("oncopy", "return;"), typeof e.oncopy == "function")
        }(),
        Ki = {
            3: "Enter",
            8: "Backspace",
            9: "Tab",
            13: "Enter",
            16: "Shift",
            17: "Ctrl",
            18: "Alt",
            19: "Pause",
            20: "CapsLock",
            27: "Esc",
            32: "Space",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "Left",
            38: "Up",
            39: "Right",
            40: "Down",
            44: "PrintScrn",
            45: "Insert",
            46: "Delete",
            59: ";",
            91: "Mod",
            92: "Mod",
            93: "Mod",
            109: "-",
            107: "=",
            127: "Delete",
            186: ";",
            187: "=",
            188: ",",
            189: "-",
            190: ".",
            191: "/",
            192: "`",
            219: "[",
            220: "\\",
            221: "]",
            222: "'",
            63276: "PageUp",
            63277: "PageDown",
            63275: "End",
            63273: "Home",
            63234: "Left",
            63232: "Up",
            63235: "Right",
            63233: "Down",
            63302: "Insert",
            63272: "Delete"
        };
    E.keyNames = Ki,
        function () {
            for (var e = 0; e < 10; e++) Ki[e + 48] = String(e);
            for (var e = 65; e <= 90; e++) Ki[e] = String.fromCharCode(e);
            for (var e = 1; e <= 12; e++) Ki[e + 111] = Ki[e + 63235] = "F" + e
        }();
    var ss = function () {
        function n(n) {
            return n <= 255 ? e.charAt(n) : 1424 <= n && n <= 1524 ? "R" : 1536 <= n && n <= 1791 ? t.charAt(n - 1536) : 1792 <= n && n <= 2220 ? "r" : "L"
        }
        var e = "bbbbbbbbbtstwsbbbbbbbbbbbbbbssstwNN%%%NNNNNN,N,N1111111111NNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbbb,N%%%%NNNNLNNNNN%%11NLNNN1LNNNNNLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLL",
            t = "rrrrrrrrrrrr,rNNmmmmmmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmrrrrrrrnnnnnnnnnn%nnrrrmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmmmmmmNmmmmrrrrrrrrrrrrrrrrrr",
            r = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/,
            i = /[stwN]/,
            s = /[LRr]/,
            o = /[Lb1n]/,
            u = /[1n]/,
            a = "L";
        return function (e) {
            if (!r.test(e)) return !1;
            var t = e.length,
                f = [];
            for (var l = 0, c; l < t; ++l) f.push(c = n(e.charCodeAt(l)));
            for (var l = 0, h = a; l < t; ++l) {
                var c = f[l];
                c == "m" ? f[l] = h : h = c
            }
            for (var l = 0, p = a; l < t; ++l) {
                var c = f[l];
                c == "1" && p == "r" ? f[l] = "n" : s.test(c) && (p = c, c == "r" && (f[l] = "R"))
            }
            for (var l = 1, h = f[0]; l < t - 1; ++l) {
                var c = f[l];
                c == "+" && h == "1" && f[l + 1] == "1" ? f[l] = "1" : c == "," && h == f[l + 1] && (h == "1" || h == "n") && (f[l] = h), h = c
            }
            for (var l = 0; l < t; ++l) {
                var c = f[l];
                if (c == ",") f[l] = "N";
                else if (c == "%") {
                    for (var d = l + 1; d < t && f[d] == "%"; ++d);
                    var v = l && f[l - 1] == "!" || d < t - 1 && f[d] == "1" ? "1" : "N";
                    for (var m = l; m < d; ++m) f[m] = v;
                    l = d - 1
                }
            }
            for (var l = 0, p = a; l < t; ++l) {
                var c = f[l];
                p == "L" && c == "1" ? f[l] = "L" : s.test(c) && (p = c)
            }
            for (var l = 0; l < t; ++l)
                if (i.test(f[l])) {
                    for (var d = l + 1; d < t && i.test(f[d]); ++d);
                    var g = (l ? f[l - 1] : a) == "L",
                        y = (d < t - 1 ? f[d] : a) == "L",
                        v = g || y ? "L" : "R";
                    for (var m = l; m < d; ++m) f[m] = v;
                    l = d - 1
                }
            var b = [],
                w;
            for (var l = 0; l < t;)
                if (o.test(f[l])) {
                    var E = l;
                    for (++l; l < t && o.test(f[l]); ++l);
                    b.push({
                        from: E,
                        to: l,
                        level: 0
                    })
                } else {
                    var S = l,
                        x = b.length;
                    for (++l; l < t && f[l] != "L"; ++l);
                    for (var m = S; m < l;)
                        if (u.test(f[m])) {
                            S < m && b.splice(x, 0, {
                                from: S,
                                to: m,
                                level: 1
                            });
                            var T = m;
                            for (++m; m < l && u.test(f[m]); ++m);
                            b.splice(x, 0, {
                                from: T,
                                to: m,
                                level: 2
                            }), S = m
                        } else ++m;
                    S < l && b.splice(x, 0, {
                        from: S,
                        to: l,
                        level: 1
                    })
                }
            return b[0].level == 1 && (w = e.match(/^\s+/)) && (b[0].from = w[0].length, b.unshift({
                from: 0,
                to: w[0].length,
                level: 0
            })), Ni(b).level == 1 && (w = e.match(/\s+$/)) && (Ni(b).to -= w[0].length, b.push({
                from: t - w[0].length,
                to: t,
                level: 0
            })), b[0].level != Ni(b).level && b.push({
                from: t,
                to: t,
                level: b[0].level
            }), b
        }
    }();
    return E.version = "3.02 +", E
}();
CodeMirror.defineMode("python", function (conf, parserConf) {
    var ERRORCLASS = 'error';

    function wordRegexp(words) {
        return new RegExp("^((" + words.join(")|(") + "))\\b");
    }
    var singleOperators = new RegExp("^[\\+\\-\\*/%&|\\^~<>!]");
    var singleDelimiters = new RegExp('^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]');
    var doubleOperators = new RegExp("^((==)|(!=)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");
    var doubleDelimiters = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");
    var tripleDelimiters = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
    var identifiers = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");
    var wordOperators = wordRegexp(['and', 'or', 'not', 'is', 'in']);
    var commonkeywords = ['as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'lambda', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'];
    var commonBuiltins = ['abs', 'all', 'any', 'bin', 'bool', 'bytearray', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'property', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip', '__import__', 'NotImplemented', 'Ellipsis', '__debug__'];
    var py2 = {
        'builtins': ['apply', 'basestring', 'buffer', 'cmp', 'coerce', 'execfile', 'file', 'intern', 'long', 'raw_input', 'reduce', 'reload', 'unichr', 'unicode', 'xrange', 'False', 'True', 'None'],
        'keywords': ['exec', 'print']
    };
    var py3 = {
        'builtins': ['ascii', 'bytes', 'exec', 'print'],
        'keywords': ['nonlocal', 'False', 'True', 'None']
    };
    if (!!parserConf.version && parseInt(parserConf.version, 10) === 3) {
        commonkeywords = commonkeywords.concat(py3.keywords);
        commonBuiltins = commonBuiltins.concat(py3.builtins);
        var stringPrefixes = new RegExp("^(([rb]|(br))?('{3}|\"{3}|['\"]))", "i");
    } else {
        commonkeywords = commonkeywords.concat(py2.keywords);
        commonBuiltins = commonBuiltins.concat(py2.builtins);
        var stringPrefixes = new RegExp("^(([rub]|(ur)|(br))?('{3}|\"{3}|['\"]))", "i");
    }
    var keywords = wordRegexp(commonkeywords);
    var builtins = wordRegexp(commonBuiltins);
    var indentInfo = null;

    function tokenBase(stream, state) {
        if (stream.sol()) {
            var scopeOffset = state.scopes[0].offset;
            if (stream.eatSpace()) {
                var lineOffset = stream.indentation();
                if (lineOffset > scopeOffset) {
                    indentInfo = 'indent';
                } else if (lineOffset < scopeOffset) {
                    indentInfo = 'dedent';
                }
                return null;
            } else {
                if (scopeOffset > 0) {
                    dedent(stream, state);
                }
            }
        }
        if (stream.eatSpace()) {
            return null;
        }
        var ch = stream.peek();
        if (ch === '#') {
            stream.skipToEnd();
            return 'comment';
        }
        if (stream.match(/^[0-9\.]/, false)) {
            var floatLiteral = false;
            if (stream.match(/^\d*\.\d+(e[\+\-]?\d+)?/i)) {
                floatLiteral = true;
            }
            if (stream.match(/^\d+\.\d*/)) {
                floatLiteral = true;
            }
            if (stream.match(/^\.\d+/)) {
                floatLiteral = true;
            }
            if (floatLiteral) {
                stream.eat(/J/i);
                return 'number';
            }
            var intLiteral = false;
            if (stream.match(/^0x[0-9a-f]+/i)) {
                intLiteral = true;
            }
            if (stream.match(/^0b[01]+/i)) {
                intLiteral = true;
            }
            if (stream.match(/^0o[0-7]+/i)) {
                intLiteral = true;
            }
            if (stream.match(/^[1-9]\d*(e[\+\-]?\d+)?/)) {
                stream.eat(/J/i);
                intLiteral = true;
            }
            if (stream.match(/^0(?![\dx])/i)) {
                intLiteral = true;
            }
            if (intLiteral) {
                stream.eat(/L/i);
                return 'number';
            }
        }
        if (stream.match(stringPrefixes)) {
            state.tokenize = tokenStringFactory(stream.current());
            return state.tokenize(stream, state);
        }
        if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {
            return null;
        }
        if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {
            return 'operator';
        }
        if (stream.match(singleDelimiters)) {
            return null;
        }
        if (stream.match(keywords)) {
            return 'keyword';
        }
        if (stream.match(builtins)) {
            return 'builtin';
        }
        if (stream.match(identifiers)) {
            return 'variable';
        }
        stream.next();
        return ERRORCLASS;
    }

    function tokenStringFactory(delimiter) {
        while ('rub'.indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {
            delimiter = delimiter.substr(1);
        }
        var singleline = delimiter.length == 1;
        var OUTCLASS = 'string';
        return function tokenString(stream, state) {
            while (!stream.eol()) {
                stream.eatWhile(/[^'"\\]/);
                if (stream.eat('\\')) {
                    stream.next();
                    if (singleline && stream.eol()) {
                        return OUTCLASS;
                    }
                } else if (stream.match(delimiter)) {
                    state.tokenize = tokenBase;
                    return OUTCLASS;
                } else {
                    stream.eat(/['"]/);
                }
            }
            if (singleline) {
                if (parserConf.singleLineStringErrors) {
                    return ERRORCLASS;
                } else {
                    state.tokenize = tokenBase;
                }
            }
            return OUTCLASS;
        };
    }

    function indent(stream, state, type) {
        type = type || 'py';
        var indentUnit = 0;
        if (type === 'py') {
            if (state.scopes[0].type !== 'py') {
                state.scopes[0].offset = stream.indentation();
                return;
            }
            for (var i = 0; i < state.scopes.length; ++i) {
                if (state.scopes[i].type === 'py') {
                    indentUnit = state.scopes[i].offset + conf.indentUnit;
                    break;
                }
            }
        } else {
            indentUnit = stream.column() + stream.current().length;
        }
        state.scopes.unshift({
            offset: indentUnit,
            type: type
        });
    }

    function dedent(stream, state, type) {
        type = type || 'py';
        if (state.scopes.length == 1) return;
        if (state.scopes[0].type === 'py') {
            var _indent = stream.indentation();
            var _indent_index = -1;
            for (var i = 0; i < state.scopes.length; ++i) {
                if (_indent === state.scopes[i].offset) {
                    _indent_index = i;
                    break;
                }
            }
            if (_indent_index === -1) {
                return true;
            }
            while (state.scopes[0].offset !== _indent) {
                state.scopes.shift();
            }
            return false;
        } else {
            if (type === 'py') {
                state.scopes[0].offset = stream.indentation();
                return false;
            } else {
                if (state.scopes[0].type != type) {
                    return true;
                }
                state.scopes.shift();
                return false;
            }
        }
    }

    function tokenLexer(stream, state) {
        indentInfo = null;
        var style = state.tokenize(stream, state);
        var current = stream.current();
        if (current === '.') {
            style = stream.match(identifiers, false) ? null : ERRORCLASS;
            if (style === null && state.lastToken === 'meta') {
                style = 'meta';
            }
            return style;
        }
        if (current === '@') {
            return stream.match(identifiers, false) ? 'meta' : ERRORCLASS;
        }
        if ((style === 'variable' || style === 'builtin') && state.lastToken === 'meta') {
            style = 'meta';
        }
        if (current === 'pass' || current === 'return') {
            state.dedent += 1;
        }
        if (current === 'lambda') state.lambda = true;
        if ((current === ':' && !state.lambda && state.scopes[0].type == 'py') || indentInfo === 'indent') {
            indent(stream, state);
        }
        var delimiter_index = '[({'.indexOf(current);
        if (delimiter_index !== -1) {
            indent(stream, state, '])}'.slice(delimiter_index, delimiter_index + 1));
        }
        if (indentInfo === 'dedent') {
            if (dedent(stream, state)) {
                return ERRORCLASS;
            }
        }
        delimiter_index = '])}'.indexOf(current);
        if (delimiter_index !== -1) {
            if (dedent(stream, state, current)) {
                return ERRORCLASS;
            }
        }
        if (state.dedent > 0 && stream.eol() && state.scopes[0].type == 'py') {
            if (state.scopes.length > 1) state.scopes.shift();
            state.dedent -= 1;
        }
        return style;
    }
    var external = {
        startState: function (basecolumn) {
            return {
                tokenize: tokenBase,
                scopes: [{
                    offset: basecolumn || 0,
                    type: 'py'
                }],
                lastToken: null,
                lambda: false,
                dedent: 0
            };
        },
        token: function (stream, state) {
            var style = tokenLexer(stream, state);
            state.lastToken = style;
            if (stream.eol() && stream.lambda) {
                state.lambda = false;
            }
            return style;
        },
        indent: function (state, textAfter) {
            if (state.tokenize != tokenBase) {
                return 0;
            }
            return state.scopes[0].offset;
        }
    };
    return external;
});
CodeMirror.defineMIME("text/x-python", "python");
(function ($) {
    $.zip = function (arr1, arr2) {
        var shortest = (arr1.length > arr2.length) ? arr2 : arr1;
        var zipped = {};
        for (var i = 0; i < shortest.length; i++) {
            zipped[arr1[i]] = arr2[i];
        }
        return zipped;
    };
})(jQuery);
jQuery.download = function (url, data, method) {
    if (url && data) {
        data = typeof data == 'string' ? data : jQuery.param(data);
        var inputs = '';
        jQuery.each(data.split('&'), function () {
            var pair = this.split('=');
            inputs += '<input type="hidden" name="' + pair[0] + '" value="' + pair[1] + '" />';
        });
        jQuery('<form action="' + url + '" method="' + (method || 'post') + '">' + inputs + '</form>').appendTo('body').submit().remove();
    };
};
(function ($) {
    $.fn.layout = function (opts) {
        function keyDown(e) {
            if (!e) return !0;
            var t = e.keyCode;
            if (t < 33) return !0;
            var n = {
                    38: "north",
                    40: "south",
                    37: "west",
                    39: "east"
                },
                r = t >= 37 && t <= 40,
                i = e.altKey,
                s = e.shiftKey,
                o = e.ctrlKey,
                u = !1,
                a, f, l, h, p;
            return !o && !s ? !0 : (r && options[n[t]].enableCursorHotkey ? u = n[t] : $.each(c.borderPanes.split(","), function (e, n) {
                f = options[n], l = f.customHotkey, h = f.customHotkeyModifier;
                if (s && h == "SHIFT" || o && h == "CTRL" || o && s)
                    if (l && t == (isNaN(l) || l <= 9 ? l.toUpperCase().charCodeAt(0) : l)) return u = n, !1
            }), u ? (f = options[u], a = state[u], !f.enableCursorHotkey || a.isHidden || !$Ps[u] ? !0 : (p = e.target || e.srcElement, p && s && r && (p.tagName == "TEXTAREA" || p.tagName == "INPUT" && (t == 37 || t == 39)) ? !0 : (toggle(u), e.stopPropagation(), e.returnValue = !1, !1))) : !0)
        }

        function allowOverflow(e) {
            this && this.tagName && (e = this);
            var t;
            typeof e == "string" ? t = $Ps[e] : $(e).attr("pane") ? t = $(e) : t = $(e).parents("div[pane]:first");
            if (!t.length) return;
            var n = t.attr("pane"),
                r = state[n];
            r.cssSaved && resetOverflow(n);
            if (r.isSliding || r.isResizing || r.isClosed) {
                r.cssSaved = !1;
                return
            }
            var i = {
                    zIndex: c.zIndex.pane_normal + 1
                },
                s = {},
                o = t.css("overflow"),
                u = t.css("overflowX"),
                a = t.css("overflowY");
            o != "visible" && (s.overflow = o, i.overflow = "visible"), u && u != "visible" && u != "auto" && (s.overflowX = u, i.overflowX = "visible"), a && a != "visible" && a != "auto" && (s.overflowY = u, i.overflowY = "visible"), r.cssSaved = s, t.css(i), $.each(c.allPanes.split(","), function (e, t) {
                t != n && resetOverflow(t)
            })
        }

        function resetOverflow(e) {
            this && this.tagName && (e = this);
            var t;
            typeof e == "string" ? t = $Ps[e] : $(e).hasClass("ui-layout-pane") ? t = $(e) : t = $(e).parents("div[pane]:first");
            if (!t.length) return;
            var n = t.attr("pane"),
                r = state[n],
                i = r.cssSaved || {};
            !r.isSliding && !r.isResizing && t.css("zIndex", c.zIndex.pane_normal), t.css(i), r.cssSaved = !1
        }

        function getBtn(e, t, n) {
            var r = $(e),
                i = "Error Adding Button \n\nInvalid ";
            if (!r.length) alert(i + "selector: " + e);
            else {
                if (c.borderPanes.indexOf(t) != -1) {
                    var s = options[t].buttonClass + "-" + n;
                    return r.addClass(s + " " + s + "-" + t), r
                }
                alert(i + "pane: " + t)
            }
            return !1
        }

        function addToggleBtn(e, t) {
            var n = getBtn(e, t, "toggle");
            n && n.attr("title", state[t].isClosed ? "Open" : "Close").click(function (e) {
                toggle(t), e.stopPropagation()
            })
        }

        function addOpenBtn(e, t) {
            var n = getBtn(e, t, "open");
            n && n.attr("title", "Open").click(function (e) {
                open(t), e.stopPropagation()
            })
        }

        function addCloseBtn(e, t) {
            var n = getBtn(e, t, "close");
            n && n.attr("title", "Close").click(function (e) {
                close(t), e.stopPropagation()
            })
        }

        function addPinBtn(e, t) {
            var n = getBtn(e, t, "pin");
            if (n) {
                var r = state[t];
                n.click(function (e) {
                    setPinState($(this), t, r.isSliding || r.isClosed), r.isSliding || r.isClosed ? open(t) : close(t), e.stopPropagation()
                }), setPinState(n, t, !r.isClosed && !r.isSliding), c[t].pins.push(e)
            }
        }

        function syncPinBtns(e, t) {
            $.each(c[e].pins, function (n, r) {
                setPinState($(r), e, t)
            })
        }

        function setPinState(e, t, n) {
            var r = e.attr("pin");
            if (r && n == (r == "down")) return;
            var i = options[t].buttonClass,
                s = i + "-pin",
                o = s + "-" + t,
                u = s + "-up",
                a = o + "-up",
                f = s + "-down",
                l = o + "-down";
            e.attr("pin", n ? "down" : "up").attr("title", n ? "Un-Pin" : "Pin").removeClass(n ? u : f).removeClass(n ? a : l).addClass(n ? f : u).addClass(n ? l : a)
        }
        var prefix = "ui-layout-",
            defaults = {
                paneClass: prefix + "pane",
                resizerClass: prefix + "resizer",
                togglerClass: prefix + "toggler",
                togglerInnerClass: prefix + "",
                buttonClass: prefix + "button",
                contentSelector: "." + prefix + "content",
                contentIgnoreSelector: "." + prefix + "ignore"
            },
            options = {
                name: "",
                scrollToBookmarkOnLoad: !0,
                defaults: {
                    applyDefaultStyles: !1,
                    closable: !0,
                    resizable: !0,
                    slidable: !0,
                    contentSelector: defaults.contentSelector,
                    contentIgnoreSelector: defaults.contentIgnoreSelector,
                    paneClass: defaults.paneClass,
                    resizerClass: defaults.resizerClass,
                    togglerClass: defaults.togglerClass,
                    buttonClass: defaults.buttonClass,
                    resizerDragOpacity: 1,
                    maskIframesOnResize: !0,
                    minSize: 0,
                    maxSize: 0,
                    spacing_open: 6,
                    spacing_closed: 6,
                    togglerLength_open: 50,
                    togglerLength_closed: 50,
                    togglerAlign_open: "center",
                    togglerAlign_closed: "center",
                    togglerTip_open: "Close",
                    togglerTip_closed: "Open",
                    resizerTip: "Resize",
                    sliderTip: "Slide Open",
                    sliderCursor: "pointer",
                    slideTrigger_open: "click",
                    slideTrigger_close: "mouseout",
                    hideTogglerOnSlide: !1,
                    togglerContent_open: "",
                    togglerContent_closed: "",
                    showOverflowOnHover: !1,
                    enableCursorHotkey: !0,
                    customHotkeyModifier: "SHIFT",
                    fxName: "slide",
                    fxSpeed: null,
                    fxSettings: {},
                    initClosed: !1,
                    initHidden: !1
                },
                north: {
                    paneSelector: "." + prefix + "north",
                    size: "auto",
                    resizerCursor: "n-resize"
                },
                south: {
                    paneSelector: "." + prefix + "south",
                    size: "auto",
                    resizerCursor: "s-resize"
                },
                east: {
                    paneSelector: "." + prefix + "east",
                    size: 200,
                    resizerCursor: "e-resize"
                },
                west: {
                    paneSelector: "." + prefix + "west",
                    size: 200,
                    resizerCursor: "w-resize"
                },
                center: {
                    paneSelector: "." + prefix + "center"
                }
            },
            effects = {
                slide: {
                    all: {
                        duration: "fast"
                    },
                    north: {
                        direction: "up"
                    },
                    south: {
                        direction: "down"
                    },
                    east: {
                        direction: "right"
                    },
                    west: {
                        direction: "left"
                    }
                },
                drop: {
                    all: {
                        duration: "slow"
                    },
                    north: {
                        direction: "up"
                    },
                    south: {
                        direction: "down"
                    },
                    east: {
                        direction: "right"
                    },
                    west: {
                        direction: "left"
                    }
                },
                scale: {
                    all: {
                        duration: "fast"
                    }
                }
            },
            config = {
                allPanes: "north,south,east,west,center",
                borderPanes: "north,south,east,west",
                zIndex: {
                    resizer_normal: 1,
                    pane_normal: 2,
                    mask: 4,
                    sliding: 100,
                    resizing: 1e4,
                    animation: 1e4
                },
                resizers: {
                    cssReq: {
                        position: "absolute",
                        padding: 0,
                        margin: 0,
                        fontSize: "1px",
                        textAlign: "left",
                        overflow: "hidden",
                        zIndex: 1
                    },
                    cssDef: {
                        background: "#DDD",
                        border: "none"
                    }
                },
                togglers: {
                    cssReq: {
                        position: "absolute",
                        display: "block",
                        padding: 0,
                        margin: 0,
                        overflow: "hidden",
                        textAlign: "center",
                        fontSize: "1px",
                        cursor: "pointer",
                        zIndex: 1
                    },
                    cssDef: {
                        background: "#AAA"
                    }
                },
                content: {
                    cssReq: {
                        overflow: "auto"
                    },
                    cssDef: {}
                },
                defaults: {
                    cssReq: {
                        position: "absolute",
                        margin: 0,
                        zIndex: 2
                    },
                    cssDef: {
                        padding: "10px",
                        background: "#FFF",
                        border: "1px solid #BBB",
                        overflow: "auto"
                    }
                },
                north: {
                    edge: "top",
                    sizeType: "height",
                    dir: "horz",
                    cssReq: {
                        top: 0,
                        bottom: "auto",
                        left: 0,
                        right: 0,
                        width: "auto"
                    }
                },
                south: {
                    edge: "bottom",
                    sizeType: "height",
                    dir: "horz",
                    cssReq: {
                        top: "auto",
                        bottom: 0,
                        left: 0,
                        right: 0,
                        width: "auto"
                    }
                },
                east: {
                    edge: "right",
                    sizeType: "width",
                    dir: "vert",
                    cssReq: {
                        left: "auto",
                        right: 0,
                        top: "auto",
                        bottom: "auto",
                        height: "auto"
                    }
                },
                west: {
                    edge: "left",
                    sizeType: "width",
                    dir: "vert",
                    cssReq: {
                        left: 0,
                        right: "auto",
                        top: "auto",
                        bottom: "auto",
                        height: "auto"
                    }
                },
                center: {
                    dir: "center",
                    cssReq: {
                        left: "auto",
                        right: "auto",
                        top: "auto",
                        bottom: "auto",
                        height: "auto",
                        width: "auto"
                    }
                }
            },
            state = {
                id: Math.floor(Math.random() * 1e4),
                container: {},
                north: {},
                south: {},
                east: {},
                west: {},
                center: {}
            },
            altEdge = {
                top: "bottom",
                bottom: "top",
                left: "right",
                right: "left"
            },
            altSide = {
                north: "south",
                south: "north",
                east: "west",
                west: "east"
            },
            isStr = function (e) {
                if (typeof e == "string") return !0;
                if (typeof e == "object") try {
                    var t = e.constructor.toString().match(/string/i);
                    return t !== null
                } catch (n) {}
                return !1
            },
            str = function (e) {
                return typeof e == "string" || isStr(e) ? $.trim(e) : e
            },
            min = function (e, t) {
                return Math.min(e, t)
            },
            max = function (e, t) {
                return Math.max(e, t)
            },
            transformData = function (e) {
                var t = {
                    defaults: {
                        fxSettings: {}
                    },
                    north: {
                        fxSettings: {}
                    },
                    south: {
                        fxSettings: {}
                    },
                    east: {
                        fxSettings: {}
                    },
                    west: {
                        fxSettings: {}
                    },
                    center: {
                        fxSettings: {}
                    }
                };
                return e = e || {}, e.effects || e.defaults || e.north || e.south || e.west || e.east || e.center ? t = $.extend(t, e) : $.each(e, function (e, n) {
                    a = e.split("__"), t[a[1] ? a[0] : "defaults"][a[1] ? a[1] : a[0]] = n
                }), t
            },
            setFlowCallback = function (e, t, n) {
                function o(e, n) {
                    i = c[e], i.doCallback ? (cpPane = i.callback.split(",")[1], cpPane != e && cpPane != t && o(cpPane, !0)) : (i.doCallback = !0, i.callback = r)
                }
                var r = e + "," + t + "," + (n ? 1 : 0),
                    i, s;
                $.each(c.borderPanes.split(","), function (e, t) {
                    if (c[t].isMoving) return o(t), !1
                })
            },
            execFlowCallback = function (e) {
                var t = c[e];
                c.isLayoutBusy = !1, delete t.isMoving;
                if (!t.doCallback || !t.callback) return;
                t.doCallback = !1;
                var n = t.callback.split(","),
                    r = n[2] > 0 ? !0 : !1;
                n[0] == "open" ? open(n[1], r) : n[0] == "close" && close(n[1], r), t.doCallback || (t.callback = null)
            },
            execUserCallback = function (pane, v_fn) {
                if (!v_fn) return;
                var fn;
                try {
                    if (typeof v_fn == "function") fn = v_fn;
                    else {
                        if (typeof v_fn != "string") return;
                        if (v_fn.indexOf(",") > 0) {
                            var args = v_fn.split(","),
                                fn = eval(args[0]);
                            if (typeof fn == "function" && args.length > 1) return fn(args[1])
                        } else fn = eval(v_fn)
                    } if (typeof fn == "function") return fn(pane, $Ps[pane], $.extend({}, state[pane]), $.extend({}, options[pane]), options.name)
                } catch (ex) {}
            },
            cssNum = function (e, t) {
                var n = 0,
                    r = !1,
                    i = "";
                return $.browser.msie || $.curCSS(e[0], "display", true) == "none" && (r = !0, i = $.curCSS(e[0], "visibility", !0), e.css({
                    display: "block",
                    visibility: "hidden"
                })), n = parseInt($.curCSS(e[0], t, !0), 10) || 0, r && (e.css({
                    display: "none"
                }), i && i != "hidden" && e.css({
                    visibility: i
                })), n
            },
            cssW = function (e, t) {
                var n;
                return isStr(e) ? (e = str(e), n = $Ps[e]) : n = $(e), t <= 0 ? 0 : (t > 0 || (t = isStr(e) ? getPaneSize(e) : n.outerWidth()), $.boxModel ? t - cssNum(n, "paddingLeft") - cssNum(n, "paddingRight") - ($.curCSS(n[0], "borderLeftStyle", true) == "none" ? 0 : cssNum(n, "borderLeftWidth")) - ($.curCSS(n[0], "borderRightStyle", true) == "none" ? 0 : cssNum(n, "borderRightWidth")) : t)
            },
            cssH = function (e, t) {
                var n;
                return isStr(e) ? (e = str(e), n = $Ps[e]) : n = $(e), t <= 0 ? 0 : (t > 0 || (t = isStr(e) ? getPaneSize(e) : n.outerHeight()), $.boxModel ? t - cssNum(n, "paddingTop") - cssNum(n, "paddingBottom") - ($.curCSS(n[0], "borderTopStyle", true) == "none" ? 0 : cssNum(n, "borderTopWidth")) - ($.curCSS(n[0], "borderBottomStyle", true) == "none" ? 0 : cssNum(n, "borderBottomWidth")) : t)
            },
            cssSize = function (e, t) {
                return c[e].dir == "horz" ? cssH(e, t) : cssW(e, t)
            },
            getPaneSize = function (e, t) {
                var n = $Ps[e],
                    r = options[e],
                    i = state[e],
                    s = t ? r.spacing_open : 0,
                    o = t ? r.spacing_closed : 0;
                return !n || i.isHidden ? 0 : i.isClosed || i.isSliding && t ? o : c[e].dir == "horz" ? n.outerHeight() + s : n.outerWidth() + s
            },
            setPaneMinMaxSizes = function (e) {
                var t = cDims,
                    n = c[e].edge,
                    r = c[e].dir,
                    i = options[e],
                    s = state[e],
                    o = $Ps[e],
                    u = $Ps[altSide[e]],
                    a = i.spacing_open,
                    f = options[altSide[e]].spacing_open,
                    l = u ? r == "horz" ? u.outerHeight() : u.outerWidth() : 0,
                    h = r == "horz" ? t.innerHeight : t.innerWidth,
                    p = h - a - l - f,
                    d = s.minSize || 0,
                    v = Math.min(s.maxSize || 9999, p),
                    m, g;
                switch (e) {
                case "north":
                    m = t.offsetTop + d, g = t.offsetTop + v;
                    break;
                case "west":
                    m = t.offsetLeft + d, g = t.offsetLeft + v;
                    break;
                case "south":
                    m = t.offsetTop + t.innerHeight - v, g = t.offsetTop + t.innerHeight - d;
                    break;
                case "east":
                    m = t.offsetLeft + t.innerWidth - v, g = t.offsetLeft + t.innerWidth - d
                }
                $.extend(s, {
                    minSize: d,
                    maxSize: v,
                    minPosition: m,
                    maxPosition: g
                })
            },
            getPaneDims = function () {
                var d = {
                    top: getPaneSize("north", !0),
                    bottom: getPaneSize("south", !0),
                    left: getPaneSize("west", !0),
                    right: getPaneSize("east", !0),
                    width: 0,
                    height: 0
                };
                with(d) width = cDims.innerWidth - left - right, height = cDims.innerHeight - bottom - top, top += cDims.top, bottom += cDims.bottom, left += cDims.left, right += cDims.right;
                return d
            },
            getElemDims = function (e) {
                var t = {},
                    n, r, i;
                return $.each("Left,Right,Top,Bottom".split(","), function () {
                    n = str(this), r = t["border" + n] = cssNum(e, "border" + n + "Width"), i = t["padding" + n] = cssNum(e, "padding" + n), t["offset" + n] = r + i, e == $Container && (t[n.toLowerCase()] = $.boxModel ? i : 0)
                }), t.innerWidth = t.outerWidth = e.outerWidth(), t.innerHeight = t.outerHeight = e.outerHeight(), $.boxModel && (t.innerWidth -= t.offsetLeft + t.offsetRight, t.innerHeight -= t.offsetTop + t.offsetBottom), t
            },
            setTimer = function (e, t, n, r) {
                var i = window.layout = window.layout || {},
                    s = i.timers = i.timers || {},
                    o = "layout_" + state.id + "_" + e + "_" + t;
                if (s[o]) return;
                s[o] = setTimeout(n, r)
            },
            clearTimer = function (e, t) {
                var n = window.layout = window.layout || {},
                    r = n.timers = n.timers || {},
                    i = "layout_" + state.id + "_" + e + "_" + t;
                return r[i] ? (clearTimeout(r[i]), delete r[i], !0) : !1
            },
            create = function () {
                initOptions(), initContainer(), initPanes(), initHandles(), initResizable(), sizeContent("all");
                if (options.scrollToBookmarkOnLoad) with(self.location) hash && replace(hash);
                initHotkeys(), $(window).resize(function () {
                    var e = "timerLayout_" + state.id;
                    window[e] && clearTimeout(window[e]), window[e] = null, window[e] = setTimeout(resizeAll, 100)
                })
            },
            initContainer = function () {
                try {
                    if ($Container[0].tagName == "BODY") $("html").css({
                        height: "100%",
                        overflow: "hidden"
                    }), $("body").css({
                        position: "relative",
                        height: "100%",
                        overflow: "hidden",
                        margin: 0,
                        padding: 0,
                        border: "none"
                    });
                    else {
                        var e = {
                                overflow: "hidden"
                            },
                            t = $Container.css("position"),
                            n = $Container.css("height");
                        if (!$Container.hasClass("ui-layout-pane")) {
                            if (!t || "fixed,absolute,relative".indexOf(t) < 0) e.position = "relative";
                            if (!n || n == "auto") e.height = "100%"
                        }
                        $Container.css(e)
                    }
                } catch (r) {}
                cDims = state.container = getElemDims($Container)
            },
            initHotkeys = function () {
                $.each(c.borderPanes.split(","), function (e, t) {
                    var n = options[t];
                    if (n.enableCursorHotkey || n.customHotkey) return $(document).keydown(keyDown), !1
                })
            },
            initOptions = function () {
                opts = transformData(opts), opts.effects && ($.extend(effects, opts.effects), delete opts.effects), $.each("name,scrollToBookmarkOnLoad".split(","), function (e, t) {
                    opts[t] !== undefined ? options[t] = opts[t] : opts.defaults[t] !== undefined && (options[t] = opts.defaults[t], delete opts.defaults[t])
                }), $.each("paneSelector,resizerCursor,customHotkey".split(","), function (e, t) {
                    delete opts.defaults[t]
                }), $.extend(options.defaults, opts.defaults), c.center = $.extend(!0, {}, c.defaults, c.center), $.extend(options.center, opts.center);
                var e = $.extend(!0, {}, options.defaults, opts.defaults, options.center);
                $.each("paneClass,contentSelector,contentIgnoreSelector,applyDefaultStyles,showOverflowOnHover".split(","), function (t, n) {
                    options.center[n] = e[n]
                });
                var t = options.defaults;
                $.each(c.borderPanes.split(","), function (e, n) {
                    c[n] = $.extend(!0, {}, c.defaults, c[n]), o = options[n] = $.extend(!0, {}, options.defaults, options[n], opts.defaults, opts[n]), o.paneClass || (o.paneClass = defaults.paneClass), o.resizerClass || (o.resizerClass = defaults.resizerClass), o.togglerClass || (o.togglerClass = defaults.togglerClass), $.each(["_open", "_close", ""], function (e, r) {
                        var i = "fxName" + r,
                            s = "fxSpeed" + r,
                            u = "fxSettings" + r;
                        o[i] = opts[n][i] || opts[n].fxName || opts.defaults[i] || opts.defaults.fxName || o[i] || o.fxName || t[i] || t.fxName || "none";
                        var a = o[i];
                        if (a == "none" || !$.effects || !$.effects[a] || !effects[a] && !o[u] && !o.fxSettings) a = o[i] = "none";
                        var f = effects[a] || {},
                            l = f.all || {},
                            c = f[n] || {};
                        o[u] = $.extend({}, l, c, t.fxSettings || {}, t[u] || {}, o.fxSettings, o[u], opts.defaults.fxSettings, opts.defaults[u] || {}, opts[n].fxSettings, opts[n][u] || {}), o[s] = opts[n][s] || opts[n].fxSpeed || opts.defaults[s] || opts.defaults.fxSpeed || o[s] || o[u].duration || o.fxSpeed || o.fxSettings.duration || t.fxSpeed || t.fxSettings.duration || c.duration || l.duration || "normal"
                    })
                })
            },
            initPanes = function () {
                $.each(c.allPanes.split(","), function () {
                    var e = str(this),
                        t = options[e],
                        n = state[e],
                        r = n.fx,
                        i = c[e].dir,
                        s = t.size == "auto" || isNaN(t.size) ? 0 : t.size,
                        o = t.minSize || 1,
                        u = t.maxSize || 9999,
                        a = t.spacing_open || 0,
                        f = t.paneSelector,
                        l = $.browser.msie && $.browser.version < 7,
                        h = {},
                        p, d;
                    $Cs[e] = !1, f.substr(0, 1) === "#" ? p = $Ps[e] = $Container.find(f + ":first") : (p = $Ps[e] = $Container.children(f + ":first"), p.length || (p = $Ps[e] = $Container.children("form:first").children(f + ":first")));
                    if (!p.length) return $Ps[e] = !1, !0;
                    p.attr("pane", e).addClass(t.paneClass + " " + t.paneClass + "-" + e), e != "center" && (n.isClosed = !1, n.isSliding = !1, n.isResizing = !1, n.isHidden = !1, n.noRoom = !1, c[e].pins = []), h = $.extend({
                        visibility: "visible",
                        display: "block"
                    }, c.defaults.cssReq, c[e].cssReq), t.applyDefaultStyles && $.extend(h, c.defaults.cssDef, c[e].cssDef), p.css(h), h = {};
                    switch (e) {
                    case "north":
                        h.top = cDims.top, h.left = cDims.left, h.right = cDims.right;
                        break;
                    case "south":
                        h.bottom = cDims.bottom, h.left = cDims.left, h.right = cDims.right;
                        break;
                    case "west":
                        h.left = cDims.left;
                        break;
                    case "east":
                        h.right = cDims.right;
                        break;
                    case "center":
                    }
                    if (i == "horz") {
                        if (s === 0 || s == "auto") p.css({
                            height: "auto"
                        }), s = p.outerHeight();
                        s = max(s, o), s = min(s, u), s = min(s, cDims.innerHeight - a), h.height = max(1, cssH(e, s)), n.size = s, n.maxSize = u, n.minSize = max(o, s - h.height + 1), p.css(h)
                    } else if (i == "vert") {
                        if (s === 0 || s == "auto") p.css({
                            width: "auto",
                            "float": "left"
                        }), s = p.outerWidth(), p.css({
                            "float": "none"
                        });
                        s = max(s, o), s = min(s, u), s = min(s, cDims.innerWidth - a), h.width = max(1, cssW(e, s)), n.size = s, n.maxSize = u, n.minSize = max(o, s - h.width + 1), p.css(h), sizeMidPanes(e, null, !0)
                    } else e == "center" && (p.css(h), sizeMidPanes("center", null, !0));
                    t.initClosed && t.closable ? (p.hide().addClass("closed"), n.isClosed = !0) : t.initHidden || t.initClosed ? (hide(e, !0), n.isHidden = !0) : p.addClass("open"), t.showOverflowOnHover && p.hover(allowOverflow, resetOverflow);
                    if (t.contentSelector) {
                        d = $Cs[e] = p.children(t.contentSelector + ":first");
                        if (!d.length) return $Cs[e] = !1, !0;
                        d.css(c.content.cssReq), t.applyDefaultStyles && d.css(c.content.cssDef), p.css({
                            overflow: "hidden"
                        })
                    }
                })
            },
            initHandles = function () {
                $.each(c.borderPanes.split(","), function () {
                    var e = str(this),
                        t = options[e],
                        n = state[e],
                        r = t.resizerClass,
                        i = t.togglerClass,
                        s = $Ps[e];
                    $Rs[e] = !1, $Ts[e] = !1;
                    if (!s || !t.closable && !t.resizable) return;
                    var o = c[e].edge,
                        u = s.is(":visible"),
                        a = u ? t.spacing_open : t.spacing_closed,
                        f = "-" + e,
                        l = u ? "-open" : "-closed",
                        h, p;
                    h = $Rs[e] = $("<span></span>"), (!u || !t.resizable) && !u && t.slidable && h.attr("title", t.sliderTip).css("cursor", t.sliderCursor), h.attr("id", t.paneSelector.substr(0, 1) == "#" ? t.paneSelector.substr(1) + "-resizer" : "").attr("resizer", e).css(c.resizers.cssReq).css(o, cDims[o] + getPaneSize(e)).addClass(r + " " + r + f + " " + r + l + " " + r + f + l).appendTo($Container), t.applyDefaultStyles && h.css(c.resizers.cssDef), t.closable && (p = $Ts[e] = $("<div></div>"), p.attr("id", t.paneSelector.substr(0, 1) == "#" ? t.paneSelector.substr(1) + "-toggler" : "").css(c.togglers.cssReq).attr("title", u ? t.togglerTip_open : t.togglerTip_closed).click(function (t) {
                        toggle(e), t.stopPropagation()
                    }).mouseover(function (e) {
                        e.stopPropagation()
                    }).addClass(i + " " + i + f + " " + i + l + " " + i + f + l).appendTo(h), t.togglerContent_open && $("<span>" + t.togglerContent_open + "</span>").addClass("content content-open").css("display", n.isClosed ? "none" : "block").appendTo(p), t.togglerContent_closed && $("<span>" + t.togglerContent_closed + "</span>").addClass("content content-closed").css("display", n.isClosed ? "block" : "none").appendTo(p), t.applyDefaultStyles && p.css(c.togglers.cssDef), u || bindStartSlidingEvent(e, !0))
                }), sizeHandles("all", !0)
            },
            initResizable = function () {
                var e = typeof $.fn.draggable == "function",
                    t, n, r;
                $.each(c.borderPanes.split(","), function () {
                    var t = str(this),
                        n = options[t],
                        i = state[t];
                    if (!e || !$Ps[t] || !n.resizable) return n.resizable = !1, !0;
                    var s = n.resizerClass,
                        o = s + "-drag",
                        u = s + "-" + t + "-drag",
                        a = s + "-dragging",
                        f = s + "-" + t + "-dragging",
                        l = !1,
                        h = $Ps[t],
                        p = $Rs[t];
                    i.isClosed || p.attr("title", n.resizerTip).css("cursor", n.resizerCursor), p.draggable({
                        containment: $Container[0],
                        axis: c[t].dir == "horz" ? "y" : "x",
                        delay: 200,
                        distance: 1,
                        helper: "clone",
                        opacity: n.resizerDragOpacity,
                        zIndex: c.zIndex.resizing,
                        start: function (e, s) {
                            if (!1 === execUserCallback(t, n.onresize_start)) return !1;
                            i.isResizing = !0, clearTimer(t, "closeSlider"), p.addClass(o + " " + u), l = !1;
                            var a = t == "east" || t == "south" ? n.spacing_open : 0;
                            setPaneMinMaxSizes(t), i.minPosition -= a, i.maxPosition -= a, r = c[t].dir == "horz" ? "top" : "left", $(n.maskIframesOnResize === !0 ? "iframe" : n.maskIframesOnResize).each(function () {
                                $('<div class="ui-layout-mask"/>').css({
                                    background: "#fff",
                                    opacity: "0.001",
                                    zIndex: 9,
                                    position: "absolute",
                                    width: this.offsetWidth + "px",
                                    height: this.offsetHeight + "px"
                                }).css($(this).offset()).appendTo(this.parentNode)
                            })
                        },
                        drag: function (e, n) {
                            l || ($(".ui-draggable-dragging").addClass(a + " " + f).children().css("visibility", "hidden"), l = !0, i.isSliding && $Ps[t].css("zIndex", c.zIndex.sliding)), n.position[r] < i.minPosition ? n.position[r] = i.minPosition : n.position[r] > i.maxPosition && (n.position[r] = i.maxPosition)
                        },
                        stop: function (e, n) {
                            var r = n.position,
                                s, a;
                            p.removeClass(o + " " + u);
                            switch (t) {
                            case "north":
                                s = r.top;
                                break;
                            case "west":
                                s = r.left;
                                break;
                            case "south":
                                s = cDims.outerHeight - r.top - p.outerHeight();
                                break;
                            case "east":
                                s = cDims.outerWidth - r.left - p.outerWidth()
                            }
                            a = s - cDims[c[t].edge], sizePane(t, a), $("div.ui-layout-mask").remove(), i.isResizing = !1
                        }
                    })
                })
            },
            hide = function (e, t) {
                var n = options[e],
                    r = state[e],
                    i = $Ps[e],
                    s = $Rs[e];
                if (!i || r.isHidden) return;
                if (!1 === execUserCallback(e, n.onhide_start)) return;
                r.isSliding = !1, s && s.hide(), t || r.isClosed ? (r.isClosed = !0, r.isHidden = !0, i.hide(), sizeMidPanes(c[e].dir == "horz" ? "all" : "center"), execUserCallback(e, n.onhide_end || n.onhide)) : (r.isHiding = !0, close(e, !1))
            },
            show = function (e, t) {
                var n = options[e],
                    r = state[e],
                    i = $Ps[e],
                    s = $Rs[e];
                if (!i || !r.isHidden) return;
                if (!1 === execUserCallback(e, n.onshow_start)) return;
                r.isSliding = !1, r.isShowing = !0, s && n.spacing_open > 0 && s.show(), t === !1 ? close(e, !0) : open(e)
            },
            toggle = function (e) {
                var t = state[e];
                t.isHidden ? show(e) : t.isClosed ? open(e) : close(e)
            },
            close = function (e, t, n) {
                function b() {
                    bindStartSlidingEvent(e, !0), g || execUserCallback(e, o.onclose_end || o.onclose), g && execUserCallback(e, o.onshow_end || o.onshow), y && execUserCallback(e, o.onhide_end || o.onhide), execFlowCallback(e)
                }
                var r = $Ps[e],
                    i = $Rs[e],
                    s = $Ts[e],
                    o = options[e],
                    u = state[e],
                    a = !n && !u.isClosed && o.fxName_close != "none",
                    f = c[e].edge,
                    l = o.resizerClass,
                    h = o.togglerClass,
                    p = "-" + e,
                    d = "-open",
                    v = "-sliding",
                    m = "-closed",
                    g = u.isShowing,
                    y = u.isHiding;
                delete u.isShowing, delete u.isHiding;
                if (!r || !o.resizable && !o.closable) return;
                if (!t && u.isClosed && !g) return;
                if (c.isLayoutBusy) {
                    setFlowCallback("close", e, t);
                    return
                }
                if (!g && !1 === execUserCallback(e, o.onclose_start)) return;
                c[e].isMoving = !0, c.isLayoutBusy = !0, u.isClosed = !0, y ? u.isHidden = !0 : g && (u.isHidden = !1), syncPinBtns(e, !1), u.isSliding || sizeMidPanes(c[e].dir == "horz" ? "all" : "center"), i && (i.css(f, cDims[f]).removeClass(l + d + " " + l + p + d).removeClass(l + v + " " + l + p + v).addClass(l + m + " " + l + p + m), o.resizable && i.draggable("disable").css("cursor", "default").attr("title", ""), s && s.removeClass(h + d + " " + h + p + d).addClass(h + m + " " + h + p + m).attr("title", o.togglerTip_closed), sizeHandles()), a ? (lockPaneForFX(e, !0), r.hide(o.fxName_close, o.fxSettings_close, o.fxSpeed_close, function () {
                    lockPaneForFX(e, !1);
                    if (!u.isClosed) return;
                    b()
                })) : (r.hide(), b())
            },
            open = function (e, t, n) {
                function y() {
                    u.isSliding || sizeMidPanes(c[e].dir == "vert" ? "center" : "all"), i && (i.css(f, cDims[f] + getPaneSize(e)).removeClass(l + v + " " + l + p + v).addClass(l + d + " " + l + p + d).addClass(u.isSliding ? l + m + " " + l + p + m : ""), o.resizable ? i.draggable("enable").css("cursor", o.resizerCursor).attr("title", o.resizerTip) : i.css("cursor", "default"), s && s.removeClass(h + v + " " + h + p + v).addClass(h + d + " " + h + p + d).attr("title", o.togglerTip_open), sizeHandles("all")), sizeContent(e), syncPinBtns(e, !u.isSliding), execUserCallback(e, o.onopen_end || o.onopen), g && execUserCallback(e, o.onshow_end || o.onshow), execFlowCallback(e)
                }
                var r = $Ps[e],
                    i = $Rs[e],
                    s = $Ts[e],
                    o = options[e],
                    u = state[e],
                    a = !n && u.isClosed && o.fxName_open != "none",
                    f = c[e].edge,
                    l = o.resizerClass,
                    h = o.togglerClass,
                    p = "-" + e,
                    d = "-open",
                    v = "-closed",
                    m = "-sliding",
                    g = u.isShowing;
                delete u.isShowing;
                if (!r || !o.resizable && !o.closable) return;
                if (!u.isClosed && !u.isSliding) return;
                if (u.isHidden && !g) {
                    show(e, !0);
                    return
                }
                if (c.isLayoutBusy) {
                    setFlowCallback("open", e, t);
                    return
                }
                if (!1 === execUserCallback(e, o.onopen_start)) return;
                c[e].isMoving = !0, c.isLayoutBusy = !0, u.isSliding && !t && bindStopSlidingEvents(e, !1), u.isClosed = !1, g && (u.isHidden = !1), setPaneMinMaxSizes(e), u.size > u.maxSize && r.css(c[e].sizeType, max(1, cssSize(e, u.maxSize))), bindStartSlidingEvent(e, !1), a ? (lockPaneForFX(e, !0), r.show(o.fxName_open, o.fxSettings_open, o.fxSpeed_open, function () {
                    lockPaneForFX(e, !1);
                    if (u.isClosed) return;
                    y()
                })) : (r.show(), y())
            },
            lockPaneForFX = function (e, t) {
                var n = $Ps[e];
                t ? (n.css({
                    zIndex: c.zIndex.animation
                }), e == "south" ? n.css({
                    top: cDims.top + cDims.innerHeight - n.outerHeight()
                }) : e == "east" && n.css({
                    left: cDims.left + cDims.innerWidth - n.outerWidth()
                })) : (state[e].isSliding || n.css({
                    zIndex: c.zIndex.pane_normal
                }), e == "south" ? n.css({
                    top: "auto"
                }) : e == "east" && n.css({
                    left: "auto"
                }))
            },
            bindStartSlidingEvent = function (e, t) {
                var n = options[e],
                    r = $Rs[e],
                    i = n.slideTrigger_open;
                if (!r || !n.slidable) return;
                i != "click" && i != "dblclick" && i != "mouseover" && (i = "click"), r[t ? "bind" : "unbind"](i, slideOpen).css("cursor", t ? n.sliderCursor : "default").attr("title", t ? n.sliderTip : "")
            },
            bindStopSlidingEvents = function (e, t) {
                function a(t) {
                    clearTimer(e, "closeSlider"), t.stopPropagation()
                }
                var n = options[e],
                    r = state[e],
                    i = n.slideTrigger_close,
                    s = t ? "bind" : "unbind",
                    o = $Ps[e],
                    u = $Rs[e];
                r.isSliding = t, clearTimer(e, "closeSlider"), o.css({
                    zIndex: t ? c.zIndex.sliding : c.zIndex.pane_normal
                }), u.css({
                    zIndex: t ? c.zIndex.sliding : c.zIndex.resizer_normal
                }), i != "click" && i != "mouseout" && (i = "mouseout");
                if (t) {
                    o.bind(i, slideClosed), u.bind(i, slideClosed);
                    if (i = "mouseout") o.bind("mouseover", a), u.bind("mouseover", a)
                } else {
                    o.unbind(i), u.unbind(i);
                    if (i = "mouseout") o.unbind("mouseover"), u.unbind("mouseover"), clearTimer(e, "closeSlider")
                }
            },
            slideOpen = function () {
                var e = $(this).attr("resizer");
                state[e].isClosed && (bindStopSlidingEvents(e, !0), open(e, !0))
            },
            slideClosed = function () {
                function i() {
                    bindStopSlidingEvents(t, !1), r.isClosed || close(t)
                }
                var e = $(this),
                    t = e.attr("pane") || e.attr("resizer"),
                    n = options[t],
                    r = state[t];
                if (r.isClosed || r.isResizing) return;
                n.slideTrigger_close == "click" ? i() : setTimer(t, "closeSlider", i, 300)
            },
            sizePane = function (e, t) {
                var n = c[e].edge,
                    r = c[e].dir,
                    i = options[e],
                    s = state[e],
                    o = $Ps[e],
                    u = $Rs[e];
                setPaneMinMaxSizes(e), s.minSize = max(s.minSize, i.minSize), i.maxSize > 0 && (s.maxSize = min(s.maxSize, i.maxSize)), t = max(t, s.minSize), t = min(t, s.maxSize), s.size = t, u.css(n, t + cDims[n]), o.css(c[e].sizeType, max(1, cssSize(e, t))), s.isSliding || sizeMidPanes(r == "horz" ? "all" : "center"), sizeHandles(), sizeContent(e), execUserCallback(e, i.onresize_end || i.onresize)
            },
            sizeMidPanes = function (e, t, n) {
                if (!e || e == "all") e = "east,west,center";
                var r = getPaneDims();
                t && $.extend(r, t), $.each(e.split(","), function () {
                    if (!$Ps[this]) return;
                    var e = str(this),
                        t = options[e],
                        i = state[e],
                        s = $Ps[e],
                        o = $Rs[e],
                        u = !0,
                        a = {};
                    e == "center" ? (r = getPaneDims(), a = $.extend({}, r), a.width = max(1, cssW(e, a.width)), a.height = max(1, cssH(e, a.height)), u = a.width > 1 && a.height > 1, $.browser.msie && (!$.boxModel || $.browser.version < 7) && ($Ps.north && $Ps.north.css({
                        width: cssW($Ps.north, cDims.innerWidth)
                    }), $Ps.south && $Ps.south.css({
                        width: cssW($Ps.south, cDims.innerWidth)
                    }))) : (a.top = r.top, a.bottom = r.bottom, a.height = max(1, cssH(e, r.height)), u = a.height > 1);
                    if (u) {
                        s.css(a);
                        if (i.noRoom) {
                            i.noRoom = !1;
                            if (i.isHidden) return;
                            show(e, !i.isClosed)
                        }
                        n || (sizeContent(e), execUserCallback(e, t.onresize_end || t.onresize))
                    } else if (!i.noRoom) {
                        i.noRoom = !0;
                        if (i.isHidden) return;
                        n ? (s.hide(), o && o.hide()) : hide(e)
                    }
                })
            },
            sizeContent = function (e) {
                if (!e || e == "all") e = c.allPanes;
                $.each(e.split(","), function () {
                    if (!$Cs[this]) return;
                    var e = str(this),
                        t = options[e].contentIgnoreSelector,
                        n = $Ps[e],
                        r = $Cs[e],
                        i = r[0],
                        s = cssH(n);
                    n.children().each(function () {
                        if (this == i) return;
                        var e = $(this);
                        if (!t || !e.is(t)) s -= e.outerHeight()
                    }), s > 0 && (s = cssH(r, s)), s < 1 ? r.hide() : r.css({
                        height: s
                    }).show()
                })
            },
            sizeHandles = function (e, t) {
                if (!e || e == "all") e = c.borderPanes;
                $.each(e.split(","), function () {
                    var e = str(this),
                        n = options[e],
                        r = state[e],
                        i = $Ps[e],
                        s = $Rs[e],
                        o = $Ts[e];
                    if (!i || !s || !n.resizable && !n.closable) return;
                    var u = c[e].dir,
                        a = r.isClosed ? "_closed" : "_open",
                        f = n["spacing" + a],
                        l = n["togglerAlign" + a],
                        h = n["togglerLength" + a],
                        p, d, v = {};
                    if (f == 0) {
                        s.hide();
                        return
                    }!r.noRoom && !r.isHidden && s.show(), u == "horz" ? (p = i.outerWidth(), s.css({
                        width: max(1, cssW(s, p)),
                        height: max(1, cssH(s, f)),
                        left: cssNum(i, "left")
                    })) : (p = i.outerHeight(), s.css({
                        height: max(1, cssH(s, p)),
                        width: max(1, cssW(s, f)),
                        top: cDims.top + getPaneSize("north", !0)
                    }));
                    if (o) {
                        if (h == 0 || r.isSliding && n.hideTogglerOnSlide) {
                            o.hide();
                            return
                        }
                        o.show();
                        if (!(h > 0) || h == "100%" || h > p) h = p, d = 0;
                        else if (typeof l == "string") switch (l) {
                        case "top":
                        case "left":
                            d = 0;
                            break;
                        case "bottom":
                        case "right":
                            d = p - h;
                            break;
                        case "middle":
                        case "center":
                        default:
                            d = Math.floor((p - h) / 2)
                        } else {
                            var m = parseInt(l);
                            l >= 0 ? d = m : d = p - h + m
                        }
                        var g = n.togglerContent_open ? o.children(".content-open") : !1,
                            y = n.togglerContent_closed ? o.children(".content-closed") : !1,
                            b = r.isClosed ? y : g;
                        g && g.css("display", r.isClosed ? "none" : "block"), y && y.css("display", r.isClosed ? "block" : "none");
                        if (u == "horz") {
                            var w = cssW(o, h);
                            o.css({
                                width: max(0, w),
                                height: max(1, cssH(o, f)),
                                left: d
                            }), b && b.css("marginLeft", Math.floor((w - b.outerWidth()) / 2))
                        } else {
                            var E = cssH(o, h);
                            o.css({
                                height: max(0, E),
                                width: max(1, cssW(o, f)),
                                top: d
                            }), b && b.css("marginTop", Math.floor((E - b.outerHeight()) / 2))
                        }
                    }
                    t && n.initHidden && (s.hide(), o && o.hide())
                })
            },
            resizeAll = function () {
                var e = cDims.innerWidth,
                    t = cDims.innerHeight;
                cDims = state.container = getElemDims($Container);
                var n = cDims.innerHeight < t,
                    r = cDims.innerWidth < e,
                    i, s;
                (n || r) && $.each(["south", "north", "east", "west"], function (e, t) {
                    i = state[t], s = c[t].dir, !i.isClosed && (n && s == "horz" || r && s == "vert") && (setPaneMinMaxSizes(t), i.size > i.maxSize && sizePane(t, i.maxSize))
                }), sizeMidPanes("all"), sizeHandles("all")
            },
            $Container = $(this).css({
                overflow: "hidden"
            }),
            $Ps = {},
            $Cs = {},
            $Rs = {},
            $Ts = {},
            c = config,
            cDims = state.container;
        return create(), {
            options: options,
            state: state,
            panes: $Ps,
            toggle: toggle,
            open: open,
            close: close,
            hide: hide,
            show: show,
            resizeContent: sizeContent,
            sizePane: sizePane,
            resizeAll: resizeAll,
            addToggleBtn: addToggleBtn,
            addOpenBtn: addOpenBtn,
            addCloseBtn: addCloseBtn,
            addPinBtn: addPinBtn,
            allowOverflow: allowOverflow,
            resetOverflow: resetOverflow,
            cssWidth: cssW,
            cssHeight: cssH
        }
    }
})(jQuery);
(function (jQuery) {
    var ValidationErrors = new Array();
    jQuery.fn.validate = function (options) {
        options = jQuery.extend({
            expression: "return true;",
            message: "",
            error_message_class: "error--inline",
            error_container_class: "control-group",
            live: true
        }, options);
        var SelfID = jQuery(this).attr("id");
        var unix_time = new Date();
        unix_time = parseInt(unix_time.getTime() / 1000);
        if (!jQuery(this).parents('form:first').attr("id")) {
            jQuery(this).parents('form:first').attr("id", "Form_" + unix_time);
        }
        var FormID = jQuery(this).parents('form:first').attr("id");
        if (!((typeof (ValidationErrors[FormID]) == 'object') && (ValidationErrors[FormID] instanceof Array))) {
            ValidationErrors[FormID] = new Array();
        }
        if (options['live']) {
            if (jQuery(this).find('input').length > 0) {
                jQuery(this).find('input').bind('blur', function () {
                    if (validate_field("#" + SelfID, options)) {
                        if (options.callback_success)
                            options.callback_success(this);
                    } else {
                        if (options.callback_failure)
                            options.callback_failure(this);
                    }
                });
                jQuery(this).find('input').bind('focus keypress click', function () {
                    jQuery("#" + SelfID).next('.' + options['error_message_class']).remove();
                    jQuery("#" + SelfID).parents("." + options['error_container_class']).removeClass('error');
                });
            } else {
                jQuery(this).bind('blur', function () {
                    validate_field(this);
                });
                jQuery(this).bind('focus keypress', function () {
                    var jQueryObjectBeforeErrorMessage = getjQueryObjectBeforeErrorMessage(jQuery(this));
                    jQueryObjectBeforeErrorMessage.next('.' + options['error_message_class']).fadeOut("fast", function () {
                        jQuery(this).remove();
                    });
                    jQuery(this).parents("." + options['error_container_class']).removeClass('error');
                });
            }
        }
        jQuery(this).parents("form").submit(function () {
            if (validate_field('#' + SelfID)) {
                return true;
            } else
                return false;
        });

        function validate_field(id) {
            var self = jQuery(id).attr("id");
            var expression = 'function Validate(){' + options['expression'].replace(/VAL/g, 'jQuery(\'#' + self + '\').val()') + '} Validate()';
            var validation_state = eval(expression);
            if (!validation_state) {
                jQueryObjectBeforeErrorMessage = getjQueryObjectBeforeErrorMessage(jQuery(id));
                if (jQueryObjectBeforeErrorMessage.next('.' + options['error_message_class']).length == 0) {
                    jQueryObjectBeforeErrorMessage.after('<span class="' + options['error_message_class'] + '">' + options['message'] + '</span>');
                    jQuery(id).parents("div." + options['error_container_class']).addClass("error");
                }
                if (ValidationErrors[FormID].join("|").search(id) == -1)
                    ValidationErrors[FormID].push(id);
                return false;
            } else {
                for (var i = 0; i < ValidationErrors[FormID].length; i++) {
                    if (ValidationErrors[FormID][i] == id)
                        ValidationErrors[FormID].splice(i, 1);
                }
                return true;
            }
        }

        function getjQueryObjectBeforeErrorMessage(inputjQueryObject) {
            if (inputjQueryObject.next().hasClass("add-on")) {
                return inputjQueryObject.next();
            }
            return inputjQueryObject;
        }
    };
    jQuery.fn.validated = function (callback) {
        jQuery(this).each(function () {
            if (this.tagName == "FORM") {
                jQuery(this).submit(function () {
                    if (ValidationErrors[jQuery(this).attr("id")].length == 0)
                        callback();
                    return false;
                });
            }
        });
    };
})(jQuery);
(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery', 'jquery.ui.widget'], factory);
    } else {
        factory(window.jQuery);
    }
}(function ($) {
    'use strict';
    $.support.xhrFileUpload = !!(window.XMLHttpRequestUpload && window.FileReader);
    $.support.xhrFormDataFileUpload = !!window.FormData;
    $.widget('blueimp.fileupload', {
        options: {
            namespace: undefined,
            dropZone: $(document),
            pasteZone: $(document),
            fileInput: undefined,
            replaceFileInput: true,
            paramName: undefined,
            singleFileUploads: true,
            limitMultiFileUploads: undefined,
            sequentialUploads: false,
            limitConcurrentUploads: undefined,
            forceIframeTransport: false,
            redirect: undefined,
            redirectParamName: undefined,
            postMessage: undefined,
            multipart: true,
            maxChunkSize: undefined,
            uploadedBytes: undefined,
            recalculateProgress: true,
            progressInterval: 100,
            bitrateInterval: 500,
            formData: function (form) {
                return form.serializeArray();
            },
            add: function (e, data) {
                data.submit();
            },
            processData: false,
            contentType: false,
            cache: false
        },
        _refreshOptionsList: ['namespace', 'fileInput', 'dropZone', 'pasteZone', 'multipart', 'forceIframeTransport'],
        _BitrateTimer: function () {
            this.timestamp = +(new Date());
            this.loaded = 0;
            this.bitrate = 0;
            this.getBitrate = function (now, loaded, interval) {
                var timeDiff = now - this.timestamp;
                if (!this.bitrate || !interval || timeDiff > interval) {
                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;
                    this.loaded = loaded;
                    this.timestamp = now;
                }
                return this.bitrate;
            };
        },
        _isXHRUpload: function (options) {
            return !options.forceIframeTransport && ((!options.multipart && $.support.xhrFileUpload) || $.support.xhrFormDataFileUpload);
        },
        _getFormData: function (options) {
            var formData;
            if (typeof options.formData === 'function') {
                return options.formData(options.form);
            }
            if ($.isArray(options.formData)) {
                return options.formData;
            }
            if (options.formData) {
                formData = [];
                $.each(options.formData, function (name, value) {
                    formData.push({
                        name: name,
                        value: value
                    });
                });
                return formData;
            }
            return [];
        },
        _getTotal: function (files) {
            var total = 0;
            $.each(files, function (index, file) {
                total += file.size || 1;
            });
            return total;
        },
        _onProgress: function (e, data) {
            if (e.lengthComputable) {
                var now = +(new Date()),
                    total, loaded;
                if (data._time && data.progressInterval && (now - data._time < data.progressInterval) && e.loaded !== e.total) {
                    return;
                }
                data._time = now;
                total = data.total || this._getTotal(data.files);
                loaded = parseInt(e.loaded / e.total * (data.chunkSize || total), 10) + (data.uploadedBytes || 0);
                this._loaded += loaded - (data.loaded || data.uploadedBytes || 0);
                data.lengthComputable = true;
                data.loaded = loaded;
                data.total = total;
                data.bitrate = data._bitrateTimer.getBitrate(now, loaded, data.bitrateInterval);
                this._trigger('progress', e, data);
                this._trigger('progressall', e, {
                    lengthComputable: true,
                    loaded: this._loaded,
                    total: this._total,
                    bitrate: this._bitrateTimer.getBitrate(now, this._loaded, data.bitrateInterval)
                });
            }
        },
        _initProgressListener: function (options) {
            var that = this,
                xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();
            if (xhr.upload) {
                $(xhr.upload).bind('progress', function (e) {
                    var oe = e.originalEvent;
                    e.lengthComputable = oe.lengthComputable;
                    e.loaded = oe.loaded;
                    e.total = oe.total;
                    that._onProgress(e, options);
                });
                options.xhr = function () {
                    return xhr;
                };
            }
        },
        _initXHRData: function (options) {
            var formData, file = options.files[0],
                multipart = options.multipart || !$.support.xhrFileUpload,
                paramName = options.paramName[0];
            if (!multipart || options.blob) {
                options.headers = $.extend(options.headers, {
                    'X-File-Name': file.name,
                    'X-File-Type': file.type,
                    'X-File-Size': file.size
                });
                if (!options.blob) {
                    options.contentType = file.type;
                    options.data = file;
                } else if (!multipart) {
                    options.contentType = 'application/octet-stream';
                    options.data = options.blob;
                }
            }
            if (multipart && $.support.xhrFormDataFileUpload) {
                if (options.postMessage) {
                    formData = this._getFormData(options);
                    if (options.blob) {
                        formData.push({
                            name: paramName,
                            value: options.blob
                        });
                    } else {
                        $.each(options.files, function (index, file) {
                            formData.push({
                                name: options.paramName[index] || paramName,
                                value: file
                            });
                        });
                    }
                } else {
                    if (options.formData instanceof FormData) {
                        formData = options.formData;
                    } else {
                        formData = new FormData();
                        $.each(this._getFormData(options), function (index, field) {
                            formData.append(field.name, field.value);
                        });
                    }
                    if (options.blob) {
                        formData.append(paramName, options.blob, file.name);
                    } else {
                        $.each(options.files, function (index, file) {
                            if (file instanceof Blob) {
                                formData.append(options.paramName[index] || paramName, file, file.name);
                            }
                        });
                    }
                }
                options.data = formData;
            }
            options.blob = null;
        },
        _initIframeSettings: function (options) {
            options.dataType = 'iframe ' + (options.dataType || '');
            options.formData = this._getFormData(options);
            if (options.redirect && $('<a></a>').prop('href', options.url).prop('host') !== location.host) {
                options.formData.push({
                    name: options.redirectParamName || 'redirect',
                    value: options.redirect
                });
            }
        },
        _initDataSettings: function (options) {
            if (this._isXHRUpload(options)) {
                if (!this._chunkedUpload(options, true)) {
                    if (!options.data) {
                        this._initXHRData(options);
                    }
                    this._initProgressListener(options);
                }
                if (options.postMessage) {
                    options.dataType = 'postmessage ' + (options.dataType || '');
                }
            } else {
                this._initIframeSettings(options, 'iframe');
            }
        },
        _getParamName: function (options) {
            var fileInput = $(options.fileInput),
                paramName = options.paramName;
            if (!paramName) {
                paramName = [];
                fileInput.each(function () {
                    var input = $(this),
                        name = input.prop('name') || 'files[]',
                        i = (input.prop('files') || [1]).length;
                    while (i) {
                        paramName.push(name);
                        i -= 1;
                    }
                });
                if (!paramName.length) {
                    paramName = [fileInput.prop('name') || 'files[]'];
                }
            } else if (!$.isArray(paramName)) {
                paramName = [paramName];
            }
            return paramName;
        },
        _initFormSettings: function (options) {
            if (!options.form || !options.form.length) {
                options.form = $(options.fileInput.prop('form'));
                if (!options.form.length) {
                    options.form = $(this.options.fileInput.prop('form'));
                }
            }
            options.paramName = this._getParamName(options);
            if (!options.url) {
                options.url = options.form.prop('action') || location.href;
            }
            options.type = (options.type || options.form.prop('method') || '').toUpperCase();
            if (options.type !== 'POST' && options.type !== 'PUT') {
                options.type = 'POST';
            }
            if (!options.formAcceptCharset) {
                options.formAcceptCharset = options.form.attr('accept-charset');
            }
        },
        _getAJAXSettings: function (data) {
            var options = $.extend({}, this.options, data);
            this._initFormSettings(options);
            this._initDataSettings(options);
            return options;
        },
        _enhancePromise: function (promise) {
            promise.success = promise.done;
            promise.error = promise.fail;
            promise.complete = promise.always;
            return promise;
        },
        _getXHRPromise: function (resolveOrReject, context, args) {
            var dfd = $.Deferred(),
                promise = dfd.promise();
            context = context || this.options.context || promise;
            if (resolveOrReject === true) {
                dfd.resolveWith(context, args);
            } else if (resolveOrReject === false) {
                dfd.rejectWith(context, args);
            }
            promise.abort = dfd.promise;
            return this._enhancePromise(promise);
        },
        _chunkedUpload: function (options, testOnly) {
            var that = this,
                file = options.files[0],
                fs = file.size,
                ub = options.uploadedBytes = options.uploadedBytes || 0,
                mcs = options.maxChunkSize || fs,
                slice = file.slice || file.webkitSlice || file.mozSlice,
                upload, n, jqXHR, pipe;
            if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) || options.data) {
                return false;
            }
            if (testOnly) {
                return true;
            }
            if (ub >= fs) {
                file.error = 'Uploaded bytes exceed file size';
                return this._getXHRPromise(false, options.context, [null, 'error', file.error]);
            }
            n = Math.ceil((fs - ub) / mcs);
            upload = function (i) {
                if (!i) {
                    return that._getXHRPromise(true, options.context);
                }
                return upload(i -= 1).pipe(function () {
                    var o = $.extend({}, options);
                    o.blob = slice.call(file, ub + i * mcs, ub + (i + 1) * mcs);
                    o.chunkIndex = i;
                    o.chunksNumber = n;
                    o.chunkSize = o.blob.size;
                    that._initXHRData(o);
                    that._initProgressListener(o);
                    jqXHR = ($.ajax(o) || that._getXHRPromise(false, o.context)).done(function () {
                        if (!o.loaded) {
                            that._onProgress($.Event('progress', {
                                lengthComputable: true,
                                loaded: o.chunkSize,
                                total: o.chunkSize
                            }), o);
                        }
                        options.uploadedBytes = o.uploadedBytes += o.chunkSize;
                    });
                    return jqXHR;
                });
            };
            pipe = upload(n);
            pipe.abort = function () {
                return jqXHR.abort();
            };
            return this._enhancePromise(pipe);
        },
        _beforeSend: function (e, data) {
            if (this._active === 0) {
                this._trigger('start');
                this._bitrateTimer = new this._BitrateTimer();
            }
            this._active += 1;
            this._loaded += data.uploadedBytes || 0;
            this._total += this._getTotal(data.files);
        },
        _onDone: function (result, textStatus, jqXHR, options) {
            if (!this._isXHRUpload(options)) {
                this._onProgress($.Event('progress', {
                    lengthComputable: true,
                    loaded: 1,
                    total: 1
                }), options);
            }
            options.result = result;
            options.textStatus = textStatus;
            options.jqXHR = jqXHR;
            this._trigger('done', null, options);
        },
        _onFail: function (jqXHR, textStatus, errorThrown, options) {
            options.jqXHR = jqXHR;
            options.textStatus = textStatus;
            options.errorThrown = errorThrown;
            this._trigger('fail', null, options);
            if (options.recalculateProgress) {
                this._loaded -= options.loaded || options.uploadedBytes || 0;
                this._total -= options.total || this._getTotal(options.files);
            }
        },
        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {
            this._active -= 1;
            options.textStatus = textStatus;
            if (jqXHRorError && jqXHRorError.always) {
                options.jqXHR = jqXHRorError;
                options.result = jqXHRorResult;
            } else {
                options.jqXHR = jqXHRorResult;
                options.errorThrown = jqXHRorError;
            }
            this._trigger('always', null, options);
            if (this._active === 0) {
                this._trigger('stop');
                this._loaded = this._total = 0;
                this._bitrateTimer = null;
            }
        },
        _onSend: function (e, data) {
            var that = this,
                jqXHR, slot, pipe, options = that._getAJAXSettings(data),
                send = function (resolve, args) {
                    that._sending += 1;
                    options._bitrateTimer = new that._BitrateTimer();
                    jqXHR = jqXHR || ((resolve !== false && that._trigger('send', e, options) !== false && (that._chunkedUpload(options) || $.ajax(options))) || that._getXHRPromise(false, options.context, args)).done(function (result, textStatus, jqXHR) {
                        that._onDone(result, textStatus, jqXHR, options);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        that._onFail(jqXHR, textStatus, errorThrown, options);
                    }).always(function (jqXHRorResult, textStatus, jqXHRorError) {
                        that._sending -= 1;
                        that._onAlways(jqXHRorResult, textStatus, jqXHRorError, options);
                        if (options.limitConcurrentUploads && options.limitConcurrentUploads > that._sending) {
                            var nextSlot = that._slots.shift(),
                                isPending;
                            while (nextSlot) {
                                isPending = nextSlot.state ? nextSlot.state() === 'pending' : !nextSlot.isRejected();
                                if (isPending) {
                                    nextSlot.resolve();
                                    break;
                                }
                                nextSlot = that._slots.shift();
                            }
                        }
                    });
                    return jqXHR;
                };
            this._beforeSend(e, options);
            if (this.options.sequentialUploads || (this.options.limitConcurrentUploads && this.options.limitConcurrentUploads <= this._sending)) {
                if (this.options.limitConcurrentUploads > 1) {
                    slot = $.Deferred();
                    this._slots.push(slot);
                    pipe = slot.pipe(send);
                } else {
                    pipe = (this._sequence = this._sequence.pipe(send, send));
                }
                pipe.abort = function () {
                    var args = [undefined, 'abort', 'abort'];
                    if (!jqXHR) {
                        if (slot) {
                            slot.rejectWith(pipe, args);
                        }
                        return send(false, args);
                    }
                    return jqXHR.abort();
                };
                return this._enhancePromise(pipe);
            }
            return send();
        },
        _onAdd: function (e, data) {
            var that = this,
                result = true,
                options = $.extend({}, this.options, data),
                limit = options.limitMultiFileUploads,
                paramName = this._getParamName(options),
                paramNameSet, paramNameSlice, fileSet, i;
            if (!(options.singleFileUploads || limit) || !this._isXHRUpload(options)) {
                fileSet = [data.files];
                paramNameSet = [paramName];
            } else if (!options.singleFileUploads && limit) {
                fileSet = [];
                paramNameSet = [];
                for (i = 0; i < data.files.length; i += limit) {
                    fileSet.push(data.files.slice(i, i + limit));
                    paramNameSlice = paramName.slice(i, i + limit);
                    if (!paramNameSlice.length) {
                        paramNameSlice = paramName;
                    }
                    paramNameSet.push(paramNameSlice);
                }
            } else {
                paramNameSet = paramName;
            }
            data.originalFiles = data.files;
            $.each(fileSet || data.files, function (index, element) {
                var newData = $.extend({}, data);
                newData.files = fileSet ? element : [element];
                newData.paramName = paramNameSet[index];
                newData.submit = function () {
                    newData.jqXHR = this.jqXHR = (that._trigger('submit', e, this) !== false) && that._onSend(e, this);
                    return this.jqXHR;
                };
                return (result = that._trigger('add', e, newData));
            });
            return result;
        },
        _replaceFileInput: function (input) {
            var inputClone = input.clone(true);
            $('<form></form>').append(inputClone)[0].reset();
            input.after(inputClone).detach();
            $.cleanData(input.unbind('remove'));
            this.options.fileInput = this.options.fileInput.map(function (i, el) {
                if (el === input[0]) {
                    return inputClone[0];
                }
                return el;
            });
            if (input[0] === this.element[0]) {
                this.element = inputClone;
            }
        },
        _handleFileTreeEntry: function (entry, path) {
            var that = this,
                dfd = $.Deferred(),
                errorHandler = function (e) {
                    if (e && !e.entry) {
                        e.entry = entry;
                    }
                    dfd.resolve([e]);
                },
                dirReader;
            path = path || '';
            if (entry.isFile) {
                if (entry._file) {
                    entry._file.relativePath = path;
                    dfd.resolve(entry._file);
                } else {
                    entry.file(function (file) {
                        file.relativePath = path;
                        dfd.resolve(file);
                    }, errorHandler);
                }
            } else if (entry.isDirectory) {
                dirReader = entry.createReader();
                dirReader.readEntries(function (entries) {
                    that._handleFileTreeEntries(entries, path + entry.name + '/').done(function (files) {
                        dfd.resolve(files);
                    }).fail(errorHandler);
                }, errorHandler);
            } else {
                dfd.resolve([]);
            }
            return dfd.promise();
        },
        _handleFileTreeEntries: function (entries, path) {
            var that = this;
            return $.when.apply($, $.map(entries, function (entry) {
                return that._handleFileTreeEntry(entry, path);
            })).pipe(function () {
                return Array.prototype.concat.apply([], arguments);
            });
        },
        _getDroppedFiles: function (dataTransfer) {
            dataTransfer = dataTransfer || {};
            var items = dataTransfer.items;
            if (items && items.length && (items[0].webkitGetAsEntry || items[0].getAsEntry)) {
                return this._handleFileTreeEntries($.map(items, function (item) {
                    var entry;
                    if (item.webkitGetAsEntry) {
                        entry = item.webkitGetAsEntry();
                        if (entry) {
                            entry._file = item.getAsFile();
                        }
                        return entry;
                    }
                    return item.getAsEntry();
                }));
            }
            return $.Deferred().resolve($.makeArray(dataTransfer.files)).promise();
        },
        _getSingleFileInputFiles: function (fileInput) {
            fileInput = $(fileInput);
            var entries = fileInput.prop('webkitEntries') || fileInput.prop('entries'),
                files, value;
            if (entries && entries.length) {
                return this._handleFileTreeEntries(entries);
            }
            files = $.makeArray(fileInput.prop('files'));
            if (!files.length) {
                value = fileInput.prop('value');
                if (!value) {
                    return $.Deferred().resolve([]).promise();
                }
                files = [{
                    name: value.replace(/^.*\\/, '')
                }];
            }
            return $.Deferred().resolve(files).promise();
        },
        _getFileInputFiles: function (fileInput) {
            if (!(fileInput instanceof $) || fileInput.length === 1) {
                return this._getSingleFileInputFiles(fileInput);
            }
            return $.when.apply($, $.map(fileInput, this._getSingleFileInputFiles)).pipe(function () {
                return Array.prototype.concat.apply([], arguments);
            });
        },
        _onChange: function (e) {
            var that = e.data.fileupload,
                data = {
                    fileInput: $(e.target),
                    form: $(e.target.form)
                };
            that._getFileInputFiles(data.fileInput).always(function (files) {
                data.files = files;
                if (that.options.replaceFileInput) {
                    that._replaceFileInput(data.fileInput);
                }
                if (that._trigger('change', e, data) !== false) {
                    that._onAdd(e, data);
                }
            });
        },
        _onPaste: function (e) {
            var that = e.data.fileupload,
                cbd = e.originalEvent.clipboardData,
                items = (cbd && cbd.items) || [],
                data = {
                    files: []
                };
            $.each(items, function (index, item) {
                var file = item.getAsFile && item.getAsFile();
                if (file) {
                    data.files.push(file);
                }
            });
            if (that._trigger('paste', e, data) === false || that._onAdd(e, data) === false) {
                return false;
            }
        },
        _onDrop: function (e) {
            e.preventDefault();
            var that = e.data.fileupload,
                dataTransfer = e.dataTransfer = e.originalEvent.dataTransfer,
                data = {};
            that._getDroppedFiles(dataTransfer).always(function (files) {
                data.files = files;
                if (that._trigger('drop', e, data) !== false) {
                    that._onAdd(e, data);
                }
            });
        },
        _onDragOver: function (e) {
            var that = e.data.fileupload,
                dataTransfer = e.dataTransfer = e.originalEvent.dataTransfer;
            if (that._trigger('dragover', e) === false) {
                return false;
            }
            if (dataTransfer) {
                dataTransfer.dropEffect = 'copy';
            }
            e.preventDefault();
        },
        _initEventHandlers: function () {
            var ns = this.options.namespace;
            if (this._isXHRUpload(this.options)) {
                this.options.dropZone.bind('dragover.' + ns, {
                    fileupload: this
                }, this._onDragOver).bind('drop.' + ns, {
                    fileupload: this
                }, this._onDrop);
                this.options.pasteZone.bind('paste.' + ns, {
                    fileupload: this
                }, this._onPaste);
            }
            this.options.fileInput.bind('change.' + ns, {
                fileupload: this
            }, this._onChange);
        },
        _destroyEventHandlers: function () {
            var ns = this.options.namespace;
            this.options.dropZone.unbind('dragover.' + ns, this._onDragOver).unbind('drop.' + ns, this._onDrop);
            this.options.pasteZone.unbind('paste.' + ns, this._onPaste);
            this.options.fileInput.unbind('change.' + ns, this._onChange);
        },
        _setOption: function (key, value) {
            var refresh = $.inArray(key, this._refreshOptionsList) !== -1;
            if (refresh) {
                this._destroyEventHandlers();
            }
            $.Widget.prototype._setOption.call(this, key, value);
            if (refresh) {
                this._initSpecialOptions();
                this._initEventHandlers();
            }
        },
        _initSpecialOptions: function () {
            var options = this.options;
            if (options.fileInput === undefined) {
                options.fileInput = this.element.is('input[type="file"]') ? this.element : this.element.find('input[type="file"]');
            } else if (!(options.fileInput instanceof $)) {
                options.fileInput = $(options.fileInput);
            }
            if (!(options.dropZone instanceof $)) {
                options.dropZone = $(options.dropZone);
            }
            if (!(options.pasteZone instanceof $)) {
                options.pasteZone = $(options.pasteZone);
            }
        },
        _create: function () {
            var options = this.options;
            $.extend(options, $(this.element[0].cloneNode(false)).data());
            options.namespace = options.namespace || this.widgetName;
            this._initSpecialOptions();
            this._slots = [];
            this._sequence = this._getXHRPromise(true);
            this._sending = this._active = this._loaded = this._total = 0;
            this._initEventHandlers();
        },
        destroy: function () {
            this._destroyEventHandlers();
            $.Widget.prototype.destroy.call(this);
        },
        enable: function () {
            var wasDisabled = false;
            if (this.options.disabled) {
                wasDisabled = true;
            }
            $.Widget.prototype.enable.call(this);
            if (wasDisabled) {
                this._initEventHandlers();
            }
        },
        disable: function () {
            if (!this.options.disabled) {
                this._destroyEventHandlers();
            }
            $.Widget.prototype.disable.call(this);
        },
        add: function (data) {
            var that = this;
            if (!data || this.options.disabled) {
                return;
            }
            if (data.fileInput && !data.files) {
                this._getFileInputFiles(data.fileInput).always(function (files) {
                    data.files = files;
                    that._onAdd(null, data);
                });
            } else {
                data.files = $.makeArray(data.files);
                this._onAdd(null, data);
            }
        },
        send: function (data) {
            if (data && !this.options.disabled) {
                if (data.fileInput && !data.files) {
                    var that = this,
                        dfd = $.Deferred(),
                        promise = dfd.promise(),
                        jqXHR, aborted;
                    promise.abort = function () {
                        aborted = true;
                        if (jqXHR) {
                            return jqXHR.abort();
                        }
                        dfd.reject(null, 'abort', 'abort');
                        return promise;
                    };
                    this._getFileInputFiles(data.fileInput).always(function (files) {
                        if (aborted) {
                            return;
                        }
                        data.files = files;
                        jqXHR = that._onSend(null, data).then(function (result, textStatus, jqXHR) {
                            dfd.resolve(result, textStatus, jqXHR);
                        }, function (jqXHR, textStatus, errorThrown) {
                            dfd.reject(jqXHR, textStatus, errorThrown);
                        });
                    });
                    return this._enhancePromise(promise);
                }
                data.files = $.makeArray(data.files);
                if (data.files.length) {
                    return this._onSend(null, data);
                }
            }
            return this._getXHRPromise(false, data && data.context);
        }
    });
}));
(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery', 'tmpl', 'load-image', './jquery.fileupload-fp'], factory);
    } else {
        factory(window.jQuery, window.tmpl, window.loadImage);
    }
}(function ($, tmpl, loadImage) {
    'use strict';
    var parentWidget = ($.blueimpFP || $.blueimp).fileupload;
    $.widget('blueimpUI.fileupload', parentWidget, {
        options: {
            autoUpload: false,
            maxNumberOfFiles: undefined,
            maxFileSize: undefined,
            minFileSize: undefined,
            acceptFileTypes: /.+$/i,
            previewSourceFileTypes: /^image\/(gif|jpeg|png)$/,
            previewSourceMaxFileSize: 5000000,
            previewMaxWidth: 80,
            previewMaxHeight: 80,
            previewAsCanvas: true,
            uploadTemplateId: 'template-upload',
            downloadTemplateId: 'template-download',
            filesContainer: undefined,
            prependFiles: false,
            dataType: 'json',
            add: function (e, data) {
                var that = $(this).data('fileupload'),
                    options = that.options,
                    files = data.files;
                $(this).fileupload('process', data).done(function () {
                    that._adjustMaxNumberOfFiles(-files.length);
                    data.maxNumberOfFilesAdjusted = true;
                    data.files.valid = data.isValidated = that._validate(files);
                    data.context = that._renderUpload(files).data('data', data);
                    options.filesContainer[options.prependFiles ? 'prepend' : 'append'](data.context);
                    that._renderPreviews(files, data.context);
                    that._forceReflow(data.context);
                    that._transition(data.context).done(function () {
                        if ((that._trigger('added', e, data) !== false) && (options.autoUpload || data.autoUpload) && data.autoUpload !== false && data.isValidated) {
                            data.submit();
                        }
                    });
                });
            },
            send: function (e, data) {
                var that = $(this).data('fileupload');
                if (!data.isValidated) {
                    if (!data.maxNumberOfFilesAdjusted) {
                        that._adjustMaxNumberOfFiles(-data.files.length);
                        data.maxNumberOfFilesAdjusted = true;
                    }
                    if (!that._validate(data.files)) {
                        return false;
                    }
                }
                if (data.context && data.dataType && data.dataType.substr(0, 6) === 'iframe') {
                    data.context.find('.progress').addClass(!$.support.transition && 'progress-animated').attr('aria-valuenow', 100).find('.bar').css('width', '100%');
                }
                return that._trigger('sent', e, data);
            },
            done: function (e, data) {
                var that = $(this).data('fileupload'),
                    template;
                if (data.context) {
                    data.context.each(function (index) {
                        var file = ($.isArray(data.result) && data.result[index]) || {
                            error: 'Empty file upload result'
                        };
                        if (file.error) {
                            that._adjustMaxNumberOfFiles(1);
                        }
                        that._transition($(this)).done(function () {
                            var node = $(this);
                            template = that._renderDownload([file]).replaceAll(node);
                            that._forceReflow(template);
                            that._transition(template).done(function () {
                                data.context = $(this);
                                that._trigger('completed', e, data);
                            });
                        });
                    });
                } else {
                    if ($.isArray(data.result)) {
                        $.each(data.result, function (index, file) {
                            if (data.maxNumberOfFilesAdjusted && file.error) {
                                that._adjustMaxNumberOfFiles(1);
                            } else if (!data.maxNumberOfFilesAdjusted && !file.error) {
                                that._adjustMaxNumberOfFiles(-1);
                            }
                        });
                        data.maxNumberOfFilesAdjusted = true;
                    }
                    template = that._renderDownload(data.result).appendTo(that.options.filesContainer);
                    that._forceReflow(template);
                    that._transition(template).done(function () {
                        data.context = $(this);
                        that._trigger('completed', e, data);
                    });
                }
            },
            fail: function (e, data) {
                var that = $(this).data('fileupload'),
                    template;
                if (data.maxNumberOfFilesAdjusted) {
                    that._adjustMaxNumberOfFiles(data.files.length);
                }
                if (data.context) {
                    data.context.each(function (index) {
                        if (data.errorThrown !== 'abort') {
                            var file = data.files[index];
                            file.error = file.error || data.errorThrown || true;
                            that._transition($(this)).done(function () {
                                var node = $(this);
                                template = that._renderDownload([file]).replaceAll(node);
                                that._forceReflow(template);
                                that._transition(template).done(function () {
                                    data.context = $(this);
                                    that._trigger('failed', e, data);
                                });
                            });
                        } else {
                            that._transition($(this)).done(function () {
                                $(this).remove();
                                that._trigger('failed', e, data);
                            });
                        }
                    });
                } else if (data.errorThrown !== 'abort') {
                    data.context = that._renderUpload(data.files).appendTo(that.options.filesContainer).data('data', data);
                    that._forceReflow(data.context);
                    that._transition(data.context).done(function () {
                        data.context = $(this);
                        that._trigger('failed', e, data);
                    });
                } else {
                    that._trigger('failed', e, data);
                }
            },
            progress: function (e, data) {
                if (data.context) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    data.context.find('.progress').attr('aria-valuenow', progress).find('.bar').css('width', progress + '%');
                }
            },
            progressall: function (e, data) {
                var $this = $(this),
                    progress = parseInt(data.loaded / data.total * 100, 10),
                    globalProgressNode = $this.find('.fileupload-progress'),
                    extendedProgressNode = globalProgressNode.find('.progress-extended');
                if (extendedProgressNode.length) {
                    extendedProgressNode.html($this.data('fileupload')._renderExtendedProgress(data));
                }
                globalProgressNode.find('.progress').attr('aria-valuenow', progress).find('.bar').css('width', progress + '%');
            },
            start: function (e) {
                var that = $(this).data('fileupload');
                that._transition($(this).find('.fileupload-progress')).done(function () {
                    that._trigger('started', e);
                });
            },
            stop: function (e) {
                var that = $(this).data('fileupload');
                that._transition($(this).find('.fileupload-progress')).done(function () {
                    $(this).find('.progress').attr('aria-valuenow', '0').find('.bar').css('width', '0%');
                    $(this).find('.progress-extended').html('&nbsp;');
                    that._trigger('stopped', e);
                });
            },
            destroy: function (e, data) {
                var that = $(this).data('fileupload');
                if (data.url) {
                    $.ajax(data);
                    that._adjustMaxNumberOfFiles(1);
                }
                that._transition(data.context).done(function () {
                    $(this).remove();
                    that._trigger('destroyed', e, data);
                });
            }
        },
        _enableDragToDesktop: function () {
            var link = $(this),
                url = link.prop('href'),
                name = link.prop('download'),
                type = 'application/octet-stream';
            link.bind('dragstart', function (e) {
                try {
                    e.originalEvent.dataTransfer.setData('DownloadURL', [type, name, url].join(':'));
                } catch (err) {}
            });
        },
        _adjustMaxNumberOfFiles: function (operand) {
            if (typeof this.options.maxNumberOfFiles === 'number') {
                this.options.maxNumberOfFiles += operand;
                if (this.options.maxNumberOfFiles < 1) {
                    this._disableFileInputButton();
                } else {
                    this._enableFileInputButton();
                }
            }
        },
        _formatFileSize: function (bytes) {
            if (typeof bytes !== 'number') {
                return '';
            }
            if (bytes >= 1000000000) {
                return (bytes / 1000000000).toFixed(2) + ' GB';
            }
            if (bytes >= 1000000) {
                return (bytes / 1000000).toFixed(2) + ' MB';
            }
            return (bytes / 1000).toFixed(2) + ' KB';
        },
        _formatBitrate: function (bits) {
            if (typeof bits !== 'number') {
                return '';
            }
            if (bits >= 1000000000) {
                return (bits / 1000000000).toFixed(2) + ' Gbit/s';
            }
            if (bits >= 1000000) {
                return (bits / 1000000).toFixed(2) + ' Mbit/s';
            }
            if (bits >= 1000) {
                return (bits / 1000).toFixed(2) + ' kbit/s';
            }
            return bits + ' bit/s';
        },
        _formatTime: function (seconds) {
            var date = new Date(seconds * 1000),
                days = parseInt(seconds / 86400, 10);
            days = days ? days + 'd ' : '';
            return days +
                ('0' + date.getUTCHours()).slice(-2) + ':' +
                ('0' + date.getUTCMinutes()).slice(-2) + ':' +
                ('0' + date.getUTCSeconds()).slice(-2);
        },
        _formatPercentage: function (floatValue) {
            return (floatValue * 100).toFixed(2) + ' %';
        },
        _renderExtendedProgress: function (data) {
            return this._formatBitrate(data.bitrate) + ' | ' +
                this._formatTime((data.total - data.loaded) * 8 / data.bitrate) + ' | ' +
                this._formatPercentage(data.loaded / data.total) + ' | ' +
                this._formatFileSize(data.loaded) + ' / ' +
                this._formatFileSize(data.total);
        },
        _hasError: function (file) {
            if (file.error) {
                return file.error;
            }
            if (this.options.maxNumberOfFiles < 0) {
                return 'maxNumberOfFiles';
            }
            if (!(this.options.acceptFileTypes.test(file.type) || this.options.acceptFileTypes.test(file.name))) {
                return 'acceptFileTypes';
            }
            if (this.options.maxFileSize && file.size > this.options.maxFileSize) {
                return 'maxFileSize';
            }
            if (typeof file.size === 'number' && file.size < this.options.minFileSize) {
                return 'minFileSize';
            }
            return null;
        },
        _validate: function (files) {
            var that = this,
                valid = !!files.length;
            $.each(files, function (index, file) {
                file.error = that._hasError(file);
                if (file.error) {
                    valid = false;
                }
            });
            return valid;
        },
        _renderTemplate: function (func, files) {
            if (!func) {
                return $();
            }
            var result = func({
                files: files,
                formatFileSize: this._formatFileSize,
                options: this.options
            });
            if (result instanceof $) {
                return result;
            }
            return $(this.options.templatesContainer).html(result).children();
        },
        _renderPreview: function (file, node) {
            var that = this,
                options = this.options,
                dfd = $.Deferred();
            return ((loadImage && loadImage(file, function (img) {
                node.append(img);
                that._forceReflow(node);
                that._transition(node).done(function () {
                    dfd.resolveWith(node);
                });
                if (!$.contains(document.body, node[0])) {
                    dfd.resolveWith(node);
                }
            }, {
                maxWidth: options.previewMaxWidth,
                maxHeight: options.previewMaxHeight,
                canvas: options.previewAsCanvas
            })) || dfd.resolveWith(node)) && dfd;
        },
        _renderPreviews: function (files, nodes) {
            var that = this,
                options = this.options;
            nodes.find('.preview span').each(function (index, element) {
                var file = files[index];
                if (options.previewSourceFileTypes.test(file.type) && ($.type(options.previewSourceMaxFileSize) !== 'number' || file.size < options.previewSourceMaxFileSize)) {
                    that._processingQueue = that._processingQueue.pipe(function () {
                        var dfd = $.Deferred();
                        that._renderPreview(file, $(element)).done(function () {
                            dfd.resolveWith(that);
                        });
                        return dfd.promise();
                    });
                }
            });
            return this._processingQueue;
        },
        _renderUpload: function (files) {
            return this._renderTemplate(this.options.uploadTemplate, files);
        },
        _renderDownload: function (files) {
            return this._renderTemplate(this.options.downloadTemplate, files).find('a[download]').each(this._enableDragToDesktop).end();
        },
        _startHandler: function (e) {
            e.preventDefault();
            var button = $(this),
                template = button.closest('.template-upload'),
                data = template.data('data');
            if (data && data.submit && !data.jqXHR && data.submit()) {
                button.prop('disabled', true);
            }
        },
        _cancelHandler: function (e) {
            e.preventDefault();
            var template = $(this).closest('.template-upload'),
                data = template.data('data') || {};
            if (!data.jqXHR) {
                data.errorThrown = 'abort';
                e.data.fileupload._trigger('fail', e, data);
            } else {
                data.jqXHR.abort();
            }
        },
        _deleteHandler: function (e) {
            e.preventDefault();
            var button = $(this);
            e.data.fileupload._trigger('destroy', e, {
                context: button.closest('.template-download'),
                url: button.attr('data-url'),
                type: button.attr('data-type') || 'DELETE',
                dataType: e.data.fileupload.options.dataType
            });
        },
        _forceReflow: function (node) {
            return $.support.transition && node.length && node[0].offsetWidth;
        },
        _transition: function (node) {
            var dfd = $.Deferred();
            if ($.support.transition && node.hasClass('fade')) {
                node.bind($.support.transition.end, function (e) {
                    if (e.target === node[0]) {
                        node.unbind($.support.transition.end);
                        dfd.resolveWith(node);
                    }
                }).toggleClass('in');
            } else {
                node.toggleClass('in');
                dfd.resolveWith(node);
            }
            return dfd;
        },
        _initButtonBarEventHandlers: function () {
            var fileUploadButtonBar = this.element.find('.fileupload-buttonbar'),
                filesList = this.options.filesContainer,
                ns = this.options.namespace;
            fileUploadButtonBar.find('.start').bind('click.' + ns, function (e) {
                e.preventDefault();
                filesList.find('.start button').click();
            });
            fileUploadButtonBar.find('.cancel').bind('click.' + ns, function (e) {
                e.preventDefault();
                filesList.find('.cancel button').click();
            });
            fileUploadButtonBar.find('.delete').bind('click.' + ns, function (e) {
                e.preventDefault();
                filesList.find('.delete input:checked').siblings('button').click();
                fileUploadButtonBar.find('.toggle').prop('checked', false);
            });
            fileUploadButtonBar.find('.toggle').bind('change.' + ns, function (e) {
                filesList.find('.delete input').prop('checked', $(this).is(':checked'));
            });
        },
        _destroyButtonBarEventHandlers: function () {
            this.element.find('.fileupload-buttonbar button').unbind('click.' + this.options.namespace);
            this.element.find('.fileupload-buttonbar .toggle').unbind('change.' + this.options.namespace);
        },
        _initEventHandlers: function () {
            parentWidget.prototype._initEventHandlers.call(this);
            var eventData = {
                fileupload: this
            };
            this.options.filesContainer.delegate('.start button', 'click.' + this.options.namespace, eventData, this._startHandler).delegate('.cancel button', 'click.' + this.options.namespace, eventData, this._cancelHandler).delegate('.delete button', 'click.' + this.options.namespace, eventData, this._deleteHandler);
            this._initButtonBarEventHandlers();
        },
        _destroyEventHandlers: function () {
            var options = this.options;
            this._destroyButtonBarEventHandlers();
            options.filesContainer.undelegate('.start button', 'click.' + options.namespace).undelegate('.cancel button', 'click.' + options.namespace).undelegate('.delete button', 'click.' + options.namespace);
            parentWidget.prototype._destroyEventHandlers.call(this);
        },
        _enableFileInputButton: function () {
            this.element.find('.fileinput-button input').prop('disabled', false).parent().removeClass('disabled');
        },
        _disableFileInputButton: function () {
            this.element.find('.fileinput-button input').prop('disabled', true).parent().addClass('disabled');
        },
        _initTemplates: function () {
            var options = this.options;
            options.templatesContainer = document.createElement(options.filesContainer.prop('nodeName'));
            if (tmpl) {
                if (options.uploadTemplateId) {
                    options.uploadTemplate = tmpl(options.uploadTemplateId);
                }
                if (options.downloadTemplateId) {
                    options.downloadTemplate = tmpl(options.downloadTemplateId);
                }
            }
        },
        _initFilesContainer: function () {
            var options = this.options;
            if (options.filesContainer === undefined) {
                options.filesContainer = this.element.find('.files');
            } else if (!(options.filesContainer instanceof $)) {
                options.filesContainer = $(options.filesContainer);
            }
        },
        _stringToRegExp: function (str) {
            var parts = str.split('/'),
                modifiers = parts.pop();
            parts.shift();
            return new RegExp(parts.join('/'), modifiers);
        },
        _initRegExpOptions: function () {
            var options = this.options;
            if ($.type(options.acceptFileTypes) === 'string') {
                options.acceptFileTypes = this._stringToRegExp(options.acceptFileTypes);
            }
            if ($.type(options.previewSourceFileTypes) === 'string') {
                options.previewSourceFileTypes = this._stringToRegExp(options.previewSourceFileTypes);
            }
        },
        _initSpecialOptions: function () {
            parentWidget.prototype._initSpecialOptions.call(this);
            this._initFilesContainer();
            this._initTemplates();
            this._initRegExpOptions();
        },
        _create: function () {
            parentWidget.prototype._create.call(this);
            this._refreshOptionsList.push('filesContainer', 'uploadTemplateId', 'downloadTemplateId');
            if (!$.blueimpFP) {
                this._processingQueue = $.Deferred().resolveWith(this).promise();
                this.process = function () {
                    return this._processingQueue;
                };
            }
        },
        enable: function () {
            var wasDisabled = false;
            if (this.options.disabled) {
                wasDisabled = true;
            }
            parentWidget.prototype.enable.call(this);
            if (wasDisabled) {
                this.element.find('input, button').prop('disabled', false);
                this._enableFileInputButton();
            }
        },
        disable: function () {
            if (!this.options.disabled) {
                this.element.find('input, button').prop('disabled', true);
                this._disableFileInputButton();
            }
            parentWidget.prototype.disable.call(this);
        }
    });
}));
(function ($) {
    $.Jcrop = function (obj, opt) {
        var options = $.extend({}, $.Jcrop.defaults),
            docOffset, _ua = navigator.userAgent.toLowerCase(),
            is_msie = /msie/.test(_ua),
            ie6mode = /msie [1-6]\./.test(_ua);

        function px(n) {
            return Math.round(n) + 'px';
        }

        function cssClass(cl) {
            return options.baseClass + '-' + cl;
        }

        function supportsColorFade() {
            return $.fx.step.hasOwnProperty('backgroundColor');
        }

        function getPos(obj) {
            var pos = $(obj).offset();
            return [pos.left, pos.top];
        }

        function mouseAbs(e) {
            return [(e.pageX - docOffset[0]), (e.pageY - docOffset[1])];
        }

        function setOptions(opt) {
            if (typeof (opt) !== 'object') opt = {};
            options = $.extend(options, opt);
            $.each(['onChange', 'onSelect', 'onRelease', 'onDblClick'], function (i, e) {
                if (typeof (options[e]) !== 'function') options[e] = function () {};
            });
        }

        function startDragMode(mode, pos, touch) {
            docOffset = getPos($img);
            Tracker.setCursor(mode === 'move' ? mode : mode + '-resize');
            if (mode === 'move') {
                return Tracker.activateHandlers(createMover(pos), doneSelect, touch);
            }
            var fc = Coords.getFixed();
            var opp = oppLockCorner(mode);
            var opc = Coords.getCorner(oppLockCorner(opp));
            Coords.setPressed(Coords.getCorner(opp));
            Coords.setCurrent(opc);
            Tracker.activateHandlers(dragmodeHandler(mode, fc), doneSelect, touch);
        }

        function dragmodeHandler(mode, f) {
            return function (pos) {
                if (!options.aspectRatio) {
                    switch (mode) {
                    case 'e':
                        pos[1] = f.y2;
                        break;
                    case 'w':
                        pos[1] = f.y2;
                        break;
                    case 'n':
                        pos[0] = f.x2;
                        break;
                    case 's':
                        pos[0] = f.x2;
                        break;
                    }
                } else {
                    switch (mode) {
                    case 'e':
                        pos[1] = f.y + 1;
                        break;
                    case 'w':
                        pos[1] = f.y + 1;
                        break;
                    case 'n':
                        pos[0] = f.x + 1;
                        break;
                    case 's':
                        pos[0] = f.x + 1;
                        break;
                    }
                }
                Coords.setCurrent(pos);
                Selection.update();
            };
        }

        function createMover(pos) {
            var lloc = pos;
            KeyManager.watchKeys();
            return function (pos) {
                Coords.moveOffset([pos[0] - lloc[0], pos[1] - lloc[1]]);
                lloc = pos;
                Selection.update();
            };
        }

        function oppLockCorner(ord) {
            switch (ord) {
            case 'n':
                return 'sw';
            case 's':
                return 'nw';
            case 'e':
                return 'nw';
            case 'w':
                return 'ne';
            case 'ne':
                return 'sw';
            case 'nw':
                return 'se';
            case 'se':
                return 'nw';
            case 'sw':
                return 'ne';
            }
        }

        function createDragger(ord) {
            return function (e) {
                if (options.disabled) {
                    return false;
                }
                if ((ord === 'move') && !options.allowMove) {
                    return false;
                }
                docOffset = getPos($img);
                btndown = true;
                startDragMode(ord, mouseAbs(e));
                e.stopPropagation();
                e.preventDefault();
                return false;
            };
        }

        function presize($obj, w, h) {
            var nw = $obj.width(),
                nh = $obj.height();
            if ((nw > w) && w > 0) {
                nw = w;
                nh = (w / $obj.width()) * $obj.height();
            }
            if ((nh > h) && h > 0) {
                nh = h;
                nw = (h / $obj.height()) * $obj.width();
            }
            xscale = $obj.width() / nw;
            yscale = $obj.height() / nh;
            $obj.width(nw).height(nh);
        }

        function unscale(c) {
            return {
                x: c.x * xscale,
                y: c.y * yscale,
                x2: c.x2 * xscale,
                y2: c.y2 * yscale,
                w: c.w * xscale,
                h: c.h * yscale
            };
        }

        function doneSelect(pos) {
            var c = Coords.getFixed();
            if ((c.w > options.minSelect[0]) && (c.h > options.minSelect[1])) {
                Selection.enableHandles();
                Selection.done();
            } else {
                Selection.release();
            }
            Tracker.setCursor(options.allowSelect ? 'crosshair' : 'default');
        }

        function newSelection(e) {
            if (options.disabled) {
                return false;
            }
            if (!options.allowSelect) {
                return false;
            }
            btndown = true;
            docOffset = getPos($img);
            Selection.disableHandles();
            Tracker.setCursor('crosshair');
            var pos = mouseAbs(e);
            Coords.setPressed(pos);
            Selection.update();
            Tracker.activateHandlers(selectDrag, doneSelect, e.type.substring(0, 5) === 'touch');
            KeyManager.watchKeys();
            e.stopPropagation();
            e.preventDefault();
            return false;
        }

        function selectDrag(pos) {
            Coords.setCurrent(pos);
            Selection.update();
        }

        function newTracker() {
            var trk = $('<div></div>').addClass(cssClass('tracker'));
            if (is_msie) {
                trk.css({
                    opacity: 0,
                    backgroundColor: 'white'
                });
            }
            return trk;
        }
        if (typeof (obj) !== 'object') {
            obj = $(obj)[0];
        }
        if (typeof (opt) !== 'object') {
            opt = {};
        }
        setOptions(opt);
        var img_css = {
            border: 'none',
            visibility: 'visible',
            margin: 0,
            padding: 0,
            position: 'absolute',
            top: 0,
            left: 0
        };
        var $origimg = $(obj),
            img_mode = true;
        if (obj.tagName == 'IMG') {
            if ($origimg[0].width != 0 && $origimg[0].height != 0) {
                $origimg.width($origimg[0].width);
                $origimg.height($origimg[0].height);
            } else {
                var tempImage = new Image();
                tempImage.src = $origimg[0].src;
                $origimg.width(tempImage.width);
                $origimg.height(tempImage.height);
            }
            var $img = $origimg.clone().removeAttr('id').css(img_css).show();
            $img.width($origimg.width());
            $img.height($origimg.height());
            $origimg.after($img).hide();
        } else {
            $img = $origimg.css(img_css).show();
            img_mode = false;
            if (options.shade === null) {
                options.shade = true;
            }
        }
        presize($img, options.boxWidth, options.boxHeight);
        var boundx = $img.width(),
            boundy = $img.height(),
            $div = $('<div />').width(boundx).height(boundy).addClass(cssClass('holder')).css({
                position: 'relative',
                backgroundColor: options.bgColor
            }).insertAfter($origimg).append($img);
        if (options.addClass) {
            $div.addClass(options.addClass);
        }
        var $img2 = $('<div />'),
            $img_holder = $('<div />').width('100%').height('100%').css({
                zIndex: 310,
                position: 'absolute',
                overflow: 'hidden'
            }),
            $hdl_holder = $('<div />').width('100%').height('100%').css('zIndex', 320),
            $sel = $('<div />').css({
                position: 'absolute',
                zIndex: 600
            }).dblclick(function () {
                var c = Coords.getFixed();
                options.onDblClick.call(api, c);
            }).insertBefore($img).append($img_holder, $hdl_holder);
        if (img_mode) {
            $img2 = $('<img />').attr('src', $img.attr('src')).css(img_css).width(boundx).height(boundy), $img_holder.append($img2);
        }
        if (ie6mode) {
            $sel.css({
                overflowY: 'hidden'
            });
        }
        var bound = options.boundary;
        var $trk = newTracker().width(boundx + (bound * 2)).height(boundy + (bound * 2)).css({
            position: 'absolute',
            top: px(-bound),
            left: px(-bound),
            zIndex: 290
        }).mousedown(newSelection);
        var bgcolor = options.bgColor,
            bgopacity = options.bgOpacity,
            xlimit, ylimit, xmin, ymin, xscale, yscale, enabled = true,
            btndown, animating, shift_down;
        docOffset = getPos($img);
        var Touch = (function () {
            function hasTouchSupport() {
                var support = {},
                    events = ['touchstart', 'touchmove', 'touchend'],
                    el = document.createElement('div'),
                    i;
                try {
                    for (i = 0; i < events.length; i++) {
                        var eventName = events[i];
                        eventName = 'on' + eventName;
                        var isSupported = (eventName in el);
                        if (!isSupported) {
                            el.setAttribute(eventName, 'return;');
                            isSupported = typeof el[eventName] == 'function';
                        }
                        support[events[i]] = isSupported;
                    }
                    return support.touchstart && support.touchend && support.touchmove;
                } catch (err) {
                    return false;
                }
            }

            function detectSupport() {
                if ((options.touchSupport === true) || (options.touchSupport === false)) return options.touchSupport;
                else return hasTouchSupport();
            }
            return {
                createDragger: function (ord) {
                    return function (e) {
                        if (options.disabled) {
                            return false;
                        }
                        if ((ord === 'move') && !options.allowMove) {
                            return false;
                        }
                        docOffset = getPos($img);
                        btndown = true;
                        startDragMode(ord, mouseAbs(Touch.cfilter(e)), true);
                        e.stopPropagation();
                        e.preventDefault();
                        return false;
                    };
                },
                newSelection: function (e) {
                    return newSelection(Touch.cfilter(e));
                },
                cfilter: function (e) {
                    e.pageX = e.originalEvent.changedTouches[0].pageX;
                    e.pageY = e.originalEvent.changedTouches[0].pageY;
                    return e;
                },
                isSupported: hasTouchSupport,
                support: detectSupport()
            };
        }());
        var Coords = (function () {
            var x1 = 0,
                y1 = 0,
                x2 = 0,
                y2 = 0,
                ox, oy;

            function setPressed(pos) {
                pos = rebound(pos);
                x2 = x1 = pos[0];
                y2 = y1 = pos[1];
            }

            function setCurrent(pos) {
                pos = rebound(pos);
                ox = pos[0] - x2;
                oy = pos[1] - y2;
                x2 = pos[0];
                y2 = pos[1];
            }

            function getOffset() {
                return [ox, oy];
            }

            function moveOffset(offset) {
                var ox = offset[0],
                    oy = offset[1];
                if (0 > x1 + ox) {
                    ox -= ox + x1;
                }
                if (0 > y1 + oy) {
                    oy -= oy + y1;
                }
                if (boundy < y2 + oy) {
                    oy += boundy - (y2 + oy);
                }
                if (boundx < x2 + ox) {
                    ox += boundx - (x2 + ox);
                }
                x1 += ox;
                x2 += ox;
                y1 += oy;
                y2 += oy;
            }

            function getCorner(ord) {
                var c = getFixed();
                switch (ord) {
                case 'ne':
                    return [c.x2, c.y];
                case 'nw':
                    return [c.x, c.y];
                case 'se':
                    return [c.x2, c.y2];
                case 'sw':
                    return [c.x, c.y2];
                }
            }

            function getFixed() {
                if (!options.aspectRatio) {
                    return getRect();
                }
                var aspect = options.aspectRatio,
                    min_x = options.minSize[0] / xscale,
                    max_x = options.maxSize[0] / xscale,
                    max_y = options.maxSize[1] / yscale,
                    rw = x2 - x1,
                    rh = y2 - y1,
                    rwa = Math.abs(rw),
                    rha = Math.abs(rh),
                    real_ratio = rwa / rha,
                    xx, yy, w, h;
                if (max_x === 0) {
                    max_x = boundx * 10;
                }
                if (max_y === 0) {
                    max_y = boundy * 10;
                }
                if (real_ratio < aspect) {
                    yy = y2;
                    w = rha * aspect;
                    xx = rw < 0 ? x1 - w : w + x1;
                    if (xx < 0) {
                        xx = 0;
                        h = Math.abs((xx - x1) / aspect);
                        yy = rh < 0 ? y1 - h : h + y1;
                    } else if (xx > boundx) {
                        xx = boundx;
                        h = Math.abs((xx - x1) / aspect);
                        yy = rh < 0 ? y1 - h : h + y1;
                    }
                } else {
                    xx = x2;
                    h = rwa / aspect;
                    yy = rh < 0 ? y1 - h : y1 + h;
                    if (yy < 0) {
                        yy = 0;
                        w = Math.abs((yy - y1) * aspect);
                        xx = rw < 0 ? x1 - w : w + x1;
                    } else if (yy > boundy) {
                        yy = boundy;
                        w = Math.abs(yy - y1) * aspect;
                        xx = rw < 0 ? x1 - w : w + x1;
                    }
                }
                if (xx > x1) {
                    if (xx - x1 < min_x) {
                        xx = x1 + min_x;
                    } else if (xx - x1 > max_x) {
                        xx = x1 + max_x;
                    }
                    if (yy > y1) {
                        yy = y1 + (xx - x1) / aspect;
                    } else {
                        yy = y1 - (xx - x1) / aspect;
                    }
                } else if (xx < x1) {
                    if (x1 - xx < min_x) {
                        xx = x1 - min_x;
                    } else if (x1 - xx > max_x) {
                        xx = x1 - max_x;
                    }
                    if (yy > y1) {
                        yy = y1 + (x1 - xx) / aspect;
                    } else {
                        yy = y1 - (x1 - xx) / aspect;
                    }
                }
                if (xx < 0) {
                    x1 -= xx;
                    xx = 0;
                } else if (xx > boundx) {
                    x1 -= xx - boundx;
                    xx = boundx;
                }
                if (yy < 0) {
                    y1 -= yy;
                    yy = 0;
                } else if (yy > boundy) {
                    y1 -= yy - boundy;
                    yy = boundy;
                }
                return makeObj(flipCoords(x1, y1, xx, yy));
            }

            function rebound(p) {
                if (p[0] < 0) p[0] = 0;
                if (p[1] < 0) p[1] = 0;
                if (p[0] > boundx) p[0] = boundx;
                if (p[1] > boundy) p[1] = boundy;
                return [Math.round(p[0]), Math.round(p[1])];
            }

            function flipCoords(x1, y1, x2, y2) {
                var xa = x1,
                    xb = x2,
                    ya = y1,
                    yb = y2;
                if (x2 < x1) {
                    xa = x2;
                    xb = x1;
                }
                if (y2 < y1) {
                    ya = y2;
                    yb = y1;
                }
                return [xa, ya, xb, yb];
            }

            function getRect() {
                var xsize = x2 - x1,
                    ysize = y2 - y1,
                    delta;
                if (xlimit && (Math.abs(xsize) > xlimit)) {
                    x2 = (xsize > 0) ? (x1 + xlimit) : (x1 - xlimit);
                }
                if (ylimit && (Math.abs(ysize) > ylimit)) {
                    y2 = (ysize > 0) ? (y1 + ylimit) : (y1 - ylimit);
                }
                if (ymin / yscale && (Math.abs(ysize) < ymin / yscale)) {
                    y2 = (ysize > 0) ? (y1 + ymin / yscale) : (y1 - ymin / yscale);
                }
                if (xmin / xscale && (Math.abs(xsize) < xmin / xscale)) {
                    x2 = (xsize > 0) ? (x1 + xmin / xscale) : (x1 - xmin / xscale);
                }
                if (x1 < 0) {
                    x2 -= x1;
                    x1 -= x1;
                }
                if (y1 < 0) {
                    y2 -= y1;
                    y1 -= y1;
                }
                if (x2 < 0) {
                    x1 -= x2;
                    x2 -= x2;
                }
                if (y2 < 0) {
                    y1 -= y2;
                    y2 -= y2;
                }
                if (x2 > boundx) {
                    delta = x2 - boundx;
                    x1 -= delta;
                    x2 -= delta;
                }
                if (y2 > boundy) {
                    delta = y2 - boundy;
                    y1 -= delta;
                    y2 -= delta;
                }
                if (x1 > boundx) {
                    delta = x1 - boundy;
                    y2 -= delta;
                    y1 -= delta;
                }
                if (y1 > boundy) {
                    delta = y1 - boundy;
                    y2 -= delta;
                    y1 -= delta;
                }
                return makeObj(flipCoords(x1, y1, x2, y2));
            }

            function makeObj(a) {
                return {
                    x: a[0],
                    y: a[1],
                    x2: a[2],
                    y2: a[3],
                    w: a[2] - a[0],
                    h: a[3] - a[1]
                };
            }
            return {
                flipCoords: flipCoords,
                setPressed: setPressed,
                setCurrent: setCurrent,
                getOffset: getOffset,
                moveOffset: moveOffset,
                getCorner: getCorner,
                getFixed: getFixed
            };
        }());
        var Shade = (function () {
            var enabled = false,
                holder = $('<div />').css({
                    position: 'absolute',
                    zIndex: 240,
                    opacity: 0
                }),
                shades = {
                    top: createShade(),
                    left: createShade().height(boundy),
                    right: createShade().height(boundy),
                    bottom: createShade()
                };

            function resizeShades(w, h) {
                shades.left.css({
                    height: px(h)
                });
                shades.right.css({
                    height: px(h)
                });
            }

            function updateAuto() {
                return updateShade(Coords.getFixed());
            }

            function updateShade(c) {
                shades.top.css({
                    left: px(c.x),
                    width: px(c.w),
                    height: px(c.y)
                });
                shades.bottom.css({
                    top: px(c.y2),
                    left: px(c.x),
                    width: px(c.w),
                    height: px(boundy - c.y2)
                });
                shades.right.css({
                    left: px(c.x2),
                    width: px(boundx - c.x2)
                });
                shades.left.css({
                    width: px(c.x)
                });
            }

            function createShade() {
                return $('<div />').css({
                    position: 'absolute',
                    backgroundColor: options.shadeColor || options.bgColor
                }).appendTo(holder);
            }

            function enableShade() {
                if (!enabled) {
                    enabled = true;
                    holder.insertBefore($img);
                    updateAuto();
                    Selection.setBgOpacity(1, 0, 1);
                    $img2.hide();
                    setBgColor(options.shadeColor || options.bgColor, 1);
                    if (Selection.isAwake()) {
                        setOpacity(options.bgOpacity, 1);
                    } else setOpacity(1, 1);
                }
            }

            function setBgColor(color, now) {
                colorChangeMacro(getShades(), color, now);
            }

            function disableShade() {
                if (enabled) {
                    holder.remove();
                    $img2.show();
                    enabled = false;
                    if (Selection.isAwake()) {
                        Selection.setBgOpacity(options.bgOpacity, 1, 1);
                    } else {
                        Selection.setBgOpacity(1, 1, 1);
                        Selection.disableHandles();
                    }
                    colorChangeMacro($div, 0, 1);
                }
            }

            function setOpacity(opacity, now) {
                if (enabled) {
                    if (options.bgFade && !now) {
                        holder.animate({
                            opacity: 1 - opacity
                        }, {
                            queue: false,
                            duration: options.fadeTime
                        });
                    } else holder.css({
                        opacity: 1 - opacity
                    });
                }
            }

            function refreshAll() {
                options.shade ? enableShade() : disableShade();
                if (Selection.isAwake()) setOpacity(options.bgOpacity);
            }

            function getShades() {
                return holder.children();
            }
            return {
                update: updateAuto,
                updateRaw: updateShade,
                getShades: getShades,
                setBgColor: setBgColor,
                enable: enableShade,
                disable: disableShade,
                resize: resizeShades,
                refresh: refreshAll,
                opacity: setOpacity
            };
        }());
        var Selection = (function () {
            var awake, hdep = 370,
                borders = {},
                handle = {},
                dragbar = {},
                seehandles = false;

            function insertBorder(type) {
                var jq = $('<div />').css({
                    position: 'absolute',
                    opacity: options.borderOpacity
                }).addClass(cssClass(type));
                $img_holder.append(jq);
                return jq;
            }

            function dragDiv(ord, zi) {
                var jq = $('<div />').mousedown(createDragger(ord)).css({
                    cursor: ord + '-resize',
                    position: 'absolute',
                    zIndex: zi
                }).addClass('ord-' + ord);
                if (Touch.support) {
                    jq.bind('touchstart.jcrop', Touch.createDragger(ord));
                }
                $hdl_holder.append(jq);
                return jq;
            }

            function insertHandle(ord) {
                var hs = options.handleSize,
                    div = dragDiv(ord, hdep++).css({
                        opacity: options.handleOpacity
                    }).addClass(cssClass('handle'));
                if (hs) {
                    div.width(hs).height(hs);
                }
                return div;
            }

            function insertDragbar(ord) {
                return dragDiv(ord, hdep++).addClass('jcrop-dragbar');
            }

            function createDragbars(li) {
                var i;
                for (i = 0; i < li.length; i++) {
                    dragbar[li[i]] = insertDragbar(li[i]);
                }
            }

            function createBorders(li) {
                var cl, i;
                for (i = 0; i < li.length; i++) {
                    switch (li[i]) {
                    case 'n':
                        cl = 'hline';
                        break;
                    case 's':
                        cl = 'hline bottom';
                        break;
                    case 'e':
                        cl = 'vline right';
                        break;
                    case 'w':
                        cl = 'vline';
                        break;
                    }
                    borders[li[i]] = insertBorder(cl);
                }
            }

            function createHandles(li) {
                var i;
                for (i = 0; i < li.length; i++) {
                    handle[li[i]] = insertHandle(li[i]);
                }
            }

            function moveto(x, y) {
                if (!options.shade) {
                    $img2.css({
                        top: px(-y),
                        left: px(-x)
                    });
                }
                $sel.css({
                    top: px(y),
                    left: px(x)
                });
            }

            function resize(w, h) {
                $sel.width(Math.round(w)).height(Math.round(h));
            }

            function refresh() {
                var c = Coords.getFixed();
                Coords.setPressed([c.x, c.y]);
                Coords.setCurrent([c.x2, c.y2]);
                updateVisible();
            }

            function updateVisible(select) {
                if (awake) {
                    return update(select);
                }
            }

            function update(select) {
                var c = Coords.getFixed();
                resize(c.w, c.h);
                moveto(c.x, c.y);
                if (options.shade) Shade.updateRaw(c);
                awake || show();
                if (select) {
                    options.onSelect.call(api, unscale(c));
                } else {
                    options.onChange.call(api, unscale(c));
                }
            }

            function setBgOpacity(opacity, force, now) {
                if (!awake && !force) return;
                if (options.bgFade && !now) {
                    $img.animate({
                        opacity: opacity
                    }, {
                        queue: false,
                        duration: options.fadeTime
                    });
                } else {
                    $img.css('opacity', opacity);
                }
            }

            function show() {
                $sel.show();
                if (options.shade) Shade.opacity(bgopacity);
                else setBgOpacity(bgopacity, true);
                awake = true;
            }

            function release() {
                disableHandles();
                $sel.hide();
                if (options.shade) Shade.opacity(1);
                else setBgOpacity(1);
                awake = false;
                options.onRelease.call(api);
            }

            function showHandles() {
                if (seehandles) {
                    $hdl_holder.show();
                }
            }

            function enableHandles() {
                seehandles = true;
                if (options.allowResize) {
                    $hdl_holder.show();
                    return true;
                }
            }

            function disableHandles() {
                seehandles = false;
                $hdl_holder.hide();
            }

            function animMode(v) {
                if (v) {
                    animating = true;
                    disableHandles();
                } else {
                    animating = false;
                    enableHandles();
                }
            }

            function done() {
                animMode(false);
                refresh();
            }
            if (options.dragEdges && $.isArray(options.createDragbars))
                createDragbars(options.createDragbars);
            if ($.isArray(options.createHandles))
                createHandles(options.createHandles);
            if (options.drawBorders && $.isArray(options.createBorders))
                createBorders(options.createBorders);
            $(document).bind('touchstart.jcrop-ios', function (e) {
                if ($(e.currentTarget).hasClass('jcrop-tracker')) e.stopPropagation();
            });
            var $track = newTracker().mousedown(createDragger('move')).css({
                cursor: 'move',
                position: 'absolute',
                zIndex: 360
            });
            if (Touch.support) {
                $track.bind('touchstart.jcrop', Touch.createDragger('move'));
            }
            $img_holder.append($track);
            disableHandles();
            return {
                updateVisible: updateVisible,
                update: update,
                release: release,
                refresh: refresh,
                isAwake: function () {
                    return awake;
                },
                setCursor: function (cursor) {
                    $track.css('cursor', cursor);
                },
                enableHandles: enableHandles,
                enableOnly: function () {
                    seehandles = true;
                },
                showHandles: showHandles,
                disableHandles: disableHandles,
                animMode: animMode,
                setBgOpacity: setBgOpacity,
                done: done
            };
        }());
        var Tracker = (function () {
            var onMove = function () {},
                onDone = function () {},
                trackDoc = options.trackDocument;

            function toFront(touch) {
                $trk.css({
                    zIndex: 450
                });
                if (touch)
                    $(document).bind('touchmove.jcrop', trackTouchMove).bind('touchend.jcrop', trackTouchEnd);
                else if (trackDoc)
                    $(document).bind('mousemove.jcrop', trackMove).bind('mouseup.jcrop', trackUp);
            }

            function toBack() {
                $trk.css({
                    zIndex: 290
                });
                $(document).unbind('.jcrop');
            }

            function trackMove(e) {
                onMove(mouseAbs(e));
                return false;
            }

            function trackUp(e) {
                e.preventDefault();
                e.stopPropagation();
                if (btndown) {
                    btndown = false;
                    onDone(mouseAbs(e));
                    if (Selection.isAwake()) {
                        options.onSelect.call(api, unscale(Coords.getFixed()));
                    }
                    toBack();
                    onMove = function () {};
                    onDone = function () {};
                }
                return false;
            }

            function activateHandlers(move, done, touch) {
                btndown = true;
                onMove = move;
                onDone = done;
                toFront(touch);
                return false;
            }

            function trackTouchMove(e) {
                onMove(mouseAbs(Touch.cfilter(e)));
                return false;
            }

            function trackTouchEnd(e) {
                return trackUp(Touch.cfilter(e));
            }

            function setCursor(t) {
                $trk.css('cursor', t);
            }
            if (!trackDoc) {
                $trk.mousemove(trackMove).mouseup(trackUp).mouseout(trackUp);
            }
            $img.before($trk);
            return {
                activateHandlers: activateHandlers,
                setCursor: setCursor
            };
        }());
        var KeyManager = (function () {
            var $keymgr = $('<input type="radio" />').css({
                    position: 'fixed',
                    left: '-120px',
                    width: '12px'
                }).addClass('jcrop-keymgr'),
                $keywrap = $('<div />').css({
                    position: 'absolute',
                    overflow: 'hidden'
                }).append($keymgr);

            function watchKeys() {
                if (options.keySupport) {
                    $keymgr.show();
                    $keymgr.focus();
                }
            }

            function onBlur(e) {
                $keymgr.hide();
            }

            function doNudge(e, x, y) {
                if (options.allowMove) {
                    Coords.moveOffset([x, y]);
                    Selection.updateVisible(true);
                }
                e.preventDefault();
                e.stopPropagation();
            }

            function parseKey(e) {
                if (e.ctrlKey || e.metaKey) {
                    return true;
                }
                shift_down = e.shiftKey ? true : false;
                var nudge = shift_down ? 10 : 1;
                switch (e.keyCode) {
                case 37:
                    doNudge(e, -nudge, 0);
                    break;
                case 39:
                    doNudge(e, nudge, 0);
                    break;
                case 38:
                    doNudge(e, 0, -nudge);
                    break;
                case 40:
                    doNudge(e, 0, nudge);
                    break;
                case 27:
                    if (options.allowSelect) Selection.release();
                    break;
                case 9:
                    return true;
                }
                return false;
            }
            if (options.keySupport) {
                $keymgr.keydown(parseKey).blur(onBlur);
                if (ie6mode || !options.fixedSupport) {
                    $keymgr.css({
                        position: 'absolute',
                        left: '-20px'
                    });
                    $keywrap.append($keymgr).insertBefore($img);
                } else {
                    $keymgr.insertBefore($img);
                }
            }
            return {
                watchKeys: watchKeys
            };
        }());

        function setClass(cname) {
            $div.removeClass().addClass(cssClass('holder')).addClass(cname);
        }

        function animateTo(a, callback) {
            var x1 = a[0] / xscale,
                y1 = a[1] / yscale,
                x2 = a[2] / xscale,
                y2 = a[3] / yscale;
            if (animating) {
                return;
            }
            var animto = Coords.flipCoords(x1, y1, x2, y2),
                c = Coords.getFixed(),
                initcr = [c.x, c.y, c.x2, c.y2],
                animat = initcr,
                interv = options.animationDelay,
                ix1 = animto[0] - initcr[0],
                iy1 = animto[1] - initcr[1],
                ix2 = animto[2] - initcr[2],
                iy2 = animto[3] - initcr[3],
                pcent = 0,
                velocity = options.swingSpeed;
            x1 = animat[0];
            y1 = animat[1];
            x2 = animat[2];
            y2 = animat[3];
            Selection.animMode(true);
            var anim_timer;

            function queueAnimator() {
                window.setTimeout(animator, interv);
            }
            var animator = (function () {
                return function () {
                    pcent += (100 - pcent) / velocity;
                    animat[0] = Math.round(x1 + ((pcent / 100) * ix1));
                    animat[1] = Math.round(y1 + ((pcent / 100) * iy1));
                    animat[2] = Math.round(x2 + ((pcent / 100) * ix2));
                    animat[3] = Math.round(y2 + ((pcent / 100) * iy2));
                    if (pcent >= 99.8) {
                        pcent = 100;
                    }
                    if (pcent < 100) {
                        setSelectRaw(animat);
                        queueAnimator();
                    } else {
                        Selection.done();
                        Selection.animMode(false);
                        if (typeof (callback) === 'function') {
                            callback.call(api);
                        }
                    }
                };
            }());
            queueAnimator();
        }

        function setSelect(rect) {
            setSelectRaw([rect[0] / xscale, rect[1] / yscale, rect[2] / xscale, rect[3] / yscale]);
            options.onSelect.call(api, unscale(Coords.getFixed()));
            Selection.enableHandles();
        }

        function setSelectRaw(l) {
            Coords.setPressed([l[0], l[1]]);
            Coords.setCurrent([l[2], l[3]]);
            Selection.update();
        }

        function tellSelect() {
            return unscale(Coords.getFixed());
        }

        function tellScaled() {
            return Coords.getFixed();
        }

        function setOptionsNew(opt) {
            setOptions(opt);
            interfaceUpdate();
        }

        function disableCrop() {
            options.disabled = true;
            Selection.disableHandles();
            Selection.setCursor('default');
            Tracker.setCursor('default');
        }

        function enableCrop() {
            options.disabled = false;
            interfaceUpdate();
        }

        function cancelCrop() {
            Selection.done();
            Tracker.activateHandlers(null, null);
        }

        function destroy() {
            $div.remove();
            $origimg.show();
            $origimg.css('visibility', 'visible');
            $(obj).removeData('Jcrop');
        }

        function setImage(src, callback) {
            Selection.release();
            disableCrop();
            var img = new Image();
            img.onload = function () {
                var iw = img.width;
                var ih = img.height;
                var bw = options.boxWidth;
                var bh = options.boxHeight;
                $img.width(iw).height(ih);
                $img.attr('src', src);
                $img2.attr('src', src);
                presize($img, bw, bh);
                boundx = $img.width();
                boundy = $img.height();
                $img2.width(boundx).height(boundy);
                $trk.width(boundx + (bound * 2)).height(boundy + (bound * 2));
                $div.width(boundx).height(boundy);
                Shade.resize(boundx, boundy);
                enableCrop();
                if (typeof (callback) === 'function') {
                    callback.call(api);
                }
            };
            img.src = src;
        }

        function colorChangeMacro($obj, color, now) {
            var mycolor = color || options.bgColor;
            if (options.bgFade && supportsColorFade() && options.fadeTime && !now) {
                $obj.animate({
                    backgroundColor: mycolor
                }, {
                    queue: false,
                    duration: options.fadeTime
                });
            } else {
                $obj.css('backgroundColor', mycolor);
            }
        }

        function interfaceUpdate(alt) {
            if (options.allowResize) {
                if (alt) {
                    Selection.enableOnly();
                } else {
                    Selection.enableHandles();
                }
            } else {
                Selection.disableHandles();
            }
            Tracker.setCursor(options.allowSelect ? 'crosshair' : 'default');
            Selection.setCursor(options.allowMove ? 'move' : 'default');
            if (options.hasOwnProperty('trueSize')) {
                xscale = options.trueSize[0] / boundx;
                yscale = options.trueSize[1] / boundy;
            }
            if (options.hasOwnProperty('setSelect')) {
                setSelect(options.setSelect);
                Selection.done();
                delete(options.setSelect);
            }
            Shade.refresh();
            if (options.bgColor != bgcolor) {
                colorChangeMacro(options.shade ? Shade.getShades() : $div, options.shade ? (options.shadeColor || options.bgColor) : options.bgColor);
                bgcolor = options.bgColor;
            }
            if (bgopacity != options.bgOpacity) {
                bgopacity = options.bgOpacity;
                if (options.shade) Shade.refresh();
                else Selection.setBgOpacity(bgopacity);
            }
            xlimit = options.maxSize[0] || 0;
            ylimit = options.maxSize[1] || 0;
            xmin = options.minSize[0] || 0;
            ymin = options.minSize[1] || 0;
            if (options.hasOwnProperty('outerImage')) {
                $img.attr('src', options.outerImage);
                delete(options.outerImage);
            }
            Selection.refresh();
        }
        if (Touch.support) $trk.bind('touchstart.jcrop', Touch.newSelection);
        $hdl_holder.hide();
        interfaceUpdate(true);
        var api = {
            setImage: setImage,
            animateTo: animateTo,
            setSelect: setSelect,
            setOptions: setOptionsNew,
            tellSelect: tellSelect,
            tellScaled: tellScaled,
            setClass: setClass,
            disable: disableCrop,
            enable: enableCrop,
            cancel: cancelCrop,
            release: Selection.release,
            destroy: destroy,
            focus: KeyManager.watchKeys,
            getBounds: function () {
                return [boundx * xscale, boundy * yscale];
            },
            getWidgetSize: function () {
                return [boundx, boundy];
            },
            getScaleFactor: function () {
                return [xscale, yscale];
            },
            getOptions: function () {
                return options;
            },
            ui: {
                holder: $div,
                selection: $sel
            }
        };
        if (is_msie) $div.bind('selectstart', function () {
            return false;
        });
        $origimg.data('Jcrop', api);
        return api;
    };
    $.fn.Jcrop = function (options, callback) {
        var api;
        this.each(function () {
            if ($(this).data('Jcrop')) {
                if (options === 'api') return $(this).data('Jcrop');
                else $(this).data('Jcrop').setOptions(options);
            } else {
                if (this.tagName == 'IMG')
                    $.Jcrop.Loader(this, function () {
                        $(this).css({
                            display: 'block',
                            visibility: 'hidden'
                        });
                        api = $.Jcrop(this, options);
                        if ($.isFunction(callback)) callback.call(api);
                    });
                else {
                    $(this).css({
                        display: 'block',
                        visibility: 'hidden'
                    });
                    api = $.Jcrop(this, options);
                    if ($.isFunction(callback)) callback.call(api);
                }
            }
        });
        return this;
    };
    $.Jcrop.Loader = function (imgobj, success, error) {
        var $img = $(imgobj),
            img = $img[0];

        function completeCheck() {
            if (img.complete) {
                $img.unbind('.jcloader');
                if ($.isFunction(success)) success.call(img);
            } else window.setTimeout(completeCheck, 50);
        }
        $img.bind('load.jcloader', completeCheck).bind('error.jcloader', function (e) {
            $img.unbind('.jcloader');
            if ($.isFunction(error)) error.call(img);
        });
        if (img.complete && $.isFunction(success)) {
            $img.unbind('.jcloader');
            success.call(img);
        }
    };
    $.Jcrop.defaults = {
        allowSelect: true,
        allowMove: true,
        allowResize: true,
        trackDocument: true,
        baseClass: 'jcrop',
        addClass: null,
        bgColor: 'black',
        bgOpacity: 0.6,
        bgFade: false,
        borderOpacity: 0.4,
        handleOpacity: 0.5,
        handleSize: null,
        aspectRatio: 0,
        keySupport: true,
        createHandles: ['n', 's', 'e', 'w', 'nw', 'ne', 'se', 'sw'],
        createDragbars: ['n', 's', 'e', 'w'],
        createBorders: ['n', 's', 'e', 'w'],
        drawBorders: true,
        dragEdges: true,
        fixedSupport: true,
        touchSupport: null,
        shade: null,
        boxWidth: 0,
        boxHeight: 0,
        boundary: 2,
        fadeTime: 400,
        animationDelay: 20,
        swingSpeed: 3,
        minSelect: [0, 0],
        maxSize: [0, 0],
        minSize: [0, 0],
        onChange: function () {},
        onSelect: function () {},
        onDblClick: function () {},
        onRelease: function () {}
    };
}(jQuery));

function RGBColor(color_string) {
        this.ok = false;
        if (color_string.charAt(0) == '#') {
            color_string = color_string.substr(1, 6);
        }
        color_string = color_string.replace(/ /g, '');
        color_string = color_string.toLowerCase();
        var simple_colors = {
            aliceblue: 'f0f8ff',
            antiquewhite: 'faebd7',
            aqua: '00ffff',
            aquamarine: '7fffd4',
            azure: 'f0ffff',
            beige: 'f5f5dc',
            bisque: 'ffe4c4',
            black: '000000',
            blanchedalmond: 'ffebcd',
            blue: '0000ff',
            blueviolet: '8a2be2',
            brown: 'a52a2a',
            burlywood: 'deb887',
            cadetblue: '5f9ea0',
            chartreuse: '7fff00',
            chocolate: 'd2691e',
            coral: 'ff7f50',
            cornflowerblue: '6495ed',
            cornsilk: 'fff8dc',
            crimson: 'dc143c',
            cyan: '00ffff',
            darkblue: '00008b',
            darkcyan: '008b8b',
            darkgoldenrod: 'b8860b',
            darkgray: 'a9a9a9',
            darkgreen: '006400',
            darkkhaki: 'bdb76b',
            darkmagenta: '8b008b',
            darkolivegreen: '556b2f',
            darkorange: 'ff8c00',
            darkorchid: '9932cc',
            darkred: '8b0000',
            darksalmon: 'e9967a',
            darkseagreen: '8fbc8f',
            darkslateblue: '483d8b',
            darkslategray: '2f4f4f',
            darkturquoise: '00ced1',
            darkviolet: '9400d3',
            deeppink: 'ff1493',
            deepskyblue: '00bfff',
            dimgray: '696969',
            dodgerblue: '1e90ff',
            feldspar: 'd19275',
            firebrick: 'b22222',
            floralwhite: 'fffaf0',
            forestgreen: '228b22',
            fuchsia: 'ff00ff',
            gainsboro: 'dcdcdc',
            ghostwhite: 'f8f8ff',
            gold: 'ffd700',
            goldenrod: 'daa520',
            gray: '808080',
            green: '008000',
            greenyellow: 'adff2f',
            honeydew: 'f0fff0',
            hotpink: 'ff69b4',
            indianred: 'cd5c5c',
            indigo: '4b0082',
            ivory: 'fffff0',
            khaki: 'f0e68c',
            lavender: 'e6e6fa',
            lavenderblush: 'fff0f5',
            lawngreen: '7cfc00',
            lemonchiffon: 'fffacd',
            lightblue: 'add8e6',
            lightcoral: 'f08080',
            lightcyan: 'e0ffff',
            lightgoldenrodyellow: 'fafad2',
            lightgrey: 'd3d3d3',
            lightgreen: '90ee90',
            lightpink: 'ffb6c1',
            lightsalmon: 'ffa07a',
            lightseagreen: '20b2aa',
            lightskyblue: '87cefa',
            lightslateblue: '8470ff',
            lightslategray: '778899',
            lightsteelblue: 'b0c4de',
            lightyellow: 'ffffe0',
            lime: '00ff00',
            limegreen: '32cd32',
            linen: 'faf0e6',
            magenta: 'ff00ff',
            maroon: '800000',
            mediumaquamarine: '66cdaa',
            mediumblue: '0000cd',
            mediumorchid: 'ba55d3',
            mediumpurple: '9370d8',
            mediumseagreen: '3cb371',
            mediumslateblue: '7b68ee',
            mediumspringgreen: '00fa9a',
            mediumturquoise: '48d1cc',
            mediumvioletred: 'c71585',
            midnightblue: '191970',
            mintcream: 'f5fffa',
            mistyrose: 'ffe4e1',
            moccasin: 'ffe4b5',
            navajowhite: 'ffdead',
            navy: '000080',
            oldlace: 'fdf5e6',
            olive: '808000',
            olivedrab: '6b8e23',
            orange: 'ffa500',
            orangered: 'ff4500',
            orchid: 'da70d6',
            palegoldenrod: 'eee8aa',
            palegreen: '98fb98',
            paleturquoise: 'afeeee',
            palevioletred: 'd87093',
            papayawhip: 'ffefd5',
            peachpuff: 'ffdab9',
            peru: 'cd853f',
            pink: 'ffc0cb',
            plum: 'dda0dd',
            powderblue: 'b0e0e6',
            purple: '800080',
            red: 'ff0000',
            rosybrown: 'bc8f8f',
            royalblue: '4169e1',
            saddlebrown: '8b4513',
            salmon: 'fa8072',
            sandybrown: 'f4a460',
            seagreen: '2e8b57',
            seashell: 'fff5ee',
            sienna: 'a0522d',
            silver: 'c0c0c0',
            skyblue: '87ceeb',
            slateblue: '6a5acd',
            slategray: '708090',
            snow: 'fffafa',
            springgreen: '00ff7f',
            steelblue: '4682b4',
            tan: 'd2b48c',
            teal: '008080',
            thistle: 'd8bfd8',
            tomato: 'ff6347',
            turquoise: '40e0d0',
            violet: 'ee82ee',
            violetred: 'd02090',
            wheat: 'f5deb3',
            white: 'ffffff',
            whitesmoke: 'f5f5f5',
            yellow: 'ffff00',
            yellowgreen: '9acd32'
        };
        for (var key in simple_colors) {
            if (color_string == key) {
                color_string = simple_colors[key];
            }
        }
        var color_defs = [{
            re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
            example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],
            process: function (bits) {
                return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3])];
            }
        }, {
            re: /^(\w{2})(\w{2})(\w{2})$/,
            example: ['#00ff00', '336699'],
            process: function (bits) {
                return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16)];
            }
        }, {
            re: /^(\w{1})(\w{1})(\w{1})$/,
            example: ['#fb0', 'f0f'],
            process: function (bits) {
                return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16)];
            }
        }];
        for (var i = 0; i < color_defs.length; i++) {
            var re = color_defs[i].re;
            var processor = color_defs[i].process;
            var bits = re.exec(color_string);
            if (bits) {
                channels = processor(bits);
                this.r = channels[0];
                this.g = channels[1];
                this.b = channels[2];
                this.ok = true;
            }
        }
        this.r = (this.r < 0 || isNaN(this.r)) ? 0 : ((this.r > 255) ? 255 : this.r);
        this.g = (this.g < 0 || isNaN(this.g)) ? 0 : ((this.g > 255) ? 255 : this.g);
        this.b = (this.b < 0 || isNaN(this.b)) ? 0 : ((this.b > 255) ? 255 : this.b);
        this.toRGB = function () {
            return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';
        }
        this.toHex = function () {
            var r = this.r.toString(16);
            var g = this.g.toString(16);
            var b = this.b.toString(16);
            if (r.length == 1) r = '0' + r;
            if (g.length == 1) g = '0' + g;
            if (b.length == 1) b = '0' + b;
            return '#' + r + g + b;
        }
        this.getHelpXML = function () {
            var examples = new Array();
            for (var i = 0; i < color_defs.length; i++) {
                var example = color_defs[i].example;
                for (var j = 0; j < example.length; j++) {
                    examples[examples.length] = example[j];
                }
            }
            for (var sc in simple_colors) {
                examples[examples.length] = sc;
            }
            var xml = document.createElement('ul');
            xml.setAttribute('id', 'rgbcolor-examples');
            for (var i = 0; i < examples.length; i++) {
                try {
                    var list_item = document.createElement('li');
                    var list_color = new RGBColor(examples[i]);
                    var example_div = document.createElement('div');
                    example_div.style.cssText = 'margin: 3px; ' + 'border: 1px solid black; ' + 'background:' + list_color.toHex() + '; ' + 'color:' + list_color.toHex();
                    example_div.appendChild(document.createTextNode('test'));
                    var list_item_value = document.createTextNode(' ' + examples[i] + ' -> ' + list_color.toRGB() + ' -> ' + list_color.toHex());
                    list_item.appendChild(example_div);
                    list_item.appendChild(list_item_value);
                    xml.appendChild(list_item);
                } catch (e) {}
            }
            return xml;
        }
    }
    (function () {
        function write(buffer, offs) {
            for (var i = 2; i < arguments.length; i++) {
                for (var j = 0; j < arguments[i].length; j++) {
                    buffer[offs++] = arguments[i].charAt(j);
                }
            }
        }

        function byte2(w) {
            return String.fromCharCode((w >> 8) & 255, w & 255);
        }

        function byte4(w) {
            return String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);
        }

        function byte2lsb(w) {
            return String.fromCharCode(w & 255, (w >> 8) & 255);
        }
        window.PNGlib = function (width, height, depth) {
            this.width = width;
            this.height = height;
            this.depth = depth;
            this.pix_size = height * (width + 1);
            this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;
            this.ihdr_offs = 0;
            this.ihdr_size = 4 + 4 + 13 + 4;
            this.plte_offs = this.ihdr_offs + this.ihdr_size;
            this.plte_size = 4 + 4 + 3 * depth + 4;
            this.trns_offs = this.plte_offs + this.plte_size;
            this.trns_size = 4 + 4 + depth + 4;
            this.idat_offs = this.trns_offs + this.trns_size;
            this.idat_size = 4 + 4 + this.data_size + 4;
            this.iend_offs = this.idat_offs + this.idat_size;
            this.iend_size = 4 + 4 + 4;
            this.buffer_size = this.iend_offs + this.iend_size;
            this.buffer = new Array();
            this.palette = new Object();
            this.pindex = 0;
            var _crc32 = new Array();
            for (var i = 0; i < this.buffer_size; i++) {
                this.buffer[i] = "\x00";
            }
            write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), "\x08\x03");
            write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');
            write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');
            write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');
            write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');
            var header = ((8 + (7 << 4)) << 8) | (3 << 6);
            header += 31 - (header % 31);
            write(this.buffer, this.idat_offs + 8, byte2(header));
            for (var i = 0;
                (i << 16) - 1 < this.pix_size; i++) {
                var size, bits;
                if (i + 0xffff < this.pix_size) {
                    size = 0xffff;
                    bits = "\x00";
                } else {
                    size = this.pix_size - (i << 16) - i;
                    bits = "\x01";
                }
                write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));
            }
            for (var i = 0; i < 256; i++) {
                var c = i;
                for (var j = 0; j < 8; j++) {
                    if (c & 1) {
                        c = -306674912 ^ ((c >> 1) & 0x7fffffff);
                    } else {
                        c = (c >> 1) & 0x7fffffff;
                    }
                }
                _crc32[i] = c;
            }
            this.index = function (x, y) {
                var i = y * (this.width + 1) + x + 1;
                var j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;
                return j;
            }
            this.color = function (red, green, blue, alpha) {
                alpha = alpha >= 0 ? alpha : 255;
                var color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;
                if (typeof this.palette[color] == "undefined") {
                    if (this.pindex == this.depth) {
                        return "\x00";
                    }
                    var ndx = this.plte_offs + 8 + 3 * this.pindex;
                    this.buffer[ndx + 0] = String.fromCharCode(red);
                    this.buffer[ndx + 1] = String.fromCharCode(green);
                    this.buffer[ndx + 2] = String.fromCharCode(blue);
                    this.buffer[this.trns_offs + 8 + this.pindex] = String.fromCharCode(alpha);
                    this.palette[color] = String.fromCharCode(this.pindex++);
                }
                return this.palette[color];
            }
            this.getBase64 = function () {
                var s = this.getDump();
                var ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                var c1, c2, c3, e1, e2, e3, e4;
                var l = s.length;
                var i = 0;
                var r = "";
                do {
                    c1 = s.charCodeAt(i);
                    e1 = c1 >> 2;
                    c2 = s.charCodeAt(i + 1);
                    e2 = ((c1 & 3) << 4) | (c2 >> 4);
                    c3 = s.charCodeAt(i + 2);
                    if (l < i + 2) {
                        e3 = 64;
                    } else {
                        e3 = ((c2 & 0xf) << 2) | (c3 >> 6);
                    }
                    if (l < i + 3) {
                        e4 = 64;
                    } else {
                        e4 = c3 & 0x3f;
                    }
                    r += ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);
                } while ((i += 3) < l);
                return r;
            }
            this.getDump = function () {
                var BASE = 65521;
                var NMAX = 5552;
                var s1 = 1;
                var s2 = 0;
                var n = NMAX;
                for (var y = 0; y < this.height; y++) {
                    for (var x = -1; x < this.width; x++) {
                        s1 += this.buffer[this.index(x, y)].charCodeAt(0);
                        s2 += s1;
                        if ((n -= 1) == 0) {
                            s1 %= BASE;
                            s2 %= BASE;
                            n = NMAX;
                        }
                    }
                }
                s1 %= BASE;
                s2 %= BASE;
                write(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));

                function crc32(png, offs, size) {
                    var crc = -1;
                    for (var i = 4; i < size - 4; i += 1) {
                        crc = _crc32[(crc ^ png[offs + i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);
                    }
                    write(png, offs + size - 4, byte4(crc ^ -1));
                }
                crc32(this.buffer, this.ihdr_offs, this.ihdr_size);
                crc32(this.buffer, this.plte_offs, this.plte_size);
                crc32(this.buffer, this.trns_offs, this.trns_size);
                crc32(this.buffer, this.idat_offs, this.idat_size);
                crc32(this.buffer, this.iend_offs, this.iend_size);
                return "\211PNG\r\n\032\n" + this.buffer.join('');
            }
        }
    })();
var context = context || (function () {
    var options = {
        fadeSpeed: 100,
        filter: function ($obj) {},
        above: 'auto',
        preventDoubleContext: true,
        compress: false,
        mouseEvent: 'click'
    };

    function initialize(opts) {
        options = $.extend({}, options, opts);
        $(document).on('click', 'html', function () {
            $('.dropdown-context').fadeOut(options.fadeSpeed, function () {
                $('.dropdown-context').css({
                    display: ''
                }).find('.drop-left').removeClass('drop-left');
            });
        });
        $(document).on('mouseenter', '.dropdown-submenu', function () {
            var $sub = $(this).find('.dropdown-context-sub:first'),
                subWidth = $sub.width(),
                subLeft = $sub.offset().left,
                collision = (subWidth + subLeft) > window.innerWidth;
            if (collision) {
                $sub.addClass('drop-left');
            }
        });
    }

    function updateOptions(opts) {
        options = $.extend({}, options, opts);
    }

    function buildMenu(data, id, subMenu) {
        var subClass = (subMenu) ? ' dropdown-context-sub' : '',
            compressed = options.compress ? ' compressed-context' : '',
            $menu = $('<ul class="dropdown-menu dropdown-context' + subClass + compressed + '" id="dropdown-' + id + '"></ul>');
        var i = 0,
            linkTarget = '';
        for (i; i < data.length; i++) {
            if (typeof data[i].divider !== 'undefined') {
                $menu.append('<li class="divider"></li>');
            } else if (typeof data[i].header !== 'undefined') {
                $menu.append('<li class="nav-header">' + data[i].header + '</li>');
            } else {
                if (typeof data[i].href == 'undefined') {
                    data[i].href = '#';
                }
                if (typeof data[i].target !== 'undefined') {
                    linkTarget = ' target="' + data[i].target + '"';
                }
                if (typeof data[i].subMenu !== 'undefined') {
                    $sub = ('<li class="dropdown-submenu"><a tabindex="-1" href="' + data[i].href + '">' + data[i].text + '</a></li>');
                } else {
                    $sub = $('<li><a tabindex="-1" href="' + data[i].href + '"' + linkTarget + '>' + data[i].text + '</a></li>');
                }
                if (typeof data[i].action !== 'undefined') {
                    var actiond = new Date(),
                        actionID = 'event-' + actiond.getTime() * Math.floor(Math.random() * 100000),
                        eventAction = data[i].action;
                    $sub.find('a').attr('id', actionID);
                    $('#' + actionID).addClass('context-event');
                    $(document).on('click', '#' + actionID, eventAction);
                }
                $menu.append($sub);
                if (typeof data[i].subMenu != 'undefined') {
                    var subMenuData = buildMenu(data[i].subMenu, id, true);
                    $menu.find('li:last').append(subMenuData);
                }
            }
            if (typeof options.filter == 'function') {
                options.filter($menu.find('li:last'));
            }
        }
        return $menu;
    }

    function addContext(selector, data) {
        var d = new Date(),
            id = d.getTime(),
            $menu = buildMenu(data, id);
        $('body').append($menu);
        $(document).on(options.mouseEvent, selector, function (e) {
            e.preventDefault();
            e.stopPropagation();
            $('.dropdown-context:not(.dropdown-context-sub)').hide();
            $dd = $('#dropdown-' + id);
            if (typeof options.above == 'boolean' && options.above) {
                $dd.addClass('dropdown-context-up').css({
                    top: e.pageY - 20 - $('#dropdown-' + id).height(),
                    left: e.pageX - 13
                }).fadeIn(options.fadeSpeed);
            } else if (typeof options.above == 'string' && options.above == 'auto') {
                $dd.removeClass('dropdown-context-up');
                var autoH = $dd.height() + 12;
                if ((e.pageY + autoH) > $('html').height()) {
                    $dd.addClass('dropdown-context-up').css({
                        top: e.pageY - 20 - autoH,
                        left: e.pageX - 13
                    }).fadeIn(options.fadeSpeed);
                } else {
                    $dd.css({
                        top: e.pageY + 10,
                        left: e.pageX - 13
                    }).fadeIn(options.fadeSpeed);
                }
            }
        });
    }

    function destroyContext(selector, mouseEvent) {
        $(document).off(mouseEvent, selector).off('click', '.context-event');
    }
    return {
        init: initialize,
        settings: updateOptions,
        attach: addContext,
        destroy: destroyContext
    };
})();
(function () {
    var $, cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlash, hasTextSelected, luhnCheck, reFormatCardNumber, restrictCVC, restrictCardNumber, restrictExpiry, restrictNumeric, setCardType, __slice = [].slice,
        __indexOf = [].indexOf || function (item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        },
        _this = this;
    $ = jQuery;
    $.payment = {};
    $.payment.fn = {};
    $.fn.payment = function () {
        var args, method;
        method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return $.payment.fn[method].apply(this, args);
    };
    defaultFormat = /(\d{1,4})/g;
    cards = [{
        type: 'maestro',
        pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
        format: defaultFormat,
        length: [12, 13, 14, 15, 16, 17, 18, 19],
        cvcLength: [3],
        luhn: true
    }, {
        type: 'dinersclub',
        pattern: /^(36|38|30[0-5])/,
        format: defaultFormat,
        length: [14],
        cvcLength: [3],
        luhn: true
    }, {
        type: 'laser',
        pattern: /^(6706|6771|6709)/,
        format: defaultFormat,
        length: [16, 17, 18, 19],
        cvcLength: [3],
        luhn: true
    }, {
        type: 'jcb',
        pattern: /^35/,
        format: defaultFormat,
        length: [16],
        cvcLength: [3],
        luhn: true
    }, {
        type: 'unionpay',
        pattern: /^62/,
        format: defaultFormat,
        length: [16, 17, 18, 19],
        cvcLength: [3],
        luhn: false
    }, {
        type: 'discover',
        pattern: /^(6011|65|64[4-9]|622)/,
        format: defaultFormat,
        length: [16],
        cvcLength: [3],
        luhn: true
    }, {
        type: 'mastercard',
        pattern: /^5[1-5]/,
        format: defaultFormat,
        length: [16],
        cvcLength: [3],
        luhn: true
    }, {
        type: 'amex',
        pattern: /^3[47]/,
        format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
        length: [15],
        cvcLength: [3, 4],
        luhn: true
    }, {
        type: 'visa',
        pattern: /^4/,
        format: defaultFormat,
        length: [13, 14, 15, 16],
        cvcLength: [3],
        luhn: true
    }];
    cardFromNumber = function (num) {
        var card, _i, _len;
        num = (num + '').replace(/\D/g, '');
        for (_i = 0, _len = cards.length; _i < _len; _i++) {
            card = cards[_i];
            if (card.pattern.test(num)) {
                return card;
            }
        }
    };
    cardFromType = function (type) {
        var card, _i, _len;
        for (_i = 0, _len = cards.length; _i < _len; _i++) {
            card = cards[_i];
            if (card.type === type) {
                return card;
            }
        }
    };
    luhnCheck = function (num) {
        var digit, digits, odd, sum, _i, _len;
        odd = true;
        sum = 0;
        digits = (num + '').split('').reverse();
        for (_i = 0, _len = digits.length; _i < _len; _i++) {
            digit = digits[_i];
            digit = parseInt(digit, 10);
            if ((odd = !odd)) {
                digit *= 2;
            }
            if (digit > 9) {
                digit -= 9;
            }
            sum += digit;
        }
        return sum % 10 === 0;
    };
    hasTextSelected = function ($target) {
        var _ref;
        if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== $target.prop('selectionEnd')) {
            return true;
        }
        if (typeof document !== "undefined" && document !== null ? (_ref = document.selection) != null ? typeof _ref.createRange === "function" ? _ref.createRange().text : void 0 : void 0 : void 0) {
            return true;
        }
        return false;
    };
    reFormatCardNumber = function (e) {
        var _this = this;
        return setTimeout(function () {
            var $target, value;
            $target = $(e.currentTarget);
            value = $target.val();
            value = $.payment.formatCardNumber(value);
            return $target.val(value);
        });
    };
    formatCardNumber = function (e) {
        var $target, card, digit, length, re, upperLength, value;
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        $target = $(e.currentTarget);
        value = $target.val();
        card = cardFromNumber(value + digit);
        length = (value.replace(/\D/g, '') + digit).length;
        upperLength = 16;
        if (card) {
            upperLength = card.length[card.length.length - 1];
        }
        if (length >= upperLength) {
            return;
        }
        if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
            return;
        }
        if (card && card.type === 'amex') {
            re = /^(\d{4}|\d{4}\s\d{6})$/;
        } else {
            re = /(?:^|\s)(\d{4})$/;
        }
        if (re.test(value)) {
            e.preventDefault();
            return $target.val(value + ' ' + digit);
        } else if (re.test(value + digit)) {
            e.preventDefault();
            return $target.val(value + digit + ' ');
        }
    };
    formatBackCardNumber = function (e) {
        var $target, value;
        $target = $(e.currentTarget);
        value = $target.val();
        if (e.meta) {
            return;
        }
        if (e.which !== 8) {
            return;
        }
        if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
            return;
        }
        if (/\d\s$/.test(value)) {
            e.preventDefault();
            return $target.val(value.replace(/\d\s$/, ''));
        } else if (/\s\d?$/.test(value)) {
            e.preventDefault();
            return $target.val(value.replace(/\s\d?$/, ''));
        }
    };
    formatExpiry = function (e) {
        var $target, digit, val;
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        $target = $(e.currentTarget);
        val = $target.val() + digit;
        if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
            e.preventDefault();
            return $target.val("0" + val + " / ");
        } else if (/^\d\d$/.test(val)) {
            e.preventDefault();
            return $target.val("" + val + " / ");
        }
    };
    formatForwardExpiry = function (e) {
        var $target, digit, val;
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        $target = $(e.currentTarget);
        val = $target.val();
        if (/^\d\d$/.test(val)) {
            return $target.val("" + val + " / ");
        }
    };
    formatForwardSlash = function (e) {
        var $target, slash, val;
        slash = String.fromCharCode(e.which);
        if (slash !== '/') {
            return;
        }
        $target = $(e.currentTarget);
        val = $target.val();
        if (/^\d$/.test(val) && val !== '0') {
            return $target.val("0" + val + " / ");
        }
    };
    formatBackExpiry = function (e) {
        var $target, value;
        if (e.meta) {
            return;
        }
        $target = $(e.currentTarget);
        value = $target.val();
        if (e.which !== 8) {
            return;
        }
        if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
            return;
        }
        if (/\d(\s|\/)+$/.test(value)) {
            e.preventDefault();
            return $target.val(value.replace(/\d(\s|\/)*$/, ''));
        } else if (/\s\/\s?\d?$/.test(value)) {
            e.preventDefault();
            return $target.val(value.replace(/\s\/\s?\d?$/, ''));
        }
    };
    restrictNumeric = function (e) {
        var input;
        if (e.metaKey || e.ctrlKey) {
            return true;
        }
        if (e.which === 32) {
            return false;
        }
        if (e.which === 0) {
            return true;
        }
        if (e.which < 33) {
            return true;
        }
        input = String.fromCharCode(e.which);
        return !!/[\d\s]/.test(input);
    };
    restrictCardNumber = function (e) {
        var $target, card, digit, value;
        $target = $(e.currentTarget);
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        if (hasTextSelected($target)) {
            return;
        }
        value = ($target.val() + digit).replace(/\D/g, '');
        card = cardFromNumber(value);
        if (card) {
            return value.length <= card.length[card.length.length - 1];
        } else {
            return value.length <= 16;
        }
    };
    restrictExpiry = function (e) {
        var $target, digit, value;
        $target = $(e.currentTarget);
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        if (hasTextSelected($target)) {
            return;
        }
        value = $target.val() + digit;
        value = value.replace(/\D/g, '');
        if (value.length > 6) {
            return false;
        }
    };
    restrictCVC = function (e) {
        var $target, digit, val;
        $target = $(e.currentTarget);
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        val = $target.val() + digit;
        return val.length <= 4;
    };
    setCardType = function (e) {
        var $target, allTypes, card, cardType, val;
        $target = $(e.currentTarget);
        val = $target.val();
        cardType = $.payment.cardType(val) || 'unknown';
        if (!$target.hasClass(cardType)) {
            allTypes = (function () {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = cards.length; _i < _len; _i++) {
                    card = cards[_i];
                    _results.push(card.type);
                }
                return _results;
            })();
            $target.removeClass('unknown');
            $target.removeClass(allTypes.join(' '));
            $target.addClass(cardType);
            $target.toggleClass('identified', cardType !== 'unknown');
            return $target.trigger('payment.cardType', cardType);
        }
    };
    $.payment.fn.formatCardCVC = function () {
        this.payment('restrictNumeric');
        this.on('keypress', restrictCVC);
        return this;
    };
    $.payment.fn.formatCardExpiry = function () {
        this.payment('restrictNumeric');
        this.on('keypress', restrictExpiry);
        this.on('keypress', formatExpiry);
        this.on('keypress', formatForwardSlash);
        this.on('keypress', formatForwardExpiry);
        this.on('keydown', formatBackExpiry);
        return this;
    };
    $.payment.fn.formatCardNumber = function () {
        this.payment('restrictNumeric');
        this.on('keypress', restrictCardNumber);
        this.on('keypress', formatCardNumber);
        this.on('keydown', formatBackCardNumber);
        this.on('keyup', setCardType);
        this.on('paste', reFormatCardNumber);
        return this;
    };
    $.payment.fn.restrictNumeric = function () {
        this.on('keypress', restrictNumeric);
        return this;
    };
    $.payment.fn.cardExpiryVal = function () {
        return $.payment.cardExpiryVal($(this).val());
    };
    $.payment.cardExpiryVal = function (value) {
        var month, prefix, year, _ref;
        value = value.replace(/\s/g, '');
        _ref = value.split('/', 2), month = _ref[0], year = _ref[1];
        if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
            prefix = (new Date).getFullYear();
            prefix = prefix.toString().slice(0, 2);
            year = prefix + year;
        }
        month = parseInt(month, 10);
        year = parseInt(year, 10);
        return {
            month: month,
            year: year
        };
    };
    $.payment.validateCardNumber = function (num) {
        var card, _ref;
        num = (num + '').replace(/\s+|-/g, '');
        if (!/^\d+$/.test(num)) {
            return false;
        }
        card = cardFromNumber(num);
        if (!card) {
            return false;
        }
        return (_ref = num.length, __indexOf.call(card.length, _ref) >= 0) && (card.luhn === false || luhnCheck(num));
    };
    $.payment.validateCardExpiry = function (month, year) {
        var currentTime, expiry, prefix, _ref;
        if (typeof month === 'object' && 'month' in month) {
            _ref = month, month = _ref.month, year = _ref.year;
        }
        if (!(month && year)) {
            return false;
        }
        month = $.trim(month);
        year = $.trim(year);
        if (!/^\d+$/.test(month)) {
            return false;
        }
        if (!/^\d+$/.test(year)) {
            return false;
        }
        if (!(parseInt(month, 10) <= 12)) {
            return false;
        }
        if (year.length === 2) {
            prefix = (new Date).getFullYear();
            prefix = prefix.toString().slice(0, 2);
            year = prefix + year;
        }
        expiry = new Date(year, month);
        currentTime = new Date;
        expiry.setMonth(expiry.getMonth() - 1);
        expiry.setMonth(expiry.getMonth() + 1, 1);
        return expiry > currentTime;
    };
    $.payment.validateCardCVC = function (cvc, type) {
        var _ref, _ref1;
        cvc = $.trim(cvc);
        if (!/^\d+$/.test(cvc)) {
            return false;
        }
        if (type) {
            return _ref = cvc.length, __indexOf.call((_ref1 = cardFromType(type)) != null ? _ref1.cvcLength : void 0, _ref) >= 0;
        } else {
            return cvc.length >= 3 && cvc.length <= 4;
        }
    };
    $.payment.cardType = function (num) {
        var _ref;
        if (!num) {
            return null;
        }
        return ((_ref = cardFromNumber(num)) != null ? _ref.type : void 0) || null;
    };
    $.payment.formatCardNumber = function (num) {
        var card, groups, upperLength, _ref;
        card = cardFromNumber(num);
        if (!card) {
            return num;
        }
        upperLength = card.length[card.length.length - 1];
        num = num.replace(/\D/g, '');
        num = num.slice(0, +upperLength + 1 || 9e9);
        if (card.format.global) {
            return (_ref = num.match(card.format)) != null ? _ref.join(' ') : void 0;
        } else {
            groups = card.format.exec(num);
            if (groups != null) {
                groups.shift();
            }
            return groups != null ? groups.join(' ') : void 0;
        }
    };
}).call(this);
var Handsontable = {
    extension: {},
    plugins: {},
    helper: {}
};
(function (e, t, n) {
    "use strict";

    function o() {
        this.refCounter = 0, this.init()
    }

    function a() {
        function i() {
            var e = this;
            e.registerTimeout("enableObserveChanges", function () {
                e.updateSettings({
                    observeChanges: !0
                })
            }, 0)
        }

        function s(e) {
            return function (t, n) {
                return t[1] === n[1] ? 0 : t[1] === null ? 1 : n[1] === null ? -1 : t[1] < n[1] ? e ? -1 : 1 : t[1] > n[1] ? e ? 1 : -1 : 0
            }
        }

        function o(e) {
            return function (t, n) {
                if (t[1] === n[1]) return 0;
                if (t[1] === null) return 1;
                if (n[1] === null) return -1;
                var r = new Date(t[1]),
                    i = new Date(n[1]);
                return r < i ? e ? -1 : 1 : r > i ? e ? 1 : -1 : 0
            }
        }

        function u(e) {
            return typeof e.sortColumn != "undefined"
        }
        var e = this;
        this.init = function (t) {
            var s = this,
                o = s.getSettings().columnSorting,
                u, a;
            s.sortingEnabled = !!o;
            if (s.sortingEnabled) {
                s.sortIndex = [];
                var f = n.call(s);
                typeof f != "undefined" ? (u = f.sortColumn, a = f.sortOrder) : (u = o.column, a = o.sortOrder), e.sortByColumn.call(s, u, a), s.sort = function () {
                    var t = Array.prototype.slice.call(arguments);
                    return e.sortByColumn.apply(s, t)
                }, typeof s.getSettings().observeChanges == "undefined" && i.call(s), t == "afterInit" && (r.call(s), s.addHook("afterCreateRow", e.afterCreateRow), s.addHook("afterRemoveRow", e.afterRemoveRow), s.addHook("afterLoadData", e.init))
            } else delete s.sort, s.removeHook("afterCreateRow", e.afterCreateRow), s.removeHook("afterRemoveRow", e.afterRemoveRow), s.removeHook("afterLoadData", e.init)
        }, this.setSortingColumn = function (e, t) {
            var n = this;
            if (typeof e == "undefined") {
                delete n.sortColumn, delete n.sortOrder;
                return
            }
            n.sortColumn === e && typeof t == "undefined" ? n.sortOrder = !n.sortOrder : n.sortOrder = typeof t != "undefined" ? t : !0, n.sortColumn = e
        }, this.sortByColumn = function (n, r) {
            var i = this;
            e.setSortingColumn.call(i, n, r);
            if (typeof i.sortColumn == "undefined") return;
            i.PluginHooks.run("beforeColumnSort", i.sortColumn, i.sortOrder), e.sort.call(i), i.render(), t.call(i), i.PluginHooks.run("afterColumnSort", i.sortColumn, i.sortOrder)
        };
        var t = function () {
                var e = this,
                    t = {};
                typeof e.sortColumn != "undefined" && (t.sortColumn = e.sortColumn), typeof e.sortOrder != "undefined" && (t.sortOrder = e.sortOrder), (t.hasOwnProperty("sortColumn") || t.hasOwnProperty("sortOrder")) && e.PluginHooks.run("persistentStateSave", "columnSorting", t)
            },
            n = function () {
                var e = this,
                    t = {};
                return e.PluginHooks.run("persistentStateLoad", "columnSorting", t), t.value
            },
            r = function () {
                function n() {
                    var e = t.view.TBODY.querySelector("tr").querySelectorAll("th");
                    return e.length
                }

                function r(e) {
                    var r = t.view.wt.wtDom.closest(e, "TH");
                    return t.view.wt.wtDom.index(r) - n()
                }
                var t = this;
                t.rootElement.on("click.handsontable", ".columnSorting", function (n) {
                    if (t.view.wt.wtDom.hasClass(n.target, "columnSorting")) {
                        var i = r(n.target);
                        e.sortByColumn.call(t, i)
                    }
                })
            };
        this.sort = function () {
            var e = this;
            if (typeof e.sortOrder == "undefined") return;
            e.sortingEnabled = !1, e.sortIndex.length = 0;
            var t = this.colOffset();
            for (var n = 0, r = this.countRows() - e.getSettings().minSpareRows; n < r; n++) this.sortIndex.push([n, e.getDataAtCell(n, this.sortColumn + t)]);
            var i = e.getCellMeta(0, e.sortColumn),
                u;
            switch (i.type) {
            case "date":
                u = o;
                break;
            default:
                u = s
            }
            this.sortIndex.sort(u(e.sortOrder));
            for (var n = this.sortIndex.length; n < e.countRows(); n++) this.sortIndex.push([n, e.getDataAtCell(n, this.sortColumn + t)]);
            e.sortingEnabled = !0
        }, this.translateRow = function (e) {
            var t = this;
            return t.sortingEnabled && t.sortIndex && t.sortIndex.length && t.sortIndex[e] ? t.sortIndex[e][0] : e
        }, this.onBeforeGetSet = function (t) {
            var n = this;
            t.row = e.translateRow.call(n, t.row)
        }, this.untranslateRow = function (e) {
            var t = this;
            if (t.sortingEnabled && t.sortIndex && t.sortIndex.length)
                for (var n = 0; n < t.sortIndex.length; n++)
                    if (t.sortIndex[n][0] == e) return n
        }, this.getColHeader = function (e, t) {
            this.getSettings().columnSorting && this.view.wt.wtDom.addClass(t.querySelector(".colHeader"), "columnSorting")
        }, this.afterCreateRow = function (e, n) {
            var r = this;
            if (!u(r)) return;
            for (var i = 0; i < r.sortIndex.length; i++) r.sortIndex[i][0] >= e && (r.sortIndex[i][0] += n);
            for (var i = 0; i < n; i++) r.sortIndex.splice(e + i, 0, [e + i, r.getData()[e + i][r.sortColumn + r.colOffset()]]);
            t.call(r)
        }, this.afterRemoveRow = function (n, r) {
            var i = this;
            if (!u(i)) return;
            var s = e.translateRow.call(i, n);
            i.sortIndex.splice(n, r);
            for (var o = 0; o < i.sortIndex.length; o++) i.sortIndex[o][0] > s && (i.sortIndex[o][0] -= r);
            t.call(i)
        }, this.afterChangeSort = function (t) {
            var n = this,
                r = !1,
                i = {};
            if (!t) return;
            for (var s = 0; s < t.length; s++)
                if (t[s][1] == n.sortColumn) {
                    r = !0, i.row = e.translateRow.call(n, t[s][0]), i.col = t[s][1];
                    break
                }
            r && setTimeout(function () {
                e.sort.call(n), n.render(), n.selectCell(e.untranslateRow.call(n, i.row), i.col)
            }, 0)
        }
    }

    function l() {
        var t, n, r, i, s, o = document.createElement("DIV"),
            u = o.style;
        o.className = "ghost", u.position = "absolute", u.top = "25px", u.left = 0, u.width = "10px", u.height = "10px", u.backgroundColor = "#CCC", u.opacity = .7;
        var a = function () {
                var e = this;
                e.PluginHooks.run("persistentStateSave", "manualColumnPositions", e.manualColumnPositions)
            },
            f = function () {
                var e = this,
                    t = {};
                return e.PluginHooks.run("persistentStateLoad", "manualColumnPositions", t), t.value
            },
            l = function () {
                var f = this;
                f.rootElement.on("mousemove.manualColumnMove", function (e) {
                    t && (u.left = s + e.pageX - i + 6 + "px", u.display === "none" && (u.display = "block"))
                }), f.rootElement.on("mouseup.manualColumnMove", function () {
                    t && (n < r && r--, f.getSettings().rowHeaders && (n--, r--), f.manualColumnPositions.splice(r, 0, f.manualColumnPositions.splice(n, 1)[0]), e(".manualColumnMover.active").removeClass("active"), t = !1, f.forceFullRender = !0, f.view.render(), u.display = "none", a.call(f), f.PluginHooks.run("afterColumnMove", n, r))
                }), f.rootElement.on("mousedown.manualColumnMove", ".manualColumnMover", function (e) {
                    var a = e.currentTarget,
                        l = f.view.wt.wtDom.closest(a, "TH");
                    n = f.view.wt.wtDom.index(l) + f.colOffset(), r = n, t = !0, i = e.pageX;
                    var c = f.$table[0];
                    c.parentNode.appendChild(o), u.width = f.view.wt.wtDom.outerWidth(l) + "px", u.height = f.view.wt.wtDom.outerHeight(c) + "px", s = parseInt(f.view.wt.wtDom.offset(l).left - f.view.wt.wtDom.offset(c).left, 10), u.left = s + 6 + "px"
                }), f.rootElement.on("mouseenter.manualColumnMove", "td, th", function () {
                    if (t) {
                        var e = f.view.THEAD.querySelector(".manualColumnMover.active");
                        e && f.view.wt.wtDom.removeClass(e, "active"), r = f.view.wt.wtDom.index(this) + f.colOffset();
                        var n = f.view.THEAD.querySelectorAll("th"),
                            i = n[r].querySelector(".manualColumnMover");
                        f.view.wt.wtDom.addClass(i, "active")
                    }
                }), f.addHook("afterDestroy", c)
            },
            c = function () {
                var e = this;
                e.rootElement.off("mouseup.manualColumnMove"), e.rootElement.off("mousemove.manualColumnMove"), e.rootElement.off("mousedown.manualColumnMove"), e.rootElement.off("mouseenter.manualColumnMove")
            };
        this.beforeInit = function () {
            this.manualColumnPositions = []
        }, this.init = function (e) {
            var t = this,
                n = !!this.getSettings().manualColumnMove;
            if (n) {
                var r = this.getSettings().manualColumnMove,
                    i = f.call(t);
                typeof i != "undefined" ? this.manualColumnPositions = i : r instanceof Array ? this.manualColumnPositions = r : this.manualColumnPositions = [], t.forceFullRender = !0, e == "afterInit" && (l.call(this), this.manualColumnPositions.length > 0 && (this.forceFullRender = !0, this.render()))
            } else c.call(this), this.manualColumnPositions = []
        }, this.modifyCol = function (e) {
            return this.getSettings().manualColumnMove ? (typeof this.manualColumnPositions[e] == "undefined" && (this.manualColumnPositions[e] = e), this.manualColumnPositions[e]) : e
        }, this.getColHeader = function (e, t) {
            if (this.getSettings().manualColumnMove) {
                var n = document.createElement("DIV");
                n.className = "manualColumnMover", t.firstChild.appendChild(n)
            }
        }, this.afterRemoveCol = function (e, t) {
            if (!this.getSettings().manualColumnMove) return;
            var n, r = this.manualColumnPositions;
            n = r.splice(e, t), r = r.map(function (e) {
                var t, r = e;
                for (t = 0; t < n.length; t++) e > n[t] && r--;
                return r
            }), this.manualColumnPositions = r
        }, this.afterCreateCol = function (e, t) {
            if (!this.getSettings().manualColumnMove) return;
            var n = this.manualColumnPositions;
            if (!n.length) return;
            var r = [];
            for (var i = 0; i < t; i++) r.push(e + i);
            e >= n.length ? n.concat(r) : (n = n.map(function (n) {
                return n >= e ? n + t : n
            }), n.splice.apply(n, [e, 0].concat(r))), this.manualColumnPositions = n
        }
    }

    function h() {
        function g(e) {
            s = this, n = e;
            var t = this.view.wt.wtTable.getCoords(e)[1];
            if (t >= 0) {
                r = t;
                var i = this.view.wt.wtDom.offset(this.rootElement[0]).left,
                    o = this.view.wt.wtDom.offset(e).left;
                f = o - i - 6, l.style.left = f + parseInt(this.view.wt.wtDom.outerWidth(e), 10) + "px", this.rootElement[0].appendChild(l)
            }
        }

        function y() {
            var e = this;
            a = parseInt(this.view.wt.wtDom.outerWidth(n), 10), e.view.wt.wtDom.addClass(l, "active"), p.height = e.view.wt.wtDom.outerHeight(e.$table[0]) + "px", t = e
        }
        var t, n, r, i, s, o, u, a, f, l = document.createElement("DIV"),
            c = document.createElement("DIV"),
            h = document.createElement("DIV"),
            p = h.style;
        l.className = "manualColumnResizer", c.className = "manualColumnResizerHandle", l.appendChild(c), h.className = "manualColumnResizerLine", l.appendChild(h);
        var d = e(document);
        d.mousemove(function (e) {
            t && (i = a + (e.pageX - u), o = w(r, i), l.style.left = f + i + "px")
        }), d.mouseup(function () {
            t && (s.view.wt.wtDom.removeClass(l, "active"), t = !1, o != a && (s.forceFullRender = !0, s.view.render(), v.call(s), s.PluginHooks.run("afterColumnResize", r, o)), g.call(s, n))
        });
        var v = function () {
                var e = this;
                e.PluginHooks.run("persistentStateSave", "manualColumnWidths", e.manualColumnWidths)
            },
            m = function () {
                var e = this,
                    t = {};
                return e.PluginHooks.run("persistentStateLoad", "manualColumnWidths", t), t.value
            },
            b = function () {
                var e = this,
                    n = 0,
                    i = null;
                this.rootElement.on("mouseenter.handsontable", "th", function (n) {
                    t || g.call(e, n.currentTarget)
                }), this.rootElement.on("mousedown.handsontable", ".manualColumnResizer", function () {
                    i == null && (i = setTimeout(function () {
                        n >= 2 && (o = e.determineColumnWidth.call(e, r), w(r, o), e.forceFullRender = !0, e.view.render(), e.PluginHooks.run("afterColumnResize", r, o)), n = 0, i = null
                    }, 500)), n++
                }), this.rootElement.on("mousedown.handsontable", ".manualColumnResizer", function (t) {
                    u = t.pageX, y.call(e), o = a
                })
            };
        this.beforeInit = function () {
            this.manualColumnWidths = []
        }, this.init = function (e) {
            var t = this,
                n = !!this.getSettings().manualColumnResize;
            if (n) {
                var r = this.getSettings().manualColumnResize,
                    i = m.call(t);
                typeof i != "undefined" ? this.manualColumnWidths = i : r instanceof Array ? this.manualColumnWidths = r : this.manualColumnWidths = [], e == "afterInit" && (b.call(this), t.forceFullRender = !0, t.render())
            }
        };
        var w = function (e, t) {
            return t = Math.max(t, 20), e = s.PluginHooks.execute("modifyCol", e), s.manualColumnWidths[e] = t, t
        };
        this.getColWidth = function (e, t) {
            this.getSettings().manualColumnResize && this.manualColumnWidths[e] && (t.width = this.manualColumnWidths[e])
        }
    }

    function d(e) {
        var n, r = function () {
                t.localStorage[e + "__" + "persistentStateKeys"] = JSON.stringify(n)
            },
            i = function () {
                var r = t.localStorage[e + "__" + "persistentStateKeys"],
                    i = typeof r == "string" ? JSON.parse(r) : void 0;
                n = i ? i : []
            },
            s = function () {
                n = [], r()
            };
        i(), this.saveValue = function (i, s) {
            t.localStorage[e + "_" + i] = JSON.stringify(s), n.indexOf(i) == -1 && (n.push(i), r())
        }, this.loadValue = function (n, r) {
            n = typeof n != "undefined" ? n : r;
            var i = t.localStorage[e + "_" + n];
            return typeof i == "undefined" ? void 0 : JSON.parse(i)
        }, this.reset = function (n) {
            t.localStorage.removeItem(e + "_" + n)
        }, this.resetAll = function () {
            for (var r = 0; r < n.length; r++) t.localStorage.removeItem(e + "_" + n[r]);
            s()
        }
    }

    function v() {
        this.boundaries = null, this.callback = null
    }

    function w() {
        this.maxOuts = 10
    }

    function E(t, n) {
        var r;
        this.instance = t, this.settings = n, this.wtDom = this.instance.wtDom, this.main = document.createElement("div"), r = this.main.style, r.position = "absolute", r.top = 0, r.left = 0;
        for (var i = 0; i < 5; i++) {
            var s = document.createElement("DIV");
            s.className = "wtBorder " + (n.className || ""), r = s.style, r.backgroundColor = n.border.color, r.height = n.border.width + "px", r.width = n.border.width + "px", this.main.appendChild(s)
        }
        this.top = this.main.childNodes[0], this.left = this.main.childNodes[1], this.bottom = this.main.childNodes[2], this.right = this.main.childNodes[3], this.topStyle = this.top.style, this.leftStyle = this.left.style, this.bottomStyle = this.bottom.style, this.rightStyle = this.right.style, this.corner = this.main.childNodes[4], this.corner.className += " corner", this.cornerStyle = this.corner.style, this.cornerStyle.width = "5px", this.cornerStyle.height = "5px", this.cornerStyle.border = "2px solid #FFF", this.disappear(), t.wtTable.bordersHolder || (t.wtTable.bordersHolder = document.createElement("div"), t.wtTable.bordersHolder.className = "htBorders", t.wtTable.hider.appendChild(t.wtTable.bordersHolder)), t.wtTable.bordersHolder.appendChild(this.main);
        var o = !1,
            u = e(document.body);
        u.on("mousedown.walkontable." +
            t.guid, function () {
                o = !0
            }), u.on("mouseup.walkontable." + t.guid, function () {
            o = !1
        }), e(this.main.childNodes).on("mouseenter", function (n) {
            if (!o || !t.getSetting("hideBorderOnMouseDownOver")) return;
            n.preventDefault(), n.stopImmediatePropagation();
            var r = this.getBoundingClientRect(),
                i = e(this);
            i.hide();
            var s = function (e) {
                if (e.clientY < Math.floor(r.top)) return !0;
                if (e.clientY > Math.ceil(r.top + r.height)) return !0;
                if (e.clientX < Math.floor(r.left)) return !0;
                if (e.clientX > Math.ceil(r.left + r.width)) return !0
            };
            u.on("mousemove.border." + t.guid, function (e) {
                s(e) && (u.off("mousemove.border." + t.guid), i.show())
            })
        })
    }

    function S() {
        this.offset = 0, this.total = 0, this.fixedCount = 0
    }

    function x(e) {
        this.instance = e
    }

    function T() {
        this.cache = []
    }

    function N() {
        this.countTH = 0
    }

    function C(e, t, n, r) {
        var i, s = 0;
        x.apply(this, arguments), this.containerSizeFn = t, this.cellSizesSum = 0, this.cellSizes = [], this.cellStretch = [], this.cellCount = 0, this.remainingSize = 0, this.strategy = r;
        for (;;) {
            i = n(s);
            if (i === void 0) break;
            if (this.cellSizesSum >= this.getContainerSize(this.cellSizesSum + i)) break;
            this.cellSizes.push(i), this.cellSizesSum += i, this.cellCount++, s++
        }
        var o = this.getContainerSize(this.cellSizesSum);
        this.remainingSize = this.cellSizesSum - o
    }

    function k(e) {
        var t = this,
            n = [];
        this.guid = "wt_" + _(), this.wtDom = new A, e.cloneSource ? (this.cloneSource = e.cloneSource, this.cloneOverlay = e.cloneOverlay, this.wtSettings = e.cloneSource.wtSettings, this.wtTable = new $(this, e.table), this.wtScroll = new B(this), this.wtViewport = e.cloneSource.wtViewport) : (this.wtSettings = new V(this, e), this.wtTable = new $(this, e.table), this.wtScroll = new B(this), this.wtViewport = new J(this), this.wtScrollbars = new W(this), this.wtWheel = new K(this), this.wtEvent = new O(this));
        if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {
            for (var r = 0, i = this.wtTable.THEAD.childNodes[0].childNodes.length; r < i; r++) n.push(this.wtTable.THEAD.childNodes[0].childNodes[r].innerHTML);
            this.getSetting("columnHeaders").length || this.update("columnHeaders", [
                function (e, r) {
                    t.wtDom.fastInnerText(r, n[e])
                }
            ])
        }
        this.selections = {};
        var s = this.getSetting("selections");
        if (s)
            for (var o in s) s.hasOwnProperty(o) && (this.selections[o] = new X(this, s[o]));
        this.drawn = !1, this.drawInterrupted = !1
    }

    function L(t) {
        this.instance = t, this.init(), this.clone = this.makeClone("debug"), this.clone.wtTable.holder.style.opacity = .4, this.clone.wtTable.holder.style.textShadow = "0 0 2px #ff0000";
        var n = this,
            r, i = 0,
            s = 0,
            o = n.clone.wtTable.holder.parentNode;
        e(document.body).on("mousemove." + this.instance.guid, function (e) {
            if (!n.instance.wtTable.holder.parentNode) return;
            if (e.clientX - i > -5 && e.clientX - i < 5 && e.clientY - s > -5 && e.clientY - s < 5) return;
            i = e.clientX, s = e.clientY, A.prototype.addClass(o, "wtDebugHidden"), A.prototype.removeClass(o, "wtDebugVisible"), clearTimeout(r), r = setTimeout(function () {
                A.prototype.removeClass(o, "wtDebugHidden"), A.prototype.addClass(o, "wtDebugVisible")
            }, 1e3)
        })
    }

    function A() {}

    function O(t) {
        var n = this;
        this.instance = t, this.wtDom = this.instance.wtDom;
        var r = [null, null],
            i = [null, null],
            s = function (e) {
                var t = n.parentCell(e.target);
                n.wtDom.hasClass(e.target, "corner") ? n.instance.getSetting("onCellCornerMouseDown", e, e.target) : t.TD && t.TD.nodeName === "TD" && n.instance.hasSetting("onCellMouseDown") && n.instance.getSetting("onCellMouseDown", e, t.coords, t.TD), e.button !== 2 && t.TD && t.TD.nodeName === "TD" && (r[0] = t.TD, clearTimeout(i[0]), i[0] = setTimeout(function () {
                    r[0] = null
                }, 1e3))
            },
            o, u = function (e) {
                if (n.instance.hasSetting("onCellMouseOver")) {
                    var t = n.instance.wtTable.TABLE,
                        r = n.wtDom.closest(e.target, ["TD", "TH"], t);
                    r && r !== o && n.wtDom.isChildOf(r, t) && (o = r, r.nodeName === "TD" && n.instance.getSetting("onCellMouseOver", e, n.instance.wtTable.getCoords(r), r))
                }
            },
            a = function (e) {
                if (e.button !== 2) {
                    var t = n.parentCell(e.target);
                    t.TD === r[0] && t.TD === r[1] ? (n.wtDom.hasClass(e.target, "corner") ? n.instance.getSetting("onCellCornerDblClick", e, t.coords, t.TD) : t.TD && n.instance.getSetting("onCellDblClick", e, t.coords, t.TD), r[0] = null, r[1] = null) : t.TD === r[0] && (r[1] = t.TD, clearTimeout(i[1]), i[1] = setTimeout(function () {
                        r[1] = null
                    }, 500))
                }
            };
        e(this.instance.wtTable.holder).on("mousedown", s), e(this.instance.wtTable.TABLE).on("mouseover", u), e(this.instance.wtTable.holder).on("mouseup", a)
    }

    function M() {
        var e = arguments[0],
            t = arguments[1];
        for (var n = 1, r = arguments.length / 2; n < r; n++)
            if (e <= arguments[2 * n + 1] && t >= arguments[2 * n]) return !0;
        return !1
    }

    function _() {
        function e() {
            return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1)
        }
        return e() + e() + e() + e()
    }

    function P() {}

    function H(e, t, n) {
        x.apply(this, arguments), this.containerSizeFn = t, this.sizeAtIndex = n, this.cellSizesSum = 0, this.cellSizes = [], this.cellCount = 0, this.remainingSize = -Infinity
    }

    function B(e) {
        this.instance = e
    }

    function j() {}

    function q(e) {
        this.instance = e, this.init(), this.clone = this.makeClone("corner")
    }

    function R(e) {
        this.instance = e, this.type = "horizontal", this.cellSize = 50, this.init(), this.clone = this.makeClone("left")
    }

    function U(e) {
        this.instance = e, this.type = "vertical", this.cellSize = 23, this.init(), this.clone = this.makeClone("top")
    }

    function W(e) {
        this.instance = e, e.getSetting("nativeScrollbars") ? (e.update("scrollbarWidth", e.wtDom.getScrollbarWidth()), e.update("scrollbarHeight", e.wtDom.getScrollbarWidth()), this.vertical = new U(e), this.horizontal = new R(e), this.corner = new q(e), e.getSetting("debug") && (this.debug = new L(e)), this.registerListeners()) : (this.vertical = new F(e), this.horizontal = new I(e))
    }

    function X(e, t) {
        this.instance = e, this.settings = t, this.selected = [], t.border && (this.border = new E(e, t))
    }

    function V(e, t) {
        var n = this;
        this.instance = e, this.defaults = {
            table: void 0,
            debug: !1,
            scrollH: "auto",
            scrollV: "auto",
            nativeScrollbars: !1,
            stretchH: "hybrid",
            currentRowClassName: null,
            currentColumnClassName: null,
            data: void 0,
            offsetRow: 0,
            offsetColumn: 0,
            fixedColumnsLeft: 0,
            fixedRowsTop: 0,
            rowHeaders: function () {
                return []
            },
            columnHeaders: function () {
                return []
            },
            totalRows: void 0,
            totalColumns: void 0,
            width: null,
            height: null,
            cellRenderer: function (e, t, r) {
                var i = n.getSetting("data", e, t);
                n.instance.wtDom.fastInnerText(r, i === void 0 || i === null ? "" : i)
            },
            columnWidth: 50,
            selections: null,
            hideBorderOnMouseDownOver: !1,
            onCellMouseDown: null,
            onCellMouseOver: null,
            onCellDblClick: null,
            onCellCornerMouseDown: null,
            onCellCornerDblClick: null,
            beforeDraw: null,
            onDraw: null,
            onScrollVertically: null,
            onScrollHorizontally: null,
            scrollbarWidth: 10,
            scrollbarHeight: 10
        }, this.settings = {};
        for (var r in this.defaults)
            if (this.defaults.hasOwnProperty(r))
                if (t[r] !== void 0) this.settings[r] = t[r];
                else {
                    if (this.defaults[r] === void 0) throw new Error('A required setting "' + r + '" was not provided');
                    this.settings[r] = this.defaults[r]
                }
    }

    function $(e, t) {
        this.instance = e, this.TABLE = t, this.wtDom = this.instance.wtDom, this.wtDom.removeTextNodes(this.TABLE);
        var n = this.TABLE.parentNode;
        if (!n || n.nodeType !== 1 || !this.wtDom.hasClass(n, "wtHolder")) {
            var r = document.createElement("DIV");
            r.className = "wtSpreader", n && n.insertBefore(r, this.TABLE), r.appendChild(this.TABLE)
        }
        this.spreader = this.TABLE.parentNode, n = this.spreader.parentNode;
        if (!n || n.nodeType !== 1 || !this.wtDom.hasClass(n, "wtHolder")) {
            var i = document.createElement("DIV");
            i.className = "wtHider", n && n.insertBefore(i, this.spreader), i.appendChild(this.spreader)
        }
        this.hider = this.spreader.parentNode, this.hiderStyle = this.hider.style, this.hiderStyle.position = "relative", n = this.hider.parentNode;
        if (!n || n.nodeType !== 1 || !this.wtDom.hasClass(n, "wtHolder")) {
            var s = document.createElement("DIV");
            s.style.position = "relative", s.className = "wtHolder", n && n.insertBefore(s, this.hider), s.appendChild(this.hider)
        }
        this.holder = this.hider.parentNode, this.TBODY = this.TABLE.getElementsByTagName("TBODY")[0], this.TBODY || (this.TBODY = document.createElement("TBODY"), this.TABLE.appendChild(this.TBODY)), this.THEAD = this.TABLE.getElementsByTagName("THEAD")[0], this.THEAD || (this.THEAD = document.createElement("THEAD"), this.TABLE.insertBefore(this.THEAD, this.TBODY)), this.COLGROUP = this.TABLE.getElementsByTagName("COLGROUP")[0], this.COLGROUP || (this.COLGROUP = document.createElement("COLGROUP"), this.TABLE.insertBefore(this.COLGROUP, this.THEAD));
        if (this.instance.getSetting("columnHeaders").length && !this.THEAD.childNodes.length) {
            var o = document.createElement("TR");
            this.THEAD.appendChild(o)
        }
        this.colgroupChildrenLength = this.COLGROUP.childNodes.length, this.theadChildrenLength = this.THEAD.firstChild ? this.THEAD.firstChild.childNodes.length : 0, this.tbodyChildrenLength = this.TBODY.childNodes.length, this.oldCellCache = new T, this.currentCellCache = new T, this.rowFilter = new P, this.columnFilter = new N, this.verticalRenderReverse = !1
    }

    function J(n) {
        this.instance = n, this.resetSettings();
        if (this.instance.getSetting("nativeScrollbars")) {
            var r = this;
            e(t).on("resize", function () {
                r.clientHeight = r.getWorkspaceHeight()
            })
        }
    }

    function K(t) {
        if (t.getSetting("nativeScrollbars")) return;
        e(t.wtTable.spreader).on("mousewheel", function (e, n, r, i) {
            !r && !i && n && (i = n);
            if (!r && !i) return;
            if (i > 0 && t.getSetting("offsetRow") === 0) return;
            if (i < 0 && t.wtTable.isLastRowFullyVisible()) return;
            if (r < 0 && t.getSetting("offsetColumn") === 0) return;
            if (r > 0 && t.wtTable.isLastColumnFullyVisible()) return;
            clearTimeout(t.wheelTimeout), t.wheelTimeout = setTimeout(function () {
                i ? t.wtScrollbars.vertical.visible && t.scrollVertical(-Math.ceil(i)).draw() : r && t.wtScrollbars.horizontal.visible && t.scrollHorizontal(Math.ceil(r)).draw()
            }, 0), e.preventDefault()
        })
    }
    Array.prototype.indexOf || (Array.prototype.indexOf = function (e) {
        var t = this.length >>> 0,
            n = Number(arguments[1]) || 0;
        n = n < 0 ? Math.ceil(n) : Math.floor(n), n < 0 && (n += t);
        for (; n < t; n++)
            if (n in this && this[n] === e) return n;
        return -1
    }), Array.prototype.filter || (Array.prototype.filter = function (e, t) {
        function o(e) {
            return /NodeList/i.test(e.item)
        }

        function u(e) {
            var t = [];
            for (var n = 0, r = e.length; n < r; n++) t[n] = e[n];
            return t
        }
        if (typeof this == "undefined" || this === null) throw new TypeError;
        if (typeof e != "function") throw new TypeError;
        t = t || this, o(t) && (t = u(t));
        var n = t.length,
            r = [],
            i, s;
        for (i = 0; i < n; i += 1) t.hasOwnProperty(i) && (s = t[i], e.call(t, s, i, t) && r.push(s));
        return r
    }), typeof WeakMap == "undefined" && function () {
        var e = Object.defineProperty;
        try {
            var n = !0;
            e(function () {}, "foo", {})
        } catch (r) {
            n = !1
        }
        var i = +(new Date) % 1e9,
            s = function () {
                this.name = "__st" + (Math.random() * 1e9 >>> 0) + (i+++"__"), n || (this._wmCache = [])
            };
        n ? s.prototype = {
            set: function (t, n) {
                var r = t[this.name];
                r && r[0] === t ? r[1] = n : e(t, this.name, {
                    value: [t, n],
                    writable: !0
                })
            },
            get: function (e) {
                var t;
                return (t = e[this.name]) && t[0] === e ? t[1] : undefined
            },
            "delete": function (e) {
                this.set(e, undefined)
            }
        } : s.prototype = {
            set: function (e, t) {
                if (typeof e == "undefined" || typeof t == "undefined") return;
                for (var n = 0, r = this._wmCache.length; n < r; n++)
                    if (this._wmCache[n].key == e) {
                        this._wmCache[n].value = t;
                        return
                    }
                this._wmCache.push({
                    key: e,
                    value: t
                })
            },
            get: function (e) {
                if (typeof e == "undefined") return;
                for (var t = 0, n = this._wmCache.length; t < n; t++)
                    if (this._wmCache[t].key == e) return this._wmCache[t].value;
                return
            },
            "delete": function (e) {
                if (typeof e == "undefined") return;
                for (var t = 0, n = this._wmCache.length; t < n; t++) this._wmCache[t].key == e && Array.prototype.slice.call(this._wmCache, t, 1)
            }
        }, t.WeakMap = s
    }(), n.activeGuid = null, n.Core = function (i, s) {
        function m() {
            var e = !1;
            return {
                validatorsInQueue: 0,
                addValidatorToQueue: function () {
                    this.validatorsInQueue++, e = !1
                },
                removeValidatorFormQueue: function () {
                    this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1, this.checkIfQueueIsEmpty()
                },
                onQueueEmpty: function () {},
                checkIfQueueIsEmpty: function () {
                    this.validatorsInQueue == 0 && e == 0 && (e = !0, this.onQueueEmpty())
                }
            }
        }

        function g(t, n, r) {
            function c() {
                var i;
                t.length && (i = h.PluginHooks.execute("beforeChange", t, n), typeof i == "function" ? e.when(result).then(function () {
                    r()
                }) : i === !1 && t.splice(0, t.length)), typeof i != "function" && r()
            }
            var i = new m;
            i.onQueueEmpty = c;
            for (var s = t.length - 1; s >= 0; s--)
                if (t[s] === null) t.splice(s, 1);
                else {
                    var o = t[s][0],
                        a = u.propToCol(t[s][1]),
                        f = h.runHooksAndReturn("modifyCol", a),
                        l = h.getCellMeta(o, f);
                    l.type === "numeric" && typeof t[s][3] == "string" && t[s][3].length > 0 && /^-?[\d\s]*\.?\d*$/.test(t[s][3]) && (t[s][3] = numeral().unformat(t[s][3] || "0")), h.getCellValidator(l) && (i.addValidatorToQueue(), h.validateCell(t[s][3], l, function (e, n) {
                        return function (r) {
                            if (typeof r != "boolean") throw new Error("Validation error: result is not boolean");
                            r === !1 && n.allowInvalid === !1 && (t.splice(e, 1), n.valid = !0, --e), i.removeValidatorFormQueue()
                        }
                    }(s, l), n))
                }
            i.checkIfQueueIsEmpty()
        }

        function y(e, t) {
            var n = e.length - 1;
            if (n < 0) return;
            for (; 0 <= n; n--) {
                if (e[n] === null) {
                    e.splice(n, 1);
                    continue
                }
                if (o.settings.minSpareRows)
                    while (e[n][0] > h.countRows() - 1) u.createRow();
                if (h.dataType === "array" && o.settings.minSpareCols)
                    while (u.propToCol(e[n][1]) > h.countCols() - 1) u.createCol();
                u.set(e[n][0], e[n][1], e[n][3])
            }
            h.forceFullRender = !0, a.adjustRowsAndCols(), f.refreshBorders(null, !0), h.PluginHooks.run("afterChange", e, t || "edit")
        }

        function b(t, n, r) {
            return typeof t == "object" ? t : e.isPlainObject(r) ? r : [
                [t, n, r]
            ]
        }

        function w(e) {
            if (!e.hasOwnProperty("type")) return;
            var t, r = {};
            if (typeof e.type == "object") t = e.type;
            else if (typeof e.type == "string") {
                t = n.cellTypes[e.type];
                if (t === void 0) throw new Error('You declared cell type "' + e.type + '" as a string that is not mapped to a known object. Cell type must be an object or a string mapped to an object in Handsontable.cellTypes')
            }
            for (var i in t) t.hasOwnProperty(i) && !e.hasOwnProperty(i) && (r[i] = t[i]);
            return r
        }
        var o, u, a, f, l, c, h = this,
            p = function () {};
        n.helper.extend(p.prototype, r.prototype), n.helper.extend(p.prototype, s), n.helper.extend(p.prototype, w(s)), this.rootElement = i;
        var d = e(document.documentElement),
            v = e(document.body);
        this.guid = "ht_" + n.helper.randomString(), this.rootElement[0].id || (this.rootElement[0].id = this.guid), o = {
            cellSettings: [],
            columnSettings: [],
            columnsSettingConflicts: ["data", "width"],
            settings: new p,
            settingsFromDOM: {},
            selStart: new n.SelectionPoint,
            selEnd: new n.SelectionPoint,
            isPopulated: null,
            scrollable: null,
            extensions: {},
            firstRun: !0
        }, a = {
            alter: function (e, t, r, i, s) {
                var l;
                r = r || 1;
                switch (e) {
                case "insert_row":
                    l = u.createRow(t, r), l && (o.selStart.exists() && o.selStart.row() >= t ? (o.selStart.row(o.selStart.row() + l), f.transformEnd(l, 0)) : f.refreshBorders());
                    break;
                case "insert_col":
                    l = u.createCol(t, r);
                    if (l) {
                        if (n.helper.isArray(h.getSettings().colHeaders)) {
                            var c = [t, 0];
                            c.length += l, Array.prototype.splice.apply(h.getSettings().colHeaders, c)
                        }
                        o.selStart.exists() && o.selStart.col() >= t ? (o.selStart.col(o.selStart.col() + l), f.transformEnd(0, l)) : f.refreshBorders()
                    }
                    break;
                case "remove_row":
                    u.removeRow(t, r), o.cellSettings.splice(t, r), a.adjustRowsAndCols(), f.refreshBorders();
                    break;
                case "remove_col":
                    t = h.runHooksAndReturn("modifyCol", t), u.removeCol(t, r);
                    for (var p = 0, d = u.getAll().length; p < d; p++) p in o.cellSettings && o.cellSettings[p].splice(t, r);
                    n.helper.isArray(h.getSettings().colHeaders) && (typeof t == "undefined" && (t = -1), h.getSettings().colHeaders.splice(t, r)), a.adjustRowsAndCols(), f.refreshBorders();
                    break;
                default:
                    throw new Error('There is no such action "' + e + '"')
                }
                s || a.adjustRowsAndCols()
            },
            adjustRowsAndCols: function () {
                var e, t, n = h.countEmptyRows(!0),
                    r;
                t = h.countRows();
                if (t < o.settings.minRows)
                    for (e = 0; e < o.settings.minRows - t; e++) u.createRow(h.countRows(), 1, !0);
                if (n < o.settings.minSpareRows)
                    for (; n < o.settings.minSpareRows && h.countRows() < o.settings.maxRows; n++) u.createRow(h.countRows(), 1, !0);
                r = h.countEmptyCols(!0);
                if (!o.settings.columns && h.countCols() < o.settings.minCols)
                    for (; h.countCols() < o.settings.minCols; r++) u.createCol(h.countCols(), 1, !0);
                if (!o.settings.columns && h.dataType === "array" && r < o.settings.minSpareCols)
                    for (; r < o.settings.minSpareCols && h.countCols() < o.settings.maxCols; r++) u.createCol(h.countCols(), 1, !0);
                if (o.settings.enterBeginsEditing)
                    for (;
                        (o.settings.minRows || o.settings.minSpareRows) && h.countRows() > o.settings.minRows && o.settings.minSpareRows && n > o.settings.minSpareRows; n--) u.removeRow();
                if (o.settings.enterBeginsEditing && !o.settings.columns)
                    for (;
                        (o.settings.minCols || o.settings.minSpareCols) && h.countCols() > o.settings.minCols && o.settings.minSpareCols && r > o.settings.minSpareCols; r--) u.removeCol();
                var i = h.countRows(),
                    s = h.countCols();
                (i === 0 || s === 0) && f.deselect();
                if (o.selStart.exists()) {
                    var a, l = o.selStart.row(),
                        c = o.selStart.col(),
                        p = o.selEnd.row(),
                        d = o.selEnd.col();
                    l > i - 1 ? (l = i - 1, a = !0, p > l && (p = l)) : p > i - 1 && (p = i - 1, a = !0, l > p && (l = p)), c > s - 1 ? (c = s - 1, a = !0, d > c && (d = c)) : d > s - 1 && (d = s - 1, a = !0, c > d && (c = d)), a && h.selectCell(l, c, p, d)
                }
            },
            populateFromArray: function (e, t, r, i, s) {
                var u, a, f, l, c = [],
                    p = {};
                a = t.length;
                if (a === 0) return !1;
                var d, v, m, g;
                switch (s) {
                case "shift_down":
                    d = r ? r.col - e.col + 1 : 0, v = r ? r.row - e.row + 1 : 0, t = n.helper.translateRowsToColumns(t);
                    for (f = 0, l = t.length, m = Math.max(l, d); f < m; f++)
                        if (f < l) {
                            for (u = 0, a = t[f].length; u < v - a; u++) t[f].push(t[f][u % a]);
                            t[f].unshift(e.col + f, e.row, 0), h.spliceCol.apply(h, t[f])
                        } else t[f % l][0] = e.col + f, h.spliceCol.apply(h, t[f % l]);
                    break;
                case "shift_right":
                    d = r ? r.col - e.col + 1 : 0, v = r ? r.row - e.row + 1 : 0;
                    for (u = 0, a = t.length, g = Math.max(a, v); u < g; u++)
                        if (u < a) {
                            for (f = 0, l = t[u].length; f < d - l; f++) t[u].push(t[u][f % l]);
                            t[u].unshift(e.row + u, e.col, 0), h.spliceRow.apply(h, t[u])
                        } else t[u % a][0] = e.row + u, h.spliceRow.apply(h, t[u % a]);
                    break;
                case "overwrite":
                default:
                    p.row = e.row, p.col = e.col;
                    for (u = 0; u < a; u++) {
                        if (r && p.row > r.row || !o.settings.minSpareRows && p.row > h.countRows() - 1 || p.row >= o.settings.maxRows) break;
                        p.col = e.col, l = t[u] ? t[u].length : 0;
                        for (f = 0; f < l; f++) {
                            if (r && p.col > r.col || !o.settings.minSpareCols && p.col > h.countCols() - 1 || p.col >= o.settings.maxCols) break;
                            h.getCellMeta(p.row, p.col).readOnly || c.push([p.row, p.col, t[u][f]]), p.col++, r && f === l - 1 && (f = -1)
                        }
                        p.row++, r && u === a - 1 && (u = -1)
                    }
                    h.setDataAtCell(c, null, null, i || "populateFromArray")
                }
            },
            getCornerCoords: function (t) {
                function n(t, n, r) {
                    function i(e) {
                        return e[r]
                    }
                    return Array.prototype.map ? t.apply(Math, n.map(i)) : t.apply(Math, e.map(n, i))
                }
                return {
                    TL: {
                        row: n(Math.min, t, "row"),
                        col: n(Math.min, t, "col")
                    },
                    BR: {
                        row: n(Math.max, t, "row"),
                        col: n(Math.max, t, "col")
                    }
                }
            },
            getCellsAtCoords: function (e, t) {
                var n = a.getCornerCoords([e, t]),
                    r, i, s = [];
                for (r = n.TL.row; r <= n.BR.row; r++)
                    for (i = n.TL.col; i <= n.BR.col; i++) s.push(h.view.getCellAtCoords({
                        row: r,
                        col: i
                    }));
                return s
            }
        }, this.selection = f = {
            inProgress: !1,
            begin: function () {
                h.selection.inProgress = !0
            },
            finish: function () {
                var e = h.getSelected();
                h.PluginHooks.run("afterSelectionEnd", e[0], e[1], e[2], e[3]), h.PluginHooks.run("afterSelectionEndByProp", e[0], h.colToProp(e[1]), e[2], h.colToProp(e[3])), h.selection.inProgress = !1
            },
            isInProgress: function () {
                return h.selection.inProgress
            },
            setRangeStart: function (e) {
                o.selStart.coords(e), f.setRangeEnd(e)
            },
            setRangeEnd: function (e, t) {
                h.selection.begin(), o.selEnd.coords(e), o.settings.multiSelect || o.selStart.coords(e), h.view.wt.selections.current.clear(), h.view.wt.selections.current.add(o.selStart.arr()), h.view.wt.selections.area.clear(), f.isMultiple() && (h.view.wt.selections.area.add(o.selStart.arr()), h.view.wt.selections.area.add(o.selEnd.arr()));
                if (o.settings.currentRowClassName || o.settings.currentColClassName) h.view.wt.selections.highlight.clear(), h.view.wt.selections.highlight.add(o.selStart.arr()), h.view.wt.selections.highlight.add(o.selEnd.arr());
                h.PluginHooks.run("afterSelection", o.selStart.row(), o.selStart.col(), o.selEnd.row(), o.selEnd.col()), h.PluginHooks.run("afterSelectionByProp", o.selStart.row(), u.colToProp(o.selStart.col()), o.selEnd.row(), u.colToProp(o.selEnd.col())), t !== !1 && h.view.scrollViewport(e), f.refreshBorders()
            },
            refreshBorders: function (e, t) {
                t || l.destroyEditor(e), h.view.render(), f.isSelected() && !t && l.prepareEditor()
            },
            isMultiple: function () {
                return o.selEnd.col() !== o.selStart.col() || o.selEnd.row() !== o.selStart.row()
            },
            transformStart: function (e, t, n) {
                o.selStart.row() + e > h.countRows() - 1 ? n && o.settings.minSpareRows > 0 ? h.alter("insert_row", h.countRows()) : o.settings.autoWrapCol && (e = 1 - h.countRows(), t = o.selStart.col() + t == h.countCols() - 1 ? 1 - h.countCols() : 1) : o.settings.autoWrapCol && o.selStart.row() + e < 0 && o.selStart.col() + t >= 0 && (e = h.countRows() - 1, t = o.selStart.col() + t == 0 ? h.countCols() - 1 : -1), o.selStart.col() + t > h.countCols() - 1 ? n && o.settings.minSpareCols > 0 ? h.alter("insert_col", h.countCols()) : o.settings.autoWrapRow && (e = o.selStart.row() + e == h.countRows() - 1 ? 1 - h.countRows() : 1, t = 1 - h.countCols()) : o.settings.autoWrapRow && o.selStart.col() + t < 0 && o.selStart.row() + e >= 0 && (e = o.selStart.row() + e == 0 ? h.countRows() - 1 : -1, t = h.countCols() - 1);
                var r = h.countRows(),
                    i = h.countCols(),
                    s = {
                        row: o.selStart.row() + e,
                        col: o.selStart.col() + t
                    };
                s.row < 0 ? s.row = 0 : s.row > 0 && s.row >= r && (s.row = r - 1), s.col < 0 ? s.col = 0 : s.col > 0 && s.col >= i && (s.col = i - 1), f.setRangeStart(s)
            },
            transformEnd: function (e, t) {
                if (o.selEnd.exists()) {
                    var n = h.countRows(),
                        r = h.countCols(),
                        i = {
                            row: o.selEnd.row() + e,
                            col: o.selEnd.col() + t
                        };
                    i.row < 0 ? i.row = 0 : i.row > 0 && i.row >= n && (i.row = n - 1), i.col < 0 ? i.col = 0 : i.col > 0 && i.col >= r && (i.col = r - 1), f.setRangeEnd(i)
                }
            },
            isSelected: function () {
                return o.selEnd.exists()
            },
            inInSelection: function (e) {
                if (!f.isSelected()) return !1;
                var t = a.getCornerCoords([o.selStart.coords(), o.selEnd.coords()]);
                return t.TL.row <= e.row && t.BR.row >= e.row && t.TL.col <= e.col && t.BR.col >= e.col
            },
            deselect: function () {
                if (!f.isSelected()) return;
                h.selection.inProgress = !1, o.selEnd = new n.SelectionPoint, h.view.wt.selections.current.clear(), h.view.wt.selections.area.clear(), l.destroyEditor(), f.refreshBorders(), h.PluginHooks.run("afterDeselect")
            },
            selectAll: function () {
                if (!o.settings.multiSelect) return;
                f.setRangeStart({
                    row: 0,
                    col: 0
                }), f.setRangeEnd({
                    row: h.countRows() - 1,
                    col: h.countCols() - 1
                }, !1)
            },
            empty: function () {
                if (!f.isSelected()) return;
                var e = a.getCornerCoords([o.selStart.coords(), o.selEnd.coords()]),
                    t, n, r = [];
                for (t = e.TL.row; t <= e.BR.row; t++)
                    for (n = e.TL.col; n <= e.BR.col; n++) h.getCellMeta(t, n).readOnly || r.push([t, n, ""]);
                h.setDataAtCell(r)
            }
        }, this.autofill = c = {
            handle: null,
            init: function () {
                c.handle ? c.handle.disabled = !1 : c.handle = {}
            },
            disable: function () {
                c.handle.disabled = !0
            },
            selectAdjacent: function () {
                var e, t, n, r, i;
                f.isMultiple() ? e = h.view.wt.selections.area.getCorners() : e = h.view.wt.selections.current.getCorners(), t = u.getAll();
                e: for (n = e[2] + 1; n < h.countRows(); n++) {
                    for (i = e[1]; i <= e[3]; i++)
                        if (t[n][i]) break e;
                    if (!!t[n][e[1] - 1] || !!t[n][e[3] + 1]) r = n
                }
                r && (h.view.wt.selections.fill.clear(), h.view.wt.selections.fill.add([e[0], e[1]]), h.view.wt.selections.fill.add([r, e[3]]), c.apply())
            },
            apply: function () {
                var e, t, n, r, i;
                c.handle.isDragged = 0, e = h.view.wt.selections.fill.getCorners();
                if (!e) return;
                h.view.wt.selections.fill.clear(), f.isMultiple() ? t = h.view.wt.selections.area.getCorners() : t = h.view.wt.selections.current.getCorners(), e[0] === t[0] && e[1] < t[1] ? (n = {
                    row: e[0],
                    col: e[1]
                }, r = {
                    row: e[2],
                    col: t[1] - 1
                }) : e[0] === t[0] && e[3] > t[3] ? (n = {
                    row: e[0],
                    col: t[3] + 1
                }, r = {
                    row: e[2],
                    col: e[3]
                }) : e[0] < t[0] && e[1] === t[1] ? (n = {
                    row: e[0],
                    col: e[1]
                }, r = {
                    row: t[0] - 1,
                    col: e[3]
                }) : e[2] > t[2] && e[1] === t[1] && (n = {
                    row: t[2] + 1,
                    col: e[1]
                }, r = {
                    row: e[2],
                    col: e[3]
                }), n && (i = SheetClip.parse(u.getText(o.selStart.coords(), o.selEnd.coords())), h.PluginHooks.run("beforeAutofill", n, r, i), a.populateFromArray(n, i, r, "autofill"), f.setRangeStart({
                    row: e[0],
                    col: e[1]
                }), f.setRangeEnd({
                    row: e[2],
                    col: e[3]
                }))
            },
            showBorder: function (e) {
                e.row = e[0], e.col = e[1];
                var t = a.getCornerCoords([o.selStart.coords(), o.selEnd.coords()]);
                if (o.settings.fillHandle !== "horizontal" && (t.BR.row < e.row || t.TL.row > e.row)) e = [e.row, t.BR.col];
                else {
                    if (o.settings.fillHandle === "vertical") return;
                    e = [t.BR.row, e.col]
                }
                h.view.wt.selections.fill.clear(), h.view.wt.selections.fill.add([o.selStart.coords().row, o.selStart.coords().col]), h.view.wt.selections.fill.add([o.selEnd.coords().row, o.selEnd.coords().col]), h.view.wt.selections.fill.add(e), h.view.render()
            }
        }, this.init = function () {
            h.PluginHooks.run("beforeInit"), this.view = new n.TableView(this), l = new n.EditorManager(h, o, f, u), this.updateSettings(o.settings, !0), this.parseSettingsFromDOM(), this.forceFullRender = !0, this.view.render(), typeof o.firstRun == "object" && (h.PluginHooks.run("afterChange", o.firstRun[0], o.firstRun[1]), o.firstRun = !1), h.PluginHooks.run("afterInit")
        }, this.validateCell = function (e, t, n, r) {
            var i = h.getCellValidator(t);
            Object.prototype.toString.call(i) === "[object RegExp]" && (i = function (e) {
                return function (t, n) {
                    n(e.test(t))
                }
            }(i)), typeof i == "function" ? (e = h.PluginHooks.execute("beforeValidate", e, t.row, t.prop, r), setTimeout(function () {
                i.call(t, e, function (i) {
                    t.valid = i, i = h.PluginHooks.execute("afterValidate", i, e, t.row, t.prop, r), n(i)
                })
            })) : (t.valid = !0, n(!0))
        }, this.setDataAtCell = function (e, t, n, r) {
            var i = b(e, t, n),
                s, o, a = [],
                f;
            for (s = 0, o = i.length; s < o; s++) {
                if (typeof i[s] != "object") throw new Error("Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter");
                if (typeof i[s][1] != "number") throw new Error("Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`");
                f = u.colToProp(i[s][1]), a.push([i[s][0], f, u.get(i[s][0], f), i[s][2]])
            }!r && typeof e == "object" && (r = t), g(a, r, function () {
                y(a, r)
            })
        }, this.setDataAtRowProp = function (e, t, n, r) {
            var i = b(e, t, n),
                s, o, a = [];
            for (s = 0, o = i.length; s < o; s++) a.push([i[s][0], i[s][1], u.get(i[s][0], i[s][1]), i[s][2]]);
            !r && typeof e == "object" && (r = t), g(a, r, function () {
                y(a, r)
            })
        }, this.listen = function () {
            n.activeGuid = h.guid, document.activeElement && document.activeElement !== document.body ? document.activeElement.blur() : document.activeElement || document.body.focus()
        }, this.unlisten = function () {
            n.activeGuid = null
        }, this.isListening = function () {
            return n.activeGuid === h.guid
        }, this.destroyEditor = function (e) {
            f.refreshBorders(e)
        }, this.populateFromArray = function (e, t, n, r, i, s, o) {
            if (typeof n != "object" || typeof n[0] != "object") throw new Error("populateFromArray parameter `input` must be an array of arrays");
            return a.populateFromArray({
                row: e,
                col: t
            }, n, typeof r == "number" ? {
                row: r,
                col: i
            } : null, s, o)
        }, this.spliceCol = function (e, t, n) {
            return u.spliceCol.apply(u, arguments)
        }, this.spliceRow = function (e, t, n) {
            return u.spliceRow.apply(u, arguments)
        }, this.getCornerCoords = function (e) {
            return a.getCornerCoords(e)
        }, this.getSelected = function () {
            if (f.isSelected()) return [o.selStart.row(), o.selStart.col(), o.selEnd.row(), o.selEnd.col()]
        }, this.parseSettingsFromDOM = function () {
            var e = this.rootElement.css("overflow");
            if (e === "scroll" || e === "auto") this.rootElement[0].style.overflow = "visible", o.settingsFromDOM.overflow = e;
            else if (o.settings.width === void 0 || o.settings.height === void 0) o.settingsFromDOM.overflow = "auto";
            o.settings.width === void 0 ? o.settingsFromDOM.width = this.rootElement.width() : o.settingsFromDOM.width = void 0, o.settingsFromDOM.height = void 0;
            if (o.settings.height === void 0)
                if (o.settingsFromDOM.overflow === "scroll" || o.settingsFromDOM.overflow === "auto") {
                    var n = this.rootElement[0].cloneNode(!1),
                        r = this.rootElement[0].parentNode;
                    if (r) {
                        n.removeAttribute("id"), r.appendChild(n);
                        var i = parseInt(n.clientHeight, 10),
                            s = parseInt(t.getComputedStyle(n, null).getPropertyValue("paddingTop"), 10) || 0,
                            u = parseInt(t.getComputedStyle(n, null).getPropertyValue("paddingBottom"), 10) || 0,
                            a = i - s - u;
                        isNaN(a) && n.currentStyle && (a = parseInt(n.currentStyle.height, 10)), a > 0 && (o.settingsFromDOM.height = a), r.removeChild(n)
                    }
                }
        }, this.render = function () {
            h.view && (h.forceFullRender = !0, h.parseSettingsFromDOM(), f.refreshBorders(null, !0))
        }, this.loadData = function (e) {
            function l() {
                o.cellSettings.length = 0
            }
            if (typeof e == "object" && e !== null) {
                if (!e.push || !e.splice) e = [e]
            } else {
                if (e !== null) throw new Error("loadData only accepts array of objects or array of arrays (" + typeof e + " given)");
                e = [];
                var t;
                for (var r = 0, i = o.settings.startRows; r < i; r++) {
                    t = [];
                    for (var s = 0, f = o.settings.startCols; s < f; s++) t.push(null);
                    e.push(t)
                }
            }
            o.isPopulated = !1, p.prototype.data = e, o.settings.dataSchema instanceof Array || e[0] instanceof Array ? h.dataType = "array" : typeof o.settings.dataSchema == "function" ? h.dataType = "function" : h.dataType = "object", u = new n.DataMap(h, o, p), l(), a.adjustRowsAndCols(), h.PluginHooks.run("afterLoadData"), o.firstRun ? o.firstRun = [null, "loadData"] : (h.PluginHooks.run("afterChange", null, "loadData"), h.render()), o.isPopulated = !0
        }, this.getData = function (e, t, n, r) {
            return typeof e == "undefined" ? u.getAll() : u.getRange({
                row: e,
                col: t
            }, {
                row: n,
                col: r
            }, u.DESTINATION_RENDERER)
        }, this.getCopyableData = function (e, t, n, r) {
            return u.getCopyableText({
                row: e,
                col: t
            }, {
                row: n,
                col: r
            })
        }, this.updateSettings = function (e, t) {
            var r, i;
            if (typeof e.rows != "undefined") throw new Error("'rows' setting is no longer supported. do you mean startRows, minRows or maxRows?");
            if (typeof e.cols != "undefined") throw new Error("'cols' setting is no longer supported. do you mean startCols, minCols or maxCols?");
            for (r in e) {
                if (r === "data") continue;
                h.PluginHooks.hooks[r] !== void 0 || h.PluginHooks.legacy[r] !== void 0 ? (typeof e[r] == "function" || n.helper.isArray(e[r])) && h.PluginHooks.add(r, e[r]) : (!t && e.hasOwnProperty(r) && (p.prototype[r] = e[r]), n.extension[r] && (o.extensions[r] = new n.extension[r](h, e[r])))
            }
            e.data === void 0 && o.settings.data === void 0 ? h.loadData(null) : e.data !== void 0 ? h.loadData(e.data) : e.columns !== void 0 && u.createMap(), i = h.countCols(), o.cellSettings.length = 0;
            if (i > 0) {
                var s, l;
                for (r = 0; r < i; r++) o.columnSettings[r] = n.helper.columnFactory(p, o.columnsSettingConflicts), s = o.columnSettings[r].prototype, p.prototype.columns && (l = p.prototype.columns[r], n.helper.extend(s, l), n.helper.extend(s, w(l)))
            }
            typeof e.fillHandle != "undefined" && (c.handle && e.fillHandle === !1 ? c.disable() : !c.handle && e.fillHandle !== !1 && c.init()), typeof e.className != "undefined" && (p.prototype.className && h.rootElement.removeClass(p.prototype.className), e.className && h.rootElement.addClass(e.className)), t || h.PluginHooks.run("afterUpdateSettings"), a.adjustRowsAndCols(), h.view && !o.firstRun && (h.forceFullRender = !0, f.refreshBorders(null, !0))
        }, this.getValue = function () {
            var e = h.getSelected();
            if (p.prototype.getValue) {
                if (typeof p.prototype.getValue == "function") return p.prototype.getValue.call(h);
                if (e) return h.getData()[e[0]][p.prototype.getValue]
            } else if (e) return h.getDataAtCell(e[0], e[1])
        }, this.getSettings = function () {
            return o.settings
        }, this.getSettingsFromDOM = function () {
            return o.settingsFromDOM
        }, this.clear = function () {
            f.selectAll(), f.empty()
        }, this.alter = function (e, t, n, r, i) {
            a.alter(e, t, n, r, i)
        }, this.getCell = function (e, t) {
            return h.view.getCellAtCoords({
                row: e,
                col: t
            })
        }, this.colToProp = function (e) {
            return u.colToProp(e)
        }, this.propToCol = function (e) {
            return u.propToCol(e)
        }, this.getDataAtCell = function (e, t) {
            return u.get(e, u.colToProp(t))
        }, this.getDataAtRowProp = function (e, t) {
            return u.get(e, t)
        }, this.getDataAtCol = function (e) {
            return [].concat.apply([], u.getRange({
                row: 0,
                col: e
            }, {
                row: o.settings.data.length - 1,
                col: e
            }, u.DESTINATION_RENDERER))
        }, this.getDataAtProp = function (e) {
            return [].concat.apply([], u.getRange({
                row: 0,
                col: u.propToCol(e)
            }, {
                row: o.settings.data.length - 1,
                col: u.propToCol(e)
            }, u.DESTINATION_RENDERER))
        }, this.getDataAtRow = function (e) {
            return o.settings.data[e]
        }, this.getCellMeta = function (e, t) {
            function a(e) {
                var t = {
                    row: e
                };
                return h.PluginHooks.execute("beforeGet", t), t.row
            }

            function f(e) {
                return n.PluginHooks.execute(h, "modifyCol", e)
            }
            var r = u.colToProp(t),
                i;
            e = a(e), t = f(t), "undefined" == typeof o.columnSettings[t] && (o.columnSettings[t] = n.helper.columnFactory(p, o.columnsSettingConflicts)), o.cellSettings[e] || (o.cellSettings[e] = []), o.cellSettings[e][t] || (o.cellSettings[e][t] = new o.columnSettings[t]), i = o.cellSettings[e][t], i.row = e, i.col = t, i.prop = r, i.instance = h, h.PluginHooks.run("beforeGetCellMeta", e, t, i), n.helper.extend(i, w(i));
            if (i.cells) {
                var s = i.cells.call(i, e, t, r);
                s && (n.helper.extend(i, s), n.helper.extend(i, w(s)))
            }
            return h.PluginHooks.run("afterGetCellMeta", e, t, i), i
        };
        var E = n.helper.cellMethodLookupFactory("renderer");
        this.getCellRenderer = function (e, t) {
                var r = E.call(this, e, t);
                return n.renderers.getRenderer(r)
            }, this.getCellEditor = n.helper.cellMethodLookupFactory("editor"), this.getCellValidator = n.helper.cellMethodLookupFactory("validator"), this.validateCells = function (e) {
                var t = new m;
                t.onQueueEmpty = e;
                var n = h.countRows() - 1;
                while (n >= 0) {
                    var r = h.countCols() - 1;
                    while (r >= 0) t.addValidatorToQueue(), h.validateCell(h.getDataAtCell(n, r), h.getCellMeta(n, r), function () {
                        t.removeValidatorFormQueue()
                    }, "validateCells"), r--;
                    n--
                }
                t.checkIfQueueIsEmpty()
            }, this.getRowHeader = function (e) {
                if (e === void 0) {
                    var t = [];
                    for (var n = 0, r = h.countRows(); n < r; n++) t.push(h.getRowHeader(n));
                    return t
                }
                return Object.prototype.toString.call(o.settings.rowHeaders) === "[object Array]" && o.settings.rowHeaders[e] !== void 0 ? o.settings.rowHeaders[e] : typeof o.settings.rowHeaders == "function" ? o.settings.rowHeaders(e) : o.settings.rowHeaders && typeof o.settings.rowHeaders != "string" && typeof o.settings.rowHeaders != "number" ? e + 1 : o.settings.rowHeaders
            }, this.hasRowHeaders = function () {
                return !!o.settings.rowHeaders
            }, this.hasColHeaders = function () {
                if (o.settings.colHeaders !== void 0 && o.settings.colHeaders !== null) return !!o.settings.colHeaders;
                for (var e = 0, t = h.countCols(); e < t; e++)
                    if (h.getColHeader(e)) return !0;
                return !1
            }, this.getColHeader = function (e) {
                if (e === void 0) {
                    var t = [];
                    for (var r = 0, i = h.countCols(); r < i; r++) t.push(h.getColHeader(r));
                    return t
                }
                return e = n.PluginHooks.execute(h, "modifyCol", e), o.settings.columns && o.settings.columns[e] && o.settings.columns[e].title ? o.settings.columns[e].title : Object.prototype.toString.call(o.settings.colHeaders) === "[object Array]" && o.settings.colHeaders[e] !== void 0 ? o.settings.colHeaders[e] : typeof o.settings.colHeaders == "function" ? o.settings.colHeaders(e) : o.settings.colHeaders && typeof o.settings.colHeaders != "string" && typeof o.settings.colHeaders != "number" ? n.helper.spreadsheetColumnLabel(e) : o.settings.colHeaders
            }, this._getColWidthFromSettings = function (e) {
                var t = h.getCellMeta(0, e),
                    n = t.width;
                if (n === void 0 || n === o.settings.width) n = t.colWidths;
                if (n !== void 0 && n !== null) {
                    switch (typeof n) {
                    case "object":
                        n = n[e];
                        break;
                    case "function":
                        n = n(e)
                    }
                    typeof n == "string" && (n = parseInt(n, 10))
                }
                return n
            }, this.getColWidth = function (e) {
                e = n.PluginHooks.execute(h, "modifyCol", e);
                var t = {
                    width: h._getColWidthFromSettings(e)
                };
                return t.width || (t.width = 50), h.PluginHooks.run("afterGetColWidth", e, t), t.width
            }, this.countRows = function () {
                return o.settings.data.length
            }, this.countCols = function () {
                if (h.dataType === "object" || h.dataType === "function") return o.settings.columns && o.settings.columns.length ? o.settings.columns.length : u.colToPropCache.length;
                if (h.dataType === "array") return o.settings.columns && o.settings.columns.length ? o.settings.columns.length : o.settings.data && o.settings.data[0] && o.settings.data[0].length ? o.settings.data[0].length : 0
            }, this.rowOffset = function () {
                return h.view.wt.getSetting("offsetRow")
            }, this.colOffset = function () {
                return h.view.wt.getSetting("offsetColumn")
            }, this.countVisibleRows = function () {
                return h.view.wt.drawn ? h.view.wt.wtTable.rowStrategy.countVisible() : -1
            }, this.countVisibleCols = function () {
                return h.view.wt.drawn ? h.view.wt.wtTable.columnStrategy.countVisible() : -1
            }, this.countEmptyRows = function (e) {
                var t = h.countRows() - 1,
                    n = 0;
                while (t >= 0) {
                    u.get(t, 0);
                    if (h.isEmptyRow(u.getVars.row)) n++;
                    else if (e) break;
                    t--
                }
                return n
            }, this.countEmptyCols = function (e) {
                if (h.countRows() < 1) return 0;
                var t = h.countCols() - 1,
                    n = 0;
                while (t >= 0) {
                    if (h.isEmptyCol(t)) n++;
                    else if (e) break;
                    t--
                }
                return n
            }, this.isEmptyRow = function (e) {
                return o.settings.isEmptyRow.call(h, e)
            }, this.isEmptyCol = function (e) {
                return o.settings.isEmptyCol.call(h, e)
            }, this.selectCell = function (e, t, n, r, i) {
                if (typeof e != "number" || e < 0 || e >= h.countRows()) return !1;
                if (typeof t != "number" || t < 0 || t >= h.countCols()) return !1;
                if (typeof n != "undefined") {
                    if (typeof n != "number" || n < 0 || n >= h.countRows()) return !1;
                    if (typeof r != "number" || r < 0 || r >= h.countCols()) return !1
                }
                return o.selStart.coords({
                    row: e,
                    col: t
                }), document.activeElement && document.activeElement !== document.documentElement && document.activeElement !== document.body && document.activeElement.blur(), h.listen(), typeof n == "undefined" ? f.setRangeEnd({
                    row: e,
                    col: t
                }, i) : f.setRangeEnd({
                    row: n,
                    col: r
                }, i), h.selection.finish(), !0
            }, this.selectCellByProp = function (e, t, n, r, i) {
                return arguments[1] = u.propToCol(arguments[1]), typeof arguments[3] != "undefined" && (arguments[3] = u.propToCol(arguments[3])), h.selectCell.apply(h, arguments)
            }, this.deselectCell = function () {
                f.deselect()
            }, this.destroy = function () {
                h.clearTimeouts(), h.view && h.view.wt.destroy(), h.rootElement.empty(), h.rootElement.removeData("handsontable"), h.rootElement.off(".handsontable"), e(t).off("." + h.guid), d.off("." + h.guid), v.off("." + h.guid), h.PluginHooks.run("afterDestroy")
            }, this.getActiveEditor = function () {
                return l.getActiveEditor()
            }, this.getInstance = function () {
                return h.rootElement.data("handsontable")
            },
            function () {
                h.PluginHooks = new n.PluginHookClass;
                var e = h.PluginHooks.run,
                    t = h.PluginHooks.execute;
                h.PluginHooks.run = function (t, r, i, s, o, u) {
                    e.call(this, h, t, r, i, s, o, u), n.PluginHooks.run(h, t, r, i, s, o, u)
                }, h.PluginHooks.execute = function (e, r, i, s, o, u) {
                    var a = n.PluginHooks.execute(h, e, r, i, s, o, u),
                        f = t.call(this, h, e, a, i, s, o, u);
                    return typeof f == "undefined" ? a : f
                }, h.addHook = function () {
                    h.PluginHooks.add.apply(h.PluginHooks, arguments)
                }, h.addHookOnce = function () {
                    h.PluginHooks.once.apply(h.PluginHooks, arguments)
                }, h.removeHook = function () {
                    h.PluginHooks.remove.apply(h.PluginHooks, arguments)
                }, h.runHooks = function () {
                    h.PluginHooks.run.apply(h.PluginHooks, arguments)
                }, h.runHooksAndReturn = function () {
                    return h.PluginHooks.execute.apply(h.PluginHooks, arguments)
                }
            }(), this.timeouts = {}, this.registerTimeout = function (e, t, n) {
                clearTimeout(this.timeouts[e]), this.timeouts[e] = setTimeout(t, n || 0)
            }, this.clearTimeouts = function () {
                for (var e in this.timeouts) this.timeouts.hasOwnProperty(e) && clearTimeout(this.timeouts[e])
            }, this.version = "0.10.4"
    };
    var r = function () {};
    r.prototype = {
            data: void 0,
            width: void 0,
            height: void 0,
            startRows: 5,
            startCols: 5,
            rowHeaders: null,
            colHeaders: null,
            minRows: 0,
            minCols: 0,
            maxRows: Infinity,
            maxCols: Infinity,
            minSpareRows: 0,
            minSpareCols: 0,
            multiSelect: !0,
            fillHandle: !0,
            fixedRowsTop: 0,
            fixedColumnsLeft: 0,
            outsideClickDeselects: !0,
            enterBeginsEditing: !0,
            enterMoves: {
                row: 1,
                col: 0
            },
            tabMoves: {
                row: 0,
                col: 1
            },
            autoWrapRow: !1,
            autoWrapCol: !1,
            copyRowsLimit: 1e3,
            copyColsLimit: 1e3,
            pasteMode: "overwrite",
            currentRowClassName: void 0,
            currentColClassName: void 0,
            stretchH: "hybrid",
            isEmptyRow: function (e) {
                var t;
                for (var n = 0, r = this.countCols(); n < r; n++) {
                    t = this.getDataAtCell(e, n);
                    if (t !== "" && t !== null && typeof t != "undefined") return !1
                }
                return !0
            },
            isEmptyCol: function (e) {
                var t;
                for (var n = 0, r = this.countRows(); n < r; n++) {
                    t = this.getDataAtCell(n, e);
                    if (t !== "" && t !== null && typeof t != "undefined") return !1
                }
                return !0
            },
            observeDOMVisibility: !0,
            allowInvalid: !0,
            invalidCellClassName: "htInvalid",
            placeholderCellClassName: "htPlaceholder",
            readOnlyCellClassName: "htDimmed",
            fragmentSelection: !1,
            readOnly: !1,
            nativeScrollbars: !1,
            type: "text",
            copyable: !0,
            debug: !1
        }, n.DefaultSettings = r, e.fn.handsontable = function (e) {
            var t, r, i, s, o, u = this.first(),
                a = u.data("handsontable");
            if (typeof e != "string") return o = e || {}, a ? a.updateSettings(o) : (a = new n.Core(u, o), u.data("handsontable", a), a.init()), u;
            i = [];
            if (arguments.length > 1)
                for (t = 1, r = arguments.length; t < r; t++) i.push(arguments[t]);
            if (a) {
                if (typeof a[e] == "undefined") throw new Error("Handsontable do not provide action: " + e);
                s = a[e].apply(a, i)
            }
            return s
        },
        function (e) {
            function t() {
                function t(e) {
                    return e !== null && !r(e) && (typeof e == "string" || typeof e == "number")
                }

                function n(e) {
                    return e !== null && (typeof e == "object" || typeof e == "function")
                }

                function r(e) {
                    return e !== e
                }
                var e = {
                    arrayMap: [],
                    weakMap: new WeakMap
                };
                return {
                    get: function (r) {
                        if (t(r)) return e.arrayMap[r];
                        if (n(r)) return e.weakMap.get(r)
                    },
                    set: function (r, i) {
                        if (t(r)) e.arrayMap[r] = i;
                        else {
                            if (!n(r)) throw new Error("Invalid key type");
                            e.weakMap.set(r, i)
                        }
                    },
                    "delete": function (r) {
                        t(r) ? delete e.arrayMap[r] : n(r) && e.weakMap["delete"](r)
                    }
                }
            }
            e.MultiMap || (e.MultiMap = t)
        }(t), n.TableView = function (r) {
            var i = this,
                s = e(t),
                o = e(document.documentElement);
            this.instance = r, this.settings = r.getSettings(), this.settingsFromDOM = r.getSettingsFromDOM(), r.rootElement.data("originalStyle", r.rootElement[0].getAttribute("style")), r.rootElement.addClass("handsontable");
            var u = document.createElement("TABLE");
            u.className = "htCore", this.THEAD = document.createElement("THEAD"), u.appendChild(this.THEAD), this.TBODY = document.createElement("TBODY"), u.appendChild(this.TBODY), r.$table = e(u), r.rootElement.prepend(r.$table), r.rootElement.on("mousedown.handsontable", function (e) {
                i.isTextSelectionAllowed(e.target) || (f(), e.preventDefault(), t.focus())
            }), o.on("keyup." + r.guid, function (e) {
                r.selection.isInProgress() && !e.shiftKey && r.selection.finish()
            });
            var a;
            o.on("mouseup." + r.guid, function (e) {
                r.selection.isInProgress() && e.which === 1 && r.selection.finish(), a = !1, r.autofill.handle && r.autofill.handle.isDragged && (r.autofill.handle.isDragged > 1 && r.autofill.apply(), r.autofill.handle.isDragged = 0), n.helper.isOutsideInput(document.activeElement) && r.unlisten()
            }), o.on("mousedown." + r.guid, function (e) {
                var t = e.target;
                if (t !== i.wt.wtTable.spreader)
                    while (t !== document.documentElement) {
                        if (t === null) return;
                        if (t === r.rootElement[0] || t.nodeName === "HANDSONTABLE-TABLE") return;
                        t = t.parentNode
                    }
                i.settings.outsideClickDeselects ? r.deselectCell() : r.destroyEditor()
            }), r.rootElement.on("mousedown.handsontable", ".dragdealer", function () {
                r.destroyEditor()
            }), r.$table.on("selectstart", function (e) {
                if (i.settings.fragmentSelection) return;
                e.preventDefault()
            });
            var f = function () {
                    t.getSelection ? t.getSelection().empty ? t.getSelection().empty() : t.getSelection().removeAllRanges && t.getSelection().removeAllRanges() : document.selection && document.selection.empty()
                },
                l = {
                    debug: function () {
                        return i.settings.debug
                    },
                    table: u,
                    stretchH: this.settings.stretchH,
                    data: r.getDataAtCell,
                    totalRows: r.countRows,
                    totalColumns: r.countCols,
                    nativeScrollbars: this.settings.nativeScrollbars,
                    offsetRow: 0,
                    offsetColumn: 0,
                    width: this.getWidth(),
                    height: this.getHeight(),
                    fixedColumnsLeft: function () {
                        return i.settings.fixedColumnsLeft
                    },
                    fixedRowsTop: function () {
                        return i.settings.fixedRowsTop
                    },
                    rowHeaders: function () {
                        return r.hasRowHeaders() ? [
                            function (e, t) {
                                i.appendRowHeader(e, t)
                            }
                        ] : []
                    },
                    columnHeaders: function () {
                        return r.hasColHeaders() ? [
                            function (e, t) {
                                i.appendColHeader(e, t)
                            }
                        ] : []
                    },
                    columnWidth: r.getColWidth,
                    cellRenderer: function (e, t, n) {
                        var r = i.instance.colToProp(t),
                            s = i.instance.getCellMeta(e, t),
                            o = i.instance.getCellRenderer(s),
                            u = i.instance.getDataAtRowProp(e, r);
                        o(i.instance, n, e, t, r, u, s), i.instance.PluginHooks.run("afterRenderer", n, e, t, r, u, s)
                    },
                    selections: {
                        current: {
                            className: "current",
                            border: {
                                width: 2,
                                color: "#5292F7",
                                style: "solid",
                                cornerVisible: function () {
                                    return i.settings.fillHandle && !i.isCellEdited() && !r.selection.isMultiple()
                                }
                            }
                        },
                        area: {
                            className: "area",
                            border: {
                                width: 1,
                                color: "#89AFF9",
                                style: "solid",
                                cornerVisible: function () {
                                    return i.settings.fillHandle && !i.isCellEdited() && r.selection.isMultiple()
                                }
                            }
                        },
                        highlight: {
                            highlightRowClassName: i.settings.currentRowClassName,
                            highlightColumnClassName: i.settings.currentColClassName
                        },
                        fill: {
                            className: "fill",
                            border: {
                                width: 1,
                                color: "red",
                                style: "solid"
                            }
                        }
                    },
                    hideBorderOnMouseDownOver: function () {
                        return i.settings.fragmentSelection
                    },
                    onCellMouseDown: function (e, t, n) {
                        r.listen(), a = !0;
                        var i = {
                            row: t[0],
                            col: t[1]
                        };
                        if (e.button !== 2 || !r.selection.inInSelection(i)) e.shiftKey ? r.selection.setRangeEnd(i) : r.selection.setRangeStart(i);
                        r.PluginHooks.run("afterOnCellMouseDown", e, t, n)
                    },
                    onCellMouseOver: function (e, t, n) {
                        var i = {
                            row: t[0],
                            col: t[1]
                        };
                        a ? r.selection.setRangeEnd(i) : r.autofill.handle && r.autofill.handle.isDragged && (r.autofill.handle.isDragged++, r.autofill.showBorder(t)), r.PluginHooks.run("afterOnCellMouseOver", e, t, n)
                    },
                    onCellCornerMouseDown: function (e) {
                        r.autofill.handle.isDragged = 1, e.preventDefault(), r.PluginHooks.run("afterOnCellCornerMouseDown", e)
                    },
                    onCellCornerDblClick: function () {
                        r.autofill.selectAdjacent()
                    },
                    beforeDraw: function (e) {
                        i.beforeRender(e)
                    },
                    onDraw: function (e) {
                        i.onDraw(e)
                    },
                    onScrollVertically: function () {
                        r.runHooks("afterScrollVertically")
                    },
                    onScrollHorizontally: function () {
                        r.runHooks("afterScrollHorizontally")
                    }
                };
            r.PluginHooks.run("beforeInitWalkontable", l), this.wt = new k(l), s.on("resize." + r.guid, function () {
                r.registerTimeout("resizeTimeout", function () {
                    r.parseSettingsFromDOM();
                    var e = i.getWidth(),
                        t = i.getHeight();
                    if (l.width !== e || l.height !== t) r.forceFullRender = !0, i.render(), l.width = e, l.height = t
                }, 60)
            }), e(i.wt.wtTable.spreader).on("mousedown.handsontable, contextmenu.handsontable", function (e) {
                e.target === i.wt.wtTable.spreader && e.which === 3 && e.stopPropagation()
            }), o.on("click." + r.guid, function () {
                i.settings.observeDOMVisibility && i.wt.drawInterrupted && (i.instance.forceFullRender = !0, i.render())
            })
        }, n.TableView.prototype.isTextSelectionAllowed = function (e) {
            return n.helper.isInput(e) ? !0 : this.settings.fragmentSelection && this.wt.wtDom.isChildOf(e, this.TBODY) ? !0 : !1
        }, n.TableView.prototype.isCellEdited = function () {
            var e = this.instance.getActiveEditor();
            return e && e.isOpened()
        }, n.TableView.prototype.getWidth = function () {
            var e = this.settings.width !== void 0 ? this.settings.width : this.settingsFromDOM.width;
            return typeof e == "function" ? e() : e
        }, n.TableView.prototype.getHeight = function () {
            var e = this.settings.height !== void 0 ? this.settings.height : this.settingsFromDOM.height;
            return typeof e == "function" ? e() : e
        }, n.TableView.prototype.beforeRender = function (e) {
            e && (this.instance.PluginHooks.run("beforeRender", this.instance.forceFullRender), this.wt.update("width", this.getWidth()), this.wt.update("height", this.getHeight()))
        }, n.TableView.prototype.onDraw = function (e) {
            e && this.instance.PluginHooks.run("afterRender", this.instance.forceFullRender)
        }, n.TableView.prototype.render = function () {
            this.wt.draw(!this.instance.forceFullRender), this.instance.forceFullRender = !1, this.instance.rootElement.triggerHandler("render.handsontable")
        }, n.TableView.prototype.getCellAtCoords = function (e) {
            var t = this.wt.wtTable.getCell([e.row, e.col]);
            return t < 0 ? null : t
        }, n.TableView.prototype.scrollViewport = function (e) {
            this.wt.scrollViewport([e.row, e.col])
        }, n.TableView.prototype.appendRowHeader = function (e, t) {
            if (e > -1) this.wt.wtDom.fastInnerHTML(t, this.instance.getRowHeader(e));
            else {
                var n = document.createElement("DIV");
                n.className = "relative", this.wt.wtDom.fastInnerText(n, "\u00a0"), this.wt.wtDom.empty(t), t.appendChild(n)
            }
        }, n.TableView.prototype.appendColHeader = function (e, t) {
            var n = document.createElement("DIV"),
                r = document.createElement("SPAN");
            n.className = "relative", r.className = "colHeader", this.wt.wtDom.fastInnerHTML(r, this.instance.getColHeader(e)), n.appendChild(r), this.wt.wtDom.empty(t), t.appendChild(n), this.instance.PluginHooks.run("afterGetColHeader", e, t)
        }, n.TableView.prototype.maximumVisibleElementWidth = function (e) {
            var t = this.wt.wtViewport.getWorkspaceWidth();
            return this.settings.nativeScrollbars ? t : t - e
        }, n.TableView.prototype.maximumVisibleElementHeight = function (e) {
            var t = this.wt.wtViewport.getWorkspaceHeight();
            return this.settings.nativeScrollbars ? t : t - e
        },
        function (e) {
            function t(e) {
                var t, n;
                n = {}, t = e, this.getInstance = function (e) {
                    return e.guid in n || (n[e.guid] = new t(e)), n[e.guid]
                }
            }
            var n = {},
                r = new WeakMap;
            e.editors = {
                registerEditor: function (e, i) {
                    var s = new t(i);
                    typeof e == "string" && (n[e] = s), r.set(i, s)
                },
                getEditor: function (e, t) {
                    var i;
                    if (typeof e == "function") r.get(e) || this.registerEditor(null, e), i = r.get(e);
                    else {
                        if (typeof e != "string") throw Error('Only strings and functions can be passed as "editor" parameter ');
                        i = n[e]
                    } if (!i) throw Error('No editor registered under name "' + e + '"');
                    return i.getInstance(t)
                }
            }
        }(n),
        function (t) {
            t.EditorManager = function (n, r, i) {
                var s = this,
                    o = e(document),
                    u = t.helper.keyCode,
                    a, f = function () {
                        function e(e) {
                            if (!n.isListening()) return;
                            r.settings.beforeOnKeyDown && r.settings.beforeOnKeyDown.call(n, e), n.PluginHooks.run("beforeKeyDown", e);
                            if (!e.isImmediatePropagationStopped()) {
                                r.lastKeyCode = e.keyCode;
                                if (i.isSelected()) {
                                    var o = (e.ctrlKey || e.metaKey) && !e.altKey;
                                    if (!a.isWaiting() && !t.helper.isMetaKey(e.keyCode) && !o && !s.isEditorOpened()) {
                                        s.openEditor(""), e.stopPropagation();
                                        return
                                    }
                                    var f = e.shiftKey ? i.setRangeEnd : i.setRangeStart;
                                    switch (e.keyCode) {
                                    case u.A:
                                        if (o) {
                                            i.selectAll(), e.preventDefault(), e.stopPropagation();
                                            break
                                        };
                                    case u.ARROW_UP:
                                        s.isEditorOpened() && !a.isWaiting() && s.closeEditorAndSaveChanges(o), c(e.shiftKey), e.preventDefault(), e.stopPropagation();
                                        break;
                                    case u.ARROW_DOWN:
                                        s.isEditorOpened() && !a.isWaiting() && s.closeEditorAndSaveChanges(o), h(e.shiftKey), e.preventDefault(), e.stopPropagation();
                                        break;
                                    case u.ARROW_RIGHT:
                                        s.isEditorOpened() && !a.isWaiting() && s.closeEditorAndSaveChanges(o), p(e.shiftKey), e.preventDefault(), e.stopPropagation();
                                        break;
                                    case u.ARROW_LEFT:
                                        s.isEditorOpened() && !a.isWaiting() && s.closeEditorAndSaveChanges(o), d(e.shiftKey), e.preventDefault(), e.stopPropagation();
                                        break;
                                    case u.TAB:
                                        var v = typeof r.settings.tabMoves == "function" ? r.settings.tabMoves(e) : r.settings.tabMoves;
                                        e.shiftKey ? i.transformStart(-v.row, -v.col) : i.transformStart(v.row, v.col, !0), e.preventDefault(), e.stopPropagation();
                                        break;
                                    case u.BACKSPACE:
                                    case u.DELETE:
                                        i.empty(e), s.prepareEditor(), e.preventDefault();
                                        break;
                                    case u.F2:
                                        s.openEditor(), e.preventDefault();
                                        break;
                                    case u.ENTER:
                                        s.isEditorOpened() ? (a.state !== t.EditorState.WAITING && s.closeEditorAndSaveChanges(o), l(e.shiftKey)) : n.getSettings().enterBeginsEditing ? s.openEditor() : l(e.shiftKey), e.preventDefault(), e.stopImmediatePropagation();
                                        break;
                                    case u.ESCAPE:
                                        s.isEditorOpened() && s.closeEditorAndRestoreOriginalValue(o), e.preventDefault();
                                        break;
                                    case u.HOME:
                                        e.ctrlKey || e.metaKey ? f({
                                            row: 0,
                                            col: r.selStart.col()
                                        }) : f({
                                            row: r.selStart.row(),
                                            col: 0
                                        }), e.preventDefault(), e.stopPropagation();
                                        break;
                                    case u.END:
                                        e.ctrlKey || e.metaKey ? f({
                                            row: n.countRows() - 1,
                                            col: r.selStart.col()
                                        }) : f({
                                            row: r.selStart.row(),
                                            col: n.countCols() - 1
                                        }), e.preventDefault(), e.stopPropagation();
                                        break;
                                    case u.PAGE_UP:
                                        i.transformStart(-n.countVisibleRows(), 0), n.view.wt.scrollVertical(-n.countVisibleRows()), n.view.render(), e.preventDefault(), e.stopPropagation();
                                        break;
                                    case u.PAGE_DOWN:
                                        i.transformStart(n.countVisibleRows(), 0), n.view.wt.scrollVertical(n.countVisibleRows()), n.view.render(), e.preventDefault(), e.stopPropagation();
                                        break;
                                    default:
                                    }
                                }
                            }
                        }

                        function f() {
                            s.openEditor()
                        }

                        function l(e) {
                            var t = typeof r.settings.enterMoves == "function" ? r.settings.enterMoves(event) : r.settings.enterMoves;
                            e ? i.transformStart(-t.row, -t.col) : i.transformStart(t.row, t.col, !0)
                        }

                        function c(e) {
                            e ? i.transformEnd(-1, 0) : i.transformStart(-1, 0)
                        }

                        function h(e) {
                            e ? i.transformEnd(1, 0) : i.transformStart(1, 0)
                        }

                        function p(e) {
                            e ? i.transformEnd(0, 1) : i.transformStart(0, 1)
                        }

                        function d(e) {
                            e ? i.transformEnd(0, -1) : i.transformStart(0, -1)
                        }
                        o.on("keydown.handsontable." + n.guid, e), n.view.wt.update("onCellDblClick", f), n.addHook("afterDestroy", function () {
                            o.off("keydown.handsontable." + n.guid)
                        })
                    };
                this.destroyEditor = function (e) {
                    this.closeEditor(e)
                }, this.getActiveEditor = function () {
                    return a
                }, this.prepareEditor = function () {
                    if (a && a.isWaiting()) {
                        this.closeEditor(!1, !1, function (e) {
                            e && s.prepareEditor()
                        });
                        return
                    }
                    var e = r.selStart.row(),
                        i = r.selStart.col(),
                        o = n.colToProp(i),
                        u = n.getCell(e, i),
                        f = n.getDataAtCell(e, i),
                        l = n.getCellMeta(e, i),
                        c = n.getCellEditor(l);
                    a = t.editors.getEditor(c, n), a.prepare(e, i, o, u, f, l)
                }, this.isEditorOpened = function () {
                    return a.isOpened()
                }, this.openEditor = function (e) {
                    a.cellProperties.readOnly || a.beginEditing(e)
                }, this.closeEditor = function (e, t, n) {
                    a ? a.finishEditing(e, t, n) : n && n(!1)
                }, this.closeEditorAndSaveChanges = function (e) {
                    return this.closeEditor(!1, e)
                }, this.closeEditorAndRestoreOriginalValue = function (e) {
                    return this.closeEditor(!0, e)
                }, f()
            }
        }(n),
        function (e) {
            var t = {};
            e.renderers = {
                registerRenderer: function (e, n) {
                    t[e] = n
                },
                getRenderer: function (e) {
                    if (typeof e == "function") return e;
                    if (typeof e != "string") throw Error('Only strings and functions can be passed as "renderer" parameter ');
                    if (e in t) return t[e];
                    throw Error('No editor registered under name "' + e + '"')
                }
            }
        }(n), n.Dom = new A, n.helper.isPrintableChar = function (e) {
            return e == 32 || e >= 48 && e <= 57 || e >= 96 && e <= 111 || e >= 186 && e <= 192 || e >= 219 && e <= 222 || e >= 226 || e >= 65 && e <= 90
        }, n.helper.isMetaKey = function (e) {
            var t = n.helper.keyCode,
                r = [t.ARROW_DOWN, t.ARROW_UP, t.ARROW_LEFT, t.ARROW_RIGHT, t.HOME, t.END, t.DELETE, t.BACKSPACE, t.F1, t.F2, t.F3, t.F4, t.F5, t.F6, t.F7, t.F8, t.F9, t.F10, t.F11, t.F12, t.TAB, t.PAGE_DOWN, t.PAGE_UP, t.ENTER, t.ESCAPE, t.SHIFT, t.CAPS_LOCK, t.ALT];
            return r.indexOf(e) != -1
        }, n.helper.isCtrlKey = function (e) {
            var t = n.helper.keyCode;
            return [t.CONTROL_LEFT, 224, t.COMMAND_LEFT, t.COMMAND_RIGHT].indexOf(e) != -1
        }, n.helper.stringify = function (e) {
            switch (typeof e) {
            case "string":
            case "number":
                return e + "";
            case "object":
                return e === null ? "" : e.toString();
            case "undefined":
                return "";
            default:
                return e.toString()
            }
        }, n.helper.spreadsheetColumnLabel = function (e) {
            var t = e + 1,
                n = "",
                r;
            while (t > 0) r = (t - 1) % 26, n = String.fromCharCode(65 + r) + n, t = parseInt((t - r) / 26, 10);
            return n
        }, n.helper.isNumeric = function (e) {
            var t = typeof e;
            return t == "number" ? !isNaN(e) && isFinite(e) : t == "string" ? e.length ? e.length == 1 ? /\d/.test(e) : /^\s*[+-]?\s*(?:(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?)|(?:0x[a-f\d]+))\s*$/i.test(e) : !1 : t == "object" ? !!e && typeof e.valueOf() == "number" && !(e instanceof Date) : !1
        }, n.helper.isArray = function (e) {
            return Object.prototype.toString.call(e).match(/array/i) !== null
        }, n.helper.isDescendant = function (e, t) {
            var n = t.parentNode;
            while (n != null) {
                if (n == e) return !0;
                n = n.parentNode
            }
            return !1
        }, n.helper.randomString = function () {
            return _()
        }, n.helper.inherit = function (e, t) {
            return t.prototype.constructor = t, e.prototype = new t, e.prototype.constructor = e, e
        }, n.helper.extend = function (e, t) {
            for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
        }, n.helper.getPrototypeOf = function (e) {
            var t;
            if (typeof e.__proto__ == "object") t = e.__proto__;
            else {
                var n, r = e.constructor;
                typeof e.constructor == "function" && (n = r, delete e.constructor && (r = e.constructor, e.constructor = n)), t = r ? r.prototype : null
            }
            return t
        }, n.helper.columnFactory = function (e, t) {
            function r() {}
            n.helper.inherit(r, e);
            for (var i = 0, s = t.length; i < s; i++) r.prototype[t[i]] = void 0;
            return r
        }, n.helper.translateRowsToColumns = function (e) {
            var t, n, r, i, s = [],
                o = 0;
            for (t = 0, n = e.length; t < n; t++)
                for (r = 0, i = e[t].length; r < i; r++) r == o && (s.push([]), o++), s[r].push(e[t][r]);
            return s
        }, n.helper.to2dArray = function (e) {
            var t = 0,
                n = e.length;
            while (t < n) e[t] = [e[t]], t++
        }, n.helper.extendArray = function (e, t) {
            var n = 0,
                r = t.length;
            while (n < r) e.push(t[n]), n++
        }, n.helper.isInput = function (e) {
            var t = ["INPUT", "SELECT", "TEXTAREA"];
            return t.indexOf(e.nodeName) > -1
        }, n.helper.isOutsideInput = function (e) {
            return n.helper.isInput(e) && e.className.indexOf("handsontableInput") == -1
        }, n.helper.keyCode = {
            MOUSE_LEFT: 1,
            MOUSE_RIGHT: 3,
            MOUSE_MIDDLE: 2,
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            CONTROL_LEFT: 91,
            COMMAND_LEFT: 17,
            COMMAND_RIGHT: 93,
            ALT: 18,
            HOME: 36,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            SPACE: 32,
            SHIFT: 16,
            CAPS_LOCK: 20,
            TAB: 9,
            ARROW_RIGHT: 39,
            ARROW_LEFT: 37,
            ARROW_UP: 38,
            ARROW_DOWN: 40,
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120,
            F10: 121,
            F11: 122,
            F12: 123,
            A: 65,
            X: 88,
            C: 67,
            V: 86
        }, n.helper.isObject = function (e) {
            return Object.prototype.toString.call(e) == "[object Object]"
        }, n.helper.isArray = function (e) {
            return Array.isArray ? Array.isArray(e) : Object.prototype.toString.call(e) == "[object Array]"
        }, n.helper.pivot = function (e) {
            var t = [];
            if (!e || e.length == 0 || !e[0] || e[0].length == 0) return t;
            var n = e.length,
                r = e[0].length;
            for (var i = 0; i < n; i++)
                for (var s = 0; s < r; s++) t[s] || (t[s] = []), t[s][i] = e[i][s];
            return t
        }, n.helper.proxy = function (e, t) {
            return function () {
                return e.apply(t, arguments)
            }
        }, n.helper.cellMethodLookupFactory = function (e, t) {
            function r(e) {
                var t = n.cellTypes[e];
                if (typeof t == "undefined") throw new Error('You declared cell type "' + e + '" as a string that is not mapped to a known object. Cell type must be an object or a string mapped to an object in Handsontable.cellTypes');
                return t
            }
            return t = typeof t == "undefined" ? !0 : t,
                function (s, o) {
                    return function u(i) {
                        if (!i) return;
                        if (i.hasOwnProperty(e) && i[e]) return i[e];
                        if (i.hasOwnProperty("type") && i.type) {
                            var s;
                            if (typeof i.type != "string") throw new Error("Cell type must be a string ");
                            s = r(i.type);
                            if (s.hasOwnProperty(e)) return s[e];
                            if (t) return
                        }
                        return u(n.helper.getPrototypeOf(i))
                    }(typeof s == "number" ? this.getCellMeta(s, o) : s)
                }
        }, n.SelectionPoint = function () {
            this._row = null, this._col = null
        }, n.SelectionPoint.prototype.exists = function () {
            return this._row !== null
        }, n.SelectionPoint.prototype.row = function (e) {
            return e !== void 0 && (this._row = e), this._row
        }, n.SelectionPoint.prototype.col = function (e) {
            return e !== void 0 && (this._col = e), this._col
        }, n.SelectionPoint.prototype.coords = function (e) {
            return e !== void 0 && (this._row = e.row, this._col = e.col), {
                row: this._row,
                col: this._col
            }
        }, n.SelectionPoint.prototype.arr = function (e) {
            return e !== void 0 && (this._row = e[0], this._col = e[1]), [this._row, this._col]
        },
        function (t) {
            t.DataMap = function (e, t, n) {
                this.instance = e, this.priv = t, this.GridSettings = n, this.dataSource = this.instance.getSettings().data, this.dataSource[0] ? this.duckSchema = this.recursiveDuckSchema(this.dataSource[0]) : this.duckSchema = {}, this.createMap(), this.getVars = {}, this.setVars = {}
            }, t.DataMap.prototype.DESTINATION_RENDERER = 1, t.DataMap.prototype.DESTINATION_CLIPBOARD_GENERATOR = 2, t.DataMap.prototype.recursiveDuckSchema = function (t) {
                var n;
                if (e.isPlainObject(t)) {
                    n = {};
                    for (var r in t) t.hasOwnProperty(r) && (e.isPlainObject(t[r]) ? n[r] = this.recursiveDuckSchema(t[r]) : n[r] = null)
                } else n = [];
                return n
            }, t.DataMap.prototype.recursiveDuckColumns = function (t, n, r) {
                var i, s;
                typeof n == "undefined" && (n = 0, r = "");
                if (e.isPlainObject(t))
                    for (s in t) t.hasOwnProperty(s) && (t[s] === null ? (i = r + s, this.colToPropCache.push(i), this.propToColCache.set(i, n), n++) : n = this.recursiveDuckColumns(t[s], n, s + "."));
                return n
            }, t.DataMap.prototype.createMap = function () {
                if (typeof this.getSchema() == "undefined") throw new Error("trying to create `columns` definition but you didnt' provide `schema` nor `data`");
                var e, t, n = this.getSchema();
                this.colToPropCache = [], this.propToColCache = new MultiMap;
                var r = this.instance.getSettings().columns;
                if (r)
                    for (e = 0, t = r.length; e < t; e++) typeof r[e].data != "undefined" && (this.colToPropCache[e] = r[e].data, this.propToColCache.set(r[e].data, e));
                else this.recursiveDuckColumns(n)
            }, t.DataMap.prototype.colToProp = function (e) {
                return e = t.PluginHooks.execute(this.instance, "modifyCol", e), this.colToPropCache && typeof this.colToPropCache[e] != "undefined" ? this.colToPropCache[e] : e
            }, t.DataMap.prototype.propToCol = function (e) {
                var n;
                return typeof this.propToColCache.get(e) != "undefined" ? n = this.propToColCache.get(e) : n = e, n = t.PluginHooks.execute(this.instance, "modifyCol", n), n
            }, t.DataMap.prototype.getSchema = function () {
                var e = this.instance.getSettings().dataSchema;
                return e ? typeof e == "function" ? e() : e : this.duckSchema
            }, t.DataMap.prototype.createRow = function (t, n, r) {
                var i, s = this.instance.countCols(),
                    o = 0,
                    u;
                n || (n = 1);
                if (typeof t != "number" || t >= this.instance.countRows()) t = this.instance.countRows();
                u = t;
                var a = this.instance.getSettings().maxRows;
                while (o < n && this.instance.countRows() < a) {
                    if (this.instance.dataType === "array") {
                        i = [];
                        for (var f = 0; f < s; f++) i.push(null)
                    } else this.instance.dataType === "function" ? i = this.instance.getSettings().dataSchema(t) : i = e.extend(!0, {}, this.getSchema());
                    t === this.instance.countRows() ? this.dataSource.push(i) : this.dataSource.splice(t, 0, i), o++, u++
                }
                return this.instance.PluginHooks.run("afterCreateRow", t, o, r), this.instance.forceFullRender = !0, o
            }, t.DataMap.prototype.createCol = function (e, n, r) {
                if (this.instance.dataType === "object" || this.instance.getSettings().columns) throw new Error("Cannot create new column. When data source in an object, you can only have as much columns as defined in first data row, data schema or in the 'columns' setting.If you want to be able to add new columns, you have to use array datasource.");
                var i = this.instance.countRows(),
                    s = this.dataSource,
                    o, u = 0,
                    a;
                n || (n = 1), a = e;
                var f = this.instance.getSettings().maxCols;
                while (u < n && this.instance.countCols() < f) {
                    o = t.helper.columnFactory(this.GridSettings, this.priv.columnsSettingConflicts);
                    if (typeof e != "number" || e >= this.instance.countCols()) {
                        for (var l = 0; l < i; l++) typeof s[l] == "undefined" && (s[l] = []), s[l].push(null);
                        this.priv.columnSettings.push(o)
                    } else {
                        for (var l = 0; l < i; l++) s[l].splice(a, 0, null);
                        this.priv.columnSettings.splice(a, 0, o)
                    }
                    u++, a++
                }
                return this.instance.PluginHooks.run("afterCreateCol", e, u, r), this.instance.forceFullRender = !0, u
            }, t.DataMap.prototype.removeRow = function (e, t) {
                t || (t = 1), typeof e != "number" && (e = -t), e = (this.instance.countRows() + e) % this.instance.countRows();
                var n = this.physicalRowsToLogical(e, t),
                    r = this.instance.PluginHooks.execute("beforeRemoveRow", e, t);
                if (r === !1) return;
                var i = this.dataSource,
                    s = i.filter(function (e, t) {
                        return n.indexOf(t) == -1
                    });
                i.length = 0, Array.prototype.push.apply(i, s), this.instance.PluginHooks.run("afterRemoveRow", e, t), this.instance.forceFullRender = !0
            }, t.DataMap.prototype.removeCol = function (e, t) {
                if (this.instance.dataType === "object" || this.instance.getSettings().columns) throw new Error("cannot remove column with object data source or columns option specified");
                t || (t = 1), typeof e != "number" && (e = -t), e = (this.instance.countCols() + e) % this.instance.countCols();
                var n = this.instance.PluginHooks.execute("beforeRemoveCol", e, t);
                if (n === !1) return;
                var r = this.dataSource;
                for (var i = 0, s = this.instance.countRows(); i < s; i++) r[i].splice(e, t);
                this.priv.columnSettings.splice(e, t), this.instance.PluginHooks.run("afterRemoveCol", e, t), this.instance.forceFullRender = !0
            }, t.DataMap.prototype.spliceCol = function (e, n, r) {
                var i = 4 <= arguments.length ? [].slice.call(arguments, 3) : [],
                    s = this.instance.getDataAtCol(e),
                    o = s.slice(n, n + r),
                    u = s.slice(n + r);
                t.helper.extendArray(i, u);
                var a = 0;
                while (a < r) i.push(null), a++;
                return t.helper.to2dArray(i), this.instance.populateFromArray(n, e, i, null, null, "spliceCol"), o
            }, t.DataMap.prototype.spliceRow = function (e, n, r) {
                var i = 4 <= arguments.length ? [].slice.call(arguments, 3) : [],
                    s = this.instance.getDataAtRow(e),
                    o = s.slice(n, n + r),
                    u = s.slice(n + r);
                t.helper.extendArray(i, u);
                var a = 0;
                while (a < r) i.push(null), a++;
                return this.instance.populateFromArray(e, n, [i], null, null, "spliceRow"), o
            }, t.DataMap.prototype.get = function (e, t) {
                this.getVars.row = e, this.getVars.prop = t, this.instance.PluginHooks.run("beforeGet", this.getVars);
                if (typeof this.getVars.prop == "string" && this.getVars.prop.indexOf(".") > -1) {
                    var n = this.getVars.prop.split("."),
                        r = this.dataSource[this.getVars.row];
                    if (!r) return null;
                    for (var i = 0, s = n.length; i < s; i++) {
                        r = r[n[i]];
                        if (typeof r == "undefined") return null
                    }
                    return r
                }
                return typeof this.getVars.prop == "function" ? this.getVars.prop(this.dataSource.slice(this.getVars.row, this.getVars.row + 1)[0]) : this.dataSource[this.getVars.row] ? this.dataSource[this.getVars.row][this.getVars.prop] : null
            };
            var n = t.helper.cellMethodLookupFactory("copyable", !1);
            t.DataMap.prototype.getCopyable = function (e, t) {
                return n.call(this.instance, e, this.propToCol(t)) ? this.get(e, t) : ""
            }, t.DataMap.prototype.set = function (e, t, n, r) {
                this.setVars.row = e, this.setVars.prop = t, this.setVars.value = n, this.instance.PluginHooks.run("beforeSet", this.setVars, r || "datamapGet");
                if (typeof this.setVars.prop == "string" && this.setVars.prop.indexOf(".") > -1) {
                    var i = this.setVars.prop.split("."),
                        s = this.dataSource[this.setVars.row];
                    for (var o = 0, u = i.length - 1; o < u; o++) s = s[i[o]];
                    s[i[o]] = this.setVars.value
                } else typeof this.setVars.prop == "function" ? this.setVars.prop(this.dataSource.slice(this.setVars.row, this.setVars.row + 1)[0], this.setVars.value) : this.dataSource[this.setVars.row][this.setVars.prop] = this.setVars.value
            }, t.DataMap.prototype.physicalRowsToLogical = function (e, t) {
                var n = this.instance.countRows(),
                    r = (n + e) % n,
                    i = [],
                    s = t;
                while (r < n && s) this.get(r, 0), i.push(this.getVars.row), s--, r++;
                return i
            }, t.DataMap.prototype.clear = function () {
                for (var e = 0; e < this.instance.countRows(); e++)
                    for (var t = 0; t < this.instance.countCols(); t++) this.set(e, this.colToProp(t), "")
            }, t.DataMap.prototype.getAll = function () {
                return this.dataSource
            }, t.DataMap.prototype.getRange = function (e, t, n) {
                var r, i, s, o, u = [],
                    a, f = n === this.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get;
                i = Math.max(e.row, t.row), o = Math.max(e.col, t.col);
                for (r = Math.min(e.row, t.row); r <= i; r++) {
                    a = [];
                    for (s = Math.min(e.col, t.col); s <= o; s++) a.push(f.call(this, r, this.colToProp(s)));
                    u.push(a)
                }
                return u
            }, t.DataMap.prototype.getText = function (e, t) {
                return SheetClip.stringify(this.getRange(e, t, this.DESTINATION_RENDERER))
            }, t.DataMap.prototype.getCopyableText = function (e, t) {
                return SheetClip.stringify(this.getRange(e, t, this.DESTINATION_CLIPBOARD_GENERATOR))
            }
        }(n),
        function (e) {
            e.renderers.cellDecorator = function (e, t, n, r, i, s, o) {
                o.readOnly && e.view.wt.wtDom.addClass(t, o.readOnlyCellClassName), o.valid === !1 && o.invalidCellClassName && e.view.wt.wtDom.addClass(t, o.invalidCellClassName), !s && o.placeholder && e.view.wt.wtDom.addClass(t, o.placeholderCellClassName)
            }
        }(n),
        function (e) {
            var t = function (t, n, r, i, s, o, u) {
                e.renderers.cellDecorator.apply(this, arguments), !o && u.placeholder && (o = u.placeholder);
                var a = e.helper.stringify(o);
                if (u.rendererTemplate) {
                    t.view.wt.wtDom.empty(n);
                    var f = document.createElement("TEMPLATE");
                    f.setAttribute("bind", "{{}}"), f.innerHTML = u.rendererTemplate, HTMLTemplateElement.decorate(f), f.model = t.getDataAtRow(r), n.appendChild(f)
                } else t.view.wt.wtDom.fastInnerText(n, a)
            };
            e.renderers.TextRenderer = t, e.renderers.registerRenderer("text", t)
        }(n),
        function (e) {
            var t = document.createElement("DIV");
            t.className = "htAutocompleteWrapper";
            var n = document.createElement("DIV");
            n.className = "htAutocompleteArrow", n.appendChild(document.createTextNode("\u25bc"));
            var r = function (t, n) {
                    n.innerHTML = t.innerHTML, e.Dom.empty(t), t.appendChild(n)
                },
                i = function (r, i, s, o, u, a, f) {
                    var l = t.cloneNode(!0),
                        c = n.cloneNode(!0);
                    e.renderers.TextRenderer(r, i, s, o, u, a, f), i.appendChild(c), e.Dom.addClass(i, "htAutocomplete"), i.firstChild || i.appendChild(document.createTextNode("\u00a0")), r.acArrowListener || (r.acArrowListener = function () {
                        r.view.wt.getSetting("onCellDblClick")
                    }, r.rootElement.on("mousedown.htAutocompleteArrow", ".htAutocompleteArrow", r.acArrowListener), r.addHookOnce("afterDestroy", function () {
                        this.rootElement.off("mousedown.htAutocompleteArrow")
                    }))
                };
            e.AutocompleteRenderer = i, e.renderers.AutocompleteRenderer = i, e.renderers.registerRenderer("autocomplete", i)
        }(n),
        function (t) {
            var n = document.createElement("INPUT");
            n.className = "htCheckboxRendererInput", n.type = "checkbox", n.setAttribute("autocomplete", "off");
            var r = function (r, i, s, o, u, a, f) {
                typeof f.checkedTemplate == "undefined" && (f.checkedTemplate = !0), typeof f.uncheckedTemplate == "undefined" && (f.uncheckedTemplate = !1), r.view.wt.wtDom.empty(i);
                var l = n.cloneNode(!1);
                a === f.checkedTemplate || a === t.helper.stringify(f.checkedTemplate) ? (l.checked = !0, i.appendChild(l)) : a === f.uncheckedTemplate || a === t.helper.stringify(f.uncheckedTemplate) ? i.appendChild(l) : a === null ? (l.className += " noValue", i.appendChild(l)) : r.view.wt.wtDom.fastInnerText(i, "#bad value#");
                var c = e(l);
                f.readOnly ? c.on("click", function (e) {
                    e.preventDefault()
                }) : (c.on("mousedown", function (e) {
                    e.stopPropagation()
                }), c.on("mouseup", function (e) {
                    e.stopPropagation()
                }), c.on("change", function () {
                    this.checked ? r.setDataAtRowProp(s, u, f.checkedTemplate) : r.setDataAtRowProp(s, u, f.uncheckedTemplate)
                }));
                if (!r.CheckboxRenderer || !r.CheckboxRenderer.beforeKeyDownHookBound) r.CheckboxRenderer = {
                    beforeKeyDownHookBound: !0
                }, r.addHook("beforeKeyDown", function (n) {
                    if (n.keyCode == t.helper.keyCode.SPACE) {
                        var i = r.getSelected(),
                            s, o, u, a = {
                                row: Math.min(i[0], i[2]),
                                col: Math.min(i[1], i[3])
                            },
                            f = {
                                row: Math.max(i[0], i[2]),
                                col: Math.max(i[1], i[3])
                            };
                        for (var l = a.row; l <= f.row; l++)
                            for (var c = f.col; c <= f.col; c++) {
                                s = r.getCell(l, c), u = r.getCellMeta(l, c), o = s.querySelectorAll("input[type=checkbox]");
                                if (o.length > 0 && !u.readOnly) {
                                    n.isImmediatePropagationStopped() || (n.stopImmediatePropagation(), n.preventDefault());
                                    for (var h = 0, p = o.length; h < p; h++) o[h].checked = !o[h].checked, e(o[h]).trigger("change")
                                }
                            }
                    }
                })
            };
            t.CheckboxRenderer = r, t.renderers.CheckboxRenderer = r, t.renderers.registerRenderer("checkbox", r)
        }(n),
        function (e) {
            var t = function (t, n, r, i, s, o, u) {
                e.helper.isNumeric(o) && (typeof u.language != "undefined" && numeral.language(u.language), o = numeral(o).format(u.format || "0"), t.view.wt.wtDom.addClass(n, "htNumeric")), e.renderers.TextRenderer(t, n, r, i, s, o, u)
            };
            e.NumericRenderer = t, e.renderers.NumericRenderer = t, e.renderers.registerRenderer("numeric", t)
        }(n),
        function (e) {
            var t = function (e, t, r, i, s, o, u) {
                n.renderers.TextRenderer.apply(this, arguments), o = t.innerHTML;
                var a, f = u.hashLength || o.length,
                    l = u.hashSymbol || "*";
                for (a = ""; a.split(l).length - 1 < f; a += l);
                e.view.wt.wtDom.fastInnerHTML(t, a)
            };
            e.PasswordRenderer = t, e.renderers.PasswordRenderer = t, e.renderers.registerRenderer("password", t)
        }(n),
        function (e) {
            function t(t, n, r, i, s, o, u) {
                e.renderers.cellDecorator.apply(this, arguments), e.Dom.fastInnerHTML(n, o)
            }
            e.renderers.registerRenderer("html", t), e.renderers.HtmlRenderer = t
        }(n),
        function (e) {
            function t(t) {
                this.instance = t, this.state = e.EditorState.VIRGIN, this._opened = !1, this._closeCallback = null, this.init()
            }
            e.EditorState = {
                VIRGIN: "STATE_VIRGIN",
                EDITING: "STATE_EDITING",
                WAITING: "STATE_WAITING",
                FINISHED: "STATE_FINISHED"
            }, t.prototype._fireCallbacks = function (e) {
                this._closeCallback && (this._closeCallback(e), this._closeCallback = null)
            }, t.prototype.init = function () {}, t.prototype.getValue = function () {
                throw Error("Editor getValue() method unimplemented")
            }, t.prototype.setValue = function (e) {
                throw Error("Editor setValue() method unimplemented")
            }, t.prototype.open = function () {
                throw Error("Editor open() method unimplemented")
            }, t.prototype.close = function () {
                throw Error("Editor close() method unimplemented")
            }, t.prototype.prepare = function (t, n, r, i, s, o) {
                this.TD = i, this.row = t, this.col = n, this.prop = r, this.originalValue = s, this.cellProperties = o, this.state = e.EditorState.VIRGIN
            }, t.prototype.extend = function () {
                function t() {
                    e.apply(this, arguments)
                }

                function n(e, t) {
                    function n() {}
                    return n.prototype = t.prototype, e.prototype = new n, e.prototype.constructor = e, e
                }
                var e = this.constructor;
                return n(t, e)
            }, t.prototype.saveValue = function (e, t) {
                if (t) {
                    var n = this.instance.getSelected();
                    this.instance.populateFromArray(n[0], n[1], e, n[2], n[3], "edit")
                } else this.instance.populateFromArray(this.row, this.col, e, null, null, "edit")
            }, t.prototype.beginEditing = function (t) {
                if (this.state != e.EditorState.VIRGIN) return;
                this.instance.view.scrollViewport({
                    row: this.row,
                    col: this.col
                }), this.instance.view.render(), this.state = e.EditorState.EDITING, t = typeof t == "string" ? t : this.originalValue, this.setValue(e.helper.stringify(t)), this.open(), this._opened = !0, this.focus(), this.instance.view.render()
            }, t.prototype.finishEditing = function (t, n, r) {
                if (r) {
                    var i = this._closeCallback;
                    this._closeCallback = function (e) {
                        i && i(e), r(e)
                    }
                }
                if (this.isWaiting()) return;
                if (this.state == e.EditorState.VIRGIN) {
                    var s = this;
                    setTimeout(function () {
                        s._fireCallbacks(!0)
                    });
                    return
                }
                if (this.state == e.EditorState.EDITING) {
                    if (t) {
                        this.cancelChanges();
                        return
                    }
                    var o = [
                        [String.prototype.trim.call(this.getValue())]
                    ];
                    this.state = e.EditorState.WAITING, this.saveValue(o, n);
                    if (this.instance.getCellValidator(this.cellProperties)) {
                        var s = this;
                        this.instance.addHookOnce("afterValidate", function (t) {
                            s.state = e.EditorState.FINISHED, s.discardEditor(t)
                        })
                    } else this.state = e.EditorState.FINISHED, this.discardEditor(!0)
                }
            }, t.prototype.cancelChanges = function () {
                this.state = e.EditorState.FINISHED, this.discardEditor()
            }, t.prototype.discardEditor = function (t) {
                if (this.state !== e.EditorState.FINISHED) return;
                t === !1 && this.cellProperties.allowInvalid !== !0 ? (this.instance.selectCell(this.row, this.col), this.focus(), this.state = e.EditorState.EDITING, this._fireCallbacks(!1)) : (this.close(), this._opened = !1, this.state = e.EditorState.VIRGIN, this._fireCallbacks(!0))
            }, t.prototype.isOpened = function () {
                return this._opened
            }, t.prototype.isWaiting = function () {
                return this.state === e.EditorState.WAITING
            }, e.editors.BaseEditor = t
        }(n),
        function (t) {
            var n = t.editors.BaseEditor.prototype.extend();
            n.prototype.init = function () {
                this.createElements(), this.bindEvents()
            }, n.prototype.getValue = function () {
                return this.TEXTAREA.value
            }, n.prototype.setValue = function (e) {
                this.TEXTAREA.value = e
            };
            var r = function (n) {
                var r = this,
                    i = r.getActiveEditor(),
                    s = t.helper.keyCode,
                    o = (n.ctrlKey || n.metaKey) && !n.altKey;
                if (n.target !== i.TEXTAREA || n.isImmediatePropagationStopped()) return;
                if (n.keyCode === 17 || n.keyCode === 224 || n.keyCode === 91 || n.keyCode === 93) {
                    n.stopImmediatePropagation();
                    return
                }
                switch (n.keyCode) {
                case s.ARROW_RIGHT:
                    i.wtDom.getCaretPosition(i.TEXTAREA) !== i.TEXTAREA.value.length && n.stopImmediatePropagation();
                    break;
                case s.ARROW_LEFT:
                    i.wtDom.getCaretPosition(i.TEXTAREA) !== 0 && n.stopImmediatePropagation();
                    break;
                case s.ENTER:
                    var u = i.instance.getSelected(),
                        a = u[0] !== u[2] || u[1] !== u[3];
                    if (o && !a || n.altKey) i.isOpened() ? (i.setValue(i.getValue() + "\n"), i.focus()) : i.beginEditing(i.originalValue + "\n"), n.stopImmediatePropagation();
                    n.preventDefault();
                    break;
                case s.A:
                case s.X:
                case s.C:
                case s.V:
                    if (o) {
                        n.stopImmediatePropagation();
                        break
                    };
                case s.BACKSPACE:
                case s.DELETE:
                case s.HOME:
                case s.END:
                    n.stopImmediatePropagation()
                }
            };
            n.prototype.open = function () {
                this.refreshDimensions(), this.instance.addHook("beforeKeyDown", r)
            }, n.prototype.close = function () {
                this.textareaParentStyle.display = "none", document.activeElement === this.TEXTAREA && this.instance.listen(), this.instance.removeHook("beforeKeyDown", r)
            }, n.prototype.focus = function () {
                this.TEXTAREA.focus(), this.wtDom.setCaretPosition(this.TEXTAREA, this.TEXTAREA.value.length)
            }, n.prototype.createElements = function () {
                this.$body = e(document.body), this.wtDom = new A, this.TEXTAREA = document.createElement("TEXTAREA"), this.$textarea = e(this.TEXTAREA), this.wtDom.addClass(this.TEXTAREA, "handsontableInput"), this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, this.TEXTAREA_PARENT = document.createElement("DIV"), this.wtDom.addClass(this.TEXTAREA_PARENT, "handsontableInputHolder"), this.textareaParentStyle = this.TEXTAREA_PARENT.style, this.textareaParentStyle.top = 0, this.textareaParentStyle.left = 0, this.textareaParentStyle.display = "none", this.TEXTAREA_PARENT.appendChild(this.TEXTAREA), this.instance.rootElement[0].appendChild(this.TEXTAREA_PARENT);
                var n = this;
                t.PluginHooks.add("afterRender", function () {
                    n.instance.registerTimeout("refresh_editor_dimensions", function () {
                        n.refreshDimensions()
                    }, 0)
                })
            }, n.prototype.refreshDimensions = function () {
                if (this.state !== t.EditorState.EDITING) return;
                this.TD = this.instance.getCell(this.row, this.col);
                if (!this.TD) return;
                var n = e(this.TD),
                    r = this.wtDom.offset(this.TD),
                    i = this.wtDom.offset(this.instance.rootElement[0]),
                    s = this.instance.rootElement.scrollTop(),
                    o = this.instance.rootElement.scrollLeft(),
                    u = r.top - i.top + s - 1,
                    a = r.left -
                    i.left + o - 1,
                    f = this.instance.getSettings(),
                    l = f.rowHeaders === !1 ? 0 : 1,
                    c = f.colHeaders === !1 ? 0 : 1;
                u < 0 && (u = 0), a < 0 && (a = 0), l > 0 && parseInt(n.css("border-top-width"), 10) > 0 && (u += 1), c > 0 && parseInt(n.css("border-left-width"), 10) > 0 && (a += 1), this.textareaParentStyle.top = u + "px", this.textareaParentStyle.left = a + "px";
                var h = n.width(),
                    p = this.instance.view.maximumVisibleElementWidth(a) - 10,
                    d = n.outerHeight() - 4,
                    v = this.instance.view.maximumVisibleElementHeight(u) - 5;
                parseInt(n.css("border-top-width"), 10) > 0 && (d -= 1), parseInt(n.css("border-left-width"), 10) > 0 && l > 0 && (h -= 1), this.$textarea.autoResize({
                    minHeight: Math.min(d, v),
                    maxHeight: v,
                    minWidth: Math.min(h, p),
                    maxWidth: p,
                    animate: !1,
                    extraSpace: 0
                }), this.textareaParentStyle.display = "block"
            }, n.prototype.bindEvents = function () {
                this.$textarea.on("cut.editor", function (e) {
                    e.stopPropagation()
                }), this.$textarea.on("paste.editor", function (e) {
                    e.stopPropagation()
                })
            }, t.editors.TextEditor = n, t.editors.registerEditor("text", t.editors.TextEditor)
        }(n),
        function (t) {
            var n = t.editors.BaseEditor.prototype.extend();
            n.prototype.beginEditing = function () {
                var t = this.TD.querySelector('input[type="checkbox"]');
                t && e(t).trigger("click")
            }, n.prototype.finishEditing = function () {}, n.prototype.init = function () {}, n.prototype.open = function () {}, n.prototype.close = function () {}, n.prototype.getValue = function () {}, n.prototype.setValue = function () {}, n.prototype.focus = function () {}, t.editors.CheckboxEditor = n, t.editors.registerEditor("checkbox", n)
        }(n),
        function (t) {
            var n = t.editors.TextEditor.prototype.extend();
            n.prototype.init = function () {
                if (!e.datepicker) throw new Error("jQuery UI Datepicker dependency not found. Did you forget to include jquery-ui.custom.js or its substitute?");
                t.editors.TextEditor.prototype.init.apply(this, arguments), this.isCellEdited = !1;
                var n = this;
                this.instance.addHook("afterDestroy", function () {
                    n.destroyElements()
                })
            }, n.prototype.createElements = function () {
                t.editors.TextEditor.prototype.createElements.apply(this, arguments), this.datePicker = document.createElement("DIV"), this.instance.view.wt.wtDom.addClass(this.datePicker, "htDatepickerHolder"), this.datePickerStyle = this.datePicker.style, this.datePickerStyle.position = "absolute", this.datePickerStyle.top = 0, this.datePickerStyle.left = 0, this.datePickerStyle.zIndex = 99, document.body.appendChild(this.datePicker), this.$datePicker = e(this.datePicker);
                var n = this,
                    r = {
                        dateFormat: "yy-mm-dd",
                        showButtonPanel: !0,
                        changeMonth: !0,
                        changeYear: !0,
                        onSelect: function (e) {
                            n.setValue(e), n.finishEditing(!1)
                        }
                    };
                this.$datePicker.datepicker(r), this.$datePicker.on("mousedown", function (e) {
                    e.stopPropagation()
                }), this.hideDatepicker()
            }, n.prototype.destroyElements = function () {
                this.$datePicker.datepicker("destroy"), this.$datePicker.remove()
            }, n.prototype.open = function () {
                t.editors.TextEditor.prototype.open.call(this), this.showDatepicker()
            }, n.prototype.finishEditing = function (e, n) {
                this.hideDatepicker(), t.editors.TextEditor.prototype.finishEditing.apply(this, arguments)
            }, n.prototype.showDatepicker = function () {
                var t = e(this.TD),
                    n = t.offset();
                this.datePickerStyle.top = n.top + t.height() + "px", this.datePickerStyle.left = n.left + "px";
                var r = {
                    defaultDate: this.originalValue || void 0
                };
                e.extend(r, this.cellProperties), this.$datePicker.datepicker("option", r), this.originalValue && this.$datePicker.datepicker("setDate", this.originalValue), this.datePickerStyle.display = "block"
            }, n.prototype.hideDatepicker = function () {
                this.datePickerStyle.display = "none"
            }, t.editors.DateEditor = n, t.editors.registerEditor("date", n)
        }(n),
        function (t) {
            var n = t.editors.TextEditor.prototype.extend();
            n.prototype.createElements = function () {
                t.editors.TextEditor.prototype.createElements.apply(this, arguments);
                var n = document.createElement("DIV");
                n.className = "handsontableEditor", this.TEXTAREA_PARENT.appendChild(n), this.$htContainer = e(n), this.$htContainer.handsontable()
            }, n.prototype.prepare = function (n, r, i, s, o, u) {
                t.editors.TextEditor.prototype.prepare.apply(this, arguments);
                var a = this,
                    f = {
                        startRows: 0,
                        startCols: 0,
                        minRows: 0,
                        minCols: 0,
                        className: "listbox",
                        copyPaste: !1,
                        cells: function () {
                            return {
                                readOnly: !0
                            }
                        },
                        fillHandle: !1,
                        afterOnCellMouseDown: function () {
                            var e = this.getValue();
                            e !== void 0 && a.setValue(e), a.instance.destroyEditor()
                        },
                        beforeOnKeyDown: function (e) {
                            var n = this;
                            switch (e.keyCode) {
                            case t.helper.keyCode.ESCAPE:
                                a.instance.destroyEditor(!0), e.stopImmediatePropagation(), e.preventDefault();
                                break;
                            case t.helper.keyCode.ENTER:
                                var r = n.getSelected(),
                                    i = this.getDataAtCell(r[0], r[1]);
                                i !== void 0 && a.setValue(i), a.instance.destroyEditor();
                                break;
                            case t.helper.keyCode.ARROW_UP:
                                n.getSelected() && n.getSelected()[0] == 0 && !a.cellProperties.strict && (n.deselectCell(), a.instance.listen(), a.focus(), e.preventDefault(), e.stopImmediatePropagation())
                            }
                        }
                    };
                this.cellProperties.handsontable && (f = e.extend(f, u.handsontable)), this.$htContainer.handsontable("destroy"), this.$htContainer.handsontable(f)
            };
            var r = function (e) {
                if (e.isImmediatePropagationStopped()) return;
                var n = this.getActiveEditor(),
                    r = n.$htContainer.handsontable("getInstance");
                if (e.keyCode == t.helper.keyCode.ARROW_DOWN) {
                    if (!r.getSelected()) r.selectCell(0, 0);
                    else {
                        var i = r.getSelected()[0],
                            s = i < r.countRows() - 1 ? i + 1 : i;
                        r.selectCell(s, 0)
                    }
                    e.preventDefault(), e.stopImmediatePropagation()
                }
            };
            n.prototype.open = function () {
                this.instance.addHook("beforeKeyDown", r), t.editors.TextEditor.prototype.open.apply(this, arguments), this.$htContainer.handsontable("render"), this.cellProperties.strict ? (this.$htContainer.handsontable("selectCell", 0, 0), this.$textarea[0].style.visibility = "hidden") : (this.$htContainer.handsontable("deselectCell"), this.$textarea[0].style.visibility = "visible"), this.wtDom.setCaretPosition(this.$textarea[0], 0, this.$textarea[0].value.length)
            }, n.prototype.close = function () {
                this.instance.removeHook("beforeKeyDown", r), this.instance.listen(), t.editors.TextEditor.prototype.close.apply(this, arguments)
            }, n.prototype.focus = function () {
                this.instance.listen(), t.editors.TextEditor.prototype.focus.apply(this, arguments)
            }, n.prototype.beginEditing = function (e) {
                var n = this.instance.getSettings().onBeginEditing;
                if (n && n() === !1) return;
                t.editors.TextEditor.prototype.beginEditing.apply(this, arguments)
            }, n.prototype.finishEditing = function (e, n) {
                this.$htContainer.handsontable("isListening") && this.instance.listen();
                if (this.$htContainer.handsontable("getSelected")) {
                    var r = this.$htContainer.handsontable("getInstance").getValue();
                    r !== void 0 && this.setValue(r)
                }
                return t.editors.TextEditor.prototype.finishEditing.apply(this, arguments)
            }, t.editors.HandsontableEditor = n, t.editors.registerEditor("handsontable", n)
        }(n),
        function (e) {
            var t = e.editors.HandsontableEditor.prototype.extend();
            t.prototype.init = function () {
                e.editors.HandsontableEditor.prototype.init.apply(this, arguments), this.query = null, this.choices = []
            }, t.prototype.createElements = function () {
                e.editors.HandsontableEditor.prototype.createElements.apply(this, arguments), this.$htContainer.addClass("autocompleteEditor")
            }, t.prototype.bindEvents = function () {
                var t = this;
                this.$textarea.on("keydown.autocompleteEditor", function (n) {
                    !e.helper.isMetaKey(n.keyCode) || [e.helper.keyCode.BACKSPACE, e.helper.keyCode.DELETE].indexOf(n.keyCode) != -1 ? setTimeout(function () {
                        t.queryChoices(t.$textarea.val())
                    }) : n.keyCode == e.helper.keyCode.ENTER && t.cellProperties.strict !== !0 && t.$htContainer.handsontable("deselectCell")
                }), this.$htContainer.on("mouseleave", function () {
                    t.cellProperties.strict === !0 && t.highlightBestMatchingChoice()
                }), this.$htContainer.on("mouseenter", function () {
                    t.$htContainer.handsontable("deselectCell")
                }), e.editors.HandsontableEditor.prototype.bindEvents.apply(this, arguments)
            };
            var n;
            t.prototype.open = function () {
                e.editors.HandsontableEditor.prototype.open.apply(this, arguments), this.$textarea[0].style.visibility = "visible", this.focus();
                var t = this.$htContainer.handsontable("getInstance"),
                    r = this;
                t.updateSettings({
                    colWidths: [this.wtDom.outerWidth(this.TEXTAREA) - 2],
                    afterRenderer: function (e, t, n, i, s) {
                        var o = this.getCellMeta(t, n).filteringCaseSensitive === !0,
                            u = o ? s.indexOf(this.query) : s.toLowerCase().indexOf(r.query.toLowerCase());
                        if (u != -1) {
                            var a = s.substr(u, r.query.length);
                            e.innerHTML = s.replace(a, "<strong>" + a + "</strong>")
                        }
                    }
                }), n = function (t) {
                    var n = this;
                    t.keyCode == e.helper.keyCode.ARROW_UP && n.getSelected() && n.getSelected()[0] == 0 && (parent.cellProperties.strict || n.deselectCell(), parent.instance.listen(), parent.focus(), t.preventDefault(), t.stopImmediatePropagation())
                }, t.addHook("beforeKeyDown", n), this.queryChoices(this.TEXTAREA.value)
            }, t.prototype.close = function () {
                this.$htContainer.handsontable("getInstance").removeHook("beforeKeyDown", n), e.editors.HandsontableEditor.prototype.close.apply(this, arguments)
            }, t.prototype.queryChoices = function (t) {
                this.query = t;
                if (typeof this.cellProperties.source == "function") {
                    var n = this;
                    this.cellProperties.source(t, function (e) {
                        n.updateChoicesList(e)
                    })
                } else if (e.helper.isArray(this.cellProperties.source)) {
                    var r;
                    if (!t || this.cellProperties.filter === !1) r = this.cellProperties.source;
                    else {
                        var i = this.cellProperties.filteringCaseSensitive === !0,
                            s = t.toLowerCase();
                        r = this.cellProperties.source.filter(function (e) {
                            return i ? e.indexOf(t) != -1 : e.toLowerCase().indexOf(s) != -1
                        })
                    }
                    this.updateChoicesList(r)
                } else this.updateChoicesList([])
            }, t.prototype.updateChoicesList = function (t) {
                this.choices = t, this.$htContainer.handsontable("loadData", e.helper.pivot([t])), this.cellProperties.strict === !0 && this.highlightBestMatchingChoice(), this.focus()
            }, t.prototype.highlightBestMatchingChoice = function () {
                var e = this.findBestMatchingChoice();
                typeof e == "undefined" && this.cellProperties.allowInvalid === !1 && (e = 0), typeof e == "undefined" ? this.$htContainer.handsontable("deselectCell") : this.$htContainer.handsontable("selectCell", e, 0)
            }, t.prototype.findBestMatchingChoice = function () {
                var e = {},
                    t = this.getValue().length,
                    n, r, i;
                for (var s = 0, o = this.choices.length; s < o; s++) {
                    n = this.choices[s], t > 0 ? r = n.indexOf(this.getValue()) : r = n === this.getValue() ? 0 : -1;
                    if (r == -1) continue;
                    i = n.length - r - t;
                    if (typeof e.indexOfValue == "undefined" || e.indexOfValue > r || e.indexOfValue == r && e.charsLeft > i) e.indexOfValue = r, e.charsLeft = i, e.index = s
                }
                return e.index
            }, e.editors.AutocompleteEditor = t, e.editors.registerEditor("autocomplete", t)
        }(n),
        function (t) {
            var n = t.editors.TextEditor.prototype.extend(),
                r = new A;
            n.prototype.createElements = function () {
                t.editors.TextEditor.prototype.createElements.apply(this, arguments), this.TEXTAREA = document.createElement("input"), this.TEXTAREA.setAttribute("type", "password"), this.TEXTAREA.className = "handsontableInput", this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, this.$textarea = e(this.TEXTAREA), r.empty(this.TEXTAREA_PARENT), this.TEXTAREA_PARENT.appendChild(this.TEXTAREA)
            }, t.editors.PasswordEditor = n, t.editors.registerEditor("password", n)
        }(n),
        function (e) {
            var t = e.editors.BaseEditor.prototype.extend();
            t.prototype.init = function () {
                this.select = document.createElement("SELECT"), e.Dom.addClass(this.select, "htSelectEditor"), this.select.style.display = "none", this.instance.rootElement[0].appendChild(this.select)
            }, t.prototype.prepare = function () {
                e.editors.BaseEditor.prototype.prepare.apply(this, arguments);
                var t = this.cellProperties.selectOptions,
                    n;
                typeof t == "function" ? n = this.prepareOptions(t(this.row, this.col, this.prop)) : n = this.prepareOptions(t), e.Dom.empty(this.select);
                for (var r in n)
                    if (n.hasOwnProperty(r)) {
                        var i = document.createElement("OPTION");
                        i.value = r, e.Dom.fastInnerHTML(i, n[r]), this.select.appendChild(i)
                    }
            }, t.prototype.prepareOptions = function (t) {
                var n = {};
                if (e.helper.isArray(t))
                    for (var r = 0, i = t.length; r < i; r++) n[t[r]] = t[r];
                else typeof t == "object" && (n = t);
                return n
            }, t.prototype.getValue = function () {
                return this.select.value
            }, t.prototype.setValue = function (e) {
                this.select.value = e
            };
            var n = function (t) {
                var n = this,
                    r = n.getActiveEditor();
                switch (t.keyCode) {
                case e.helper.keyCode.ARROW_UP:
                    var i = r.select.find("option:selected").prev();
                    i.length == 1 && i.prop("selected", !0), t.stopImmediatePropagation(), t.preventDefault();
                    break;
                case e.helper.keyCode.ARROW_DOWN:
                    var s = r.select.find("option:selected").next();
                    s.length == 1 && s.prop("selected", !0), t.stopImmediatePropagation(), t.preventDefault()
                }
            };
            t.prototype.open = function () {
                var t = e.Dom.outerWidth(this.TD),
                    r = e.Dom.outerHeight(this.TD),
                    i = e.Dom.offset(this.instance.rootElement[0]),
                    s = e.Dom.offset(this.TD);
                this.select.style.height = r + "px", this.select.style.minWidth = t + "px", this.select.style.top = s.top - i.top + "px", this.select.style.left = s.left - i.left - 2 + "px", this.select.style.display = "", this.instance.addHook("beforeKeyDown", n)
            }, t.prototype.close = function () {
                this.select.style.display = "none", this.instance.removeHook("beforeKeyDown", n)
            }, t.prototype.focus = function () {
                this.select.focus()
            }, e.editors.SelectEditor = t, e.editors.registerEditor("select", t)
        }(n),
        function (e) {
            var t = e.editors.AutocompleteEditor.prototype.extend();
            t.prototype.prepare = function () {
                e.editors.AutocompleteEditor.prototype.prepare.apply(this, arguments), this.cellProperties.filter = !1, this.cellProperties.strict = !0
            }, e.editors.DropdownEditor = t, e.editors.registerEditor("dropdown", t)
        }(n), n.NumericValidator = function (e, t) {
            e === null && (e = ""), t(/^-?\d*\.?\d*$/.test(e))
        };
    var i = function (e, t) {
        var n = e,
            r = typeof n == "string" ? n.toLowerCase() : null;
        return function (e) {
            var i = !1;
            for (var s = 0, o = e.length; s < o; s++) {
                if (n === e[s]) {
                    i = !0;
                    break
                }
                if (r === e[s].toLowerCase()) {
                    i = !0;
                    break
                }
            }
            t(i)
        }
    };
    n.AutocompleteValidator = function (e, t) {
            this.strict && this.source ? typeof this.source == "function" ? this.source(e, i(e, t)) : i(e, t)(this.source) : t(!0)
        }, n.AutocompleteCell = {
            editor: n.editors.AutocompleteEditor,
            renderer: n.renderers.AutocompleteRenderer,
            validator: n.AutocompleteValidator
        }, n.CheckboxCell = {
            editor: n.editors.CheckboxEditor,
            renderer: n.renderers.CheckboxRenderer
        }, n.TextCell = {
            editor: n.editors.TextEditor,
            renderer: n.renderers.TextRenderer
        }, n.NumericCell = {
            editor: n.editors.TextEditor,
            renderer: n.renderers.NumericRenderer,
            validator: n.NumericValidator,
            dataType: "number"
        }, n.DateCell = {
            editor: n.editors.DateEditor,
            renderer: n.renderers.AutocompleteRenderer
        }, n.HandsontableCell = {
            editor: n.editors.HandsontableEditor,
            renderer: n.renderers.AutocompleteRenderer
        }, n.PasswordCell = {
            editor: n.editors.PasswordEditor,
            renderer: n.renderers.PasswordRenderer,
            copyable: !1
        }, n.DropdownCell = {
            editor: n.editors.DropdownEditor,
            renderer: n.renderers.AutocompleteRenderer,
            validator: n.AutocompleteValidator
        }, n.cellTypes = {
            text: n.TextCell,
            date: n.DateCell,
            numeric: n.NumericCell,
            checkbox: n.CheckboxCell,
            autocomplete: n.AutocompleteCell,
            handsontable: n.HandsontableCell,
            password: n.PasswordCell,
            dropdown: n.DropdownCell
        }, n.cellLookup = {
            validator: {
                numeric: n.NumericValidator,
                autocomplete: n.AutocompleteValidator
            }
        },
        function (e) {
            function t(r) {
                return this.filter(t.resizableFilterSelector).each(function () {
                    new n(e(this), r)
                }), this
            }

            function n(n, r) {
                if (this.clones) return;
                this.config = e.extend({}, t.defaults, r), this.el = n, this.nodeName = n[0].nodeName.toLowerCase(), this.previousScrollTop = null, r.maxWidth === "original" && (r.maxWidth = n.width()), r.minWidth === "original" && (r.minWidth = n.width()), r.maxHeight === "original" && (r.maxHeight = n.height()), r.minHeight === "original" && (r.minHeight = n.height()), this.nodeName === "textarea" && n.css({
                    resize: "none",
                    overflowY: "none"
                }), n.data("AutoResizer", this), this.createClone(), this.injectClone(), this.bind()
            }
            t.defaults = {
                onResize: function () {},
                animate: {
                    duration: 200,
                    complete: function () {}
                },
                extraSpace: 50,
                minHeight: "original",
                maxHeight: 500,
                minWidth: "original",
                maxWidth: 500
            }, t.cloneCSSProperties = ["lineHeight", "textDecoration", "letterSpacing", "fontSize", "fontFamily", "fontStyle", "fontWeight", "textTransform", "textAlign", "direction", "wordSpacing", "fontSizeAdjust", "padding"], t.cloneCSSValues = {
                position: "absolute",
                top: -9999,
                left: -9999,
                opacity: 0,
                overflow: "hidden",
                overflowX: "hidden",
                overflowY: "hidden",
                border: "1px solid black",
                padding: "0.49em"
            }, t.resizableFilterSelector = "textarea,input:not(input[type]),input[type=text],input[type=password]", t.AutoResizer = n, e.fn.autoResize = t, n.prototype = {
                bind: function () {
                    var t = e.proxy(function () {
                        return this.check(), !0
                    }, this);
                    this.unbind(), this.el.bind("keyup.autoResize", t).bind("change.autoResize", t), this.check(null, !0)
                },
                unbind: function () {
                    this.el.unbind(".autoResize")
                },
                createClone: function () {
                    var n = this.el,
                        r = this,
                        i = this.config;
                    this.clones = e();
                    if (i.minHeight !== "original" || i.maxHeight !== "original") this.hClone = n.clone().height("auto"), this.clones = this.clones.add(this.hClone);
                    if (i.minWidth !== "original" || i.maxWidth !== "original") this.wClone = e("<div/>").width("auto").css({
                        whiteSpace: "nowrap",
                        "float": "left"
                    }), this.clones = this.clones.add(this.wClone);
                    e.each(t.cloneCSSProperties, function (e, t) {
                        r.clones.css(t, n.css(t))
                    }), this.clones.removeAttr("name").removeAttr("id").attr("tabIndex", -1).css(t.cloneCSSValues).css("overflowY", "scroll")
                },
                check: function (e, t) {
                    var n = this.config,
                        r = this.wClone,
                        i = this.hClone,
                        s = this.el,
                        o = s.val();
                    if (r) {
                        r.text(o);
                        var u = r.outerWidth(),
                            a = u + n.extraSpace >= n.minWidth ? u + n.extraSpace : n.minWidth,
                            f = s.width();
                        a = Math.min(a, n.maxWidth);
                        if (a < f && a >= n.minWidth || a >= n.minWidth && a <= n.maxWidth) n.onResize.call(s), s.scrollLeft(0), n.animate && !t ? s.stop(1, 1).animate({
                            width: a
                        }, n.animate) : s.width(a)
                    }
                    if (i) {
                        a && i.width(a), i.height(0).val(o).scrollTop(1e4);
                        var l = i[0].scrollTop + n.extraSpace;
                        if (this.previousScrollTop === l) return;
                        this.previousScrollTop = l, l >= n.maxHeight && (l = n.maxHeight), l < n.minHeight && (l = n.minHeight), l == n.maxHeight && a == n.maxWidth ? s.css("overflowY", "scroll") : s.css("overflowY", "hidden"), n.onResize.call(s), n.animate && !t ? s.stop(1, 1).animate({
                            height: l
                        }, n.animate) : s.height(l)
                    }
                },
                destroy: function () {
                    this.unbind(), this.el.removeData("AutoResizer"), this.clones.remove(), delete this.el, delete this.hClone, delete this.wClone, delete this.clones
                },
                injectClone: function () {
                    (t.cloneContainer || (t.cloneContainer = e("<arclones/>").appendTo("body"))).empty().append(this.clones)
                }
            }
        }(jQuery),
        function (e) {
            function t(e) {
                return e.split('"').length - 1
            }
            e.SheetClip = {
                parse: function (e) {
                    var n, r, i, s = [],
                        o = 0,
                        u, a, f, l;
                    i = e.split("\n"), i.length > 1 && i[i.length - 1] === "" && i.pop();
                    for (n = 0, r = i.length; n < r; n += 1) {
                        i[n] = i[n].split("	"), i[n].length === 1 && (i[n] = i[n][0].split(/\s?,\s?/)), i[n].length === 1 && (i[n] = i[n][0].split(/\s+/));
                        for (u = 0, a = i[n].length; u < a; u += 1) s[o] || (s[o] = []), f && u === 0 ? (l = s[o].length - 1, s[o][l] = s[o][l] + "\n" + i[n][0], f && t(i[n][0]) & 1 && (f = !1, s[o][l] = s[o][l].substring(0, s[o][l].length - 1).replace(/""/g, '"'))) : u === a - 1 && i[n][u].indexOf('"') === 0 ? (s[o].push(i[n][u].substring(1).replace(/""/g, '"')), f = !0) : (s[o].push(i[n][u].replace(/""/g, '"')), f = !1);
                        f || (o += 1)
                    }
                    return s
                },
                stringify: function (e) {
                    var t, n, r, i, s = "",
                        o;
                    for (t = 0, n = e.length; t < n; t += 1) {
                        for (r = 0, i = e[t].length; r < i; r += 1) r > 0 && (s += "	"), o = e[t][r], typeof o == "string" ? o.indexOf("\n") > -1 ? s += '"' + o.replace(/"/g, '""') + '"' : s += o : o === null || o === void 0 ? s += "" : s += o;
                        s += "\n"
                    }
                    return s
                }
            }
        }(t);
    var s = function () {
        var e;
        return {
            getInstance: function () {
                return e ? e.hasBeenDestroyed() && e.init() : e = new o, e.refCounter++, e
            }
        }
    }();
    o.prototype.init = function () {
        var e = this,
            t, n;
        this.copyCallbacks = [], this.cutCallbacks = [], this.pasteCallbacks = [], this.listenerElement = document.documentElement, n = document.body, document.getElementById("CopyPasteDiv") ? (this.elDiv = document.getElementById("CopyPasteDiv"), this.elTextarea = this.elDiv.firstChild) : (this.elDiv = document.createElement("DIV"), this.elDiv.id = "CopyPasteDiv", t = this.elDiv.style, t.position = "fixed", t.top = 0, t.left = 0, n.appendChild(this.elDiv), this.elTextarea = document.createElement("TEXTAREA"), this.elTextarea.className = "copyPaste", t = this.elTextarea.style, t.width = "1px", t.height = "1px", this.elDiv.appendChild(this.elTextarea), typeof t.opacity != "undefined" && (t.opacity = 0)), this.keydownListener = function (t) {
            var n = !1;
            t.metaKey ? n = !0 : t.ctrlKey && navigator.userAgent.indexOf("Mac") === -1 && (n = !0);
            if (n) {
                if (document.activeElement !== e.elTextarea && (e.getSelectionText() != "" || ["INPUT", "SELECT", "TEXTAREA"].indexOf(document.activeElement.nodeName) != -1)) return;
                e.selectNodeText(e.elTextarea), setTimeout(function () {
                    e.selectNodeText(e.elTextarea)
                }, 0)
            }
            n && (t.keyCode === 67 || t.keyCode === 86 || t.keyCode === 88) && (t.keyCode === 88 ? setTimeout(function () {
                e.triggerCut(t)
            }, 0) : t.keyCode === 86 && setTimeout(function () {
                e.triggerPaste(t)
            }, 0))
        }, this._bindEvent(this.listenerElement, "keydown", this.keydownListener)
    }, o.prototype.selectNodeText = function (e) {
        e.select()
    }, o.prototype.getSelectionText = function () {
        var e = "";
        return t.getSelection ? e = t.getSelection().toString() : document.selection && document.selection.type != "Control" && (e = document.selection.createRange().text), e
    }, o.prototype.copyable = function (e) {
        if (typeof e != "string" && e.toString === void 0) throw new Error("copyable requires string parameter");
        this.elTextarea.value = e
    }, o.prototype.onCut = function (e) {
        this.cutCallbacks.push(e)
    }, o.prototype.onPaste = function (e) {
        this.pasteCallbacks.push(e)
    }, o.prototype.removeCallback = function (e) {
        var t, n;
        for (t = 0, n = this.copyCallbacks.length; t < n; t++)
            if (this.copyCallbacks[t] === e) return this.copyCallbacks.splice(t, 1), !0;
        for (t = 0, n = this.cutCallbacks.length; t < n; t++)
            if (this.cutCallbacks[t] === e) return this.cutCallbacks.splice(t, 1), !0;
        for (t = 0, n = this.pasteCallbacks.length; t < n; t++)
            if (this.pasteCallbacks[t] === e) return this.pasteCallbacks.splice(t, 1), !0;
        return !1
    }, o.prototype.triggerCut = function (e) {
        var t = this;
        t.cutCallbacks && setTimeout(function () {
            for (var n = 0, r = t.cutCallbacks.length; n < r; n++) t.cutCallbacks[n](e)
        }, 50)
    }, o.prototype.triggerPaste = function (e, t) {
        var n = this;
        n.pasteCallbacks && setTimeout(function () {
            var r = (t || n.elTextarea.value).replace(/\n$/, "");
            for (var i = 0, s = n.pasteCallbacks.length; i < s; i++) n.pasteCallbacks[i](r, e)
        }, 50)
    }, o.prototype.destroy = function () {
        !this.hasBeenDestroyed() && --this.refCounter == 0 && (this.elDiv && this.elDiv.parentNode && this.elDiv.parentNode.removeChild(this.elDiv), this._unbindEvent(this.listenerElement, "keydown", this.keydownListener))
    }, o.prototype.hasBeenDestroyed = function () {
        return !this.refCounter
    }, o.prototype._bindEvent = function () {
        return t.jQuery ? function (t, n, r) {
            e(t).on(n + ".copypaste", r)
        } : function (e, t, n) {
            e.addEventListener(t, n, !1)
        }
    }(), o.prototype._unbindEvent = function () {
        return t.jQuery ? function (t, n, r) {
            e(t).off(n + ".copypaste", r)
        } : function (e, t, n) {
            e.removeEventListener(t, n, !1)
        }
    }();
    var u;
    (function (e) {
        function s(e) {
            return e.indexOf("/") === -1 && e.indexOf("~") === -1 ? e : e.replace(/~/g, "~0").replace(/\//g, "~1")
        }

        function o(e, t) {
            var n;
            for (var r in e)
                if (e.hasOwnProperty(r)) {
                    if (e[r] === t) return s(r) + "/";
                    if (typeof e[r] == "object") {
                        n = o(e[r], t);
                        if (n != "") return s(r) + "/" + n
                    }
                }
            return ""
        }

        function u(e, t) {
            if (e === t) return "/";
            var n = o(e, t);
            if (n === "") throw new Error("Object not found in root");
            return "/" + n
        }

        function c(e) {
            for (var t = 0, n = a.length; t < n; t++)
                if (a[t].obj === e) return a[t]
        }

        function h(e, t) {
            for (var n = 0, r = e.observers.length; n < r; n++)
                if (e.observers[n].callback === t) return e.observers[n].observer
        }

        function p(e, t) {
            for (var n = 0, r = e.observers.length; n < r; n++)
                if (e.observers[n].observer === t) {
                    e.observers.splice(n, 1);
                    return
                }
        }

        function d(e, t) {
            y(t), Object.observe ? g(t, e) : clearTimeout(t.next);
            var n = c(e);
            p(n, t)
        }

        function v(e, n) {
            var r = [],
                s = e,
                o, p = c(e);
            p ? o = h(p, n) : (p = new f(e), a.push(p));
            if (o) return o;
            if (Object.observe) o = function (t) {
                g(o, e), m(o, e);
                var a = 0,
                    f = t.length;
                while (a < f) {
                    if ((t[a].name !== "length" || !E(t[a].object)) && t[a].name !== "__Jasmine_been_here_before__") {
                        var l = t[a].type;
                        switch (l) {
                        case "new":
                            l = "add";
                            break;
                        case "deleted":
                            l = "delete";
                            break;
                        case "updated":
                            l = "update"
                        }
                        i[l].call(t[a], r, u(s, t[a].object))
                    }
                    a++
                }
                r && n && n(r), o.patches = r, r = []
            };
            else {
                o = {}, p.value = JSON.parse(JSON.stringify(e));
                if (n) {
                    o.callback = n, o.next = null;
                    var d = this.intervals || [100, 1e3, 1e4, 6e4],
                        v = 0,
                        b = function () {
                            y(o)
                        },
                        w = function () {
                            clearTimeout(o.next), o.next = setTimeout(function () {
                                b(), v = 0, o.next = setTimeout(S, d[v++])
                            }, 0)
                        },
                        S = function () {
                            b(), v == d.length && (v = d.length - 1), o.next = setTimeout(S, d[v++])
                        };
                    typeof t != "undefined" && (t.addEventListener ? (t.addEventListener("mousedown", w), t.addEventListener("mouseup", w), t.addEventListener("keydown", w)) : (t.attachEvent("onmousedown", w), t.attachEvent("onmouseup", w), t.attachEvent("onkeydown", w))), o.next = setTimeout(S, d[v++])
                }
            }
            return o.patches = r, o.object = e, p.observers.push(new l(n, o)), m(o, e)
        }

        function m(e, t) {
            if (Object.observe) {
                Object.observe(t, e);
                for (var n in t)
                    if (t.hasOwnProperty(n)) {
                        var r = t[n];
                        r && typeof r == "object" && m(e, r)
                    }
            }
            return e
        }

        function g(e, t) {
            if (Object.observe) {
                Object.unobserve(t, e);
                for (var n in t)
                    if (t.hasOwnProperty(n)) {
                        var r = t[n];
                        r && typeof r == "object" && g(e, r)
                    }
            }
            return e
        }

        function y(e) {
            if (Object.observe) Object.deliverChangeRecords(e);
            else {
                var t;
                for (var n = 0, r = a.length; n < r; n++)
                    if (a[n].obj === e.object) {
                        t = a[n];
                        break
                    }
                w(t.value, e.object, e.patches, "")
            }
            var i = e.patches;
            return i.length > 0 && (e.patches = [], e.callback && e.callback(i)), i
        }

        function w(e, t, n, r) {
            var i = b(t),
                o = b(e),
                u = !1,
                a = !1;
            for (var f = o.length - 1; f >= 0; f--) {
                var l = o[f],
                    c = e[l];
                if (t.hasOwnProperty(l)) {
                    var h = t[l];
                    c instanceof Object ? w(c, h, n, r + "/" + s(l)) : c != h && (u = !0, n.push({
                        op: "replace",
                        path: r + "/" + s(l),
                        value: h
                    }), e[l] = h)
                } else n.push({
                    op: "remove",
                    path: r + "/" + s(l)
                }), delete e[l], a = !0
            }
            if (!a && i.length == o.length) return;
            for (var f = 0; f < i.length; f++) {
                var l = i[f];
                e.hasOwnProperty(l) || (n.push({
                    op: "add",
                    path: r + "/" + s(l),
                    value: t[l]
                }), e[l] = JSON.parse(JSON.stringify(t[l])))
            }
        }

        function S(e, t) {
            var i = !1,
                s = 0,
                o = t.length,
                u;
            while (s < o) {
                u = t[s];
                var a = u.path.split("/"),
                    f = e,
                    l = 1,
                    c = a.length;
                for (;;)
                    if (E(f)) {
                        var h = parseInt(a[l], 10);
                        l++;
                        if (l >= c) {
                            i = r[u.op].call(u, f, h, e);
                            break
                        }
                        f = f[h]
                    } else {
                        var p = a[l];
                        p.indexOf("~") != -1 && (p = p.replace(/~1/g, "/").replace(/~0/g, "~")), l++;
                        if (l >= c) {
                            i = n[u.op].call(u, f, p, e);
                            break
                        }
                        f = f[p]
                    }
                s++
            }
            return i
        }
        var n = {
                add: function (e, t) {
                    return e[t] = this.value, !0
                },
                remove: function (e, t) {
                    return delete e[t], !0
                },
                replace: function (e, t) {
                    return e[t] = this.value, !0
                },
                move: function (e, t, n) {
                    var r = {
                        op: "_get",
                        path: this.from
                    };
                    return S(n, [r]), S(n, [{
                        op: "remove",
                        path: this.from
                    }]), S(n, [{
                        op: "add",
                        path: this.path,
                        value: r.value
                    }]), !0
                },
                copy: function (e, t, n) {
                    var r = {
                        op: "_get",
                        path: this.from
                    };
                    return S(n, [r]), S(n, [{
                        op: "add",
                        path: this.path,
                        value: r.value
                    }]), !0
                },
                test: function (e, t) {
                    return JSON.stringify(e[t]) === JSON.stringify(this.value)
                },
                _get: function (e, t) {
                    this.value = e[t]
                }
            },
            r = {
                add: function (e, t) {
                    return e.splice(t, 0, this.value), !0
                },
                remove: function (e, t) {
                    return e.splice(t, 1), !0
                },
                replace: function (e, t) {
                    return e[t] = this.value, !0
                },
                move: n.move,
                copy: n.copy,
                test: n.test,
                _get: n._get
            },
            i = {
                add: function (e, t) {
                    var n = {
                        op: "add",
                        path: t + s(this.name),
                        value: this.object[this.name]
                    };
                    e.push(n)
                },
                "delete": function (e, t) {
                    var n = {
                        op: "remove",
                        path: t + s(this.name)
                    };
                    e.push(n)
                },
                update: function (e, t) {
                    var n = {
                        op: "replace",
                        path: t + s(this.name),
                        value: this.object[this.name]
                    };
                    e.push(n)
                }
            },
            a = [];
        e.intervals;
        var f = function () {
                function e(e) {
                    this.observers = [], this.obj = e
                }
                return e
            }(),
            l = function () {
                function e(e, t) {
                    this.callback = e, this.observer = t
                }
                return e
            }();
        e.unobserve = d, e.observe = v, e.generate = y;
        var b;
        Object.keys ? b = Object.keys : b = function (e) {
            var t = [];
            for (var n in e) e.hasOwnProperty(n) && t.push(n);
            return t
        };
        var E;
        Array.isArray ? E = Array.isArray : E = function (e) {
            return e.push && typeof e.length == "number"
        }, e.apply = S
    })(u || (u = {})), typeof exports != "undefined" && (exports.apply = u.apply, exports.observe = u.observe, exports.unobserve = u.unobserve, exports.generate = u.generate), n.PluginHookClass = function () {
            function r() {
                this.hooks = e(), this.legacy = t
            }
            var e = function () {
                    return {
                        beforeInitWalkontable: [],
                        beforeInit: [],
                        beforeRender: [],
                        beforeChange: [],
                        beforeRemoveCol: [],
                        beforeRemoveRow: [],
                        beforeValidate: [],
                        beforeGet: [],
                        beforeSet: [],
                        beforeGetCellMeta: [],
                        beforeAutofill: [],
                        beforeKeyDown: [],
                        beforeColumnSort: [],
                        afterInit: [],
                        afterLoadData: [],
                        afterUpdateSettings: [],
                        afterRender: [],
                        afterRenderer: [],
                        afterChange: [],
                        afterValidate: [],
                        afterGetCellMeta: [],
                        afterGetColHeader: [],
                        afterGetColWidth: [],
                        afterDestroy: [],
                        afterRemoveRow: [],
                        afterCreateRow: [],
                        afterRemoveCol: [],
                        afterCreateCol: [],
                        afterColumnResize: [],
                        afterColumnMove: [],
                        afterColumnSort: [],
                        afterDeselect: [],
                        afterSelection: [],
                        afterSelectionByProp: [],
                        afterSelectionEnd: [],
                        afterSelectionEndByProp: [],
                        afterCopyLimit: [],
                        afterOnCellMouseDown: [],
                        afterOnCellMouseOver: [],
                        afterOnCellCornerMouseDown: [],
                        afterScrollVertically: [],
                        afterScrollHorizontally: [],
                        modifyCol: []
                    }
                },
                t = {
                    onBeforeChange: "beforeChange",
                    onChange: "afterChange",
                    onCreateRow: "afterCreateRow",
                    onCreateCol: "afterCreateCol",
                    onSelection: "afterSelection",
                    onCopyLimit: "afterCopyLimit",
                    onSelectionEnd: "afterSelectionEnd",
                    onSelectionByProp: "afterSelectionByProp",
                    onSelectionEndByProp: "afterSelectionEndByProp"
                };
            return r.prototype.add = function (e, r) {
                if (n.helper.isArray(r))
                    for (var i = 0, s = r.length; i < s; i++) this.add(e, r[i]);
                else e in t && (e = t[e]), typeof this.hooks[e] == "undefined" && (this.hooks[e] = []), this.hooks[e].indexOf(r) == -1 && this.hooks[e].push(r);
                return this
            }, r.prototype.once = function (e, t) {
                if (n.helper.isArray(t))
                    for (var r = 0, i = t.length; r < i; r++) t[r].runOnce = !0, this.add(e, t[r]);
                else t.runOnce = !0, this.add(e, t)
            }, r.prototype.remove = function (e, n) {
                var r = !1;
                e in t && (e = t[e]);
                if (typeof this.hooks[e] != "undefined")
                    for (var i = 0, s = this.hooks[e].length; i < s; i++)
                        if (this.hooks[e][i] == n) {
                            delete this.hooks[e][i].runOnce, this.hooks[e].splice(i, 1), r = !0;
                            break
                        }
                return r
            }, r.prototype.run = function (e, n, r, i, s, o, u) {
                n in t && (n = t[n]);
                if (typeof this.hooks[n] != "undefined") {
                    var a = Array.prototype.slice.call(this.hooks[n]);
                    for (var f = 0, l = a.length; f < l; f++) a[f].call(e, r, i, s, o, u), a[f].runOnce && this.remove(n, a[f])
                }
            }, r.prototype.execute = function (e, n, r, i, s, o, u) {
                var a, f;
                n in t && (n = t[n]);
                if (typeof this.hooks[n] != "undefined") {
                    f = Array.prototype.slice.call(this.hooks[n]);
                    for (var l = 0, c = f.length; l < c; l++) {
                        a = f[l].call(e, r, i, s, o, u), a !== void 0 && (r = a), f[l].runOnce && this.remove(n, f[l]);
                        if (a === !1) return !1
                    }
                }
                return r
            }, r
        }(), n.PluginHooks = new n.PluginHookClass,
        function (e) {
            function t() {
                function i(e) {
                    var t = document,
                        n = this;
                    n.table = t.createElement("table"), n.theadTh = t.createElement("th"), n.table.appendChild(t.createElement("thead")).appendChild(t.createElement("tr")).appendChild(n.theadTh), n.tableStyle = n.table.style, n.tableStyle.tableLayout = "auto", n.tableStyle.width = "auto", n.tbody = t.createElement("tbody"), n.table.appendChild(n.tbody), n.container = t.createElement("div"), n.container.className = e.rootElement[0].className + " hidden", n.containerStyle = n.container.style, n.container.appendChild(n.table)
                }
                var t = this,
                    r = 5;
                this.beforeInit = function () {
                    var e = this;
                    e.autoColumnWidths = [], e.getSettings().autoColumnSize !== !1 ? e.autoColumnSizeTmp || (e.autoColumnSizeTmp = {
                        table: null,
                        tableStyle: null,
                        theadTh: null,
                        tbody: null,
                        container: null,
                        containerStyle: null,
                        determineBeforeNextRender: !0
                    }, e.addHook("beforeRender", n.determineIfChanged), e.addHook("afterGetColWidth", n.getColWidth), e.addHook("afterDestroy", n.afterDestroy), e.determineColumnWidth = t.determineColumnWidth) : e.autoColumnSizeTmp && (e.removeHook("beforeRender", n.determineIfChanged), e.removeHook("afterGetColWidth", n.getColWidth), e.removeHook("afterDestroy", n.afterDestroy), delete e.determineColumnWidth, t.afterDestroy.call(e))
                }, this.determineIfChanged = function (e) {
                    e && n.determineColumnsWidth.apply(this, arguments)
                }, this.determineColumnWidth = function (t) {
                    var n = this,
                        s = n.autoColumnSizeTmp;
                    s.container || i.call(s, n), s.container.className = n.rootElement[0].className + " htAutoColumnSize", s.table.className = n.$table[0].className;
                    var o = n.countRows(),
                        u = {},
                        a = 0;
                    for (var f = 0; f < o; f++) {
                        var l = e.helper.stringify(n.getDataAtCell(f, t)),
                            c = l.length;
                        c > a && (a = c), u[c] || (u[c] = {
                            needed: r,
                            strings: []
                        }), u[c].needed && (u[c].strings.push({
                            value: l,
                            row: f
                        }), u[c].needed--)
                    }
                    var h = n.getSettings();
                    h.colHeaders && n.view.appendColHeader(t, s.theadTh), n.view.wt.wtDom.empty(s.tbody);
                    for (var p in u)
                        if (u.hasOwnProperty(p))
                            for (var d = 0, v = u[p].strings.length; d < v; d++) {
                                var m = u[p].strings[d].row,
                                    g = n.getCellMeta(m, t);
                                g.col = t, g.row = m;
                                var y = n.getCellRenderer(g),
                                    b = document.createElement("tr"),
                                    w = document.createElement("td");
                                y(n, w, m, t, n.colToProp(t), u[p].strings[d].value, g), f++, b.appendChild(w), s.tbody.appendChild(b)
                            }
                        var E = n.rootElement[0].parentNode;
                    E.appendChild(s.container);
                    var S = n.view.wt.wtDom.outerWidth(s.table);
                    E.removeChild(s.container);
                    if (!h.nativeScrollbars) {
                        var x = n.view.wt.wtViewport.getViewportWidth() - 2;
                        S > x && (S = x)
                    }
                    return S
                }, this.determineColumnsWidth = function () {
                    var e = this,
                        n = this.getSettings();
                    if (n.autoColumnSize || !n.colWidths) {
                        var r = this.countCols();
                        for (var i = 0; i < r; i++) e._getColWidthFromSettings(i) || (this.autoColumnWidths[i] = t.determineColumnWidth.call(e, i))
                    }
                }, this.getColWidth = function (e, t) {
                    this.autoColumnWidths[e] && this.autoColumnWidths[e] > t.width && (t.width = this.autoColumnWidths[e])
                }, this.afterDestroy = function () {
                    var e = this;
                    e.autoColumnSizeTmp && e.autoColumnSizeTmp.container && e.autoColumnSizeTmp.container.parentNode && e.autoColumnSizeTmp.container.parentNode.removeChild(e.autoColumnSizeTmp.container), e.autoColumnSizeTmp = null
                }
            }
            var n = new t;
            e.PluginHooks.add("beforeInit", n.beforeInit), e.PluginHooks.add("afterUpdateSettings", n.beforeInit)
        }(n);
    var f = new a;
    n.PluginHooks.add("afterInit", function () {
            f.init.call(this, "afterInit")
        }), n.PluginHooks.add("afterUpdateSettings", function () {
            f.init.call(this, "afterUpdateSettings")
        }), n.PluginHooks.add("beforeGet", f.onBeforeGetSet), n.PluginHooks.add("beforeSet", f.onBeforeGetSet), n.PluginHooks.add("afterGetColHeader", f.getColHeader),
        function (t) {
            function n(r, i) {
                function o() {
                    var n = e("body > .htContextMenu")[0];
                    return n || (n = document.createElement("DIV"), t.Dom.addClass(n, "htContextMenu"), document.getElementsByTagName("body")[0].appendChild(n)), n
                }
                this.instance = r;
                var s = this;
                this.menu = o(), this.enabled = !0, this.bindMouseEvents(), this.bindTableEvents(), this.instance.addHook("afterDestroy", function () {
                    s.destroy()
                }), this.defaultOptions = {
                    items: {
                        row_above: {
                            name: "Insert row above",
                            callback: function (e, t) {
                                this.alter("insert_row", t.start.row())
                            },
                            disabled: function () {
                                return this.countRows() >= this.getSettings().maxRows
                            }
                        },
                        row_below: {
                            name: "Insert row below",
                            callback: function (e, t) {
                                this.alter("insert_row", t.end.row() + 1)
                            },
                            disabled: function () {
                                return this.countRows() >= this.getSettings().maxRows
                            }
                        },
                        hsep1: n.SEPARATOR,
                        col_left: {
                            name: "Insert column on the left",
                            callback: function (e, t) {
                                this.alter("insert_col", t.start.col())
                            },
                            disabled: function () {
                                return this.countCols() >= this.getSettings().maxCols
                            }
                        },
                        col_right: {
                            name: "Insert column on the right",
                            callback: function (e, t) {
                                this.alter("insert_col", t.end.col() + 1)
                            },
                            disabled: function () {
                                return this.countCols() >= this.getSettings().maxCols
                            }
                        },
                        hsep2: n.SEPARATOR,
                        remove_row: {
                            name: "Remove row",
                            callback: function (e, t) {
                                var n = t.end.row() - t.start.row() + 1;
                                this.alter("remove_row", t.start.row(), n)
                            }
                        },
                        remove_col: {
                            name: "Remove column",
                            callback: function (e, t) {
                                var n = t.end.col() - t.start.col() + 1;
                                this.alter("remove_col", t.start.col(), n)
                            }
                        },
                        hsep3: n.SEPARATOR,
                        undo: {
                            name: "Undo",
                            callback: function () {
                                this.undo()
                            },
                            disabled: function () {
                                return this.undoRedo && !this.undoRedo.isUndoAvailable()
                            }
                        },
                        redo: {
                            name: "Redo",
                            callback: function () {
                                this.redo()
                            },
                            disabled: function () {
                                return this.undoRedo && !this.undoRedo.isRedoAvailable()
                            }
                        }
                    }
                }, this.options = {}, t.helper.extend(this.options, this.defaultOptions), this.updateOptions(i)
            }

            function r() {
                var e = this,
                    r = e.getSettings().contextMenu,
                    i = t.helper.isObject(r) ? r : {};
                r ? (e.contextMenu || (e.contextMenu = new n(e, i)), e.contextMenu.enable(), t.helper.isArray(r) && e.contextMenu.filterItems(r)) : e.contextMenu && (e.contextMenu.destroy(), delete e.contextMenu)
            }
            n.prototype.bindMouseEvents = function () {
                function r(r) {
                    r.preventDefault();
                    if (r.target.nodeName != "TD" && (!t.Dom.hasClass(r.target, "current") || !t.Dom.hasClass(r.target, "wtBorder"))) return;
                    this.show(r.pageY, r.pageX), e(document).on("mousedown.htContextMenu", t.helper.proxy(n.prototype.close, this))
                }
                this.instance.rootElement.on("contextmenu.htContextMenu", t.helper.proxy(r, this))
            }, n.prototype.bindTableEvents = function () {
                var e = this;
                this._afterScrollCallback = function () {
                    e.close()
                }, this.instance.addHook("afterScrollVertically", this._afterScrollCallback), this.instance.addHook("afterScrollHorizontally", this._afterScrollCallback)
            }, n.prototype.unbindTableEvents = function () {
                var e = this;
                this._afterScrollCallback && (this.instance.removeHook("afterScrollVertically", this._afterScrollCallback), this.instance.removeHook("afterScrollHorizontally", this._afterScrollCallback), this._afterScrollCallback = null)
            }, n.prototype.performAction = function () {
                var t = e(this.menu).handsontable("getInstance"),
                    r = t.getSelected()[0],
                    i = t.getData()[r];
                if (i.disabled === !0 || typeof i.disabled == "function" && i.disabled.call(this.instance) === !0) return;
                if (typeof i.callback != "function") return;
                var s = this.instance.getSelected(),
                    o = n.utils.normalizeSelection(s);
                i.callback.call(this.instance, i.key, o)
            }, n.prototype.unbindMouseEvents = function () {
                this.instance.rootElement.off("contextmenu.htContextMenu"), e(document).off("mousedown.htContextMenu")
            }, n.prototype.show = function (r, i) {
                this.menu.style.display = "block", e(this.menu).off("mousedown.htContextMenu").on("mousedown.htContextMenu", t.helper.proxy(this.performAction, this)), e(this.menu).handsontable({
                    data: n.utils.convertItemsToArray(this.getItems()),
                    colHeaders: !1,
                    colWidths: [160],
                    readOnly: !0,
                    copyPaste: !1,
                    columns: [{
                        data: "name",
                        renderer: t.helper.proxy(this.renderer, this)
                    }],
                    beforeKeyDown: t.helper.proxy(this.onBeforeKeyDown, this)
                }), this.bindTableEvents(), this.setMenuPosition(r, i), e(this.menu).handsontable("listen")
            }, n.prototype.close = function () {
                this.hide(), e(document).off("mousedown.htContextMenu"), this.unbindTableEvents(), this.instance.listen()
            }, n.prototype.hide = function () {
                this.menu.style.display = "none", e(this.menu).handsontable("destroy")
            }, n.prototype.renderer = function (r, i, s, o, u, a, f) {
                function p(e) {
                    return (new RegExp(n.SEPARATOR, "i")).test(e.name)
                }

                function d(e, t) {
                    return e.disabled === !0 || typeof e.disabled == "function" && e.disabled.call(l.instance) === !0
                }
                var l = this,
                    c = r.getData()[s],
                    h = document.createElement("DIV");
                t.Dom.empty(i), i.appendChild(h), p(c) ? t.Dom.addClass(i, "htSeparator") : t.Dom.fastInnerText(h, a), d(c, l.instance) ? (t.Dom.addClass(i, "htDisabled"), e(h).on("mouseenter", function () {
                    r.deselectCell()
                })) : (t.Dom.removeClass(i, "htDisabled"), e(h).on("mouseenter", function () {
                    r.selectCell(s, o)
                }))
            }, n.prototype.onBeforeKeyDown = function (r) {
                function u(e) {
                    var t = e.getCell(0, 0);
                    n.utils.isSeparator(t) || n.utils.isDisabled(t) ? f(0, 0, e) : e.selectCell(0, 0)
                }

                function a(e) {
                    var t = e.countRows() - 1,
                        r = e.getCell(t, 0);
                    n.utils.isSeparator(r) || n.utils.isDisabled(r) ? l(t, 0, e) : e.selectCell(t, 0)
                }

                function f(e, t, r) {
                    var i = e + 1,
                        s = i < r.countRows() ? r.getCell(i, t) : null;
                    if (!s) return;
                    n.utils.isSeparator(s) || n.utils.isDisabled(s) ? f(i, t, r) : r.selectCell(i, t)
                }

                function l(e, t, r) {
                    var i = e - 1,
                        s = i >= 0 ? r.getCell(i, t) : null;
                    if (!s) return;
                    n.utils.isSeparator(s) || n.utils.isDisabled(s) ? l(i, t, r) : r.selectCell(i, t)
                }
                var i = this,
                    s = e(i.menu).handsontable("getInstance"),
                    o = s.getSelected();
                switch (r.keyCode) {
                case t.helper.keyCode.ESCAPE:
                    i.close(), r.preventDefault(), r.stopImmediatePropagation();
                    break;
                case t.helper.keyCode.ENTER:
                    s.getSelected() && (i.performAction(), i.close());
                    break;
                case t.helper.keyCode.ARROW_DOWN:
                    o ? f(o[0], o[1], s) : u(s), r.preventDefault(), r.stopImmediatePropagation();
                    break;
                case t.helper.keyCode.ARROW_UP:
                    o ? l(o[0], o[1], s) : a(s), r.preventDefault(), r.stopImmediatePropagation()
                }
            }, n.prototype.getItems = function () {
                function n(e) {
                    typeof e == "string" ? this.name = e : t.helper.extend(this, e)
                }
                var e = {};
                n.prototype = this.options;
                for (var r in this.options.items) this.options.items.hasOwnProperty(r) && (!this.itemsFilter || this.itemsFilter.indexOf(r) != -1) && (e[r] = new n(this.options.items[r]));
                return e
            }, n.prototype.updateOptions = function (e) {
                e = e || {};
                if (e.items)
                    for (var n in e.items) {
                        var r = {};
                        e.items.hasOwnProperty(n) && this.defaultOptions.items.hasOwnProperty(n) && t.helper.isObject(e.items[n]) && (t.helper.extend(r, this.defaultOptions.items[n]), t.helper.extend(r, e.items[n]), e.items[n] = r)
                    }
                t.helper.extend(this.options, e)
            }, n.prototype.setMenuPosition = function (e, t) {
                var n = {
                    top: e,
                    topRelative: e - document.documentElement.scrollTop,
                    left: t,
                    leftRelative: t - document.documentElement.scrollLeft
                };
                this.menuFitsBelowCursor(n) ? this.positionMenuBelowCursor(n) : this.positionMenuAboveCursor(n), this.menuFitsOnRightOfCursor(n) ? this.positionMenuOnRightOfCursor(n) : this.positionMenuOnLeftOfCursor(n)
            }, n.prototype.menuFitsBelowCursor = function (e) {
                return e.topRelative + this.menu.offsetHeight <= document.documentElement.scrollTop + document.documentElement.clientHeight
            }, n.prototype.menuFitsOnRightOfCursor = function (e) {
                return e.leftRelative + this.menu.offsetWidth <= document.documentElement.scrollLeft + document.documentElement.clientWidth
            }, n.prototype.positionMenuBelowCursor = function (e) {
                this.menu.style.top = e.top + "px"
            }, n.prototype.positionMenuAboveCursor = function (e) {
                this.menu.style.top = e.top - this.menu.offsetHeight + "px"
            }, n.prototype.positionMenuOnRightOfCursor = function (e) {
                this.menu.style.left = e.left + "px"
            }, n.prototype.positionMenuOnLeftOfCursor = function (e) {
                this.menu.style.left = e.left - this.menu.offsetWidth + "px"
            }, n.utils = {}, n.utils.convertItemsToArray = function (e) {
                var t = [],
                    n;
                for (var r in e)
                    if (e.hasOwnProperty(r)) {
                        if (typeof e[r] == "string") n = {
                            name: e[r]
                        };
                        else {
                            if (e[r].visible === !1) continue;
                            n = e[r]
                        }
                        n.key = r, t.push(n)
                    }
                return t
            }, n.utils.normalizeSelection = function (e) {
                var n = {
                    start: new t.SelectionPoint,
                    end: new t.SelectionPoint
                };
                return n.start.row(Math.min(e[0], e[2])), n.start.col(Math.min(e[1], e[3])), n.end.row(Math.max(e[0], e[2])), n.end.col(Math.max(e[1], e[3])), n
            }, n.utils.isSeparator = function (e) {
                return t.Dom.hasClass(e, "htSeparator")
            }, n.utils.isDisabled = function (e) {
                return t.Dom.hasClass(e, "htDisabled")
            }, n.prototype.enable = function () {
                this.enabled || (this.enabled = !0, this.bindMouseEvents())
            }, n.prototype.disable = function () {
                this.enabled && (this.enabled = !1, this.close(), this.unbindMouseEvents(), this.unbindTableEvents())
            }, n.prototype.destroy = function () {
                this.close(), this.unbindMouseEvents(), this.unbindTableEvents(), this.isMenuEnabledByOtherHotInstance() || this.removeMenu()
            }, n.prototype.isMenuEnabledByOtherHotInstance = function () {
                var t = e(".handsontable"),
                    n = !1;
                for (var r = 0, i = t.length; r < i; r++) {
                    var s = e(t[r]).handsontable("getInstance");
                    if (s && s.getSettings().contextMenu) {
                        n = !0;
                        break
                    }
                }
                return n
            }, n.prototype.removeMenu = function () {
                this.menu.parentNode && this.menu.parentNode.removeChild(this.menu)
            }, n.prototype.filterItems = function (e) {
                this.itemsFilter = e
            }, n.SEPARATOR = "---------", t.PluginHooks.add("afterInit", r), t.PluginHooks.add("afterUpdateSettings", r), t.ContextMenu = n
        }(n), n.PluginHooks.add("beforeGetCellMeta", function (e, t, n) {
            n.isWritable = !n.readOnly;
            if (n.autoComplete) throw new Error("Support for legacy autocomplete syntax was removed in Handsontable 0.10.0. Please remove the property named 'autoComplete' from your config. For replacement instructions, see wiki page https://github.com/warpech/jquery-handsontable/wiki/Migration-guide-to-0.10.x")
        });
    var c = new l;
    n.PluginHooks.add("beforeInit", c.beforeInit), n.PluginHooks.add("afterInit", function () {
        c.init.call(this, "afterInit")
    }), n.PluginHooks.add("afterUpdateSettings", function () {
        c.init.call(this, "afterUpdateSettings")
    }), n.PluginHooks.add("afterGetColHeader", c.getColHeader), n.PluginHooks.add("afterRemoveCol", c.afterRemoveCol), n.PluginHooks.add("afterCreateCol", c.afterCreateCol), n.PluginHooks.add("modifyCol", c.modifyCol);
    var p = new h;
    n.PluginHooks.add("beforeInit", p.beforeInit), n.PluginHooks.add("afterInit", function () {
            p.init.call(this, "afterInit")
        }), n.PluginHooks.add("afterUpdateSettings", function () {
            p.init.call(this, "afterUpdateSettings")
        }), n.PluginHooks.add("afterGetColWidth", p.getColWidth),
        function () {
            function t() {
                var e = this,
                    t = e.getSettings().observeChanges;
                t ? (e.observer && s.call(e), r.call(e), a.call(e)) : t || s.call(e)
            }

            function r() {
                var e = this;
                e.observeChangesActive = !0, e.pauseObservingChanges = function () {
                    e.observeChangesActive = !1
                }, e.resumeObservingChanges = function () {
                    e.observeChangesActive = !0
                }, e.observedData = e.getData(), e.observer = u.observe(e.observedData, function (t) {
                    e.observeChangesActive && (i.call(e, t), e.render()), e.runHooks("afterChangesObserved")
                })
            }

            function i(e) {
                function u(e) {
                    var t;
                    return t = f(e), t = a(t), t
                }

                function a(e) {
                    var t = [];
                    return e.filter(function (e) {
                        var n = l(e.path);
                        if (["add", "remove"].indexOf(e.op) != -1 && !isNaN(n.col)) {
                            if (t.indexOf(n.col) != -1) return !1;
                            t.push(n.col)
                        }
                        return !0
                    })
                }

                function f(e) {
                    return e.filter(function (e) {
                        return !/[/]length/ig.test(e.path)
                    })
                }

                function l(e) {
                    var t = e.match(/^\/(\d+)\/?(.*)?$/);
                    return {
                        row: parseInt(t[1], 10),
                        col: /^\d*$/.test(t[2]) ? parseInt(t[2], 10) : t[2]
                    }
                }
                var t = this,
                    n = u(e);
                for (var r = 0, i = n.length; r < i; r++) {
                    var s = n[r],
                        o = l(s.path);
                    switch (s.op) {
                    case "add":
                        isNaN(o.col) ? t.runHooks("afterCreateRow", o.row) : t.runHooks("afterCreateCol", o.col);
                        break;
                    case "remove":
                        isNaN(o.col) ? t.runHooks("afterRemoveRow", o.row, 1) : t.runHooks("afterRemoveCol", o.col, 1);
                        break;
                    case "replace":
                        t.runHooks("afterChange", [o.row, o.col, null, s.value], "external")
                    }
                }
            }

            function s() {
                var e = this;
                e.observer && (o.call(e), f.call(e))
            }

            function o() {
                var e = this;
                u.unobserve(e.observedData, e.observer), delete e.observeChangesActive, delete e.pauseObservingChanges, delete e.resumeObservingChanges
            }

            function a() {
                var e = this;
                e.addHook("afterDestroy", s), e.addHook("afterCreateRow", l), e.addHook("afterRemoveRow", l), e.addHook("afterCreateCol", l), e.addHook("afterRemoveCol", l), e.addHook("afterChange", function (e, t) {
                    t != "loadData" && l.call(this)
                })
            }

            function f() {
                var e = this;
                e.removeHook("afterDestroy", s), e.removeHook("afterCreateRow", l), e.removeHook("afterRemoveRow", l), e.removeHook("afterCreateCol", l), e.removeHook("afterRemoveCol", l), e.removeHook("afterChange", l)
            }

            function l() {
                var e = this;
                e.pauseObservingChanges(), e.addHookOnce("afterChangesObserved", function () {
                    e.resumeObservingChanges()
                })
            }
            n.PluginHooks.add("afterLoadData", t), n.PluginHooks.add("afterUpdateSettings", t)
        }(),
        function (e) {
            function t() {
                function r() {
                    var e = this;
                    for (var t in n) n.hasOwnProperty(t) && !s.call(e, t) && e.PluginHooks.add(t, n[t])
                }

                function i() {
                    var e = this;
                    for (var t in n) n.hasOwnProperty(t) && s.call(e, t) && e.PluginHooks.remove(t, n[t])
                }

                function s(e) {
                    var t = this;
                    return t.PluginHooks.hooks.hasOwnProperty(e)
                }
                var t = this;
                this.init = function () {
                    var n = this,
                        s = n.getSettings().persistentState;
                    t.enabled = !!s;
                    if (!t.enabled) {
                        i.call(n);
                        return
                    }
                    n.storage || (n.storage = new e(n.rootElement[0].id)), n.resetState = t.resetValue, r.call(n)
                }, this.saveValue = function (e, t) {
                    var n = this;
                    n.storage.saveValue(e, t)
                }, this.loadValue = function (e, t) {
                    var n = this;
                    t.value = n.storage.loadValue(e)
                }, this.resetValue = function (e) {
                    var t = this;
                    typeof e != "undefined" ? t.storage.reset(e) : t.storage.resetAll()
                };
                var n = {
                    persistentStateSave: t.saveValue,
                    persistentStateLoad: t.loadValue,
                    persistentStateReset: t.resetValue
                }
            }
            var r = new t;
            n.PluginHooks.add("beforeInit", r.init), n.PluginHooks.add("afterUpdateSettings", r.init)
        }(d),
        function (t) {
            t.UndoRedo = function (e) {
                var n = this;
                this.instance = e, this.doneActions = [], this.undoneActions = [], this.ignoreNewActions = !1, e.addHook("afterChange", function (e, r) {
                    if (e) {
                        var i = new t.UndoRedo.ChangeAction(e);
                        n.done(i)
                    }
                }), e.addHook("afterCreateRow", function (e, r, i) {
                    if (i) return;
                    var s = new t.UndoRedo.CreateRowAction(e, r);
                    n.done(s)
                }), e.addHook("beforeRemoveRow", function (e, r) {
                    var i = n.instance.getData();
                    e = (i.length + e) % i.length;
                    var s = i.slice(e, e + r),
                        o = new t.UndoRedo.RemoveRowAction(e, s);
                    n.done(o)
                }), e.addHook("afterCreateCol", function (e, r, i) {
                    if (i) return;
                    var s = new t.UndoRedo.CreateColumnAction(e, r);
                    n.done(s)
                }), e.addHook("beforeRemoveCol", function (r, i) {
                    var s = n.instance.getData();
                    r = (n.instance.countCols() + r) % n.instance.countCols();
                    var o = [];
                    for (var u = 0, a = s.length; u < a; u++) o[u] = s[u].slice(r, r + i);
                    var f;
                    t.helper.isArray(e.getSettings().colHeaders) && (f = e.getSettings().colHeaders.slice(r, r + o.length));
                    var l = new t.UndoRedo.RemoveColumnAction(r, o, f);
                    n.done(l)
                })
            }, t.UndoRedo.prototype.done = function (e) {
                this.ignoreNewActions || (this.doneActions.push(e), this.undoneActions.length = 0)
            }, t.UndoRedo.prototype.undo = function () {
                if (this.isUndoAvailable()) {
                    var e = this.doneActions.pop();
                    this.ignoreNewActions = !0, e.undo(this.instance), this.ignoreNewActions = !1, this.undoneActions.push(e)
                }
            }, t.UndoRedo.prototype.redo = function () {
                if (this.isRedoAvailable()) {
                    var e = this.undoneActions.pop();
                    this.ignoreNewActions = !0, e.redo(this.instance), this.ignoreNewActions = !0, this.doneActions.push(e)
                }
            }, t.UndoRedo.prototype.isUndoAvailable = function () {
                return this.doneActions.length > 0
            }, t.UndoRedo.prototype.isRedoAvailable = function () {
                return this.undoneActions.length > 0
            }, t.UndoRedo.prototype.clear = function () {
                this.doneActions.length = 0, this.undoneActions.length = 0
            }, t.UndoRedo.Action = function () {}, t.UndoRedo.Action.prototype.undo = function () {}, t.UndoRedo.Action.prototype.redo = function () {}, t.UndoRedo.ChangeAction = function (e) {
                this.changes = e
            }, t.helper.inherit(t.UndoRedo.ChangeAction, t.UndoRedo.Action), t.UndoRedo.ChangeAction.prototype.undo = function (t) {
                var n = e.extend(!0, [], this.changes);
                for (var r = 0, i = n.length; r < i; r++) n[r].splice(3, 1);
                t.setDataAtRowProp(n, null, null, "undo")
            }, t.UndoRedo.ChangeAction.prototype.redo = function (t) {
                var n = e.extend(!0, [], this.changes);
                for (var r = 0, i = n.length; r < i; r++) n[r].splice(2, 1);
                t.setDataAtRowProp(n, null, null, "redo")
            }, t.UndoRedo.CreateRowAction = function (e, t) {
                this.index = e, this.amount = t
            }, t.helper.inherit(t.UndoRedo.CreateRowAction, t.UndoRedo.Action), t.UndoRedo.CreateRowAction.prototype.undo = function (e) {
                e.alter("remove_row", this.index, this.amount)
            }, t.UndoRedo.CreateRowAction.prototype.redo = function (e) {
                e.alter("insert_row", this.index + 1, this.amount)
            }, t.UndoRedo.RemoveRowAction = function (e, t) {
                this.index = e, this.data = t
            }, t.helper.inherit(t.UndoRedo.RemoveRowAction, t.UndoRedo.Action), t.UndoRedo.RemoveRowAction.prototype.undo = function (e) {
                var t = [this.index, 0];
                Array.prototype.push.apply(t, this.data), Array.prototype.splice.apply(e.getData(), t), e.render()
            }, t.UndoRedo.RemoveRowAction.prototype.redo = function (e) {
                e.alter("remove_row", this.index, this.data.length)
            }, t.UndoRedo.CreateColumnAction = function (e, t) {
                this.index = e, this.amount = t
            }, t.helper.inherit(t.UndoRedo.CreateColumnAction, t.UndoRedo.Action), t.UndoRedo.CreateColumnAction.prototype.undo = function (e) {
                e.alter("remove_col", this.index, this.amount)
            }, t.UndoRedo.CreateColumnAction.prototype.redo = function (e) {
                e.alter("insert_col", this.index + 1, this.amount)
            }, t.UndoRedo.RemoveColumnAction = function (e, t, n) {
                this.index = e, this.data = t, this.amount = this.data[0].length, this.headers = n
            }, t.helper.inherit(t.UndoRedo.RemoveColumnAction, t.UndoRedo.Action), t.UndoRedo.RemoveColumnAction.prototype.undo = function (e) {
                var t, n;
                for (var r = 0, i = e.getData().length; r < i; r++) t = e.getDataAtRow(r), n = [this.index, 0], Array.prototype.push.apply(n, this.data[r]), Array.prototype.splice.apply(t, n);
                typeof this.headers != "undefined" && (n = [this.index, 0], Array.prototype.push.apply(n, this.headers), Array.prototype.splice.apply(e.getSettings().colHeaders, n)), e.render()
            }, t.UndoRedo.RemoveColumnAction.prototype.redo = function (e) {
                e.alter("remove_col", this.index, this.amount)
            }
        }(n),
        function (e) {
            function t() {
                var t = this,
                    o = typeof t.getSettings().undo == "undefined" || t.getSettings().undo;
                o ? t.undoRedo || (t.undoRedo = new e.UndoRedo(t), i(t), t.addHook("beforeKeyDown", n), t.addHook("afterChange", r)) : t.undoRedo && (delete t.undoRedo, s(t), t.removeHook("beforeKeyDown", n), t.removeHook("afterChange", r))
            }

            function n(e) {
                var t = this,
                    n = (e.ctrlKey || e.metaKey) && !e.altKey;
                n && (e.keyCode === 89 || e.shiftKey && e.keyCode === 90 ? (t.undoRedo.redo(), e.stopImmediatePropagation()) : e.keyCode === 90 && (t.undoRedo.undo(), e.stopImmediatePropagation()))
            }

            function r(e, t) {
                var n = this;
                if (t == "loadData") return n.undoRedo.clear()
            }

            function i(e) {
                e.undo = function () {
                    return e.undoRedo.undo()
                }, e.redo = function () {
                    return e.undoRedo.redo()
                }, e.isUndoAvailable = function () {
                    return e.undoRedo.isUndoAvailable()
                }, e.isRedoAvailable = function () {
                    return e.undoRedo.isRedoAvailable()
                }, e.clearUndo = function () {
                    return e.undoRedo.clear()
                }
            }

            function s(e) {
                delete e.undo, delete e.redo, delete e.isUndoAvailable, delete e.isRedoAvailable, delete e.clearUndo
            }
            e.PluginHooks.add("afterInit", t), e.PluginHooks.add("afterUpdateSettings", t)
        }(n), v.prototype.setBoundaries = function (e) {
            this.boundaries = e
        }, v.prototype.setCallback = function (e) {
            this.callback = e
        }, v.prototype.check = function (e, t) {
            var n = 0,
                r = 0;
            t < this.boundaries.top ? r = t - this.boundaries.top : t > this.boundaries.bottom && (r = t - this.boundaries.bottom), e < this.boundaries.left ? n = e - this.boundaries.left : e > this.boundaries.right && (n = e - this.boundaries.right), this.callback(n, r)
        };
    var m = !1,
        g, y;
    if (typeof n != "undefined") {
        var b = function (e) {
            var n = e.view.wt.wtScrollbars.vertical.scrollHandler;
            g = new v;
            if (n === t) return;
            n ? g.setBoundaries(n.getBoundingClientRect()) : g.setBoundaries(e.$table[0].getBoundingClientRect()), g.setCallback(function (t, r) {
                t < 0 ? n ? n.scrollLeft -= 50 : e.view.wt.scrollHorizontal(-1).draw() : t > 0 && (n ? n.scrollLeft += 50 : e.view.wt.scrollHorizontal(1).draw()), r < 0 ? n ? n.scrollTop -= 20 : e.view.wt.scrollVertical(-1).draw() : r > 0 && (n ? n.scrollTop += 20 : e.view.wt.scrollVertical(1).draw())
            }), m = !0
        };
        n.PluginHooks.add("afterInit", function () {
            e(document).on("mouseup." + this.guid, function () {
                m = !1
            }), e(document).on("mousemove." + this.guid, function (e) {
                m && g.check(e.clientX, e.clientY)
            })
        }), n.PluginHooks.add("destroy", function () {
            e(document).off("." + this.guid)
        }), n.PluginHooks.add("afterOnCellMouseDown", function () {
            b(this)
        }), n.PluginHooks.add("afterOnCellCornerMouseDown", function () {
            b(this)
        }), n.plugins.DragToScroll = v
    }(function (e, t, n) {
        function r(r) {
            function s() {
                if (!r.isListening()) return;
                r.selection.empty()
            }

            function o(e) {
                if (!r.isListening() || !r.selection.isSelected()) return;
                var t = e.replace(/^[\r\n]*/g, "").replace(/[\r\n]*$/g, ""),
                    i = n.parse(t),
                    s = r.getSelected(),
                    o = r.getCornerCoords([{
                        row: s[0],
                        col: s[1]
                    }, {
                        row: s[2],
                        col: s[3]
                    }]),
                    u = o.TL,
                    a = {
                        row: Math.max(o.BR.row, i.length - 1 + o.TL.row),
                        col: Math.max(o.BR.col, i[0].length - 1 + o.TL.col)
                    };
                r.PluginHooks.once("afterChange", function (e, t) {
                    e && e.length && this.selectCell(u.row, u.col, a.row, a.col)
                }), r.populateFromArray(u.row, u.col, i, a.row, a.col, "paste", r.getSettings().pasteMode)
            }

            function u(t) {
                if (e.helper.isCtrlKey(t.keyCode) && r.getSelected()) {
                    i.setCopyableText(), t.stopImmediatePropagation();
                    return
                }
                var n = (t.ctrlKey || t.metaKey) && !t.altKey;
                t.keyCode == e.helper.keyCode.A && n && setTimeout(e.helper.proxy(i.setCopyableText, i))
            }
            this.copyPasteInstance = t.getInstance(), this.copyPasteInstance.onCut(s), this.copyPasteInstance.onPaste(o);
            var i = this;
            r.addHook("beforeKeyDown", u), this.destroy = function () {
                this.copyPasteInstance.removeCallback(s), this.copyPasteInstance.removeCallback(o), this.copyPasteInstance.destroy(), r.removeHook("beforeKeyDown", u)
            }, r.addHook("afterDestroy", e.helper.proxy(this.destroy, this)), this.triggerPaste = e.helper.proxy(this.copyPasteInstance.triggerPaste, this.copyPasteInstance), this.triggerCut = e.helper.proxy(this.copyPasteInstance.triggerCut, this.copyPasteInstance), this.setCopyableText = function () {
                var e = r.getSelected(),
                    t = r.getSettings(),
                    n = t.copyRowsLimit,
                    i = t.copyColsLimit,
                    s = Math.min(e[0], e[2]),
                    o = Math.min(e[1], e[3]),
                    u = Math.max(e[0], e[2]),
                    a = Math.max(e[1], e[3]),
                    f = Math.min(u, s + n - 1),
                    l = Math.min(a, o + i - 1);
                r.copyPaste.copyPasteInstance.copyable(r.getCopyableData(s, o, f, l)), (u !== f || a !== l) && r.PluginHooks.run("afterCopyLimit", u - s + 1, a - o + 1, n, i)
            }
        }

        function i() {
            var e = this,
                t = e.getSettings().copyPaste !== !1;
            t && !e.copyPaste ? e.copyPaste = new r(e) : !t && e.copyPaste && (e.copyPaste.destroy(), delete e.copyPaste)
        }
        e.PluginHooks.add("afterInit", i), e.PluginHooks.add("afterUpdateSettings", i)
    })(n, s, SheetClip), w.prototype.init = function () {
            this.TABLE = this.instance.wtTable.TABLE, this.fixed = this.instance.wtTable.hider, this.fixedContainer = this.instance.wtTable.holder, this.fixed.style.position = "absolute", this.fixed.style.left = "0", this.scrollHandler = this.getScrollableElement(this.TABLE), this.$scrollHandler = e(this.scrollHandler)
        }, w.prototype.makeClone = function (e) {
            var t = document.createElement("DIV");
            t.className = "ht_clone_" + e + " handsontable", t.style.position = "fixed", t.style.overflow = "hidden";
            var n = document.createElement("TABLE");
            return n.className = this.instance.wtTable.TABLE.className, t.appendChild(n), this.instance.wtTable.holder.parentNode.appendChild(t), new k({
                cloneSource: this.instance,
                cloneOverlay: this,
                table: n
            })
        }, w.prototype.getScrollableElement = function (e) {
            var n = e.parentNode;
            while (n && n.style) {
                if (n.style.overflow !== "visible" && n.style.overflow !== "") return n;
                if (this instanceof R && n.style.overflowX !== "visible" && n.style.overflowX !== "") return n;
                n = n.parentNode
            }
            return t
        }, w.prototype.prepare = function () {}, w.prototype.onScroll = function (e) {
            this.windowScrollPosition = this.getScrollPosition(), this.readSettings(), e && (this.windowScrollPosition = e), this.resetFixedPosition()
        }, w.prototype.availableSize = function () {
            var e;
            return this.windowScrollPosition > this.tableParentOffset ? this.instance.wtTable.getLastVisibleRow() === this.total - 1 ? e = this.instance.wtDom.outerHeight(this.TABLE) : e = this.windowSize : e = this.windowSize - this.tableParentOffset, e
        }, w.prototype.refresh = function (e) {
            var t = this.getLastCell();
            this.measureBefore = this.sumCellSizes(0, this.offset), t === -1 ? this.measureAfter = 0 : this.measureAfter = this.sumCellSizes(t, this.total - t), this.applyToDOM(), this.clone && this.clone.draw(e)
        }, w.prototype.destroy = function () {
            this.$scrollHandler.off("." + this.instance.guid), e(t).off("." + this.instance.guid), e(document).off("." + this.instance.guid)
        }, E.prototype.appear = function (e) {
            var t, n, r, i, s, o, u, a, f, l, c, h;
            if (this.disabled) return;
            var p = this.instance,
                d, v, m, g, y = !1,
                b = !1,
                w = !1,
                E = !1,
                S, x, T;
            p.wtTable.isRowInViewport(e[0]) || (y = !0), p.wtTable.isRowInViewport(e[2]) || (w = !0), x = p.wtTable.rowStrategy.countVisible();
            for (S = 0; S < x; S++) {
                T = p.wtTable.rowFilter.visibleToSource(S);
                if (T >= e[0] && T <= e[2]) {
                    d = T;
                    break
                }
            }
            for (S = x - 1; S >= 0; S--) {
                T = p.wtTable.rowFilter.visibleToSource(S);
                if (T >= e[0] && T <= e[2]) {
                    m = T;
                    break
                }
            }
            if (y && w) b = !0, E = !0;
            else {
                p.wtTable.isColumnInViewport(e[1]) || (b = !0), p.wtTable.isColumnInViewport(e[3]) || (E = !0), x = p.wtTable.columnStrategy.countVisible();
                for (S = 0; S < x; S++) {
                    T = p.wtTable.columnFilter.visibleToSource(S);
                    if (T >= e[1] && T <= e[3]) {
                        v = T;
                        break
                    }
                }
                for (S = x - 1; S >= 0; S--) {
                    T = p.wtTable.columnFilter.visibleToSource(S);
                    if (T >= e[1] && T <= e[3]) {
                        g = T;
                        break
                    }
                }
            } if (d === void 0 || v === void 0) {
                this.disappear();
                return
            }
            t = d !== m || v !== g, n = p.wtTable.getCell([d, v]), r = t ? p.wtTable.getCell([m, g]) : n, i = this.wtDom.offset(n), s = t ? this.wtDom.offset(r) : i, o = this.wtDom.offset(p.wtTable.TABLE), a = i.top, c = s.top + this.wtDom.outerHeight(r) - a, l = i.left, h = s.left + this.wtDom.outerWidth(r) - l, u = a - o.top - 1, f = l - o.left - 1;
            var N = this.wtDom.getComputedStyle(n);
            parseInt(N.borderTopWidth, 10) > 0 && (u += 1, c = c > 0 ? c - 1 : 0), parseInt(N.borderLeftWidth, 10) > 0 && (f += 1, h = h > 0 ? h - 1 : 0), y ? this.topStyle.display = "none" : (this.topStyle.top = u + "px", this.topStyle.left = f + "px", this.topStyle.width = h + "px", this.topStyle.display = "block"), b ? this.leftStyle.display = "none" : (this.leftStyle.top = u + "px", this.leftStyle.left = f + "px", this.leftStyle.height = c + "px", this.leftStyle.display = "block");
            var C = Math.floor(this.settings.border.width / 2);
            w ? this.bottomStyle.display = "none" : (this.bottomStyle.top = u + c - C + "px", this.bottomStyle.left = f + "px", this.bottomStyle.width = h + "px", this.bottomStyle.display = "block"), E ? this.rightStyle.display = "none" : (this.rightStyle.top = u + "px", this.rightStyle.left = f + h - C + "px", this.rightStyle.height = c + 1 + "px", this.rightStyle.display = "block"), w || E || !this.hasSetting(this.settings.border.cornerVisible) ? this.cornerStyle.display = "none" : (this.cornerStyle.top = u + c - 4 + "px", this.cornerStyle.left = f + h - 4 + "px", this.cornerStyle.display = "block")
        }, E.prototype.disappear = function () {
            this.topStyle.display = "none", this.leftStyle.display = "none", this.bottomStyle.display = "none", this.rightStyle.display = "none", this.cornerStyle.display = "none"
        }, E.prototype.hasSetting = function (e) {
            return typeof e == "function" ? e() : !!e
        }, S.prototype.source = function (e) {
            return e
        }, S.prototype.offsetted = function (e) {
            return e + this.offset
        }, S.prototype.unOffsetted = function (e) {
            return e - this.offset
        }, S.prototype.fixed = function (e) {
            return e < this.fixedCount ? e - this.offset : e
        }, S.prototype.unFixed = function (e) {
            return e < this.fixedCount ? e + this.offset : e
        }, S.prototype.visibleToSource = function (e) {
            return this.source(this.offsetted(this.fixed(e)))
        }, S.prototype.sourceToVisible = function (e) {
            return this.source(this.unOffsetted(this.unFixed(e)))
        }, x.prototype.getSize = function (e) {
            return this.cellSizes[e]
        }, x.prototype.getContainerSize = function (e) {
            return typeof this.containerSizeFn == "function" ? this.containerSizeFn(e) : this.containerSizeFn
        }, x.prototype.countVisible = function () {
            return this.cellCount
        }, x.prototype.isLastIncomplete = function () {
            if (this.instance.getSetting("nativeScrollbars")) {
                var e = this.instance.cloneFrom ? this.instance.cloneFrom.wtScrollbars.vertical : this.instance.wtScrollbars.vertical;
                return this.remainingSize > e.sumCellSizes(e.offset, e.offset + e.curOuts + 1)
            }
            return this.remainingSize > 0
        }, T.prototype.add = function (e, t, n) {
            this.cache[e] || (this.cache[e] = []), this.cache[e][t] || (this.cache[e][t] = []), this.cache[e][t][n] = !0
        }, T.prototype.test = function (e, t, n) {
            return this.cache[e] && this.cache[e][t] && this.cache[e][t][n]
        }, N.prototype = new S, N.prototype.readSettings = function (e) {
            this.offset = e.wtSettings.settings.offsetColumn, this.total = e.getSetting("totalColumns"), this.fixedCount = e.getSetting("fixedColumnsLeft"), this.countTH = e.getSetting("rowHeaders").length
        }, N.prototype.offsettedTH = function (e) {
            return e - this.countTH
        }, N.prototype.unOffsettedTH = function (e) {
            return e + this.countTH
        }, N.prototype.visibleRowHeadedColumnToSourceColumn = function (e) {
            return this.visibleToSource(this.offsettedTH(e))
        }, N.prototype.sourceColumnToVisibleRowHeadedColumn = function (e) {
            return this.unOffsettedTH(this.sourceToVisible(e))
        }, C.prototype = new x, C.prototype.getSize = function (e) {
            return this.cellSizes[e] + (this.cellStretch[e] || 0)
        }, C.prototype.stretch = function () {
            var e = this.getContainerSize(this.cellSizesSum),
                t = 0;
            this.remainingSize = this.cellSizesSum - e, this.cellStretch.length = 0;
            if (this.strategy === "all") {
                if (this.remainingSize < 0) {
                    var n = e / this.cellSizesSum,
                        r;
                    while (t < this.cellCount - 1) r = Math.floor(n * this.cellSizes[t]), this.remainingSize += r - this.cellSizes[t], this.cellStretch[t] = r - this.cellSizes[t], t++;
                    this.cellStretch[this.cellCount - 1] = -this.remainingSize, this.remainingSize = 0
                }
            } else this.strategy === "last" && this.remainingSize < 0 && e !== Infinity && (this.cellStretch[this.cellCount - 1] = -this.remainingSize, this.remainingSize = 0)
        }, k.prototype.draw = function (e) {
            this.drawInterrupted = !1;
            if (!e && !this.wtDom.isVisible(this.wtTable.TABLE)) {
                this.drawInterrupted = !0;
                return
            }
            return this.getSetting("beforeDraw", !e), e = e && this.getSetting("offsetRow") === this.lastOffsetRow && this.getSetting("offsetColumn") === this.lastOffsetColumn, this.drawn && (this.scrollVertical(0), this.scrollHorizontal(0)), this.lastOffsetRow = this.getSetting("offsetRow"), this.lastOffsetColumn = this.getSetting("offsetColumn"), this.wtTable.draw(e), this.cloneSource || this.getSetting("onDraw", !e), this
        }, k.prototype.update = function (e, t) {
            return this.wtSettings.update(e, t)
        }, k.prototype.scrollVertical = function (e) {
            var t = this.wtScroll.scrollVertical(e);
            return this.getSetting("onScrollVertically"), t
        }, k.prototype.scrollHorizontal = function (e) {
            var t = this.wtScroll.scrollHorizontal(e);
            return this.getSetting("onScrollHorizontally"), t
        }, k.prototype.scrollViewport = function (e) {
            return this.wtScroll.scrollViewport(e), this
        }, k.prototype.getViewport = function () {
            return [this.wtTable.rowFilter.visibleToSource(0), this.wtTable.columnFilter.visibleToSource(0), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()]
        }, k.prototype.getSetting = function (e, t, n, r) {
            return this.wtSettings.getSetting(e, t, n, r)
        }, k.prototype.hasSetting = function (e) {
            return this.wtSettings.has(e)
        }, k.prototype.destroy = function () {
            e(document.body).off("." + this.guid), this.wtScrollbars.destroy(), clearTimeout(this.wheelTimeout), this.wtEvent && this.wtEvent.destroy()
        }, L.prototype = new w, L.prototype.resetFixedPosition = function () {
            if (!this.instance.wtTable.holder.parentNode) return;
            var e = this.clone.wtTable.holder.parentNode,
                t = this.instance.wtTable.holder.getBoundingClientRect();
            e.style.top = Math.ceil(t.top, 10) + "px", e.style.left = Math.ceil(t.left, 10) + "px"
        }, L.prototype.prepare = function () {}, L.prototype.refresh = function (e) {
            this.clone && this.clone.draw(e)
        }, L.prototype.getScrollPosition = function () {}, L.prototype.getLastCell = function () {}, L.prototype.applyToDOM = function () {}, L.prototype.scrollTo = function () {}, L.prototype.readWindowSize = function () {}, L.prototype.readSettings = function () {}, A.prototype.closest = function (e, t, n) {
            while (e != null && e !== n) {
                if (e.nodeType === 1 && t.indexOf(e.nodeName) > -1) return e;
                e = e.parentNode
            }
            return null
        }, A.prototype.isChildOf = function (e, t) {
            var n = e.parentNode;
            while (n != null) {
                if (n == t) return !0;
                n = n.parentNode
            }
            return !1
        }, A.prototype.index = function (e) {
            var t = 0;
            while (e = e.previousSibling)++t;
            return t
        }, document.documentElement.classList ? (A.prototype.hasClass = function (e, t) {
            return e.classList.contains(t)
        }, A.prototype.addClass = function (e, t) {
            e.classList.add(t)
        }, A.prototype.removeClass = function (e, t) {
            e.classList.remove(t)
        }) : (A.prototype.hasClass = function (e, t) {
            return e.className.match(new RegExp("(\\s|^)" + t + "(\\s|$)"))
        }, A.prototype.addClass = function (e, t) {
            this.hasClass(e, t) || (e.className += " " + t)
        }, A.prototype.removeClass = function (e, t) {
            if (this.hasClass(e, t)) {
                var n = new RegExp("(\\s|^)" + t + "(\\s|$)");
                e.className = e.className.replace(n, " ").trim()
            }
        }), A.prototype.removeTextNodes = function (e, t) {
            if (e.nodeType === 3) t.removeChild(e);
            else if (["TABLE", "THEAD", "TBODY", "TFOOT", "TR"].indexOf(e.nodeName) > -1) {
                var n = e.childNodes;
                for (var r = n.length - 1; r >= 0; r--) this.removeTextNodes(n[r], e)
            }
        }, A.prototype.empty = function (e) {
            var t;
            while (t = e.lastChild) e.removeChild(t)
        }, A.prototype.HTML_CHARACTERS = /(<(.*)>|&(.*);)/, A.prototype.fastInnerHTML = function (e, t) {
            this.HTML_CHARACTERS.test(t) ? e.innerHTML = t : this.fastInnerText(e, t)
        }, document.createTextNode("test").textContent ? A.prototype.fastInnerText = function (e, t) {
            var n = e.firstChild;
            n && n.nodeType === 3 && n.nextSibling === null ? n.textContent = t : (this.empty(e), e.appendChild(document.createTextNode(t)))
        } : A.prototype.fastInnerText = function (e, t) {
            var n = e.firstChild;
            n && n.nodeType === 3 && n.nextSibling === null ? n.data = t : (this.empty(e), e.appendChild(document.createTextNode(t)))
        }, A.prototype.isVisible = function (e) {
            var t = e;
            while (t !== document.documentElement) {
                if (t === null) return !1;
                if (t.nodeType === 11) {
                    if (t.host) {
                        if (t.host.impl) return A.prototype.isVisible(t.host.impl);
                        if (t.host) return A.prototype.isVisible(t.host);
                        throw new Error("Lost in Web Components world")
                    }
                    return !1
                }
                if (t.style.display === "none") return !1;
                t = t.parentNode
            }
            return !0
        }, A.prototype.offset = function (e) {
            if (this.hasCaptionProblem() && e.firstChild && e.firstChild.nodeName === "CAPTION") {
                var n = e.getBoundingClientRect();
                return {
                    top: n.top + (t.pageYOffset || document.documentElement.scrollTop) - (document.documentElement.clientTop || 0),
                    left: n.left + (t.pageXOffset || document.documentElement.scrollLeft) - (document.documentElement.clientLeft || 0)
                }
            }
            var r = e.offsetLeft,
                i = e.offsetTop,
                s = e;
            while (e = e.offsetParent) {
                if (e === document.body) break;
                r += e.offsetLeft, i += e.offsetTop, s = e
            }
            return s && s.style.position === "fixed" && (r += t.pageXOffset || document.documentElement.scrollLeft, i += t.pageYOffset || document.documentElement.scrollTop), {
                left: r,
                top: i
            }
        }, A.prototype.getComputedStyle = function (e) {
            return e.currentStyle || document.defaultView.getComputedStyle(e)
        }, A.prototype.outerWidth = function (e) {
            return e.offsetWidth
        }, A.prototype.outerHeight = function (e) {
            return this.hasCaptionProblem() && e.firstChild && e.firstChild.nodeName === "CAPTION" ? e.offsetHeight + e.firstChild.offsetHeight : e.offsetHeight
        },
        function () {
            function t() {
                var t = document.createElement("TABLE");
                t.style.borderSpacing = 0, t.style.borderWidth = 0, t.style.padding = 0;
                var n = document.createElement("TBODY");
                t.appendChild(n), n.appendChild(document.createElement("TR")), n.firstChild.appendChild(document.createElement("TD")), n.firstChild.firstChild.innerHTML = "<tr><td>t<br>t</td></tr>";
                var r = document.createElement("CAPTION");
                r.innerHTML = "c<br>c<br>c<br>c", r.style.padding = 0, r.style.margin = 0, t.insertBefore(r, n), document.body.appendChild(t), e = t.offsetHeight < 2 * t.lastChild.offsetHeight, document.body.removeChild(t)
            }

            function r() {
                var e = document.createElement("p");
                e.style.width = "100%", e.style.height = "200px";
                var t = document.createElement("div");
                t.style.position = "absolute", t.style.top = "0px", t.style.left = "0px", t.style.visibility = "hidden", t.style.width = "200px", t.style.height = "150px", t.style.overflow = "hidden", t.appendChild(e), (document.body || document.documentElement).appendChild(t);
                var n = e.offsetWidth;
                t.style.overflow = "scroll";
                var r = e.offsetWidth;
                return n == r && (r = t.clientWidth), (document.body || document.documentElement).removeChild(t), n - r
            }
            var e;
            A.prototype.hasCaptionProblem = function () {
                return e === void 0 && t(), e
            }, A.prototype.getCaretPosition = function (e) {
                if (e.selectionStart) return e.selectionStart;
                if (document.selection) {
                    e.focus();
                    var t = document.selection.createRange();
                    if (t == null) return 0;
                    var n = e.createTextRange(),
                        r = n.duplicate();
                    return n.moveToBookmark(t.getBookmark()), r.setEndPoint("EndToStart", n), r.text.length
                }
                return 0
            }, A.prototype.setCaretPosition = function (e, t, n) {
                n === void 0 && (n = t);
                if (e.setSelectionRange) e.focus(), e.setSelectionRange(t, n);
                else if (e.createTextRange) {
                    var r = e.createTextRange();
                    r.collapse(!0), r.moveEnd("character", n), r.moveStart("character", t), r.select()
                }
            };
            var n;
            A.prototype.getScrollbarWidth = function () {
                return n === void 0 && (n = r()), n
            }
        }(), O.prototype.parentCell = function (e) {
            var t = {},
                n = this.instance.wtTable.TABLE,
                r = this.wtDom.closest(e, ["TD", "TH"], n);
            return r && this.wtDom.isChildOf(r, n) ? (t.coords = this.instance.wtTable.getCoords(r), t.TD = r) : this.wtDom.hasClass(e, "wtBorder") && this.wtDom.hasClass(e, "current") && (t.coords = this.instance.selections.current.selected[0], t.TD = this.instance.wtTable.getCell(t.coords)), t
        }, O.prototype.destroy = function () {
            clearTimeout(this.dblClickTimeout0), clearTimeout(this.dblClickTimeout1)
        }, t.requestAnimFrame = function () {
            return t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.oRequestAnimationFrame || t.msRequestAnimationFrame || function (e, n) {
                return t.setTimeout(e, 1e3 / 60)
            }
        }(), t.cancelRequestAnimFrame = function () {
            return t.cancelAnimationFrame || t.webkitCancelRequestAnimationFrame || t.mozCancelRequestAnimationFrame || t.oCancelRequestAnimationFrame || t.msCancelRequestAnimationFrame || clearTimeout
        }(), t.getComputedStyle || function () {
            var e, n = {
                getPropertyValue: function (n) {
                    return n == "float" && (n = "styleFloat"), e.currentStyle[n.toUpperCase()] || null
                }
            };
            t.getComputedStyle = function (t) {
                return e = t, n
            }
        }();
    if (!String.prototype.trim) {
        var D = /^\s+|\s+$/g;
        String.prototype.trim = function () {
            return this.replace(D, "")
        }
    }
    P.prototype = new S, P.prototype.readSettings = function (e) {
        e.cloneOverlay instanceof L ? this.offset = 0 : this.offset = e.wtSettings.settings.offsetRow, this.total = e.getSetting("totalRows"), this.fixedCount = e.getSetting("fixedRowsTop")
    }, H.prototype = new x, H.prototype.add = function (e, t, n) {
        if (!this.isLastIncomplete() && this.remainingSize != 0) {
            var r = this.sizeAtIndex(e, t);
            if (r === void 0) return !1;
            var i = this.getContainerSize(this.cellSizesSum + r);
            return n ? this.cellSizes.unshift(r) : this.cellSizes.push(r), this.cellSizesSum += r, this.cellCount++, this.remainingSize = this.cellSizesSum - i, n && this.isLastIncomplete() ? !1 : !0
        }
        return !1
    }, H.prototype.remove = function () {
        var e = this.cellSizes.pop();
        this.cellSizesSum -= e, this.cellCount--, this.remainingSize -= e
    }, H.prototype.removeOutstanding = function () {
        while (this.cellCount > 0 && this.cellSizes[this.cellCount - 1] < this.remainingSize) this.remove()
    }, B.prototype.scrollVertical = function (e) {
        if (!this.instance.drawn) throw new Error("scrollVertical can only be called after table was drawn to DOM");
        var t = this.instance,
            n, r = t.getSetting("offsetRow"),
            i = t.getSetting("fixedRowsTop"),
            s = t.getSetting("totalRows"),
            o = t.wtViewport.getViewportHeight();
        return s > 0 ? n = this.scrollLogicVertical(e, r, s, i, o, function (e) {
            return e - r < i && e - r >= 0 ? t.getSetting("rowHeight", e - r) : t.getSetting("rowHeight", e)
        }, function (e) {
            t.wtTable.verticalRenderReverse = e
        }) : n = 0, n !== r && this.instance.wtScrollbars.vertical.scrollTo(n), t
    }, B.prototype.scrollHorizontal = function (e) {
        if (!this.instance.drawn) throw new Error("scrollHorizontal can only be called after table was drawn to DOM");
        var t = this.instance,
            n, r = t.getSetting("offsetColumn"),
            i = t.getSetting("fixedColumnsLeft"),
            s = t.getSetting("totalColumns"),
            o = t.wtViewport.getViewportWidth();
        return s > 0 ? n = this.scrollLogicHorizontal(e, r, s, i, o, function (e) {
            return e - r < i && e - r >= 0 ? t.getSetting("columnWidth", e - r) : t.getSetting("columnWidth", e)
        }) : n = 0, n !== r && this.instance.wtScrollbars.horizontal.scrollTo(n), t
    }, B.prototype.scrollLogicVertical = function (e, t, n, r, i, s, o) {
        var u = t + e;
        return u >= n - r && (u = n - r - 1, o(!0)), u < 0 && (u = 0), u
    }, B.prototype.scrollLogicHorizontal = function (e, t, n, r, i, s) {
        var o = t + e,
            u = 0,
            a;
        if (o > r) {
            o >= n - r && (o = n - r - 1), a = o;
            while (u < i && a < n) u += s(a), a++;
            if (u < i)
                while (o > 0) {
                    u += s(o - 1);
                    if (!(u < i)) break;
                    o--
                }
        } else o < 0 && (o = 0);
        return o
    }, B.prototype.scrollViewport = function (e) {
        if (!this.instance.drawn) return;
        var n = this.instance.getSetting("offsetRow"),
            r = this.instance.getSetting("offsetColumn"),
            i = this.instance.wtTable.getLastVisibleRow(),
            s = this.instance.getSetting("totalRows"),
            o = this.instance.getSetting("totalColumns"),
            u = this.instance.getSetting("fixedRowsTop"),
            a = this.instance.getSetting("fixedColumnsLeft");
        if (this.instance.getSetting("nativeScrollbars")) {
            var f = this.instance.wtTable.getCell(e);
            if (typeof f == "object") {
                var l = A.prototype.offset(f),
                    c = A.prototype.outerWidth(f),
                    h = A.prototype.outerHeight(f),
                    p = this.instance.wtScrollbars.horizontal.getScrollPosition(),
                    d = this.instance.wtScrollbars.vertical.getScrollPosition(),
                    v = A.prototype.outerWidth(this.instance.wtScrollbars.horizontal.scrollHandler),
                    m = A.prototype.outerHeight(this.instance.wtScrollbars.vertical.scrollHandler);
                this.instance.wtScrollbars.horizontal.scrollHandler !== t && (l.left = l.left - A.prototype.offset(this.instance.wtScrollbars.horizontal.scrollHandler).left), this.instance.wtScrollbars.vertical.scrollHandler !== t && (l.top = l.top - A.prototype.offset(this.instance.wtScrollbars.vertical.scrollHandler).top), v -= 20, m -= 20, c < v && (l.left < p ? this.instance.wtScrollbars.horizontal.setScrollPosition(l.left) : l.left + c > p + v && this.instance.wtScrollbars.horizontal.setScrollPosition(l.left - v + c)), h < m && (l.top < d ? this.instance.wtScrollbars.vertical.setScrollPosition(l.top) : l.top + h > d + m && this.instance.wtScrollbars.vertical.setScrollPosition(l.top - m + h));
                return
            }
        }
        if (e[0] < 0 || e[0] > s - 1) throw new Error("row " + e[0] + " does not exist");
        if (e[1] < 0 || e[1] > o - 1) throw new Error("column " + e[1] + " does not exist");
        e[0] > i ? (this.scrollVertical(e[0] - u - n), this.instance.wtTable.verticalRenderReverse = !0) : e[0] === i && this.instance.wtTable.rowStrategy.isLastIncomplete() ? (this.scrollVertical(e[0] - u - n), this.instance.wtTable.verticalRenderReverse = !0) : e[0] - u < n ? this.scrollVertical(e[0] - u - n) : this.scrollVertical(0);
        if (this.instance.wtTable.isColumnBeforeViewport(e[1])) this.instance.wtScrollbars.horizontal.scrollTo(e[1] - a);
        else if (this.instance.wtTable.isColumnAfterViewport(e[1]) || this.instance.wtTable.getLastVisibleColumn() === e[1] && !this.instance.wtTable.isLastColumnFullyVisible()) {
            var g = 0;
            for (var y = 0; y < a; y++) g += this.instance.getSetting("columnWidth", y);
            var b = e[1];
            g += this.instance.getSetting("columnWidth", b);
            var w = this.instance.wtViewport.getViewportWidth();
            if (g < w) {
                var E = this.instance.getSetting("columnWidth", b - 1);
                while (g + E <= w && b >= a) b--, g += E, E = this.instance.getSetting("columnWidth", b - 1)
            }
            this.instance.wtScrollbars.horizontal.scrollTo(b - a)
        }
        return this.instance
    }, j.prototype.init = function () {
        var t = this;
        this.$table = e(this.instance.wtTable.TABLE), this.slider = document.createElement("DIV"), this.sliderStyle = this.slider.style, this.sliderStyle.position = "absolute", this.sliderStyle.top = "0", this.sliderStyle.left = "0", this.sliderStyle.display = "none", this.slider.className = "dragdealer " + this.type, this.handle = document.createElement("DIV"), this.handleStyle = this.handle.style, this.handle.className = "handle", this.slider.appendChild(this.handle), this.container = this.instance.wtTable.holder, this.container.appendChild(this.slider);
        var n = !0;
        this.dragTimeout = null;
        var r, i = function () {
            t.onScroll(r)
        };
        this.dragdealer = new Y(this.slider, {
            vertical: this.type === "vertical",
            horizontal: this.type === "horizontal",
            slide: !1,
            speed: 100,
            animationCallback: function (e, s) {
                if (n) {
                    n = !1;
                    return
                }
                t.skipRefresh = !0, r = t.type === "vertical" ? s : e, t.dragTimeout === null && (t.dragTimeout = setInterval(i, 100), i())
            },
            callback: function (e, n) {
                t.skipRefresh = !1, clearInterval(t.dragTimeout), t.dragTimeout = null, r = t.type === "vertical" ? n : e, t.onScroll(r)
            }
        }), this.skipRefresh = !1
    }, j.prototype.onScroll = function (e) {
        if (this.instance.drawn) {
            this.readSettings();
            if (this.total > this.visibleCount) {
                var t = Math.round(this.handlePosition * this.total / this.sliderSize);
                e === 1 ? this.type === "vertical" ? this.instance.scrollVertical(Infinity).draw() : this.instance.scrollHorizontal(Infinity).draw() : t !== this.offset ? this.type === "vertical" ? this.instance.scrollVertical(t - this.offset).draw() : this.instance.scrollHorizontal(t - this.offset).draw() : this.refresh()
            }
        }
    }, j.prototype.getHandleSizeRatio = function (e, t) {
        return !t || e > t || e == t ? 1 : 1 / t
    }, j.prototype.prepare = function () {
        if (this.skipRefresh) return;
        var e = this.getHandleSizeRatio(this.visibleCount, this.total);
        (e === 1 || isNaN(e)) && this.scrollMode === "auto" || this.scrollMode === "none" ? this.visible = !1 : this.visible = !0
    }, j.prototype.refresh = function () {
        if (this.skipRefresh) return;
        if (!this.visible) {
            this.sliderStyle.display = "none";
            return
        }
        var e, t, n, r, i = this.visibleCount,
            s = this.instance.wtViewport.getWorkspaceWidth(),
            o = this.instance.wtViewport.getWorkspaceHeight();
        s === Infinity && (s = this.instance.wtViewport.getWorkspaceActualWidth()), o === Infinity && (o = this.instance.wtViewport.getWorkspaceActualHeight()), this.type === "vertical" ? (this.instance.wtTable.rowStrategy.isLastIncomplete() && i--, t = o - 2, this.sliderStyle.top = this.instance.wtDom.offset(this.$table[0]).top - this.instance.wtDom.offset(this.container).top + "px", this.sliderStyle.left = s - 1 + "px", this.sliderStyle.height = Math.max(t, 0) + "px") : (t = s - 2, this.sliderStyle.left = this.instance.wtDom.offset(this.$table[0]).left - this.instance.wtDom.offset(this.container).left + "px", this.sliderStyle.top = o - 1 + "px", this.sliderStyle.width = Math.max(t, 0) + "px"), e = this.getHandleSizeRatio(i, this.total), n = Math.round(t * e), n < 10 && (n = 15), r = Math.floor(t * (this.offset / this.total)), n + r > t && (r = t - n), this.type === "vertical" ? (this.handleStyle.height = n + "px", this.handleStyle.top = r + "px") : (this.handleStyle.width = n + "px", this.handleStyle.left = r + "px"), this.sliderStyle.display = "block"
    }, j.prototype.destroy = function () {
        clearInterval(this.dragdealer.interval)
    };
    var F = function (e) {
        this.instance = e, this.type = "vertical", this.init()
    };
    F.prototype = new j, F.prototype.scrollTo = function (e) {
        this.instance.update("offsetRow", e)
    }, F.prototype.readSettings = function () {
        this.scrollMode = this.instance.getSetting("scrollV"), this.offset = this.instance.getSetting("offsetRow"), this.total = this.instance.getSetting("totalRows"), this.visibleCount = this.instance.wtTable.rowStrategy.countVisible(), this.visibleCount > 1 && this.instance.wtTable.rowStrategy.isLastIncomplete() && this.visibleCount--, this.handlePosition = parseInt(this.handleStyle.top, 10), this.sliderSize = parseInt(this.sliderStyle.height, 10), this.fixedCount = this.instance.getSetting("fixedRowsTop")
    };
    var I = function (e) {
        this.instance = e, this.type = "horizontal", this.init()
    };
    I.prototype = new j, I.prototype.scrollTo = function (e) {
        this.instance.update("offsetColumn", e)
    }, I.prototype.readSettings = function () {
        this.scrollMode = this.instance.getSetting("scrollH"), this.offset = this.instance.getSetting("offsetColumn"), this.total = this.instance.getSetting("totalColumns"), this.visibleCount = this.instance.wtTable.columnStrategy.countVisible(), this.visibleCount > 1 && this.instance.wtTable.columnStrategy.isLastIncomplete() && this.visibleCount--, this.handlePosition = parseInt(this.handleStyle.left, 10), this.sliderSize = parseInt(this.sliderStyle.width, 10), this.fixedCount = this.instance.getSetting("fixedColumnsLeft")
    }, I.prototype.getHandleSizeRatio = function (e, t) {
        return !t || e > t || e == t ? 1 : e / t
    }, q.prototype = new w, q.prototype.resetFixedPosition = function () {
        if (!this.instance.wtTable.holder.parentNode) return;
        var e = this.clone.wtTable.holder.parentNode,
            n;
        if (this.scrollHandler === t) {
            n = this.instance.wtTable.hider.getBoundingClientRect();
            var r = Math.ceil(n.top, 10),
                i = Math.ceil(n.bottom, 10);
            r < 0 && i > 0 ? e.style.top = "0" : e.style.top = r + "px";
            var s = Math.ceil(n.left, 10),
                o = Math.ceil(n.right, 10);
            s < 0 && o > 0 ? e.style.left = "0" : e.style.left = s + "px"
        } else n = this.scrollHandler.getBoundingClientRect(), e.style.top = Math.ceil(n.top, 10) + "px", e.style.left = Math.ceil(n.left, 10) + "px";
        e.style.width = A.prototype.outerWidth(this.clone.wtTable.TABLE) + 4 + "px", e.style.height = A.prototype.outerHeight(this.clone.wtTable.TABLE) + 4 + "px"
    }, q.prototype.prepare = function () {}, q.prototype.refresh = function (e) {
        this.measureBefore = 0, this.measureAfter = 0, this.clone && this.clone.draw(e)
    }, q.prototype.getScrollPosition = function () {}, q.prototype.getLastCell = function () {}, q.prototype.applyToDOM = function () {}, q.prototype.scrollTo = function () {}, q.prototype.readWindowSize = function () {}, q.prototype.readSettings = function () {}, R.prototype = new w, R.prototype.resetFixedPosition = function () {
        if (!this.instance.wtTable.holder.parentNode) return;
        var e = this.clone.wtTable.holder.parentNode,
            n;
        if (this.scrollHandler === t) {
            n = this.instance.wtTable.hider.getBoundingClientRect();
            var r = Math.ceil(n.left, 10),
                i = Math.ceil(n.right, 10);
            r < 0 && i > 0 ? e.style.left = "0" : e.style.left = r + "px"
        } else n = this.scrollHandler.getBoundingClientRect(), e.style.top = Math.ceil(n.top, 10) + "px", e.style.left = Math.ceil(n.left, 10) + "px"
    }, R.prototype.react = function () {
        if (!this.instance.wtTable.holder.parentNode) return;
        var e = this.clone.wtTable.holder.parentNode;
        if (this.instance.wtScrollbars.vertical.scrollHandler === t) {
            var n = this.instance.wtTable.hider.getBoundingClientRect();
            e.style.top = Math.ceil(n.top, 10) + "px", e.style.height = A.prototype.outerHeight(this.clone.wtTable.TABLE) + "px"
        } else this.clone.wtTable.holder.style.top = -(this.instance.wtScrollbars.vertical.windowScrollPosition - this.instance.wtScrollbars.vertical.measureBefore) + "px", e.style.height = this.instance.wtViewport.getWorkspaceHeight() + "px";
        e.style.width = A.prototype.outerWidth(this.clone.wtTable.TABLE) + 4 + "px"
    }, R.prototype.prepare = function () {}, R.prototype.refresh = function (e) {
        this.measureBefore = 0, this.measureAfter = 0, this.clone && this.clone.draw(e)
    }, R.prototype.getScrollPosition = function () {
        return this.scrollHandler === t ? this.scrollHandler.scrollX : this.scrollHandler.scrollLeft
    }, R.prototype.setScrollPosition = function (e) {
        this.scrollHandler.scrollLeft = e
    }, R.prototype.onScroll = function () {
        w.prototype.onScroll.apply(this, arguments), this.instance.getSetting("onScrollHorizontally")
    }, R.prototype.getLastCell = function () {
        return this.instance.wtTable.getLastVisibleColumn()
    }, R.prototype.applyToDOM = function () {
        this.fixedContainer.style.paddingLeft = this.measureBefore + "px", this.fixedContainer.style.paddingRight = this.measureAfter + "px"
    }, R.prototype.scrollTo = function (e) {
        this.$scrollHandler.scrollLeft(this.tableParentOffset + e * this.cellSize)
    }, R.prototype.readWindowSize = function () {
        this.scrollHandler === t ? (this.windowSize = document.documentElement.clientWidth, this.tableParentOffset = this.instance.wtTable.holderOffset.left) : (this.windowSize = A.prototype.outerWidth(this.scrollHandler), this.tableParentOffset = 0), this.windowScrollPosition = this.getScrollPosition()
    }, R.prototype.readSettings = function () {
        this.offset = this.instance.getSetting("offsetColumn"), this.total = this.instance.getSetting("totalColumns")
    }, U.prototype = new w, U.prototype.resetFixedPosition = function () {
        if (!this.instance.wtTable.holder.parentNode) return;
        var e = this.clone.wtTable.holder.parentNode,
            n;
        if (this.scrollHandler === t) {
            n = this.instance.wtTable.hider.getBoundingClientRect();
            var r = Math.ceil(n.top, 10),
                i = Math.ceil(n.bottom, 10);
            r < 0 && i > 0 ? e.style.top = "0" : e.style.top = r + "px"
        } else n = this.instance.wtScrollbars.horizontal.scrollHandler.getBoundingClientRect(), e.style.top = Math.ceil(n.top, 10) + "px", e.style.left = Math.ceil(n.left, 10) + "px";
        this.instance.wtScrollbars.horizontal.scrollHandler === t ? e.style.width = this.instance.wtViewport.getWorkspaceActualWidth() + "px" : e.style.width = A.prototype.outerWidth(this.instance.wtTable.holder.parentNode) + "px", e.style.height = A.prototype.outerHeight(this.clone.wtTable.TABLE) + 4 + "px"
    }, U.prototype.react = function () {
        if (!this.instance.wtTable.holder.parentNode) return;
        if (this.instance.wtScrollbars.horizontal.scrollHandler !== t) {
            var e = this.clone.wtTable.holder.parentNode;
            e.firstChild.style.left = -this.instance.wtScrollbars.horizontal.windowScrollPosition + "px"
        }
    }, U.prototype.getScrollPosition = function () {
        return this.scrollHandler === t ? this.scrollHandler.scrollY : this.scrollHandler.scrollTop
    }, U.prototype.setScrollPosition = function (e) {
        this.scrollHandler.scrollTop = e
    }, U.prototype.onScroll = function (e) {
        w.prototype.onScroll.apply(this, arguments);
        var t, n = 0;
        t = this.windowScrollPosition - this.tableParentOffset, z = 0;
        if (t > 0) {
            var r = 0,
                i;
            for (var s = 0; s < this.total; s++) {
                i = this.instance.getSetting("rowHeight", s), r += i;
                if (r > t) break
            }
            this.offset > 0 && (z = r - t), n = s, n = Math.min(n, this.total)
        }
        this.curOuts = n > this.maxOuts ? this.maxOuts : n, n -= this.curOuts, this.instance.update("offsetRow", n), this.readSettings(), this.instance.draw(), this.instance.getSetting("onScrollVertically")
    }, U.prototype.getLastCell = function () {
        return this.instance.getSetting("offsetRow") + this.instance.wtTable.tbodyChildrenLength - 1
    };
    var z = 0;
    U.prototype.sumCellSizes = function (e, t) {
        var n = 0;
        while (e < t) n += this.instance.getSetting("rowHeight", e), e++;
        return n
    }, U.prototype.applyToDOM = function () {
        var e = this.instance.wtViewport.getColumnHeaderHeight();
        this.fixedContainer.style.height = e + this.sumCellSizes(0, this.total) + 4 + "px", this.fixed.style.top = this.measureBefore + "px", this.fixed.style.bottom = ""
    }, U.prototype.scrollTo = function (e) {
        var t = this.tableParentOffset + e * this.cellSize;
        this.$scrollHandler.scrollTop(t), this.onScroll(t)
    }, U.prototype.readWindowSize = function () {
        this.scrollHandler === t ? (this.windowSize = document.documentElement.clientHeight, this.tableParentOffset = this.instance.wtTable.holderOffset.top) : (this.windowSize = this.scrollHandler.clientHeight, this.tableParentOffset = 0), this.windowScrollPosition = this.getScrollPosition()
    }, U.prototype.readSettings = function () {
        this.offset = this.instance.getSetting("offsetRow"), this.total = this.instance.getSetting("totalRows")
    }, W.prototype.registerListeners = function () {
        function f() {
            if (!n.instance.wtTable.holder.parentNode) {
                n.destroy();
                return
            }
            n.vertical.windowScrollPosition = n.vertical.getScrollPosition(), n.horizontal.windowScrollPosition = n.horizontal.getScrollPosition(), n.box = n.instance.wtTable.hider.getBoundingClientRect(), (n.box.width !== u || n.box.height !== a) && n.instance.rowHeightCache && (u = n.box.width, a = n.box.height, n.instance.draw());
            if (n.vertical.windowScrollPosition !== r || n.horizontal.windowScrollPosition !== i || n.box.top !== s || n.box.left !== o) n.vertical.onScroll(), n.horizontal.onScroll(), n.vertical.react(), n.horizontal.react(), r = n.vertical.windowScrollPosition, i = n.horizontal.windowScrollPosition, s = n.box.top, o = n.box.left
        }
        var n = this,
            r, i, s, o, u, a, l = e(t);
        this.vertical.$scrollHandler.on("scroll." + this.instance.guid, f), this.vertical.scrollHandler !== this.horizontal.scrollHandler && this.horizontal.$scrollHandler.on("scroll." + this.instance.guid, f), this.vertical.scrollHandler !== t && this.horizontal.scrollHandler !== t && l.on("scroll." + this.instance.guid, f), l.on("load." + this.instance.guid, f), l.on("resize." + this.instance.guid, f), e(document).on("ready." + this.instance.guid, f), setInterval(f, 100)
    }, W.prototype.destroy = function () {
        this.vertical && this.vertical.destroy(), this.horizontal && this.horizontal.destroy()
    }, W.prototype.refresh = function (e) {
        this.horizontal && this.horizontal.readSettings(), this.vertical && this.vertical.readSettings(), this.horizontal && this.horizontal.prepare(), this.vertical && this.vertical.prepare(), this.horizontal && this.horizontal.refresh(e), this.vertical && this.vertical.refresh(e), this.corner && this.corner.refresh(e), this.debug && this.debug.refresh(e)
    }, X.prototype.add = function (e) {
        this.selected.push(e)
    }, X.prototype.clear = function () {
        this.selected.length = 0
    }, X.prototype.getCorners = function () {
        var e, t, n, r, i, s = this.selected.length;
        if (s > 0) {
            e = n = this.selected[0][0], t = r = this.selected[0][1];
            if (s > 1)
                for (i = 1; i < s; i++) this.selected[i][0] < e ? e = this.selected[i][0] : this.selected[i][0] > n && (n = this.selected[i][0]), this.selected[i][1] < t ? t = this.selected[i][1] : this.selected[i][1] > r && (r = this.selected[i][1])
        }
        return [e, t, n, r]
    }, X.prototype.draw = function () {
        var e, t, n, r, i, s = this.instance.wtTable.rowStrategy.countVisible(),
            o = this.instance.wtTable.columnStrategy.countVisible();
        if (this.selected.length) {
            e = this.getCorners();
            for (t = 0; t < s; t++)
                for (n = 0; n < o; n++) r = this.instance.wtTable.rowFilter.visibleToSource(t), i = this.instance.wtTable.columnFilter.visibleToSource(n), r >= e[0] && r <= e[2] && i >= e[1] && i <= e[3] ? this.instance.wtTable.currentCellCache.add(t, n, this.settings.className) : r >= e[0] && r <= e[2] ? this.instance.wtTable.currentCellCache.add(t, n, this.settings.highlightRowClassName) : i >= e[1] && i <= e[3] && this.instance.wtTable.currentCellCache.add(t, n, this.settings.highlightColumnClassName);
            this.border && this.border.appear(e)
        } else this.border && this.border.disappear()
    }, V.prototype.update = function (e, t) {
        if (t === void 0)
            for (var n in e) e.hasOwnProperty(n) && (this.settings[n] = e[n]);
        else this.settings[e] = t;
        return this.instance
    }, V.prototype.getSetting = function (e, t, n, r) {
        return this[e] ? this[e](t, n, r) : this._getSetting(e, t, n, r)
    }, V.prototype._getSetting = function (e, t, n, r) {
        return typeof this.settings[e] == "function" ? this.settings[e](t, n, r) : t !== void 0 && Object.prototype.toString.call(this.settings[e]) === "[object Array]" ? this.settings[e][t] : this.settings[e]
    }, V.prototype.has = function (e) {
        return !!this.settings[e]
    }, V.prototype.rowHeight = function (e, t) {
        this.instance.rowHeightCache || (this.instance.rowHeightCache = []);
        if (this.instance.rowHeightCache[e] === void 0) {
            var n = 23;
            return t && (n = this.instance.wtDom.outerHeight(t), this.instance.rowHeightCache[e] = n), n
        }
        return this.instance.rowHeightCache[e]
    }, $.prototype.refreshHiderDimensions = function () {
        var e = this.instance.wtViewport.getWorkspaceHeight(),
            t = this.instance.wtViewport.getWorkspaceWidth(),
            n = this.spreader.style;
        e === Infinity && t === Infinity || !!this.instance.getSetting("nativeScrollbars") ? (n.position = "relative", n.width = "auto", n.height = "auto") : (e === Infinity && (e = this.instance.wtViewport.getWorkspaceActualHeight()), t === Infinity && (t = this.instance.wtViewport.getWorkspaceActualWidth()), this.hiderStyle.overflow = "hidden", n.position = "absolute", n.top = "0", n.left = "0", this.instance.getSetting("nativeScrollbars") || (n.height = "4000px", n.width = "4000px"), e < 0 && (e = 0), this.hiderStyle.height = e + "px", this.hiderStyle.width = t + "px")
    }, $.prototype.refreshStretching = function () {
        if (this.instance.cloneSource) return;
        var e = this.instance,
            t = e.getSetting("stretchH"),
            n = e.getSetting("totalRows"),
            r = e.getSetting("totalColumns"),
            i = e.getSetting("offsetColumn"),
            s = function (e) {
                var t = o.instance.wtViewport.getViewportWidth(e);
                return t < e && o.instance.getSetting("nativeScrollbars") ? Infinity : t
            },
            o = this,
            u = function (t) {
                var n = o.columnFilter.visibleToSource(t);
                if (n < r) return e.getSetting("columnWidth", n)
            };
        t === "hybrid" && (i > 0 ? t = "last" : t = "none");
        var a = function (e) {
                return o.instance.getSetting("nativeScrollbars") ? o.instance.cloneOverlay instanceof L ? Infinity : 2 * o.instance.wtViewport.getViewportHeight(e) : o.instance.wtViewport.getViewportHeight(e)
            },
            f = function (e, t) {
                if (o.instance.getSetting("nativeScrollbars")) return 20;
                var r = o.rowFilter.visibleToSource(e);
                if (r < n) return o.verticalRenderReverse && e === 0 ? o.instance.getSetting("rowHeight", r, t) - 1 : o.instance.getSetting("rowHeight", r, t)
            };
        this.columnStrategy = new C(e, s, u, t), this.rowStrategy = new H(e, a, f)
    }, $.prototype.adjustAvailableNodes = function () {
        var e, t = this.instance.getSetting("rowHeaders"),
            n = t.length,
            r = this.instance.getSetting("columnHeaders"),
            i, s, o;
        while (this.colgroupChildrenLength < n) this.COLGROUP.appendChild(document.createElement("COL")), this.colgroupChildrenLength++;
        this.refreshStretching(), this.instance.cloneSource && (this.instance.cloneOverlay instanceof R || this.instance.cloneOverlay instanceof q) ? e = this.instance.getSetting("fixedColumnsLeft") : e = this.columnStrategy.cellCount;
        while (this.colgroupChildrenLength < e + n) this.COLGROUP.appendChild(document.createElement("COL")), this.colgroupChildrenLength++;
        while (this.colgroupChildrenLength > e + n) this.COLGROUP.removeChild(this.COLGROUP.lastChild), this.colgroupChildrenLength--;
        i = this.THEAD.firstChild;
        if (r.length) {
            i || (i = document.createElement("TR"), this.THEAD.appendChild(i)), this.theadChildrenLength = i.childNodes.length;
            while (this.theadChildrenLength < e + n) i.appendChild(document.createElement("TH")), this.theadChildrenLength++;
            while (this.theadChildrenLength > e + n) i.removeChild(i.lastChild), this.theadChildrenLength--
        } else i && this.wtDom.empty(i);
        for (o = 0; o < this.colgroupChildrenLength; o++) o < n ? this.wtDom.addClass(this.COLGROUP.childNodes[o], "rowHeader") : this.wtDom.removeClass(this.COLGROUP.childNodes[o], "rowHeader");
        if (r.length) {
            i = this.THEAD.firstChild;
            if (n) {
                s = i.firstChild;
                for (o = 0; o < n; o++) t[o](-n + o, s), s = s.nextSibling
            }
        }
        for (o = 0; o < e; o++) r.length && r[0](this.columnFilter.visibleToSource(o), i.childNodes[n + o])
    }, $.prototype.adjustColumns = function (e, t) {
        var n = e.childNodes.length;
        while (n < t) {
            var r = document.createElement("TD");
            e.appendChild(r), n++
        }
        while (n > t) e.removeChild(e.lastChild), n--
    }, $.prototype.draw = function (e) {
        return this.instance.getSetting("nativeScrollbars") && (this.verticalRenderReverse = !1), this.rowFilter.readSettings(this.instance), this.columnFilter.readSettings(this.instance), e ? this.instance.wtScrollbars && this.instance.wtScrollbars.refresh(!0) : (this.instance.getSetting("nativeScrollbars") ? this.instance.cloneSource ? this.tableOffset = this.instance.cloneSource.wtTable.tableOffset : (this.holderOffset = this.wtDom.offset(this.holder), this.tableOffset = this.wtDom.offset(this.TABLE), this.instance.wtScrollbars.vertical.readWindowSize(), this.instance.wtScrollbars.horizontal.readWindowSize(), this.instance.wtViewport.resetSettings()) : (this.tableOffset = this.wtDom.offset(this.TABLE), this.instance.wtViewport.resetSettings()), this._doDraw()), this.refreshPositions(e), e || this.instance.getSetting("nativeScrollbars") && (this.instance.cloneSource || (this.instance.wtScrollbars.vertical.resetFixedPosition(), this.instance.wtScrollbars.horizontal.resetFixedPosition(), this.instance.wtScrollbars.corner.resetFixedPosition(), this.instance.wtScrollbars.debug && this.instance.wtScrollbars.debug.resetFixedPosition())), this.instance.drawn = !0, this
    }, $.prototype._doDraw = function () {
        var e = 0,
            t, n, r, i = this.instance.getSetting("offsetRow"),
            s = this.instance.getSetting("totalRows"),
            o = this.instance.getSetting("totalColumns"),
            u, a = this.instance.getSetting("rowHeaders"),
            f = a.length,
            l, c, h, p = !1,
            d, v, m;
        this.verticalRenderReverse && (v = i);
        var g = !1;
        this.verticalRenderReverse && (i === s - this.rowFilter.fixedCount - 1 ? g = !0 : (this.instance.update("offsetRow", i + 1), this.rowFilter.readSettings(this.instance))), this.instance.cloneSource && (this.columnStrategy = this.instance.cloneSource.wtTable.columnStrategy, this.rowStrategy = this.instance.cloneSource.wtTable.rowStrategy);
        if (o > 0) {
            t = this.rowFilter.visibleToSource(e);
            var y = this.instance.getSetting("fixedRowsTop"),
                b;
            this.instance.cloneSource && (this.instance.cloneOverlay instanceof U || this.instance.cloneOverlay instanceof q ? b = y : this.instance.cloneOverlay instanceof R && (b = this.rowStrategy.countVisible())), this.adjustAvailableNodes(), p = !0, this.instance.cloneSource && (this.instance.cloneOverlay instanceof R || this.instance.cloneOverlay instanceof q) ? u = this.instance.getSetting("fixedColumnsLeft") : u = this.columnStrategy.cellCount, this.instance.cloneSource || (d = this.instance.wtViewport.getWorkspaceWidth(), this.columnStrategy.stretch());
            for (n = 0; n < u; n++) this.COLGROUP.childNodes[n + f].style.width = this.columnStrategy.getSize(n) + "px";
            while (t < s && t >= 0) {
                if (e > 1e3) throw new Error("Security brake: Too much TRs. Please define height for your table, which will enforce scrollbars.");
                if (b !== void 0 && e === b) break;
                if (e >= this.tbodyChildrenLength || this.verticalRenderReverse && e >= this.rowFilter.fixedCount) {
                    l = document.createElement("TR");
                    for (n = 0; n < f; n++) l.appendChild(document.createElement("TH"));
                    this.verticalRenderReverse && e >= this.rowFilter.fixedCount ? this.TBODY.insertBefore(l, this.TBODY.childNodes[this.rowFilter.fixedCount] || this.TBODY.firstChild) : this.TBODY.appendChild(l), this.tbodyChildrenLength++
                } else e === 0 ? l = this.TBODY.firstChild : l = l.nextSibling;
                h = l.firstChild;
                for (n = 0; n < f; n++) h.nodeName == "TD" && (c = h, h = document.createElement("TH"), l.insertBefore(h, c), l.removeChild(c)), a[n](t, h), h = h.nextSibling;
                this.adjustColumns(l, u + f);
                for (n = 0; n < u; n++) r = this.columnFilter.visibleToSource(n), n === 0 ? c = l.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(r)] : c = c.nextSibling, c.nodeName == "TH" && (h = c, c = document.createElement("TD"), l.insertBefore(c, h), l.removeChild(h)), c.className = "", c.removeAttribute("style"), this.instance.getSetting("cellRenderer", t, r, c);
                i = this.instance.getSetting("offsetRow");
                if (this.verticalRenderReverse && g) {
                    if (-this.wtDom.outerHeight(l.firstChild) < this.rowStrategy.remainingSize) {
                        this.TBODY.removeChild(l), this.instance.update("offsetRow", i + 1), this.tbodyChildrenLength--, this.rowFilter.readSettings(this.instance);
                        break
                    }
                    this.instance.cloneSource || (m = this.rowStrategy.add(e, c, this.verticalRenderReverse), m === !1 && this.rowStrategy.removeOutstanding())
                } else if (!this.instance.cloneSource) {
                    m = this.rowStrategy.add(e, c, this.verticalRenderReverse), m === !1 && (this.instance.getSetting("nativeScrollbars") || this.rowStrategy.removeOutstanding());
                    if (this.rowStrategy.isLastIncomplete()) {
                        if (this.verticalRenderReverse && !this.isRowInViewport(v)) {
                            this.verticalRenderReverse = !1, this.instance.update("offsetRow", v), this.draw();
                            return
                        }
                        break
                    }
                }
                this.instance.getSetting("nativeScrollbars") && (this.instance.cloneSource ? l.style.height = this.instance.getSetting("rowHeight", t) + "px" : this.instance.getSetting("rowHeight", t, c));
                if (this.verticalRenderReverse && e >= this.rowFilter.fixedCount) {
                    if (i === 0) break;
                    this.instance.update("offsetRow", i - 1), this.rowFilter.readSettings(this.instance)
                } else e++;
                t = this.rowFilter.visibleToSource(e)
            }
        }
        p || this.adjustAvailableNodes();
        if (!(this.instance.cloneOverlay instanceof L)) {
            e = this.rowStrategy.countVisible();
            while (this.tbodyChildrenLength > e) this.TBODY.removeChild(this.TBODY.lastChild), this.tbodyChildrenLength--
        }
        this.instance.wtScrollbars && this.instance.wtScrollbars.refresh(!1);
        if (!this.instance.cloneSource && d !== this.instance.wtViewport.getWorkspaceWidth()) {
            this.columnStrategy.stretch();
            for (n = 0; n < this.columnStrategy.cellCount; n++) this.COLGROUP.childNodes[n + f].style.width = this.columnStrategy.getSize(n) + "px"
        }
        this.verticalRenderReverse = !1
    }, $.prototype.refreshPositions = function (e) {
        this.refreshHiderDimensions(), this.refreshSelections(e)
    }, $.prototype.refreshSelections = function (e) {
        var t, n, r, i, s, o, u = [],
            a = this.rowStrategy.countVisible(),
            f = this.columnStrategy.countVisible();
        this.oldCellCache = this.currentCellCache, this.currentCellCache = new T;
        if (this.instance.selections)
            for (n in this.instance.selections) this.instance.selections.hasOwnProperty(n) && (this.instance.selections[n].draw(), this.instance.selections[n].settings.className && u.push(this.instance.selections[n].settings.className), this.instance.selections[n].settings.highlightRowClassName && u.push(this.instance.selections[n].settings.highlightRowClassName), this.instance.selections[n].settings.highlightColumnClassName && u.push(this.instance.selections[n].settings.highlightColumnClassName));
        o = u.length;
        for (t = 0; t < a; t++)
            for (r = 0; r < f; r++) {
                n = this.rowFilter.visibleToSource(t), i = this.columnFilter.visibleToSource(r);
                for (s = 0; s < o; s++) this.currentCellCache.test(t, r, u[s]) ? this.wtDom.addClass(this.getCell([n, i]), u[s]) : e && this.oldCellCache.test(t, r, u[s]) && this.wtDom.removeClass(this.getCell([n, i]), u[s])
            }
    }, $.prototype.getCell = function (e) {
        return this.isRowBeforeViewport(e[0]) ? -1 : this.isRowAfterViewport(e[0]) ? -2 : this.isColumnBeforeViewport(e[1]) ? -3 : this.isColumnAfterViewport(e[1]) ? -4 : this.TBODY.childNodes[this.rowFilter.sourceToVisible(e[0])].childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(e[1])]
    }, $.prototype.getCoords = function (e) {
        return [this.rowFilter.visibleToSource(this.wtDom.index(e.parentNode)), this.columnFilter.visibleRowHeadedColumnToSourceColumn(e.cellIndex)]
    }, $.prototype.getLastVisibleRow = function () {
        return this.rowFilter.visibleToSource(this.rowStrategy.cellCount - 1)
    }, $.prototype.getLastVisibleColumn = function () {
        return this.columnFilter.visibleToSource(this.columnStrategy.cellCount - 1)
    }, $.prototype.isRowBeforeViewport = function (e) {
        return this.rowFilter.sourceToVisible(e) < this.rowFilter.fixedCount && e >= this.rowFilter.fixedCount
    }, $.prototype.isRowAfterViewport = function (e) {
        return e > this.getLastVisibleRow()
    }, $.prototype.isColumnBeforeViewport = function (e) {
        return this.columnFilter.sourceToVisible(e) < this.columnFilter.fixedCount && e >= this.columnFilter.fixedCount
    }, $.prototype.isColumnAfterViewport = function (e) {
        return e > this.getLastVisibleColumn()
    }, $.prototype.isRowInViewport = function (e) {
        return !this.isRowBeforeViewport(e) && !this.isRowAfterViewport(e)
    }, $.prototype.isColumnInViewport = function (e) {
        return !this.isColumnBeforeViewport(e) && !this.isColumnAfterViewport(e)
    }, $.prototype.isLastRowFullyVisible = function () {
        return this.getLastVisibleRow() === this.instance.getSetting("totalRows") - 1 && !this.rowStrategy.isLastIncomplete()
    }, $.prototype.isLastColumnFullyVisible = function () {
        return this.getLastVisibleColumn() === this.instance.getSetting("totalColumns") - 1 && !this.columnStrategy.isLastIncomplete()
    }, J.prototype.getWorkspaceHeight = function (e) {
        if (this.instance.getSetting("nativeScrollbars")) return this.instance.wtScrollbars.vertical.windowSize;
        var t = this.instance.getSetting("height");
        if (t === Infinity || t === void 0 || t === null || t < 1) this.instance.wtScrollbars.vertical instanceof w ? t = this.instance.wtScrollbars.vertical.availableSize() : t = Infinity;
        return t !== Infinity && (e >= t ? t -= this.instance.getSetting("scrollbarHeight") : this.instance.wtScrollbars.horizontal.visible && (t -= this.instance.getSetting("scrollbarHeight"))), t
    }, J.prototype.getWorkspaceWidth = function (e) {
        var t = this.instance.getSetting("width");
        if (t === Infinity || t === void 0 || t === null || t < 1) this.instance.wtScrollbars.horizontal instanceof w ? t = this.instance.wtScrollbars.horizontal.availableSize() : t = Infinity;
        return t !== Infinity && (e >= t ? t -= this.instance.getSetting("scrollbarWidth") : this.instance.wtScrollbars.vertical.visible && (t -= this.instance.getSetting("scrollbarWidth"))), t
    }, J.prototype.getWorkspaceActualHeight = function () {
        return this.instance.wtDom.outerHeight(this.instance.wtTable.TABLE)
    }, J.prototype.getWorkspaceActualWidth = function () {
        return this.instance.wtDom.outerWidth(this.instance.wtTable.TABLE) || this.instance.wtDom.outerWidth(this.instance.wtTable.TBODY) || this.instance.wtDom.outerWidth(this.instance.wtTable.THEAD)
    }, J.prototype.getColumnHeaderHeight = function () {
        if (isNaN(this.columnHeaderHeight)) {
            var e = this.instance.wtDom.offset(this.instance.wtTable.TBODY),
                t = this.instance.wtTable.tableOffset;
            this.columnHeaderHeight = e.top - t.top
        }
        return this.columnHeaderHeight
    }, J.prototype.getViewportHeight = function (e) {
        var t = this.getWorkspaceHeight(e);
        if (t === Infinity) return t;
        var n = this.getColumnHeaderHeight();
        return n > 0 ? t - n : t
    }, J.prototype.getRowHeaderWidth = function () {
        if (this.instance.cloneSource) return this.instance.cloneSource.wtViewport.getRowHeaderWidth();
        if (isNaN(this.rowHeaderWidth)) {
            var e = this.instance.getSetting("rowHeaders");
            if (e.length) {
                var t = this.instance.wtTable.TABLE.querySelector("TH");
                this.rowHeaderWidth = 0;
                for (var n = 0, r = e.length; n < r; n++) t ? (this.rowHeaderWidth += this.instance.wtDom.outerWidth(t), t = t.nextSibling) : this.rowHeaderWidth += 50
            } else this.rowHeaderWidth = 0
        }
        return this.rowHeaderWidth
    }, J.prototype.getViewportWidth = function (e) {
        var t = this.getWorkspaceWidth(e);
        if (t === Infinity) return t;
        var n = this.getRowHeaderWidth();
        return n > 0 ? t - n : t
    }, J.prototype.resetSettings = function () {
        this.rowHeaderWidth = NaN, this.columnHeaderHeight = NaN
    };
    var Q = {
        x: 0,
        y: 0,
        init: function () {
            this.setEvent("mouse"), this.setEvent("touch")
        },
        setEvent: function (e) {
            var t = document["on" + e + "move"] || function () {};
            document["on" + e + "move"] = function (e) {
                t(e), Q.refresh(e)
            }
        },
        refresh: function (e) {
            e || (e = t.event), e.type == "mousemove" ? this.set(e) : e.touches && this.set(e.touches[0])
        },
        set: function (e) {
            e.pageX || e.pageY ? (this.x = e.pageX, this.y = e.pageY) : document.body && (e.clientX || e.clientY) && (this.x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft, this.y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop)
        }
    };
    Q.init();
    var G = {
            get: function (e) {
                var t = 0,
                    n = 0;
                if (e.offsetParent)
                    do n += e.offsetLeft, t += e.offsetTop; while (e = e.offsetParent);
                return [n, t]
            }
        },
        Y = function (e, t) {
            typeof e == "string" && (e = document.getElementById(e));
            if (!e) return;
            var n = e.getElementsByTagName("div")[0];
            if (!n || n.className.search(/(^|\s)handle(\s|$)/) == -1) return;
            this.init(e, n, t || {}), this.setup()
        };
    Y.prototype = {
            init: function (e, t, n) {
                this.wrapper = e, this.handle = t, this.options = n, this.disabled = this.getOption("disabled", !1), this.horizontal = this.getOption("horizontal", !0), this.vertical = this.getOption("vertical", !1), this.slide = this.getOption("slide", !0), this.steps = this.getOption("steps", 0), this.snap = this.getOption("snap", !1), this.loose = this.getOption("loose", !1), this.speed = this.getOption("speed", 10) / 100, this.xPrecision = this.getOption("xPrecision", 0), this.yPrecision = this.getOption("yPrecision", 0), this.callback = n.callback || null, this.animationCallback = n.animationCallback || null, this.bounds = {
                    left: n.left || 0,
                    right: -(n.right || 0),
                    top: n.top || 0,
                    bottom: -(n.bottom || 0),
                    x0: 0,
                    x1: 0,
                    xRange: 0,
                    y0: 0,
                    y1: 0,
                    yRange: 0
                }, this.value = {
                    prev: [-1, -1],
                    current: [n.x || 0, n.y || 0],
                    target: [n.x || 0, n.y || 0]
                }, this.offset = {
                    wrapper: [0, 0],
                    mouse: [0, 0],
                    prev: [-999999, -999999],
                    current: [0, 0],
                    target: [0, 0]
                }, this.change = [0, 0], this.activity = !1, this.dragging = !1, this.tapping = !1
            },
            getOption: function (e, t) {
                return this.options[e] !== undefined ? this.options[e] : t
            },
            setup: function () {
                this.setWrapperOffset(), this.setBoundsPadding(), this.setBounds(), this.setSteps(), this.addListeners()
            },
            setWrapperOffset: function () {
                this.offset.wrapper = G.get(this.wrapper)
            },
            setBoundsPadding: function () {
                !this.bounds.left && !this.bounds.right && (this.bounds.left = G.get(this.handle)[0] - this.offset.wrapper[0], this.bounds.right = -this.bounds.left), !this.bounds.top && !this.bounds.bottom && (this.bounds.top = G.get(this.handle)[1] - this.offset.wrapper[1], this.bounds.bottom = -this.bounds.top)
            },
            setBounds: function () {
                this.bounds.x0 = this.bounds.left, this.bounds.x1 = this.wrapper.offsetWidth + this.bounds.right, this.bounds.xRange = this.bounds.x1 - this.bounds.x0 - this.handle.offsetWidth, this.bounds.y0 = this.bounds.top, this.bounds.y1 = this.wrapper.offsetHeight + this.bounds.bottom, this.bounds.yRange = this.bounds.y1 - this.bounds.y0 - this.handle.offsetHeight, this.bounds.xStep = 1 / (this.xPrecision || Math.max(this.wrapper.offsetWidth, this.handle.offsetWidth)), this.bounds.yStep = 1 / (this.yPrecision || Math.max(this.wrapper.offsetHeight, this.handle.offsetHeight))
            },
            setSteps: function () {
                if (this.steps > 1) {
                    this.stepRatios = [];
                    for (var e = 0; e <= this.steps - 1; e++) this.stepRatios[e] = e / (this.steps - 1)
                }
            },
            addListeners: function () {
                var e = this;
                this.wrapper.onselectstart = function () {
                    return !1
                }, this.handle.onmousedown = this.handle.ontouchstart = function (t) {
                    e.handleDownHandler(t)
                }, this.wrapper.onmousedown = this.wrapper.ontouchstart = function (t) {
                    e.wrapperDownHandler(t)
                };
                var n = document.onmouseup || function () {};
                document.onmouseup = function (t) {
                    n(t), e.documentUpHandler(t)
                };
                var r = document.ontouchend || function () {};
                document.ontouchend = function (t) {
                    r(t), e.documentUpHandler(t)
                };
                var i = t.onresize || function () {};
                t.onresize = function (t) {
                    i(t), e.documentResizeHandler(t)
                }, this.wrapper.onmousemove = function (t) {
                    e.activity = !0
                }, this.wrapper.onclick = function (t) {
                    return !e.activity
                }, this.interval = setInterval(function () {
                    e.animate()
                }, 25), e.animate(!1, !0)
            },
            handleDownHandler: function (e) {
                this.activity = !1, Q.refresh(e), this.preventDefaults(e, !0), this.startDrag()
            },
            wrapperDownHandler: function (e) {
                Q.refresh(e), this.preventDefaults(e, !0), this.startTap()
            },
            documentUpHandler: function (e) {
                this.stopDrag(), this.stopTap()
            },
            documentResizeHandler: function (e) {
                this.setWrapperOffset(), this.setBounds(), this.update()
            },
            enable: function () {
                this.disabled = !1, this.handle.className = this.handle.className.replace(/\s?disabled/g, "")
            },
            disable: function () {
                this.disabled = !0, this.handle.className += " disabled"
            },
            setStep: function (e, t, n) {
                this.setValue(this.steps && e > 1 ? (e - 1) / (this.steps - 1) : 0, this.steps && t > 1 ? (t - 1) / (this.steps - 1) : 0, n)
            },
            setValue: function (e, t, n) {
                this.setTargetValue([e, t || 0]), n && this.groupCopy(this.value.current, this.value.target)
            },
            startTap: function (e) {
                if (this.disabled) return;
                this.tapping = !0, this.setWrapperOffset(), this.setBounds(), e === undefined && (e = [Q.x - this.offset.wrapper[0] - this.handle.offsetWidth / 2, Q.y - this.offset.wrapper[1] - this.handle.offsetHeight / 2]), this.setTargetOffset(e)
            },
            stopTap: function () {
                if (this.disabled || !this.tapping) return;
                this.tapping = !1, this.setTargetValue(this.value.current), this.result()
            },
            startDrag: function () {
                if (this.disabled) return;
                this.setWrapperOffset(), this.setBounds(), this.offset.mouse = [Q.x - G.get(this.handle)[0], Q.y - G.get(this.handle)[1]], this.dragging = !0
            },
            stopDrag: function () {
                if (this.disabled || !this.dragging) return;
                this.dragging = !1;
                var e = this.groupClone(this.value.current);
                if (this.slide) {
                    var t = this.change;
                    e[0] += t[0] * 4, e[1] += t[1] * 4
                }
                this.setTargetValue(e), this.result()
            },
            feedback: function () {
                var e = this.value.current;
                this.snap && this.steps > 1 && (e = this.getClosestSteps(e)), this.groupCompare(e, this.value.prev) || (typeof this.animationCallback == "function" && this.animationCallback(e[0], e[1]), this.groupCopy(this.value.prev, e))
            },
            result: function () {
                typeof this.callback == "function" && this.callback(this.value.target[0], this.value.target[1])
            },
            animate: function (e, t) {
                if (e && !this.dragging) return;
                if (this.dragging) {
                    var n = this.groupClone(this.value.target),
                        r = [Q.x - this.offset.wrapper[0] - this.offset.mouse[0], Q.y - this.offset.wrapper[1] - this.offset.mouse[1]];
                    this.setTargetOffset(r, this.loose), this.change = [this.value.target[0] - n[0], this.value.target[1] - n[1]]
                }(this.dragging || t) && this.groupCopy(this.value.current, this.value.target);
                if (this.dragging || this.glide() || t) this.update(), this.feedback()
            },
            glide: function () {
                var e = [this.value.target[0] - this.value.current[0], this.value.target[1] - this.value.current[1]];
                return !e[0] && !e[1] ? !1 : (Math.abs(e[0]) > this.bounds.xStep || Math.abs(e[1]) > this.bounds.yStep ? (this.value.current[0] += e[0] * this.speed, this.value.current[1] += e[1] * this.speed) : this.groupCopy(this.value.current, this.value.target), !0)
            },
            update: function () {
                this.snap ? this.offset.current = this.getOffsetsByRatios(this.getClosestSteps(this.value.current)) : this.offset.current = this.getOffsetsByRatios(this.value.current), this.show()
            },
            show: function () {
                this.groupCompare(this.offset.current, this.offset.prev) || (this.horizontal && (this.handle.style.left = String(this.offset.current[0]) + "px"), this.vertical && (this.handle.style.top = String(this.offset.current[1]) + "px"), this.groupCopy(this.offset.prev, this.offset.current))
            },
            setTargetValue: function (e, t) {
                var n = t ? this.getLooseValue(e) : this.getProperValue(e);
                this.groupCopy(this.value.target, n), this.offset.target = this.getOffsetsByRatios(n)
            },
            setTargetOffset: function (e, t) {
                var n = this.getRatiosByOffsets(e),
                    r = t ? this.getLooseValue(n) : this.getProperValue(n);
                this.groupCopy(this.value.target, r), this.offset.target = this.getOffsetsByRatios(r)
            },
            getLooseValue: function (e) {
                var t = this.getProperValue(e);
                return [t[0] + (e[0] - t[0]) / 4, t[1] + (e[1] - t[1]) / 4]
            },
            getProperValue: function (e) {
                var t = this.groupClone(e);
                return t[0] = Math.max(t[0], 0), t[1] = Math.max(t[1], 0), t[0] = Math.min(t[0], 1), t[1] = Math.min(t[1], 1), (!this.dragging && !this.tapping || this.snap) && this.steps > 1 && (t = this.getClosestSteps(t)), t
            },
            getRatiosByOffsets: function (e) {
                return [this.getRatioByOffset(e[0], this.bounds.xRange, this.bounds.x0), this.getRatioByOffset(e[1], this.bounds.yRange, this.bounds.y0)]
            },
            getRatioByOffset: function (e, t, n) {
                return t ? (e - n) / t : 0
            },
            getOffsetsByRatios: function (e) {
                return [this.getOffsetByRatio(e[0], this.bounds.xRange, this.bounds.x0), this.getOffsetByRatio(e[1], this.bounds.yRange, this.bounds.y0)]
            },
            getOffsetByRatio: function (e, t, n) {
                return Math.round(e * t) + n
            },
            getClosestSteps: function (e) {
                return [this.getClosestStep(e[0]), this.getClosestStep(e[1])]
            },
            getClosestStep: function (e) {
                var t = 0,
                    n = 1;
                for (var r = 0; r <= this.steps - 1; r++) Math.abs(this.stepRatios[r] - e) < n && (n = Math.abs(this.stepRatios[r] - e), t = r);
                return this.stepRatios[t]
            },
            groupCompare: function (e, t) {
                return e[0] == t[0] && e[1] == t[1]
            },
            groupCopy: function (e, t) {
                e[0] = t[0], e[1] = t[1]
            },
            groupClone: function (e) {
                return [e[0], e[1]]
            },
            preventDefaults: function (e, n) {
                e || (e = t.event), e.preventDefault && e.preventDefault(), e.returnValue = !1, n && document.selection && document.selection.empty()
            },
            cancelEvent: function (e) {
                e || (e = t.event), e.stopPropagation && e.stopPropagation(), e.cancelBubble = !0
            }
        },
        function (e) {
            typeof define == "function" && define.amd ? define(["jquery"], e) : typeof exports == "object" ? module.exports = e : e(jQuery)
        }(function (e) {
            function u(n) {
                var r = n || t.event,
                    o = [].slice.call(arguments, 1),
                    u = 0,
                    a = 0,
                    f = 0,
                    l = 0,
                    c = 0,
                    h;
                n = e.event.fix(r), n.type = "mousewheel", r.wheelDelta && (u = r.wheelDelta), r.detail && (u = r.detail * -1), r.deltaY && (f = r.deltaY * -1, u = f), r.deltaX && (a = r.deltaX, u = a * -1), r.wheelDeltaY !== undefined && (f = r.wheelDeltaY), r.wheelDeltaX !== undefined && (a = r.wheelDeltaX * -1), l = Math.abs(u);
                if (!i || l < i) i = l;
                c = Math.max(Math.abs(f), Math.abs(a));
                if (!s || c < s) s = c;
                return h = u > 0 ? "floor" : "ceil", u = Math[h](u / i), a = Math[h](a / s), f = Math[h](f / s), o.unshift(n, u, a, f), (e.event.dispatch || e.event.handle).apply(this, o)
            }
            var n = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
                r = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
                i, s;
            if (e.event.fixHooks)
                for (var o = n.length; o;) e.event.fixHooks[n[--o]] = e.event.mouseHooks;
            e.event.special.mousewheel = {
                setup: function () {
                    if (this.addEventListener)
                        for (var e = r.length; e;) this.addEventListener(r[--e], u, !1);
                    else this.onmousewheel = u
                },
                teardown: function () {
                    if (this.removeEventListener)
                        for (var e = r.length; e;) this.removeEventListener(r[--e], u, !1);
                    else this.onmousewheel = null
                }
            }, e.fn.extend({
                mousewheel: function (e) {
                    return e ? this.bind("mousewheel", e) : this.trigger("mousewheel")
                },
                unmousewheel: function (e) {
                    return this.unbind("mousewheel", e)
                }
            })
        })
})(jQuery, window, Handsontable),
function () {
    function o(e) {
        this._n = e
    }

    function u(e, t, n) {
        var r = Math.pow(10, t),
            i;
        i = (Math.round(e * r) / r).toFixed(t);
        if (n) {
            var s = new RegExp("0{1," + n + "}$");
            i = i.replace(s, "")
        }
        return i
    }

    function a(e, t) {
        var n;
        return t.indexOf("$") > -1 ? n = l(e, t) : t.indexOf("%") > -1 ? n = c(e, t) : t.indexOf(":") > -1 ? n = h(e, t) : n = d(e, t), n
    }

    function f(e, t) {
        if (t.indexOf(":") > -1) e._n = p(t);
        else if (t === i) e._n = 0;
        else {
            var s = t;
            n[r].delimiters.decimal !== "." && (t = t.replace(/\./g, "").replace(n[r].delimiters.decimal, "."));
            var o = new RegExp(n[r].abbreviations.thousand + "(?:\\)|(\\" + n[r].currency.symbol + ")?(?:\\))?)?$"),
                u = new RegExp(n[r].abbreviations.million + "(?:\\)|(\\" + n[r].currency.symbol + ")?(?:\\))?)?$"),
                a = new RegExp(n[r].abbreviations.billion + "(?:\\)|(\\" + n[r].currency.symbol + ")?(?:\\))?)?$"),
                f = new RegExp(n[r].abbreviations.trillion + "(?:\\)|(\\" + n[r].currency.symbol + ")?(?:\\))?)?$"),
                l = ["KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
                c = !1;
            for (var h = 0; h <= l.length; h++) {
                c = t.indexOf(l[h]) > -1 ? Math.pow(1024, h + 1) : !1;
                if (c) break
            }
            e._n = (c ? c : 1) * (s.match(o) ? Math.pow(10, 3) : 1) * (s.match(u) ? Math.pow(10, 6) : 1) * (s.match(a) ? Math.pow(10, 9) : 1) * (s.match(f) ? Math.pow(10, 12) : 1) * (t.indexOf("%") > -1 ? .01 : 1) * Number((t.indexOf("(") > -1 ? "-" : "") + t.replace(/[^0-9\.-]+/g, "")), e._n = c ? Math.ceil(e._n) : e._n
        }
        return e._n
    }

    function l(e, t) {
        var i = t.indexOf("$") <= 1 ? !0 : !1,
            s = "";
        t.indexOf(" $") > -1 ? (s = " ", t = t.replace(" $", "")) : t.indexOf("$ ") > -1 ? (s = " ", t = t.replace("$ ", "")) : t = t.replace("$", "");
        var o = a(e, t);
        return i ? o.indexOf("(") > -1 || o.indexOf("-") > -1 ? (o = o.split(""), o.splice(1, 0, n[r].currency.symbol + s), o = o.join("")) : o = n[r].currency.symbol + s + o : o.indexOf(")") > -1 ? (o = o.split(""), o.splice(-1, 0, s + n[r].currency.symbol), o = o.join("")) : o = o + s + n[r].currency.symbol, o
    }

    function c(e, t) {
        var n = "";
        t.indexOf(" %") > -1 ? (n = " ", t = t.replace(" %", "")) : t = t.replace("%", ""), e._n = e._n * 100;
        var r = a(e, t);
        return r.indexOf(")") > -1 ? (r = r.split(""), r.splice(-1, 0, n + "%"), r = r.join("")) : r = r + n + "%", r
    }

    function h(e, t) {
        var n = Math.floor(e._n / 60 / 60),
            r = Math.floor((e._n - n * 60 * 60) / 60),
            i = Math.round(e._n - n * 60 * 60 - r * 60);
        return n + ":" + (r < 10 ? "0" + r : r) + ":" + (i < 10 ? "0" + i : i)
    }

    function p(e) {
        var t = e.split(":"),
            n = 0;
        return t.length === 3 ? (n += Number(t[0]) * 60 * 60, n += Number(t[1]) * 60, n += Number(t[2])) : t.lenght === 2 && (n += Number(t[0]) * 60, n += Number(t[1])), Number(n)
    }

    function d(e, t) {
        var s = !1,
            o = !1,
            a = "",
            f = "",
            l = "",
            c = Math.abs(e._n);
        if (e._n === 0 && i !== null) return i;
        t.indexOf("(") > -1 && (s = !0, t = t.slice(1, -1)), t.indexOf("a") > -1 && (t.indexOf(" a") > -1 ? (a = " ", t = t.replace(" a", "")) : t = t.replace("a", ""), c >= Math.pow(10, 12) ? (a += n[r].abbreviations.trillion, e._n = e._n / Math.pow(10, 12)) : c < Math.pow(10, 12) && c >= Math.pow(10, 9) ? (a += n[r].abbreviations.billion, e._n = e._n / Math.pow(10, 9)) : c < Math.pow(10, 9) && c >= Math.pow(10, 6) ? (a += n[r].abbreviations.million, e._n = e._n / Math.pow(10, 6)) : c < Math.pow(10, 6) && c >= Math.pow(10, 3) && (a += n[r].abbreviations.thousand, e._n = e._n / Math.pow(10, 3)));
        if (t.indexOf("b") > -1) {
            t.indexOf(" b") > -1 ? (f = " ", t = t.replace(" b", "")) : t = t.replace("b", "");
            var h = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
                p, d;
            for (var v = 0; v <= h.length; v++) {
                p = Math.pow(1024, v), d = Math.pow(1024, v + 1);
                if (e._n >= p && e._n < d) {
                    f += h[v], p > 0 && (e._n = e._n / p);
                    break
                }
            }
        }
        t.indexOf("o") > -1 && (t.indexOf(" o") > -1 ? (l = " ", t = t.replace(" o", "")) : t = t.replace("o", ""), l += n[r].ordinal(e._n)), t.indexOf("[.]") > -1 && (o = !0, t = t.replace("[.]", "."));
        var m = e._n.toString().split(".")[0],
            g = t.split(".")[1],
            y = t.indexOf(","),
            b = "",
            w = !1;
        return g ? (g.indexOf("[") > -1 ? (g = g.replace("]", ""), g = g.split("["), b = u(e._n, g[0].length + g[1].length, g[1].length)) : b = u(e._n, g.length), m = b.split(".")[0], b.split(".")[1].length ? b = n[r].delimiters.decimal + b.split(".")[1] : b = "", o && Number(b) === 0 && (b = "")) : m = u(e._n, null), m.indexOf("-") > -1 && (m = m.slice(1), w = !0), y > -1 && (m = m.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + n[r].delimiters.thousands)), t.indexOf(".") === 0 && (m = ""), (s && w ? "(" : "") + (!s && w ? "-" : "") + m + b + (l ? l : "") + (a ? a : "") + (f ? f : "") + (s && w ? ")" : "")
    }

    function v(e, t) {
        n[e] = t
    }
    var e, t = "1.4.7",
        n = {},
        r = "en",
        i = null,
        s = typeof module != "undefined" && module.exports;
    e = function (t) {
        return e.isNumeral(t) ? t = t.value() : Number(t) || (t = 0), new o(Number(t))
    }, e.version = t, e.isNumeral = function (e) {
        return e instanceof o
    }, e.language = function (t, i) {
        return t ? (t && !i && (r = t), (i || !n[t]) && v(t, i), e) : r
    }, e.language("en", {
        delimiters: {
            thousands: ",",
            decimal: "."
        },
        abbreviations: {
            thousand: "k",
            million: "m",
            billion: "b",
            trillion: "t"
        },
        ordinal: function (e) {
            var t = e % 10;
            return ~~(e % 100 / 10) === 1 ? "th" : t === 1 ? "st" : t === 2 ? "nd" : t === 3 ? "rd" : "th"
        },
        currency: {
            symbol: "$"
        }
    }), e.zeroFormat = function (e) {
        typeof e == "string" ? i = e : i = null
    }, e.fn = o.prototype = {
        clone: function () {
            return e(this)
        },
        format: function (t) {
            return a(this, t ? t : e.defaultFormat)
        },
        unformat: function (t) {
            return f(this, t ? t : e.defaultFormat)
        },
        value: function () {
            return this._n
        },
        valueOf: function () {
            return this._n
        },
        set: function (e) {
            return this._n = Number(e), this
        },
        add: function (e) {
            return this._n = this._n + Number(e), this
        },
        subtract: function (e) {
            return this._n = this._n - Number(e), this
        },
        multiply: function (e) {
            return this._n = this._n * Number(e), this
        },
        divide: function (e) {
            return this._n = this._n / Number(e), this
        },
        difference: function (e) {
            var t = this._n - Number(e);
            return t < 0 && (t = -t), t
        }
    }, s && (module.exports = e), typeof ender == "undefined" && (this.numeral = e), typeof define == "function" && define.amd && define([], function () {
        return e
    })
}.call(this);
(function ($, window) {
    var htmlSpecialCharsRegEx = /[<>&\r\n"']/gm;
    var htmlSpecialCharsPlaceHolders = {
        '<': 'lt;',
        '>': 'gt;',
        '&': 'amp;',
        '\r': "#13;",
        '\n': "#10;",
        '"': 'quot;',
        "'": 'apos;'
    };
    $.extend({
        fileDownload: function (fileUrl, options) {
            var settings = $.extend({
                preparingMessageHtml: null,
                failMessageHtml: null,
                androidPostUnsupportedMessageHtml: "Unfortunately your Android browser doesn't support this type of file download. Please try again with a different browser.",
                dialogOptions: {
                    modal: false
                },
                prepareCallback: function (url) {},
                successCallback: function (url) {},
                failCallback: function (responseHtml, url) {},
                httpMethod: "POST",
                data: null,
                checkInterval: 100,
                cookieName: "fileDownload",
                cookieValue: "true",
                cookiePath: "/",
                popupWindowTitle: "Initiating file download...",
                encodeHTMLEntities: true
            }, options);
            var deferred = new $.Deferred();
            var userAgent = (navigator.userAgent || navigator.vendor || window.opera).toLowerCase();
            var isIos;
            var isAndroid;
            var isOtherMobileBrowser;
            if (/ip(ad|hone|od)/.test(userAgent)) {
                isIos = true;
            } else if (userAgent.indexOf('android') !== -1) {
                isAndroid = true;
            } else {
                isOtherMobileBrowser = /avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|playbook|silk|iemobile|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|e\-|e\/|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\-|2|g)|yas\-|your|zeto|zte\-/i.test(userAgent.substr(0, 4));
            }
            var httpMethodUpper = settings.httpMethod.toUpperCase();
            if (isAndroid && httpMethodUpper !== "GET") {
                if ($().dialog) {
                    $("<div>").html(settings.androidPostUnsupportedMessageHtml).dialog(settings.dialogOptions);
                } else {
                    alert(settings.androidPostUnsupportedMessageHtml);
                }
                return deferred.reject();
            }
            var $preparingDialog = null;
            var internalCallbacks = {
                onPrepare: function (url) {
                    if (settings.preparingMessageHtml) {
                        $preparingDialog = $("<div>").html(settings.preparingMessageHtml).dialog(settings.dialogOptions);
                    } else if (settings.prepareCallback) {
                        settings.prepareCallback(url);
                    }
                },
                onSuccess: function (url) {
                    if ($preparingDialog) {
                        $preparingDialog.dialog('close');
                    };
                    settings.successCallback(url);
                    deferred.resolve(url);
                },
                onFail: function (responseHtml, url) {
                    if ($preparingDialog) {
                        $preparingDialog.dialog('close');
                    };
                    if (settings.failMessageHtml) {
                        $("<div>").html(settings.failMessageHtml).dialog(settings.dialogOptions);
                    }
                    settings.failCallback(responseHtml, url);
                    deferred.reject(responseHtml, url);
                }
            };
            internalCallbacks.onPrepare(fileUrl);
            if (settings.data !== null && typeof settings.data !== "string") {
                settings.data = $.param(settings.data);
            }
            var $iframe, downloadWindow, formDoc, $form;
            if (httpMethodUpper === "GET") {
                if (settings.data !== null) {
                    var qsStart = fileUrl.indexOf('?');
                    if (qsStart !== -1) {
                        if (fileUrl.substring(fileUrl.length - 1) !== "&") {
                            fileUrl = fileUrl + "&";
                        }
                    } else {
                        fileUrl = fileUrl + "?";
                    }
                    fileUrl = fileUrl + settings.data;
                }
                if (isIos || isAndroid) {
                    downloadWindow = window.open(fileUrl);
                    downloadWindow.document.title = settings.popupWindowTitle;
                    window.focus();
                } else if (isOtherMobileBrowser) {
                    window.location(fileUrl);
                } else {
                    $iframe = $("<iframe>").hide().prop("src", fileUrl).appendTo("body");
                }
            } else {
                var formInnerHtml = "";
                if (settings.data !== null) {
                    $.each(settings.data.replace(/\+/g, ' ').split("&"), function () {
                        var kvp = this.split("=");
                        var key = settings.encodeHTMLEntities ? htmlSpecialCharsEntityEncode(decodeURIComponent(kvp[0])) : decodeURIComponent(kvp[0]);
                        if (key) {
                            var value = settings.encodeHTMLEntities ? htmlSpecialCharsEntityEncode(decodeURIComponent(kvp[1])) : decodeURIComponent(kvp[1]);
                            formInnerHtml += '<input type="hidden" name="' + key + '" value="' + value + '" />';
                        }
                    });
                }
                if (isOtherMobileBrowser) {
                    $form = $("<form>").appendTo("body");
                    $form.hide().prop('method', settings.httpMethod).prop('action', fileUrl).html(formInnerHtml);
                } else {
                    if (isIos) {
                        downloadWindow = window.open("about:blank");
                        downloadWindow.document.title = settings.popupWindowTitle;
                        formDoc = downloadWindow.document;
                        window.focus();
                    } else {
                        $iframe = $("<iframe style='display: none' src='about:blank'></iframe>").appendTo("body");
                        formDoc = getiframeDocument($iframe);
                    }
                    formDoc.write("<html><head></head><body><form method='" + settings.httpMethod + "' action='" + fileUrl + "'>" + formInnerHtml + "</form>" + settings.popupWindowTitle + "</body></html>");
                    $form = $(formDoc).find('form');
                }
                $form.submit();
            }
            setTimeout(checkFileDownloadComplete, settings.checkInterval);

            function checkFileDownloadComplete() {
                if (document.cookie.indexOf(settings.cookieName + "=" + settings.cookieValue) != -1) {
                    internalCallbacks.onSuccess(fileUrl);
                    document.cookie = settings.cookieName + "=; expires=" + new Date(1000).toUTCString() + "; path=" + settings.cookiePath;
                    cleanUp(false);
                    return;
                }
                if (downloadWindow || $iframe) {
                    try {
                        var formDoc = downloadWindow ? downloadWindow.document : getiframeDocument($iframe);
                        if (formDoc && formDoc.body != null && formDoc.body.innerHTML.length) {
                            var isFailure = true;
                            if ($form && $form.length) {
                                var $contents = $(formDoc.body).contents().first();
                                if ($contents.length && $contents[0] === $form[0]) {
                                    isFailure = false;
                                }
                            }
                            if (isFailure) {
                                internalCallbacks.onFail(formDoc.body.innerHTML, fileUrl);
                                cleanUp(true);
                                return;
                            }
                        }
                    } catch (err) {
                        internalCallbacks.onFail('', fileUrl);
                        cleanUp(true);
                        return;
                    }
                }
                setTimeout(checkFileDownloadComplete, settings.checkInterval);
            }

            function getiframeDocument($iframe) {
                var iframeDoc = $iframe[0].contentWindow || $iframe[0].contentDocument;
                if (iframeDoc.document) {
                    iframeDoc = iframeDoc.document;
                }
                return iframeDoc;
            }

            function cleanUp(isFailure) {
                setTimeout(function () {
                    if (downloadWindow) {
                        if (isAndroid) {
                            downloadWindow.close();
                        }
                        if (isIos) {
                            downloadWindow.focus();
                            if (isFailure) {
                                downloadWindow.close();
                            }
                        }
                    }
                }, 0);
            }

            function htmlSpecialCharsEntityEncode(str) {
                return str.replace(htmlSpecialCharsRegEx, function (match) {
                    return '&' + htmlSpecialCharsPlaceHolders[match];
                });
            }
            return deferred.promise();
        }
    });
})(jQuery, this);
! function (e, r) {
    "object" == typeof exports && "object" == typeof module ? module.exports = r(require("crypto")) : "function" == typeof define && define.amd ? define(["crypto"], r) : "object" == typeof exports ? exports.mathjs = r(require("crypto")) : e.mathjs = r(e.crypto)
}(this, function (e) {
    return function (e) {
        function r(t) {
            if (n[t]) return n[t].exports;
            var i = n[t] = {
                exports: {},
                id: t,
                loaded: !1
            };
            return e[t].call(i.exports, i, i.exports, r), i.loaded = !0, i.exports
        }
        var n = {};
        return r.m = e, r.c = n, r.p = "", r(0)
    }([
        function (e, r, n) {
            e.exports = n(1)
        },
        function (e, r, n) {
            function t(e) {
                if ("function" != typeof Object.create) throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");
                var r = {},
                    t = {
                        matrix: "matrix",
                        number: "number",
                        precision: 20,
                        epsilon: 1e-14
                    };
                r.config = function (e) {
                    if (e) {
                        if (i.deepExtend(t, e), e.precision && r.type.BigNumber.config({
                            precision: e.precision
                        }), e.number && e.number.defaultType) throw new Error("setting `number.defaultType` is deprecated. Use `number` instead.");
                        if (e.number && e.number.precision) throw new Error("setting `number.precision` is deprecated. Use `precision` instead.");
                        if (e.matrix && e.matrix.defaultType) throw new Error("setting `matrix.defaultType` is deprecated. Use `matrix` instead.");
                        if (e.matrix && e.matrix["default"]) throw new Error("setting `matrix.default` is deprecated. Use `matrix` instead.");
                        if (e.decimals) throw new Error("setting `decimals` is deprecated. Use `precision` instead.")
                    }
                    return i.clone(t)
                };
                var o = n(119).constructor();
                if ("function" != typeof o.prototype.clone && (o.prototype.clone = function () {
                    return new o(this)
                }), "function" == typeof o.convert) throw new Error("Cannot add function convert to BigNumber: function already exists");
                return o.convert = function (e) {
                    return digits(e) > 15 ? e : new o(e)
                }, r.error = n(4), r.type = {}, r.type.Complex = n(5), r.type.Range = n(6), r.type.Index = n(7), r.type.Matrix = n(8), r.type.Unit = n(9), r.type.Help = n(10), r.type.BigNumber = o, r.collection = n(11), r.expression = {}, r.expression.node = n(14), r.expression.parse = n(12), r.expression.Parser = n(13), r.expression.docs = n(15), n(17)(r, t), n(18)(r, t), n(19)(r, t), n(20)(r, t), n(21)(r, t), n(22)(r, t), n(23)(r, t), n(24)(r, t), n(25)(r, t), n(26)(r, t), n(27)(r, t), n(28)(r, t), n(29)(r, t), n(30)(r, t), n(31)(r, t), n(32)(r, t), n(33)(r, t), n(34)(r, t), n(35)(r, t), n(36)(r, t), n(37)(r, t), n(38)(r, t), n(39)(r, t), n(40)(r, t), n(41)(r, t), n(42)(r, t), n(43)(r, t), n(44)(r, t), n(45)(r, t), n(46)(r, t), n(47)(r, t), n(48)(r, t), n(49)(r, t), n(50)(r, t), n(51)(r, t), n(52)(r, t), n(53)(r, t), n(54)(r, t), n(55)(r, t), n(56)(r, t), n(57)(r, t), n(58)(r, t), n(59)(r, t), n(60)(r, t), n(61)(r, t), n(62)(r, t), n(63)(r, t), n(64)(r, t), n(65)(r, t), n(66)(r, t), n(67)(r, t), n(68)(r, t), n(69)(r, t), n(70)(r, t), n(71)(r, t), n(72)(r, t), n(73)(r, t), n(74)(r, t), n(75)(r, t), n(76)(r, t), n(77)(r, t), n(78)(r, t), n(79)(r, t), n(80)(r, t), n(81)(r, t), n(82)(r, t), n(83)(r, t), n(84)(r, t), n(85)(r, t), n(86)(r, t), n(87)(r, t), n(88)(r, t), n(89)(r, t), n(90)(r, t), n(91)(r, t), n(92)(r, t), n(93)(r, t), n(94)(r, t), n(95)(r, t), n(96)(r, t), n(97)(r, t), n(98)(r, t), n(99)(r, t), n(100)(r, t), n(101)(r, t), n(102)(r, t), n(103)(r, t), n(104)(r, t), n(105)(r, t), n(106)(r, t), n(107)(r, t), n(108)(r, t), n(109)(r, t), n(110)(r, t), n(111)(r, t), n(112)(r, t), n(113)(r, t), n(114)(r, t), n(115)(r, t), n(116)(r, t), n(117)(r, t), n(118)(r, t), n(2)(r, t), r.chaining = {}, r.chaining.Selector = n(16)(r, t), r.config(e), r
            }
            var i = n(3);
            e.exports = t
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(5);
                e.pi = Math.PI, e.e = Math.E, e.tau = 2 * Math.PI, e.i = new r(0, 1), e.Infinity = 1 / 0, e.NaN = 0 / 0, e["true"] = !0, e["false"] = !1, e.E = Math.E, e.LN2 = Math.LN2, e.LN10 = Math.LN10, e.LOG2E = Math.LOG2E, e.LOG10E = Math.LOG10E, e.PI = Math.PI, e.SQRT1_2 = Math.SQRT1_2, e.SQRT2 = Math.SQRT2
            }
        },
        function (e, r) {
            r.clone = function n(e) {
                var r = typeof e;
                if ("number" === r || "string" === r || "boolean" === r || null === e || void 0 === e) return e;
                if ("function" == typeof e.clone) return e.clone();
                if (Array.isArray(e)) return e.map(function (e) {
                    return n(e)
                });
                if (e instanceof Number) return new Number(e.valueOf());
                if (e instanceof String) return new String(e.valueOf());
                if (e instanceof Boolean) return new Boolean(e.valueOf());
                if (e instanceof Date) return new Date(e.valueOf());
                if (e instanceof RegExp) throw new TypeError("Cannot clone " + e);
                var t = {};
                for (var i in e) e.hasOwnProperty(i) && (t[i] = n(e[i]));
                return t
            }, r.extend = function (e, r) {
                for (var n in r) r.hasOwnProperty(n) && (e[n] = r[n]);
                return e
            }, r.deepExtend = function t(e, r) {
                if (Array.isArray(r)) throw new TypeError("Arrays are not supported by deepExtend");
                for (var n in r)
                    if (r.hasOwnProperty(n))
                        if (r[n] && r[n].constructor === Object) void 0 === e[n] && (e[n] = {}), e[n].constructor === Object ? t(e[n], r[n]) : e[n] = r[n];
                        else {
                            if (Array.isArray(r[n])) throw new TypeError("Arrays are not supported by deepExtend");
                            e[n] = r[n]
                        }
                return e
            }, r.deepEqual = function (e, n) {
                var t, i, o;
                if (Array.isArray(e)) {
                    if (!Array.isArray(n)) return !1;
                    if (e.length != n.length) return !1;
                    for (i = 0, o = e.length; o > i; i++)
                        if (!r.deepEqual(e[i], n[i])) return !1;
                    return !0
                }
                if (e instanceof Object) {
                    if (Array.isArray(n) || !(n instanceof Object)) return !1;
                    for (t in e)
                        if (!r.deepEqual(e[t], n[t])) return !1;
                    for (t in n)
                        if (!r.deepEqual(e[t], n[t])) return !1;
                    return !0
                }
                return typeof e == typeof n && e == n
            }
        },
        function (e, r, n) {
            r.ArgumentsError = n(121), r.DimensionError = n(122), r.IndexError = n(123), r.UnsupportedTypeError = n(124)
        },
        function (e, r, n) {
            function t(e, r) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                switch (arguments.length) {
                case 0:
                    this.re = 0, this.im = 0;
                    break;
                case 1:
                    var n = arguments[0];
                    if ("object" == typeof n) {
                        if ("re" in n && "im" in n) {
                            var i = new t(n.re, n.im);
                            this.re = i.re, this.im = i.im;
                            break
                        }
                        if ("r" in n && "phi" in n) {
                            var i = t.fromPolar(n.r, n.phi);
                            this.re = i.re, this.im = i.im;
                            break
                        }
                    }
                    throw new SyntaxError("Object with the re and im or r and phi properties expected.");
                case 2:
                    if (!h(e) || !h(r)) throw new TypeError("Two numbers expected in Complex constructor");
                    this.re = e, this.im = r;
                    break;
                default:
                    throw new SyntaxError("One, two or three arguments expected in Complex constructor")
                }
            }

            function i() {
                for (;
                    " " == y || "	" == y;) s()
            }

            function o(e) {
                return e >= "0" && "9" >= e || "." == e
            }

            function a(e) {
                return e >= "0" && "9" >= e
            }

            function s() {
                w++, y = x.charAt(w)
            }

            function u(e) {
                w = e, y = x.charAt(w)
            }

            function f() {
                var e, r = "";
                if (e = w, "+" == y ? s() : "-" == y && (r += y, s()), !o(y)) return u(e), null;
                if ("." == y) {
                    if (r += y, s(), !a(y)) return u(e), null
                } else {
                    for (; a(y);) r += y, s();
                    "." == y && (r += y, s())
                }
                for (; a(y);) r += y, s();
                if ("E" == y || "e" == y) {
                    if (r += y, s(), ("+" == y || "-" == y) && (r += y, s()), !a(y)) return u(e), null;
                    for (; a(y);) r += y, s()
                }
                return r
            }

            function c() {
                var e = x.charAt(w + 1);
                if ("I" == y || "i" == y) return s(), "1";
                if (!("+" != y && "-" != y || "I" != e && "i" != e)) {
                    var r = "+" == y ? "1" : "-1";
                    return s(), s(), r
                }
                return null
            }
            var l = n(120),
                p = n(9),
                m = l.number,
                h = l.number.isNumber,
                g = p.isUnit,
                d = l.string.isString;
            t.isComplex = function (e) {
                return e instanceof t
            };
            var x, w, y;
            t.parse = function (e) {
                if (x = e, w = -1, y = "", !d(x)) return null;
                s(), i();
                var r = f();
                if (r) {
                    if ("I" == y || "i" == y) return s(), i(), y ? null : new t(0, Number(r));
                    i();
                    var n = y;
                    if ("+" != n && "-" != n) return i(), y ? null : new t(Number(r), 0);
                    s(), i();
                    var o = f();
                    if (o) {
                        if ("I" != y && "i" != y) return null;
                        s()
                    } else if (o = c(), !o) return null;
                    return "-" == n && (o = "-" == o[0] ? "+" + o.substring(1) : "-" + o), s(), i(), y ? null : new t(Number(r), Number(o))
                }
                return (r = c()) ? (i(), y ? null : new t(0, Number(r))) : null
            }, t.fromPolar = function () {
                switch (arguments.length) {
                case 1:
                    var e = arguments[0];
                    if ("object" == typeof e) return t.fromPolar(e.r, e.phi);
                    throw new TypeError("Input has to be an object with r and phi keys.");
                case 2:
                    var r = arguments[0],
                        n = arguments[1];
                    if (h(r)) {
                        if (g(n) && n.hasBase(p.BASE_UNITS.ANGLE) && (n = n.toNumber("rad")), h(n)) return new t(r * Math.cos(n), r * Math.sin(n));
                        throw new TypeError("Phi is not a number nor an angle unit.")
                    }
                    throw new TypeError("Radius r is not a number.");
                default:
                    throw new SyntaxError("Wrong number of arguments in function fromPolar")
                }
            }, t.prototype.toPolar = function () {
                return {
                    r: Math.sqrt(this.re * this.re + this.im * this.im),
                    phi: Math.atan2(this.im, this.re)
                }
            }, t.prototype.clone = function () {
                return new t(this.re, this.im)
            }, t.prototype.equals = function (e) {
                return this.re === e.re && this.im === e.im
            }, t.prototype.format = function (e) {
                var r = "",
                    n = m.format(this.re, e),
                    t = m.format(this.im, e);
                return r = 0 == this.im ? n : 0 == this.re ? 1 == this.im ? "i" : -1 == this.im ? "-i" : t + "i" : this.im > 0 ? 1 == this.im ? n + " + i" : n + " + " + t + "i" : -1 == this.im ? n + " - i" : n + " - " + t.substring(1) + "i"
            }, t.prototype.toString = function () {
                return this.format()
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r, n) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (null != e && !o.isNumber(e)) throw new TypeError("Parameter start must be a number");
                if (null != r && !o.isNumber(r)) throw new TypeError("Parameter end must be a number");
                if (null != n && !o.isNumber(n)) throw new TypeError("Parameter step must be a number");
                this.start = null != e ? parseFloat(e) : 0, this.end = null != r ? parseFloat(r) : 0, this.step = null != n ? parseFloat(n) : 1
            } {
                var i = n(120),
                    o = i.number,
                    a = i.string;
                i.array
            }
            t.parse = function (e) {
                if (!a.isString(e)) return null;
                var r = e.split(":"),
                    n = r.map(function (e) {
                        return parseFloat(e)
                    }),
                    i = n.some(function (e) {
                        return isNaN(e)
                    });
                if (i) return null;
                switch (n.length) {
                case 2:
                    return new t(n[0], n[1]);
                case 3:
                    return new t(n[0], n[2], n[1]);
                default:
                    return null
                }
            }, t.prototype.clone = function () {
                return new t(this.start, this.end, this.step)
            }, t.isRange = function (e) {
                return e instanceof t
            }, t.prototype.size = function () {
                var e = 0,
                    r = this.start,
                    n = this.step,
                    t = this.end,
                    i = t - r;
                return o.sign(n) == o.sign(i) ? e = Math.ceil(i / n) : 0 == i && (e = 0), isNaN(e) && (e = 0), [e]
            }, t.prototype.min = function () {
                var e = this.size()[0];
                return e > 0 ? this.step > 0 ? this.start : this.start + (e - 1) * this.step : void 0
            }, t.prototype.max = function () {
                var e = this.size()[0];
                return e > 0 ? this.step > 0 ? this.start + (e - 1) * this.step : this.start : void 0
            }, t.prototype.forEach = function (e) {
                var r = this.start,
                    n = this.step,
                    t = this.end,
                    i = 0;
                if (n > 0)
                    for (; t > r;) e(r, i, this), r += n, i++;
                else if (0 > n)
                    for (; r > t;) e(r, i, this), r += n, i++
            }, t.prototype.map = function (e) {
                var r = [];
                return this.forEach(function (n, t, i) {
                    r[t] = e(n, t, i)
                }), r
            }, t.prototype.toArray = function () {
                var e = [];
                return this.forEach(function (r, n) {
                    e[n] = r
                }), e
            }, t.prototype.valueOf = function () {
                return this.toArray()
            }, t.prototype.format = function (e) {
                var r = o.format(this.start, e);
                return 1 != this.step && (r += ":" + o.format(this.step, e)), r += ":" + o.format(this.end, e)
            }, t.prototype.toString = function () {
                return this.format()
            }, e.exports = t
        },
        function (e, r, n) {
            function t() {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                this._ranges = [];
                for (var e = 0, r = arguments.length; r > e; e++) {
                    var n = arguments[e];
                    if (n instanceof a) this._ranges.push(n);
                    else if (c(n)) this._ranges.push(i(n));
                    else {
                        if (!u(n)) throw new TypeError("Ranges must be an Array, Number, or Range");
                        this._ranges.push(i([n, n + 1]))
                    }
                }
            }

            function i(e) {
                for (var r = e.length, n = 0; r > n; n++)
                    if (!u(e[n]) || !f(e[n])) throw new TypeError("Index parameters must be integer numbers");
                switch (e.length) {
                case 2:
                    return new a(e[0], e[1]);
                case 3:
                    return new a(e[0], e[1], e[2]);
                default:
                    throw new SyntaxError("Wrong number of arguments in Index (2 or 3 expected)")
                }
            } {
                var o = n(120),
                    a = n(6),
                    s = o.number,
                    u = s.isNumber,
                    f = s.isInteger,
                    c = Array.isArray;
                o.array.validateIndex
            }
            t.prototype.clone = function () {
                var e = new t;
                return e._ranges = o.object.clone(this._ranges), e
            }, t.isIndex = function (e) {
                return e instanceof t
            }, t.create = function (e) {
                var r = new t;
                return t.apply(r, e), r
            }, t.prototype.size = function l() {
                for (var l = [], e = 0, r = this._ranges.length; r > e; e++) {
                    var n = this._ranges[e];
                    l[e] = n.size()[0]
                }
                return l
            }, t.prototype.max = function () {
                for (var e = [], r = 0, n = this._ranges.length; n > r; r++) {
                    var t = this._ranges[r];
                    e[r] = t.max()
                }
                return e
            }, t.prototype.min = function () {
                for (var e = [], r = 0, n = this._ranges.length; n > r; r++) {
                    var t = this._ranges[r];
                    e[r] = t.min()
                }
                return e
            }, t.prototype.forEach = function (e) {
                for (var r = 0, n = this._ranges.length; n > r; r++) e(this._ranges[r], r, this)
            }, t.prototype.range = function (e) {
                return this._ranges[e] || null
            }, t.prototype.isScalar = function () {
                for (var e = this.size(), r = 0, n = e.length; n > r; r++)
                    if (1 !== e[r]) return !1;
                return !0
            }, t.prototype.toArray = function () {
                for (var e = [], r = 0, n = this._ranges.length; n > r; r++) {
                    var t = this._ranges[r],
                        i = [],
                        o = t.start,
                        a = t.end,
                        s = t.step;
                    if (s > 0)
                        for (; a > o;) i.push(o), o += s;
                    else if (0 > s)
                        for (; o > a;) i.push(o), o += s;
                    e.push(i)
                }
                return e
            }, t.prototype.valueOf = t.prototype.toArray, t.prototype.toString = function () {
                for (var e = [], r = 0, n = this._ranges.length; n > r; r++) {
                    var t = this._ranges[r],
                        i = s.format(t.start);
                    1 != t.step && (i += ":" + s.format(t.step)), i += ":" + s.format(t.end), e.push(i)
                }
                return "[" + e.join(", ") + "]"
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (e instanceof t) this._data = e.clone()._data;
                else if (d(e)) this._data = f(e);
                else {
                    if (null != e) throw new TypeError("Unsupported type of data (" + c.types.type(e) + ")");
                    this._data = []
                }
                this._size = h.size(this._data)
            }

            function i(e, r) {
                if (!(r instanceof p)) throw new TypeError("Invalid index");
                var n = r.isScalar();
                if (n) return e.get(r.min());
                var i = r.size();
                if (i.length != e._size.length) throw new l(i.length, e._size.length);
                for (var a = new t(o(e._data, r, i.length, 0)); d(a._data) && 1 == a._data.length;) a._data = a._data[0], a._size.shift();
                return a
            }

            function o(e, r, n, t) {
                var i = t == n - 1,
                    a = r.range(t);
                return a.map(i ? function (r) {
                    return x(r, e.length), e[r]
                } : function (i) {
                    x(i, e.length);
                    var a = e[i];
                    return o(a, r, n, t + 1)
                })
            }

            function a(e, r, n, i) {
                if (!(r instanceof p)) throw new TypeError("Invalid index");
                var o, a = r.size(),
                    f = r.isScalar();
                if (n instanceof t ? (o = n.size(), n = n.valueOf()) : o = h.size(n), f) {
                    if (0 != o.length) throw new TypeError("Scalar expected");
                    e.set(r.min(), n, i)
                } else {
                    if (a.length < e._size.length) throw new l(a.length, e._size.length, "<");
                    for (var c = 0, m = a.length - o.length; m > c; c++) n = [n], o.unshift(1);
                    if (!g.deepEqual(a, o)) throw new l(a, o);
                    var d = r.max().map(function (e) {
                        return e + 1
                    });
                    u(e, d, i);
                    var x = a.length,
                        w = 0;
                    s(e._data, r, n, x, w)
                }
                return e
            }

            function s(e, r, n, t, i) {
                var o = i == t - 1,
                    a = r.range(i);
                a.forEach(o ? function (r, t) {
                    x(r), e[r] = n[t]
                } : function (o, a) {
                    x(o), s(e[o], r, n[a], t, i + 1)
                })
            }

            function u(e, r, n) {
                for (var t = g.clone(e._size), i = !1; t.length < r.length;) t.unshift(0), i = !0;
                for (var o = 0, a = r.length; a > o; o++) r[o] > t[o] && (t[o] = r[o], i = !0);
                i && e.resize(t, n)
            }

            function f(e) {
                for (var r = 0, n = e.length; n > r; r++) {
                    var i = e[r];
                    d(i) ? e[r] = f(i) : i instanceof t && (e[r] = f(i._data))
                }
                return e
            }
            var c = n(120),
                l = n(122),
                p = n(7),
                m = (c.number, c.string),
                h = c.array,
                g = c.object,
                d = Array.isArray,
                x = h.validateIndex;
            t.isMatrix = function (e) {
                return e instanceof t
            }, t.prototype.subset = function (e, r, n) {
                switch (arguments.length) {
                case 1:
                    return i(this, e);
                case 2:
                case 3:
                    return a(this, e, r, n);
                default:
                    throw new SyntaxError("Wrong number of arguments")
                }
            }, t.prototype.get = function (e) {
                if (!d(e)) throw new TypeError("Array expected");
                if (e.length != this._size.length) throw new l(e.length, this._size.length);
                for (var r = this._data, n = 0, t = e.length; t > n; n++) {
                    var i = e[n];
                    x(i, r.length), r = r[i]
                }
                return g.clone(r)
            }, t.prototype.set = function (e, r, n) {
                var t, i;
                if (!d(e)) throw new Error("Array expected");
                if (e.length < this._size.length) throw new l(e.length, this._size.length, "<");
                var o = e.map(function (e) {
                    return e + 1
                });
                u(this, o, n);
                var a = this._data;
                for (t = 0, i = e.length - 1; i > t; t++) {
                    var s = e[t];
                    x(s, a.length), a = a[s]
                }
                return s = e[e.length - 1], x(s, a.length), a[s] = r, this
            }, t.prototype.resize = function (e, r) {
                return this._size = g.clone(e), this._data = h.resize(this._data, this._size, r), this
            }, t.prototype.clone = function () {
                var e = new t;
                return e._data = g.clone(this._data), e._size = g.clone(this._size), e
            }, t.prototype.size = function () {
                return this._size
            }, t.prototype.map = function (e) {
                var r = this,
                    n = new t,
                    i = [],
                    o = function (n, t) {
                        return d(n) ? n.map(function (e, r) {
                            return i[t] = r, o(e, t + 1)
                        }) : e(n, i, r)
                    };
                return n._data = o(this._data, 0), n._size = g.clone(this._size), n
            }, t.prototype.forEach = function (e) {
                var r = this,
                    n = [],
                    t = function (i, o) {
                        d(i) ? i.forEach(function (e, r) {
                            n[o] = r, t(e, o + 1)
                        }) : e(i, n, r)
                    };
                t(this._data, 0)
            }, t.prototype.toArray = function () {
                return g.clone(this._data)
            }, t.prototype.valueOf = function () {
                return this._data
            }, t.prototype.format = function (e) {
                return m.format(this._data, e)
            }, t.prototype.toString = function () {
                return m.format(this._data)
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r) {
                if (!(this instanceof t)) throw new Error("Constructor must be called with the new operator");
                if (null != e && !w(e)) throw new TypeError("First parameter in Unit constructor must be a number");
                if (null != r && (!y(r) || "" == r)) throw new TypeError("Second parameter in Unit constructor must be a string");
                if (null != r) {
                    var n = l(r);
                    if (!n) throw new SyntaxError('Unknown unit "' + r + '"');
                    this.unit = n.unit, this.prefix = n.prefix
                } else this.unit = UNIT_NONE, this.prefix = b;
                null != e ? (this.value = this._normalize(e), this.fixPrefix = !1) : (this.value = null, this.fixPrefix = !0)
            }

            function i() {
                for (;
                    " " == h || "	" == h;) s()
            }

            function o(e) {
                return e >= "0" && "9" >= e || "." == e
            }

            function a(e) {
                return e >= "0" && "9" >= e
            }

            function s() {
                m++, h = p.charAt(m)
            }

            function u(e) {
                m = e, h = p.charAt(m)
            }

            function f() {
                var e, r = "";
                if (e = m, "+" == h ? s() : "-" == h && (r += h, s()), !o(h)) return u(e), null;
                if ("." == h) {
                    if (r += h, s(), !a(h)) return u(e), null
                } else {
                    for (; a(h);) r += h, s();
                    "." == h && (r += h, s())
                }
                for (; a(h);) r += h, s();
                if ("E" == h || "e" == h) {
                    if (r += h, s(), ("+" == h || "-" == h) && (r += h, s()), !a(h)) return u(e), null;
                    for (; a(h);) r += h, s()
                }
                return r
            }

            function c() {
                var e = "";
                for (i(); h && " " != h && "	" != h;) e += h, s();
                return e || null
            }

            function l(e) {
                for (var r in N)
                    if (N.hasOwnProperty(r) && x.endsWith(e, r)) {
                        var n = N[r],
                            t = e.length - r.length,
                            i = e.substring(0, t),
                            o = n.prefixes[i];
                        if (void 0 !== o) return {
                            unit: n,
                            prefix: o
                        }
                    }
                return null
            }
            var p, m, h, g = n(120),
                d = g.number,
                x = g.string,
                w = g.number.isNumber,
                y = g.string.isString;
            t.parse = function (e) {
                if (p = e, m = -1, h = "", !y(p)) return null;
                s(), i();
                var r, n = f();
                if (n) {
                    if (r = c(), s(), i(), h) return null;
                    if (n && r) try {
                        return new t(Number(n), r)
                    } catch (o) {}
                } else {
                    if (r = c(), s(), i(), h) return null;
                    if (r) try {
                        return new t(null, r)
                    } catch (o) {}
                }
                return null
            }, t.isUnit = function (e) {
                return e instanceof t
            }, t.prototype.clone = function () {
                var e = new t;
                for (var r in this) this.hasOwnProperty(r) && (e[r] = this[r]);
                return e
            }, t.prototype._normalize = function (e) {
                return (e + this.unit.offset) * this.unit.value * this.prefix.value
            }, t.prototype._unnormalize = function (e, r) {
                return void 0 == r ? e / this.unit.value / this.prefix.value - this.unit.offset : e / this.unit.value / r - this.unit.offset
            }, t.isValuelessUnit = function (e) {
                return null != l(e)
            }, t.prototype.hasBase = function (e) {
                return this.unit.base === e
            }, t.prototype.equalBase = function (e) {
                return this.unit.base === e.unit.base
            }, t.prototype.equals = function (e) {
                return this.equalBase(e) && this.value == e.value
            }, t.prototype.to = function (e) {
                var r;
                if (y(e)) {
                    if (r = new t(null, e), !this.equalBase(r)) throw new Error("Units do not match");
                    return r.value = this.value, r
                }
                if (e instanceof t) {
                    if (!this.equalBase(e)) throw new Error("Units do not match");
                    if (null != e.value) throw new Error("Cannot convert to a unit with a value");
                    return r = e.clone(), r.value = this.value, r.fixPrefix = !0, r
                }
                throw new Error("String or Unit expected as parameter")
            }, t.prototype.toNumber = function (e) {
                var r = this.to(e);
                return r._unnormalize(r.value, r.prefix.value)
            }, t.prototype.toString = function () {
                return this.format()
            }, t.prototype.format = function (e) {
                var r, n;
                if (this.fixPrefix) r = this._unnormalize(this.value), n = null != this.value ? d.format(r, e) + " " : "", n += this.prefix.name + this.unit.name;
                else {
                    var t = this._bestPrefix();
                    r = this._unnormalize(this.value, t.value), n = d.format(r, e) + " ", n += t.name + this.unit.name
                }
                return n
            }, t.prototype._bestPrefix = function () {
                var e = Math.abs(this.value / this.unit.value),
                    r = b,
                    n = Math.abs(Math.log(e / r.value) / Math.LN10 - 1.2),
                    t = this.unit.prefixes;
                for (var i in t)
                    if (t.hasOwnProperty(i)) {
                        var o = t[i];
                        if (o.scientific) {
                            var a = Math.abs(Math.log(e / o.value) / Math.LN10 - 1.2);
                            n > a && (r = o, n = a)
                        }
                    }
                return r
            };
            var v = {
                    NONE: {
                        "": {
                            name: "",
                            value: 1,
                            scientific: !0
                        }
                    },
                    SHORT: {
                        "": {
                            name: "",
                            value: 1,
                            scientific: !0
                        },
                        da: {
                            name: "da",
                            value: 10,
                            scientific: !1
                        },
                        h: {
                            name: "h",
                            value: 100,
                            scientific: !1
                        },
                        k: {
                            name: "k",
                            value: 1e3,
                            scientific: !0
                        },
                        M: {
                            name: "M",
                            value: 1e6,
                            scientific: !0
                        },
                        G: {
                            name: "G",
                            value: 1e9,
                            scientific: !0
                        },
                        T: {
                            name: "T",
                            value: 1e12,
                            scientific: !0
                        },
                        P: {
                            name: "P",
                            value: 1e15,
                            scientific: !0
                        },
                        E: {
                            name: "E",
                            value: 1e18,
                            scientific: !0
                        },
                        Z: {
                            name: "Z",
                            value: 1e21,
                            scientific: !0
                        },
                        Y: {
                            name: "Y",
                            value: 1e24,
                            scientific: !0
                        },
                        d: {
                            name: "d",
                            value: .1,
                            scientific: !1
                        },
                        c: {
                            name: "c",
                            value: .01,
                            scientific: !1
                        },
                        m: {
                            name: "m",
                            value: .001,
                            scientific: !0
                        },
                        u: {
                            name: "u",
                            value: 1e-6,
                            scientific: !0
                        },
                        n: {
                            name: "n",
                            value: 1e-9,
                            scientific: !0
                        },
                        p: {
                            name: "p",
                            value: 1e-12,
                            scientific: !0
                        },
                        f: {
                            name: "f",
                            value: 1e-15,
                            scientific: !0
                        },
                        a: {
                            name: "a",
                            value: 1e-18,
                            scientific: !0
                        },
                        z: {
                            name: "z",
                            value: 1e-21,
                            scientific: !0
                        },
                        y: {
                            name: "y",
                            value: 1e-24,
                            scientific: !0
                        }
                    },
                    LONG: {
                        "": {
                            name: "",
                            value: 1,
                            scientific: !0
                        },
                        deca: {
                            name: "deca",
                            value: 10,
                            scientific: !1
                        },
                        hecto: {
                            name: "hecto",
                            value: 100,
                            scientific: !1
                        },
                        kilo: {
                            name: "kilo",
                            value: 1e3,
                            scientific: !0
                        },
                        mega: {
                            name: "mega",
                            value: 1e6,
                            scientific: !0
                        },
                        giga: {
                            name: "giga",
                            value: 1e9,
                            scientific: !0
                        },
                        tera: {
                            name: "tera",
                            value: 1e12,
                            scientific: !0
                        },
                        peta: {
                            name: "peta",
                            value: 1e15,
                            scientific: !0
                        },
                        exa: {
                            name: "exa",
                            value: 1e18,
                            scientific: !0
                        },
                        zetta: {
                            name: "zetta",
                            value: 1e21,
                            scientific: !0
                        },
                        yotta: {
                            name: "yotta",
                            value: 1e24,
                            scientific: !0
                        },
                        deci: {
                            name: "deci",
                            value: .1,
                            scientific: !1
                        },
                        centi: {
                            name: "centi",
                            value: .01,
                            scientific: !1
                        },
                        milli: {
                            name: "milli",
                            value: .001,
                            scientific: !0
                        },
                        micro: {
                            name: "micro",
                            value: 1e-6,
                            scientific: !0
                        },
                        nano: {
                            name: "nano",
                            value: 1e-9,
                            scientific: !0
                        },
                        pico: {
                            name: "pico",
                            value: 1e-12,
                            scientific: !0
                        },
                        femto: {
                            name: "femto",
                            value: 1e-15,
                            scientific: !0
                        },
                        atto: {
                            name: "atto",
                            value: 1e-18,
                            scientific: !0
                        },
                        zepto: {
                            name: "zepto",
                            value: 1e-21,
                            scientific: !0
                        },
                        yocto: {
                            name: "yocto",
                            value: 1e-24,
                            scientific: !0
                        }
                    },
                    SQUARED: {
                        "": {
                            name: "",
                            value: 1,
                            scientific: !0
                        },
                        da: {
                            name: "da",
                            value: 100,
                            scientific: !1
                        },
                        h: {
                            name: "h",
                            value: 1e4,
                            scientific: !1
                        },
                        k: {
                            name: "k",
                            value: 1e6,
                            scientific: !0
                        },
                        M: {
                            name: "M",
                            value: 1e12,
                            scientific: !0
                        },
                        G: {
                            name: "G",
                            value: 1e18,
                            scientific: !0
                        },
                        T: {
                            name: "T",
                            value: 1e24,
                            scientific: !0
                        },
                        P: {
                            name: "P",
                            value: 1e30,
                            scientific: !0
                        },
                        E: {
                            name: "E",
                            value: 1e36,
                            scientific: !0
                        },
                        Z: {
                            name: "Z",
                            value: 1e42,
                            scientific: !0
                        },
                        Y: {
                            name: "Y",
                            value: 1e48,
                            scientific: !0
                        },
                        d: {
                            name: "d",
                            value: .01,
                            scientific: !1
                        },
                        c: {
                            name: "c",
                            value: 1e-4,
                            scientific: !1
                        },
                        m: {
                            name: "m",
                            value: 1e-6,
                            scientific: !0
                        },
                        u: {
                            name: "u",
                            value: 1e-12,
                            scientific: !0
                        },
                        n: {
                            name: "n",
                            value: 1e-18,
                            scientific: !0
                        },
                        p: {
                            name: "p",
                            value: 1e-24,
                            scientific: !0
                        },
                        f: {
                            name: "f",
                            value: 1e-30,
                            scientific: !0
                        },
                        a: {
                            name: "a",
                            value: 1e-36,
                            scientific: !0
                        },
                        z: {
                            name: "z",
                            value: 1e-42,
                            scientific: !0
                        },
                        y: {
                            name: "y",
                            value: 1e-42,
                            scientific: !0
                        }
                    },
                    CUBIC: {
                        "": {
                            name: "",
                            value: 1,
                            scientific: !0
                        },
                        da: {
                            name: "da",
                            value: 1e3,
                            scientific: !1
                        },
                        h: {
                            name: "h",
                            value: 1e6,
                            scientific: !1
                        },
                        k: {
                            name: "k",
                            value: 1e9,
                            scientific: !0
                        },
                        M: {
                            name: "M",
                            value: 1e18,
                            scientific: !0
                        },
                        G: {
                            name: "G",
                            value: 1e27,
                            scientific: !0
                        },
                        T: {
                            name: "T",
                            value: 1e36,
                            scientific: !0
                        },
                        P: {
                            name: "P",
                            value: 1e45,
                            scientific: !0
                        },
                        E: {
                            name: "E",
                            value: 1e54,
                            scientific: !0
                        },
                        Z: {
                            name: "Z",
                            value: 1e63,
                            scientific: !0
                        },
                        Y: {
                            name: "Y",
                            value: 1e72,
                            scientific: !0
                        },
                        d: {
                            name: "d",
                            value: .001,
                            scientific: !1
                        },
                        c: {
                            name: "c",
                            value: 1e-6,
                            scientific: !1
                        },
                        m: {
                            name: "m",
                            value: 1e-9,
                            scientific: !0
                        },
                        u: {
                            name: "u",
                            value: 1e-18,
                            scientific: !0
                        },
                        n: {
                            name: "n",
                            value: 1e-27,
                            scientific: !0
                        },
                        p: {
                            name: "p",
                            value: 1e-36,
                            scientific: !0
                        },
                        f: {
                            name: "f",
                            value: 1e-45,
                            scientific: !0
                        },
                        a: {
                            name: "a",
                            value: 1e-54,
                            scientific: !0
                        },
                        z: {
                            name: "z",
                            value: 1e-63,
                            scientific: !0
                        },
                        y: {
                            name: "y",
                            value: 1e-72,
                            scientific: !0
                        }
                    },
                    BINARY_SHORT: {
                        "": {
                            name: "",
                            value: 1,
                            scientific: !0
                        },
                        k: {
                            name: "k",
                            value: 1024,
                            scientific: !0
                        },
                        M: {
                            name: "M",
                            value: Math.pow(1024, 2),
                            scientific: !0
                        },
                        G: {
                            name: "G",
                            value: Math.pow(1024, 3),
                            scientific: !0
                        },
                        T: {
                            name: "T",
                            value: Math.pow(1024, 4),
                            scientific: !0
                        },
                        P: {
                            name: "P",
                            value: Math.pow(1024, 5),
                            scientific: !0
                        },
                        E: {
                            name: "E",
                            value: Math.pow(1024, 6),
                            scientific: !0
                        },
                        Z: {
                            name: "Z",
                            value: Math.pow(1024, 7),
                            scientific: !0
                        },
                        Y: {
                            name: "Y",
                            value: Math.pow(1024, 8),
                            scientific: !0
                        },
                        Ki: {
                            name: "Ki",
                            value: 1024,
                            scientific: !0
                        },
                        Mi: {
                            name: "Mi",
                            value: Math.pow(1024, 2),
                            scientific: !0
                        },
                        Gi: {
                            name: "Gi",
                            value: Math.pow(1024, 3),
                            scientific: !0
                        },
                        Ti: {
                            name: "Ti",
                            value: Math.pow(1024, 4),
                            scientific: !0
                        },
                        Pi: {
                            name: "Pi",
                            value: Math.pow(1024, 5),
                            scientific: !0
                        },
                        Ei: {
                            name: "Ei",
                            value: Math.pow(1024, 6),
                            scientific: !0
                        },
                        Zi: {
                            name: "Zi",
                            value: Math.pow(1024, 7),
                            scientific: !0
                        },
                        Yi: {
                            name: "Yi",
                            value: Math.pow(1024, 8),
                            scientific: !0
                        }
                    },
                    BINARY_LONG: {
                        "": {
                            name: "",
                            value: 1,
                            scientific: !0
                        },
                        kilo: {
                            name: "kilo",
                            value: 1024,
                            scientific: !0
                        },
                        mega: {
                            name: "mega",
                            value: Math.pow(1024, 2),
                            scientific: !0
                        },
                        giga: {
                            name: "giga",
                            value: Math.pow(1024, 3),
                            scientific: !0
                        },
                        tera: {
                            name: "tera",
                            value: Math.pow(1024, 4),
                            scientific: !0
                        },
                        peta: {
                            name: "peta",
                            value: Math.pow(1024, 5),
                            scientific: !0
                        },
                        exa: {
                            name: "exa",
                            value: Math.pow(1024, 6),
                            scientific: !0
                        },
                        zetta: {
                            name: "zetta",
                            value: Math.pow(1024, 7),
                            scientific: !0
                        },
                        yotta: {
                            name: "yotta",
                            value: Math.pow(1024, 8),
                            scientific: !0
                        },
                        kibi: {
                            name: "kibi",
                            value: 1024,
                            scientific: !0
                        },
                        mebi: {
                            name: "mebi",
                            value: Math.pow(1024, 2),
                            scientific: !0
                        },
                        gibi: {
                            name: "gibi",
                            value: Math.pow(1024, 3),
                            scientific: !0
                        },
                        tebi: {
                            name: "tebi",
                            value: Math.pow(1024, 4),
                            scientific: !0
                        },
                        pebi: {
                            name: "pebi",
                            value: Math.pow(1024, 5),
                            scientific: !0
                        },
                        exi: {
                            name: "exi",
                            value: Math.pow(1024, 6),
                            scientific: !0
                        },
                        zebi: {
                            name: "zebi",
                            value: Math.pow(1024, 7),
                            scientific: !0
                        },
                        yobi: {
                            name: "yobi",
                            value: Math.pow(1024, 8),
                            scientific: !0
                        }
                    }
                },
                b = {
                    name: "",
                    value: 1,
                    scientific: !0
                },
                E = {
                    NONE: {},
                    LENGTH: {},
                    MASS: {},
                    TIME: {},
                    CURRENT: {},
                    TEMPERATURE: {},
                    LUMINOUS_INTENSITY: {},
                    AMOUNT_OF_SUBSTANCE: {},
                    FORCE: {},
                    SURFACE: {},
                    VOLUME: {},
                    ANGLE: {},
                    BIT: {}
                };
            BASE_UNIT_NONE = {}, UNIT_NONE = {
                name: "",
                base: BASE_UNIT_NONE,
                value: 1,
                offset: 0
            };
            var N = {
                    meter: {
                        name: "meter",
                        base: E.LENGTH,
                        prefixes: v.LONG,
                        value: 1,
                        offset: 0
                    },
                    inch: {
                        name: "inch",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: .0254,
                        offset: 0
                    },
                    foot: {
                        name: "foot",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: .3048,
                        offset: 0
                    },
                    yard: {
                        name: "yard",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: .9144,
                        offset: 0
                    },
                    mile: {
                        name: "mile",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: 1609.344,
                        offset: 0
                    },
                    link: {
                        name: "link",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: .201168,
                        offset: 0
                    },
                    rod: {
                        name: "rod",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: 5.02921,
                        offset: 0
                    },
                    chain: {
                        name: "chain",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: 20.1168,
                        offset: 0
                    },
                    angstrom: {
                        name: "angstrom",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: 1e-10,
                        offset: 0
                    },
                    m: {
                        name: "m",
                        base: E.LENGTH,
                        prefixes: v.SHORT,
                        value: 1,
                        offset: 0
                    },
                    "in": {
                        name: "in",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: .0254,
                        offset: 0
                    },
                    ft: {
                        name: "ft",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: .3048,
                        offset: 0
                    },
                    yd: {
                        name: "yd",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: .9144,
                        offset: 0
                    },
                    mi: {
                        name: "mi",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: 1609.344,
                        offset: 0
                    },
                    li: {
                        name: "li",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: .201168,
                        offset: 0
                    },
                    rd: {
                        name: "rd",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: 5.02921,
                        offset: 0
                    },
                    ch: {
                        name: "ch",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: 20.1168,
                        offset: 0
                    },
                    mil: {
                        name: "mil",
                        base: E.LENGTH,
                        prefixes: v.NONE,
                        value: 254e-7,
                        offset: 0
                    },
                    m2: {
                        name: "m2",
                        base: E.SURFACE,
                        prefixes: v.SQUARED,
                        value: 1,
                        offset: 0
                    },
                    sqin: {
                        name: "sqin",
                        base: E.SURFACE,
                        prefixes: v.NONE,
                        value: 64516e-8,
                        offset: 0
                    },
                    sqft: {
                        name: "sqft",
                        base: E.SURFACE,
                        prefixes: v.NONE,
                        value: .09290304,
                        offset: 0
                    },
                    sqyd: {
                        name: "sqyd",
                        base: E.SURFACE,
                        prefixes: v.NONE,
                        value: .83612736,
                        offset: 0
                    },
                    sqmi: {
                        name: "sqmi",
                        base: E.SURFACE,
                        prefixes: v.NONE,
                        value: 2589988.110336,
                        offset: 0
                    },
                    sqrd: {
                        name: "sqrd",
                        base: E.SURFACE,
                        prefixes: v.NONE,
                        value: 25.29295,
                        offset: 0
                    },
                    sqch: {
                        name: "sqch",
                        base: E.SURFACE,
                        prefixes: v.NONE,
                        value: 404.6873,
                        offset: 0
                    },
                    sqmil: {
                        name: "sqmil",
                        base: E.SURFACE,
                        prefixes: v.NONE,
                        value: 6.4516e-10,
                        offset: 0
                    },
                    m3: {
                        name: "m3",
                        base: E.VOLUME,
                        prefixes: v.CUBIC,
                        value: 1,
                        offset: 0
                    },
                    L: {
                        name: "L",
                        base: E.VOLUME,
                        prefixes: v.SHORT,
                        value: .001,
                        offset: 0
                    },
                    l: {
                        name: "l",
                        base: E.VOLUME,
                        prefixes: v.SHORT,
                        value: .001,
                        offset: 0
                    },
                    litre: {
                        name: "litre",
                        base: E.VOLUME,
                        prefixes: v.LONG,
                        value: .001,
                        offset: 0
                    },
                    cuin: {
                        name: "cuin",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: 16387064e-12,
                        offset: 0
                    },
                    cuft: {
                        name: "cuft",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .028316846592,
                        offset: 0
                    },
                    cuyd: {
                        name: "cuyd",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .764554857984,
                        offset: 0
                    },
                    teaspoon: {
                        name: "teaspoon",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: 5e-6,
                        offset: 0
                    },
                    tablespoon: {
                        name: "tablespoon",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: 15e-6,
                        offset: 0
                    },
                    minim: {
                        name: "minim",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: 6.161152e-8,
                        offset: 0
                    },
                    fluiddram: {
                        name: "fluiddram",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: 36966911e-13,
                        offset: 0
                    },
                    fluidounce: {
                        name: "fluidounce",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: 2957353e-11,
                        offset: 0
                    },
                    gill: {
                        name: "gill",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .0001182941,
                        offset: 0
                    },
                    cc: {
                        name: "cc",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: 1e-6,
                        offset: 0
                    },
                    cup: {
                        name: "cup",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .0002365882,
                        offset: 0
                    },
                    pint: {
                        name: "pint",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .0004731765,
                        offset: 0
                    },
                    quart: {
                        name: "quart",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .0009463529,
                        offset: 0
                    },
                    gallon: {
                        name: "gallon",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .003785412,
                        offset: 0
                    },
                    beerbarrel: {
                        name: "beerbarrel",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .1173478,
                        offset: 0
                    },
                    oilbarrel: {
                        name: "oilbarrel",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .1589873,
                        offset: 0
                    },
                    hogshead: {
                        name: "hogshead",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .238481,
                        offset: 0
                    },
                    fldr: {
                        name: "fldr",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: 36966911e-13,
                        offset: 0
                    },
                    floz: {
                        name: "floz",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: 2957353e-11,
                        offset: 0
                    },
                    gi: {
                        name: "gi",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .0001182941,
                        offset: 0
                    },
                    cp: {
                        name: "cp",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .0002365882,
                        offset: 0
                    },
                    pt: {
                        name: "pt",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .0004731765,
                        offset: 0
                    },
                    qt: {
                        name: "qt",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .0009463529,
                        offset: 0
                    },
                    gal: {
                        name: "gal",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .003785412,
                        offset: 0
                    },
                    bbl: {
                        name: "bbl",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .1173478,
                        offset: 0
                    },
                    obl: {
                        name: "obl",
                        base: E.VOLUME,
                        prefixes: v.NONE,
                        value: .1589873,
                        offset: 0
                    },
                    g: {
                        name: "g",
                        base: E.MASS,
                        prefixes: v.SHORT,
                        value: .001,
                        offset: 0
                    },
                    gram: {
                        name: "gram",
                        base: E.MASS,
                        prefixes: v.LONG,
                        value: .001,
                        offset: 0
                    },
                    ton: {
                        name: "ton",
                        base: E.MASS,
                        prefixes: v.SHORT,
                        value: 907.18474,
                        offset: 0
                    },
                    tonne: {
                        name: "tonne",
                        base: E.MASS,
                        prefixes: v.SHORT,
                        value: 1e3,
                        offset: 0
                    },
                    grain: {
                        name: "grain",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: 6479891e-11,
                        offset: 0
                    },
                    dram: {
                        name: "dram",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: .0017718451953125,
                        offset: 0
                    },
                    ounce: {
                        name: "ounce",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: .028349523125,
                        offset: 0
                    },
                    poundmass: {
                        name: "poundmass",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: .45359237,
                        offset: 0
                    },
                    hundredweight: {
                        name: "hundredweight",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: 45.359237,
                        offset: 0
                    },
                    stick: {
                        name: "stick",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: .115,
                        offset: 0
                    },
                    gr: {
                        name: "gr",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: 6479891e-11,
                        offset: 0
                    },
                    dr: {
                        name: "dr",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: .0017718451953125,
                        offset: 0
                    },
                    oz: {
                        name: "oz",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: .028349523125,
                        offset: 0
                    },
                    lbm: {
                        name: "lbm",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: .45359237,
                        offset: 0
                    },
                    cwt: {
                        name: "cwt",
                        base: E.MASS,
                        prefixes: v.NONE,
                        value: 45.359237,
                        offset: 0
                    },
                    s: {
                        name: "s",
                        base: E.TIME,
                        prefixes: v.SHORT,
                        value: 1,
                        offset: 0
                    },
                    min: {
                        name: "min",
                        base: E.TIME,
                        prefixes: v.NONE,
                        value: 60,
                        offset: 0
                    },
                    h: {
                        name: "h",
                        base: E.TIME,
                        prefixes: v.NONE,
                        value: 3600,
                        offset: 0
                    },
                    second: {
                        name: "second",
                        base: E.TIME,
                        prefixes: v.LONG,
                        value: 1,
                        offset: 0
                    },
                    sec: {
                        name: "sec",
                        base: E.TIME,
                        prefixes: v.LONG,
                        value: 1,
                        offset: 0
                    },
                    minute: {
                        name: "minute",
                        base: E.TIME,
                        prefixes: v.NONE,
                        value: 60,
                        offset: 0
                    },
                    hour: {
                        name: "hour",
                        base: E.TIME,
                        prefixes: v.NONE,
                        value: 3600,
                        offset: 0
                    },
                    day: {
                        name: "day",
                        base: E.TIME,
                        prefixes: v.NONE,
                        value: 86400,
                        offset: 0
                    },
                    rad: {
                        name: "rad",
                        base: E.ANGLE,
                        prefixes: v.NONE,
                        value: 1,
                        offset: 0
                    },
                    deg: {
                        name: "deg",
                        base: E.ANGLE,
                        prefixes: v.NONE,
                        value: .017453292519943295,
                        offset: 0
                    },
                    grad: {
                        name: "grad",
                        base: E.ANGLE,
                        prefixes: v.NONE,
                        value: .015707963267948967,
                        offset: 0
                    },
                    cycle: {
                        name: "cycle",
                        base: E.ANGLE,
                        prefixes: v.NONE,
                        value: 6.283185307179586,
                        offset: 0
                    },
                    A: {
                        name: "A",
                        base: E.CURRENT,
                        prefixes: v.SHORT,
                        value: 1,
                        offset: 0
                    },
                    ampere: {
                        name: "ampere",
                        base: E.CURRENT,
                        prefixes: v.LONG,
                        value: 1,
                        offset: 0
                    },
                    K: {
                        name: "K",
                        base: E.TEMPERATURE,
                        prefixes: v.NONE,
                        value: 1,
                        offset: 0
                    },
                    degC: {
                        name: "degC",
                        base: E.TEMPERATURE,
                        prefixes: v.NONE,
                        value: 1,
                        offset: 273.15
                    },
                    degF: {
                        name: "degF",
                        base: E.TEMPERATURE,
                        prefixes: v.NONE,
                        value: 1 / 1.8,
                        offset: 459.67
                    },
                    degR: {
                        name: "degR",
                        base: E.TEMPERATURE,
                        prefixes: v.NONE,
                        value: 1 / 1.8,
                        offset: 0
                    },
                    kelvin: {
                        name: "kelvin",
                        base: E.TEMPERATURE,
                        prefixes: v.NONE,
                        value: 1,
                        offset: 0
                    },
                    celsius: {
                        name: "celsius",
                        base: E.TEMPERATURE,
                        prefixes: v.NONE,
                        value: 1,
                        offset: 273.15
                    },
                    fahrenheit: {
                        name: "fahrenheit",
                        base: E.TEMPERATURE,
                        prefixes: v.NONE,
                        value: 1 / 1.8,
                        offset: 459.67
                    },
                    rankine: {
                        name: "rankine",
                        base: E.TEMPERATURE,
                        prefixes: v.NONE,
                        value: 1 / 1.8,
                        offset: 0
                    },
                    mol: {
                        name: "mol",
                        base: E.AMOUNT_OF_SUBSTANCE,
                        prefixes: v.NONE,
                        value: 1,
                        offset: 0
                    },
                    mole: {
                        name: "mole",
                        base: E.AMOUNT_OF_SUBSTANCE,
                        prefixes: v.NONE,
                        value: 1,
                        offset: 0
                    },
                    cd: {
                        name: "cd",
                        base: E.LUMINOUS_INTENSITY,
                        prefixes: v.NONE,
                        value: 1,
                        offset: 0
                    },
                    candela: {
                        name: "candela",
                        base: E.LUMINOUS_INTENSITY,
                        prefixes: v.NONE,
                        value: 1,
                        offset: 0
                    },
                    N: {
                        name: "N",
                        base: E.FORCE,
                        prefixes: v.SHORT,
                        value: 1,
                        offset: 0
                    },
                    newton: {
                        name: "newton",
                        base: E.FORCE,
                        prefixes: v.LONG,
                        value: 1,
                        offset: 0
                    },
                    lbf: {
                        name: "lbf",
                        base: E.FORCE,
                        prefixes: v.NONE,
                        value: 4.4482216152605,
                        offset: 0
                    },
                    poundforce: {
                        name: "poundforce",
                        base: E.FORCE,
                        prefixes: v.NONE,
                        value: 4.4482216152605,
                        offset: 0
                    },
                    b: {
                        name: "b",
                        base: E.BIT,
                        prefixes: v.BINARY_SHORT,
                        value: 1,
                        offset: 0
                    },
                    bits: {
                        name: "bits",
                        base: E.BIT,
                        prefixes: v.BINARY_LONG,
                        value: 1,
                        offset: 0
                    },
                    B: {
                        name: "B",
                        base: E.BIT,
                        prefixes: v.BINARY_SHORT,
                        value: 8,
                        offset: 0
                    },
                    bytes: {
                        name: "bytes",
                        base: E.BIT,
                        prefixes: v.BINARY_LONG,
                        value: 8,
                        offset: 0
                    }
                },
                M = {
                    meters: "meter",
                    inches: "inch",
                    feet: "foot",
                    yards: "yard",
                    miles: "mile",
                    links: "link",
                    rods: "rod",
                    chains: "chain",
                    angstroms: "angstrom",
                    litres: "litre",
                    teaspoons: "teaspoon",
                    tablespoons: "tablespoon",
                    minims: "minim",
                    fluiddrams: "fluiddram",
                    fluidounces: "fluidounce",
                    gills: "gill",
                    cups: "cup",
                    pints: "pint",
                    quarts: "quart",
                    gallons: "gallon",
                    beerbarrels: "beerbarrel",
                    oilbarrels: "oilbarrel",
                    hogsheads: "hogshead",
                    grams: "gram",
                    tons: "ton",
                    tonnes: "tonne",
                    grains: "grain",
                    drams: "dram",
                    ounces: "ounce",
                    poundmasses: "poundmass",
                    hundredweights: "hundredweight",
                    sticks: "stick",
                    seconds: "second",
                    minutes: "minute",
                    hours: "hour",
                    days: "day",
                    radians: "rad",
                    degrees: "deg",
                    gradients: "grad",
                    cycles: "cycle",
                    amperes: "ampere",
                    moles: "mole"
                };
            for (var A in M)
                if (M.hasOwnProperty(A)) {
                    var T = N[M[A]],
                        S = Object.create(T);
                    S.name = A, N[A] = S
                }
            N.lt = N.l, N.liter = N.litre, N.liters = N.litres, N.lb = N.lbm, N.lbs = N.lbm, t.PREFIXES = v, t.BASE_UNITS = E, t.UNITS = N, e.exports = t
        },
        function (e, r, n) {
            function t(e, r) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                this.math = e, this.doc = r
            }
            var i = n(120),
                o = i.object,
                a = i.string;
            t.isHelp = function (e) {
                return e instanceof t
            }, t.prototype.toString = function () {
                var e = this.doc || {},
                    r = "\n";
                if (e.name && (r += "Name: " + e.name + "\n\n"), e.category && (r += "Category: " + e.category + "\n\n"), e.description && (r += "Description:\n    " + e.description + "\n\n"), e.syntax && (r += "Syntax:\n    " + e.syntax.join("\n    ") + "\n\n"), e.examples) {
                    var n = this.math.parser();
                    r += "Examples:\n";
                    for (var i = 0; i < e.examples.length; i++) {
                        var o, s = e.examples[i];
                        try {
                            o = n.eval(s)
                        } catch (u) {
                            o = u
                        }
                        r += "    " + s + "\n", !o || o instanceof t || (r += "        " + a.format(o) + "\n")
                    }
                    r += "\n"
                }
                return e.seealso && (r += "See also: " + e.seealso.join(", ") + "\n"), r
            }, t.prototype.toJSON = function () {
                return o.clone(this.doc)
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r, n) {
                var o, a, s, f;
                if (0 >= r) {
                    if (u(e[0])) {
                        for (f = i(e), a = [], o = 0; o < f.length; o++) a[o] = t(f[o], r - 1, n);
                        return a
                    }
                    for (s = e[0], o = 1; o < e.length; o++) s = n(s, e[o]);
                    return s
                }
                for (a = [], o = 0; o < e.length; o++) a[o] = t(e[o], r - 1, n);
                return a
            }

            function i(e) {
                var r, n, t = e.length,
                    i = e[0].length,
                    o = [];
                for (n = 0; i > n; n++) {
                    var a = [];
                    for (r = 0; t > r; r++) a.push(e[r][n]);
                    o.push(a)
                }
                return o
            } {
                var o = n(120),
                    a = n(122),
                    s = n(8),
                    u = o.array.isArray;
                o.string.isString
            }
            r.argsToArray = function (e) {
                var r;
                return 0 == e.length ? r = [] : 1 == e.length ? (r = e[0], r instanceof s && (r = r.valueOf()), u(r) || (r = [r])) : r = Array.prototype.slice.apply(e), r
            }, r.isCollection = function (e) {
                return u(e) || e instanceof s
            }, r.deepMap = function f(e, r) {
                return e && "function" == typeof e.map ? e.map(function (e) {
                    return f(e, r)
                }) : r(e)
            }, r.deepMap2 = function c(e, r, n) {
                var t, i, o;
                if (u(e))
                    if (u(r)) {
                        if (e.length != r.length) throw new a(e.length, r.length);
                        for (t = [], i = e.length, o = 0; i > o; o++) t[o] = c(e[o], r[o], n)
                    } else {
                        if (r instanceof s) return t = c(e, r.valueOf(), n), new s(t);
                        for (t = [], i = e.length, o = 0; i > o; o++) t[o] = c(e[o], r, n)
                    } else {
                    if (e instanceof s) return r instanceof s ? (t = c(e.valueOf(), r.valueOf(), n), new s(t)) : (t = c(e.valueOf(), r, n), new s(t));
                    if (u(r))
                        for (t = [], i = r.length, o = 0; i > o; o++) t[o] = c(e, r[o], n);
                    else {
                        if (r instanceof s) return t = c(e, r.valueOf(), n), new s(t);
                        t = n(e, r)
                    }
                }
                return t
            }, r.reduce = function (e, r, n) {
                return e instanceof s ? new s(t(e.valueOf(), r, n)) : t(e, r, n)
            }, r.deepForEach = function l(e, r) {
                e instanceof s && (e = e.valueOf());
                for (var n = 0, t = e.length; t > n; n++) {
                    var i = e[n];
                    u(i) ? l(i, r) : r(i)
                }
            }
        },
        function (e, r, n) {
            function t(e, r) {
                if (1 != arguments.length && 2 != arguments.length) throw new F("parse", arguments.length, 1, 2);
                if (fr = "object" === V(r) ? r : {}, G(e)) return cr = e, p();
                if (D(e) || e instanceof H) return Y.deepMap(e, function (e) {
                    if (!G(e)) throw new TypeError("String expected");
                    return cr = e, p()
                });
                throw new TypeError("String or matrix expected")
            }

            function i() {
                lr = 0, pr = cr.charAt(0)
            }

            function o() {
                lr++, pr = cr.charAt(lr)
            }

            function a() {
                return cr.charAt(lr + 1)
            }

            function s() {
                for (hr = ar.NULL, mr = "";
                    " " == pr || "	" == pr;) o();
                if ("#" == pr)
                    for (;
                        "\n" != pr && "" != pr;) o();
                if ("" == pr) return void(hr = ar.DELIMITER);
                var e = pr + a();
                if (sr[e]) return hr = ar.DELIMITER, mr = e, o(), void o();
                if (sr[pr]) return hr = ar.DELIMITER, mr = pr, void o();
                if (!c(pr)) {
                    if (f(pr)) {
                        for (; f(pr) || l(pr);) mr += pr, o();
                        return void(hr = ur[mr] ? ar.DELIMITER : ar.SYMBOL)
                    }
                    for (hr = ar.UNKNOWN;
                        "" != pr;) mr += pr, o();
                    throw j('Syntax error in part "' + mr + '"')
                }
                if (hr = ar.NUMBER, "." == pr) mr += pr, o(), l(pr) || (hr = ar.UNKNOWN);
                else {
                    for (; l(pr);) mr += pr, o();
                    "." == pr && (mr += pr, o())
                }
                for (; l(pr);) mr += pr, o();
                if ("E" == pr || "e" == pr)
                    for (mr += pr, o(), ("+" == pr || "-" == pr) && (mr += pr, o()), l(pr) || (hr = ar.UNKNOWN); l(pr);) mr += pr, o()
            }

            function u() {
                for (;
                    "\n" == mr;) s()
            }

            function f(e) {
                return e >= "a" && "z" >= e || e >= "A" && "Z" >= e || "_" == e
            }

            function c(e) {
                return e >= "0" && "9" >= e || "." == e
            }

            function l(e) {
                return e >= "0" && "9" >= e
            }

            function p() {
                i(), s();
                var e = m();
                if ("" != mr) throw hr == ar.DELIMITER ? P("Unknown operator " + mr) : j('Unexpected part "' + mr + '"');
                return e
            }

            function m() {
                var e, r, n;
                if ("" == mr) return new $("undefined", "undefined");
                for ("\n" != mr && ";" != mr && (e = h());
                    "\n" == mr || ";" == mr;) r || (r = new Q, e && (n = ";" != mr, r.add(e, n))), s(), "\n" != mr && ";" != mr && "" != mr && (e = h(), n = ";" != mr, r.add(e, n));
                return r ? r : e
            }

            function h() {
                var e = g(),
                    r = "ans";
                return new Z(r, e)
            }

            function g() {
                if (hr == ar.SYMBOL && "function" == mr) throw j('Deprecated keyword "function". Functions can now be assigned without it, like "f(x) = x^2".');
                return d()
            }

            function d() {
                var e, r, n, t = x();
                if ("=" == mr) {
                    if (t instanceof nr) return e = t.name, s(), n = d(), new Z(e, n);
                    if (t instanceof J) return s(), n = d(), new or(t, n);
                    if (t instanceof er) {
                        var i = !0;
                        if (r = [], t.object instanceof nr ? (e = t.object.name, t.params.forEach(function (e, n) {
                            e instanceof nr ? r[n] = e.name : i = !1
                        })) : i = !1, i) return s(), n = d(), new K(e, r, n)
                    }
                    throw j("Invalid left hand side of assignment operator =")
                }
                return t
            }

            function x() {
                var e, r = [];
                if (e = ":" == mr ? new $("number", "1") : w(), ":" == mr) {
                    for (r.push(e);
                        ":" == mr;) s(), r.push(")" == mr || "]" == mr || "," == mr || "" == mr ? new nr("end") : w());
                    if (3 == r.length) {
                        var n = r[2];
                        r[2] = r[1], r[1] = n
                    }
                    e = new rr(r)
                }
                return e
            }

            function w() {
                var e = y();
                return e
            }

            function y() {
                for (var e = v();
                    "?" == mr;) {
                    s();
                    var r = [e];
                    if (r.push(v()), ":" != mr) throw j("False part of conditional expression expected");
                    s(), r.push(y()), e = new tr(["?", ":"], "ifElse", r)
                }
                return e
            }

            function v() {
                var e, r, n, t, i;
                for (e = b(), r = {
                    "==": "equal",
                    "!=": "unequal",
                    "<": "smaller",
                    ">": "larger",
                    "<=": "smallereq",
                    ">=": "largereq"
                }; mr in r;) n = mr, t = r[n], s(), i = [e, b()], e = new X(n, t, i);
                return e
            }

            function b() {
                var e, r, n, t, i;
                for (e = E(), r = {
                    to: "to",
                    "in": "to"
                }; mr in r;) n = mr, t = r[n], s(), i = [e, E()], e = new X(n, t, i);
                return e
            }

            function E() {
                var e, r, n, t, i;
                for (e = N(), r = {
                    "+": "add",
                    "-": "subtract"
                }; mr in r;) n = mr, t = r[n], s(), i = [e, N()], e = new X(n, t, i);
                return e
            }

            function N() {
                var e, r, n, t, i;
                for (e = M(), r = {
                    "*": "multiply",
                    ".*": "emultiply",
                    "/": "divide",
                    "./": "edivide",
                    "%": "mod",
                    mod: "mod"
                }; mr in r;) n = mr, t = r[n], s(), i = [e, M()], e = new X(n, t, i);
                return e
            }

            function M() {
                var e, r;
                return e = A(), (hr == ar.SYMBOL || "in" == mr) && (r = mr, s(), e = new ir(e, r)), e
            }

            function A() {
                var e, r, n;
                return "-" == mr ? (e = mr, r = "unary", s(), n = [A()], new X(e, r, n)) : T()
            }

            function T() {
                var e, r, n, t;
                return e = S(), ("^" == mr || ".^" == mr) && (r = mr, n = "^" == r ? "pow" : "epow", s(), t = [e, A()], e = new X(r, n, t)), e
            }

            function S() {
                var e, r, n, t, i;
                for (e = O(), r = {
                    "!": "factorial",
                    "'": "transpose"
                }; mr in r;) n = mr, t = r[n], s(), i = [e], e = new X(n, t, i), e = U(e);
                return e
            }

            function O() {
                var e, r = [];
                if (hr == ar.SYMBOL && fr[mr]) {
                    if (e = fr[mr], s(), "(" == mr) {
                        if (r = [], s(), ")" != mr)
                            for (r.push(x());
                                "," == mr;) s(), r.push(x());
                        if (")" != mr) throw j("Parenthesis ) expected");
                        s()
                    }
                    return new e(r)
                }
                return C()
            }

            function C() {
                var e, r;
                return hr == ar.SYMBOL || hr == ar.DELIMITER && mr in ur ? (r = mr, s(), e = new nr(r), U(e)) : q()
            }

            function U(e) {
                for (var r, n;
                    "(" == mr || "[" == mr;) {
                    if (r = mr, n = [], s(), ")" != mr && "]" != mr)
                        for (n.push(x());
                            "," == mr;) s(), n.push(x());
                    if ("(" == r && ")" != mr) throw j("Parenthesis ) expected");
                    if ("[" == r && "]" != mr) throw j("Parenthesis ] expected");
                    s(), e = "(" == r ? new er(e, n) : new J(e, n)
                }
                return e
            }

            function q() {
                var e, r, n;
                if ('"' == mr) {
                    for (r = "", n = "";
                        "" != pr && ('"' != pr || "\\" == n);) r += pr, n = pr, o();
                    if (s(), '"' != mr) throw j('End of string " expected');
                    return s(), e = new $("string", r), e = U(e)
                }
                return B()
            }

            function B() {
                var e, r, n, t;
                if ("[" == mr) {
                    if (s(), u(), "]" != mr) {
                        var i = z();
                        if (";" == mr) {
                            for (n = 1, r = [i];
                                ";" == mr;) s(), u(), r[n] = z(), n++, u();
                            if ("]" != mr) throw j("End of matrix ] expected");
                            s(), t = r[0].nodes.length;
                            for (var o = 1; n > o; o++)
                                if (r[o].nodes.length != t) throw P("Column dimensions mismatch (" + r[o].nodes.length + " != " + t + ")");
                            e = new W(r)
                        } else {
                            if ("]" != mr) throw j("End of matrix ] expected");
                            s(), e = i
                        }
                    } else s(), e = new W([]);
                    return e = U(e)
                }
                return I()
            }

            function z() {
                for (var e = [d()], r = 1;
                    "," == mr;) s(), u(), e[r] = d(), r++, u();
                return new W(e)
            }

            function I() {
                var e, r;
                return hr == ar.NUMBER ? (r = mr, s(), "i" == mr || "I" == mr ? (s(), e = new $("complex", r)) : e = new $("number", r), e = U(e)) : _()
            }

            function _() {
                var e;
                if ("(" == mr) {
                    if (s(), e = d(), ")" != mr) throw j("Parenthesis ) expected");
                    return s(), e = U(e)
                }
                return R()
            }

            function R() {
                throw j("" == mr ? "Unexpected end of expression" : "Value expected")
            }

            function L() {
                return lr - mr.length + 1
            }

            function j(e) {
                var r = L(),
                    n = new SyntaxError(e + " (char " + r + ")");
                return n["char"] = r, n
            }

            function P(e) {
                var r = L(),
                    n = new Error(e + " (char " + r + ")");
                return n["char"] = r, n
            }
            var k = n(120),
                F = n(121),
                G = k.string.isString,
                D = Array.isArray,
                V = k.types.type,
                H = (n(5), n(8)),
                Y = (n(9), n(11)),
                W = n(125),
                Z = n(126),
                Q = n(127),
                $ = n(128),
                K = n(129),
                J = n(130),
                X = n(131),
                er = n(132),
                rr = n(133),
                nr = n(134),
                tr = n(135),
                ir = n(136),
                or = n(137),
                ar = {
                    NULL: 0,
                    DELIMITER: 1,
                    NUMBER: 2,
                    SYMBOL: 3,
                    UNKNOWN: 4
                },
                sr = {
                    ",": !0,
                    "(": !0,
                    ")": !0,
                    "[": !0,
                    "]": !0,
                    '"': !0,
                    "\n": !0,
                    ";": !0,
                    "+": !0,
                    "-": !0,
                    "*": !0,
                    ".*": !0,
                    "/": !0,
                    "./": !0,
                    "%": !0,
                    "^": !0,
                    ".^": !0,
                    "!": !0,
                    "'": !0,
                    "=": !0,
                    ":": !0,
                    "?": !0,
                    "==": !0,
                    "!=": !0,
                    "<": !0,
                    ">": !0,
                    "<=": !0,
                    ">=": !0
                },
                ur = {
                    mod: !0,
                    to: !0,
                    "in": !0
                },
                fr = {},
                cr = "",
                lr = 0,
                pr = "",
                mr = "",
                hr = ar.NULL;
            e.exports = t
        },
        function (e, r, n) {
            function t(e) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if ("object" != typeof e) throw new TypeError("Object expected as parameter math");
                this.math = e, this.scope = {}
            }
            var i = n(12);
            t.prototype.parse = function () {
                throw new Error("Parser.parse is deprecated. Use math.parse instead.")
            }, t.prototype.compile = function () {
                throw new Error("Parser.compile is deprecated. Use math.compile instead.")
            }, t.prototype.eval = function (e) {
                return i(e).compile(this.math).eval(this.scope)
            }, t.prototype.get = function (e) {
                return this.scope[e]
            }, t.prototype.set = function (e, r) {
                return this.scope[e] = r
            }, t.prototype.remove = function (e) {
                delete this.scope[e]
            }, t.prototype.clear = function () {
                for (var e in this.scope) this.scope.hasOwnProperty(e) && delete this.scope[e]
            }, e.exports = t
        },
        function (e, r, n) {
            r.ArrayNode = n(125), r.AssignmentNode = n(126), r.BlockNode = n(127), r.ConstantNode = n(128), r.IndexNode = n(130), r.FunctionNode = n(129), r.Node = n(138), r.OperatorNode = n(131), r.ParamsNode = n(132), r.RangeNode = n(133), r.SymbolNode = n(134), r.TernaryNode = n(135), r.UnitNode = n(136), r.UpdateNode = n(137)
        },
        function (e, r, n) {
            r.e = n(140), r.E = n(140), r["false"] = n(141), r.i = n(142), r.Infinity = n(143), r.LN2 = n(144), r.LN10 = n(145), r.LOG2E = n(146), r.LOG10E = n(147), r.NaN = n(148), r.pi = n(149), r.PI = n(149), r.SQRT1_2 = n(150), r.SQRT2 = n(151), r.tau = n(152), r["true"] = n(153), r.abs = n(158), r.add = n(159), r.ceil = n(160), r.compare = n(161), r.cube = n(162), r.divide = n(163), r.edivide = n(164), r.emultiply = n(165), r.epow = n(166), r.equal = n(167), r.exp = n(168), r.fix = n(169), r.floor = n(170), r.gcd = n(171), r.larger = n(172), r.largereq = n(173), r.lcm = n(174), r.log = n(175), r.log10 = n(176), r.mod = n(177), r.multiply = n(178), r.norm = n(179), r.pow = n(180), r.round = n(181), r.sign = n(182), r.smaller = n(183), r.smallereq = n(184), r.sqrt = n(185), r.square = n(186), r.subtract = n(187), r.unary = n(188), r.unequal = n(189), r.xgcd = n(190), r.arg = n(191), r.conj = n(192), r.re = n(193), r.im = n(194), r.bignumber = n(195), r["boolean"] = n(196), r.complex = n(197), r.index = n(198), r.matrix = n(199), r.number = n(200), r.string = n(201), r.unit = n(202), r.eval = n(203), r.help = n(204), r.concat = n(205), r.det = n(206), r.diag = n(207), r.eye = n(208), r.inv = n(209), r.ones = n(210), r.range = n(211), r.resize = n(212), r.size = n(213), r.squeeze = n(214), r.subset = n(215), r.transpose = n(216), r.zeros = n(217), r.combinations = n(218), r.distribution = n(219), r.factorial = n(220), r.permutations = n(221), r.pickRandom = n(222), r.random = n(223), r.randomInt = n(224), r.max = n(225), r.mean = n(226), r.median = n(227), r.min = n(228), r.prod = n(229), r.std = n(230), r.sum = n(231), r["var"] = n(232), r.acos = n(233), r.asin = n(234), r.atan = n(235), r.atan2 = n(236), r.cos = n(237), r.cosh = n(238), r.cot = n(239), r.coth = n(240), r.csc = n(241), r.csch = n(242), r.sec = n(243), r.sech = n(244), r.sin = n(245), r.sinh = n(246), r.tan = n(247), r.tanh = n(248), r.to = n(249), r.clone = n(250), r.map = n(251), r.forEach = n(252), r.format = n(253), r.ifElse = n(254), r["import"] = n(255), r["typeof"] = n(256)
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(e) {
                    if (!(this instanceof r)) throw new SyntaxError("Constructor must be called with the new operator");
                    this.value = e instanceof r ? e.value : e
                }

                function t(e, n) {
                    var t = Array.prototype.slice;
                    r.prototype[e] = "function" == typeof n ? function () {
                        var e = [this.value].concat(t.call(arguments, 0));
                        return new r(n.apply(this, e))
                    } : new r(n)
                }
                var i = n(139);
                r.prototype.done = function () {
                    return this.value
                }, r.prototype.valueOf = function () {
                    return this.value
                }, r.prototype.toString = function () {
                    return i.format(this.value)
                }, r.createProxy = t;
                for (var o in e) e.hasOwnProperty(o) && t(o, e[o]);
                return r
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = n(12),
                    i = n(11),
                    o = r.string.isString,
                    a = i.isCollection;
                e.compile = function (r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("compile", arguments.length, 1);
                    if (o(r)) return t(r).compile(e);
                    if (a(r)) return i.deepMap(r, function (r) {
                        return t(r).compile(e)
                    });
                    throw new TypeError("String, array, or matrix expected")
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = n(12),
                    i = n(11),
                    o = r.string.isString,
                    a = i.isCollection;
                e.eval = function (r, n) {
                    if (1 != arguments.length && 2 != arguments.length) throw new e.error.ArgumentsError("eval", arguments.length, 1, 2);
                    if (n = n || {}, o(r)) return t(r).compile(e).eval(n);
                    if (a(r)) return i.deepMap(r, function (r) {
                        return t(r).compile(e).eval(n)
                    });
                    throw new TypeError("String, array, or matrix expected")
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(10);
                e.help = function (n) {
                    if (1 != arguments.length) throw new SyntaxError("Wrong number of arguments in function help (" + arguments.length + " provided, 1 expected)");
                    var t = null;
                    if (n instanceof String || "string" == typeof n) t = n;
                    else {
                        var i;
                        for (i in e)
                            if (e.hasOwnProperty(i) && n === e[i]) {
                                t = i;
                                break
                            }
                    }
                    var o = e.expression.docs[t];
                    if (!t || !o) throw new Error('No documentation found on "' + t + '"');
                    return new r(e, o)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(12);
                e.parse = function () {
                    return r.apply(r, arguments)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r() {
                    var e, r, n, t = this.params,
                        i = this.op;
                    switch (t.length) {
                    case 1:
                        return "-" == i ? "-" + t[0].toString() : t[0].toString() + i;
                    case 2:
                        var a = t[0].toString(),
                            u = t[1].toString(),
                            f = " ";
                        return "1" === a && "*" === i ? u : "1" === u && "*" === i ? a : "0" === a ? 8 === o(this) ? u : "0" : "0" === u ? 8 === o(this) ? a : "0" : "*" === i && !isNaN(a) != !isNaN(u) ? (isNaN(u) || (e = u, u = a, a = e), n = /^-.*/.test(u), r = /^-.*/.test(a), n && (u = u.substr(1), a = r ? a.substr(1) : "-" + a), a + u) : ("+" === i && /^-.*/.test(u) && (i = "-", u = u.substr(1)), "^" === i && (f = ""), t[0] instanceof s && (a = o(this) >= o(t[0]) ? a : "(" + a + ")"), t[1] instanceof s && (u = o(this) >= o(t[1]) ? u : "(" + u + ")"), a + f + i + f + u);
                    default:
                        return i + "(" + this.params.join(", ") + ")"
                    }
                }

                function t(e, r) {
                    return r || (r = 3),
                        function () {
                            var n = e[this.name];
                            return l(n) ? Number(n).toPrecision(r).toString().replace(/\.?0+$/, "") : this.name
                        }
                }

                function i(e, n, i) {
                    var o = e.find({
                            type: s
                        }),
                        a = e.find({
                            type: u
                        });
                    o.forEach(function (e) {
                        e.toString = r
                    }), a.forEach(function (e) {
                        e.toString = t(n, i)
                    })
                }

                function o(e) {
                    var r = null,
                        n = {
                            "^": 1,
                            "!": 2,
                            "'": 3,
                            ":": 4,
                            "/": 5,
                            "./": 5,
                            "*": 6,
                            ".*": 6,
                            "%": 7,
                            "+": 8,
                            "-": 8,
                            "in": 9,
                            "<": 10,
                            ">": 10,
                            "<=": 10,
                            ">=": 10,
                            "==": 11,
                            "!=": 11,
                            "=": 12
                        };
                    return e.op && (r = n[e.op]), r
                }
                var a = n(120),
                    s = n(131),
                    u = n(134),
                    f = n(11),
                    c = a.string.isString,
                    l = a.number.isNumber,
                    p = f.isCollection;
                e.prettyprint = function (r, n, t) {
                    if (n || (n = {}), c(r)) {
                        var o = e.parse(r);
                        return i(o, n, t), o.expr.toString()
                    }
                    if (p(r)) return f.deepMap(r, function (r) {
                        var n = e.parse(r);
                        return n.expr.toString()
                    });
                    throw new TypeError("String or matrix expected")
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = (n(8), n(11)),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.abs = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("abs", arguments.length, 1);
                    if (a(r)) return Math.abs(r);
                    if (u(r)) return Math.sqrt(r.re * r.re + r.im * r.im);
                    if (r instanceof t) return r.abs();
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return Math.abs(r);
                    throw new e.error.UnsupportedTypeError("abs", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = (n(8), n(9)),
                    a = n(11),
                    s = r["boolean"].isBoolean,
                    u = r.number.isNumber,
                    f = r.string.isString,
                    c = i.isComplex,
                    l = o.isUnit,
                    p = a.isCollection;
                e.add = function m(r, n) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("add", arguments.length, 2);
                    if (u(r)) {
                        if (u(n)) return r + n;
                        if (c(n)) return new i(r + n.re, n.im)
                    }
                    if (c(r)) {
                        if (c(n)) return new i(r.re + n.re, r.im + n.im);
                        if (u(n)) return new i(r.re + n, r.im)
                    }
                    if (l(r) && l(n)) {
                        if (null == r.value) throw new Error("Parameter x contains a unit with undefined value");
                        if (null == n.value) throw new Error("Parameter y contains a unit with undefined value");
                        if (!r.equalBase(n)) throw new Error("Units do not match");
                        var o = r.clone();
                        return o.value += n.value, o.fixPrefix = !1, o
                    }
                    if (r instanceof t) return u(n) ? n = t.convert(n) : s(n) && (n = new t(n ? 1 : 0)), n instanceof t ? r.plus(n) : m(r.toNumber(), n);
                    if (n instanceof t) return u(r) ? r = t.convert(r) : s(r) && (r = new t(r ? 1 : 0)), r instanceof t ? r.plus(n) : m(r, n.toNumber());
                    if (p(r) || p(n)) return a.deepMap2(r, n, m);
                    if (f(r) || f(n)) return r + n;
                    if (s(r)) return m(+r, n);
                    if (s(n)) return m(r, +n);
                    throw new e.error.UnsupportedTypeError("add", e["typeof"](r), e["typeof"](n))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = o.isCollection,
                    f = i.isComplex;
                e.ceil = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("ceil", arguments.length, 1);
                    if (a(r)) return Math.ceil(r);
                    if (f(r)) return new i(Math.ceil(r.re), Math.ceil(r.im));
                    if (r instanceof t) return r.ceil();
                    if (u(r)) return o.deepMap(r, c);
                    if (s(r)) return Math.ceil(r);
                    throw new e.error.UnsupportedTypeError("ceil", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(9),
                    s = n(11),
                    u = t.number.isNumber,
                    f = t.number.nearlyEqual,
                    c = t["boolean"].isBoolean,
                    l = t.string.isString,
                    p = o.isComplex,
                    m = a.isUnit,
                    h = s.isCollection;
                e.compare = function g(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("compare", arguments.length, 2);
                    if (u(n) && u(t)) return f(n, t, r.epsilon) ? 0 : n > t ? 1 : -1;
                    if (n instanceof i) return u(t) ? t = i.convert(t) : c(t) && (t = new i(t ? 1 : 0)), t instanceof i ? new i(n.cmp(t)) : g(n.toNumber(), t);
                    if (t instanceof i) return u(n) ? n = i.convert(n) : c(n) && (n = new i(n ? 1 : 0)), n instanceof i ? new i(n.cmp(t)) : g(n, t.toNumber());
                    if (m(n) && m(t)) {
                        if (!n.equalBase(t)) throw new Error("Cannot compare units with different base");
                        return n.value > t.value ? 1 : n.value < t.value ? -1 : 0
                    }
                    if (h(n) || h(t)) return s.deepMap2(n, t, g);
                    if (l(n) || l(t)) return n > t ? 1 : t > n ? -1 : 0;
                    if (c(n)) return g(+n, t);
                    if (c(t)) return g(n, +t);
                    if (p(n) || p(t)) throw new TypeError("No ordering relation is defined for complex numbers");
                    throw new e.error.UnsupportedTypeError("compare", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.cube = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("cube", arguments.length, 1);
                    if (a(r)) return r * r * r;
                    if (u(r)) return e.multiply(e.multiply(r, r), r);
                    if (r instanceof t) return r.times(r).times(r);
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return c(+r);
                    throw new e.error.UnsupportedTypeError("cube", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(e, r) {
                    var n = r.re * r.re + r.im * r.im;
                    return 0 != n ? new o((e.re * r.re + e.im * r.im) / n, (e.im * r.re - e.re * r.im) / n) : new o(0 != e.re ? e.re / 0 : 0, 0 != e.im ? e.im / 0 : 0)
                }
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = (n(8), n(9)),
                    s = n(11),
                    u = t.number.isNumber,
                    f = t["boolean"].isBoolean,
                    c = o.isComplex,
                    l = a.isUnit,
                    p = s.isCollection;
                e.divide = function m(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("divide", arguments.length, 2);
                    if (u(n)) {
                        if (u(t)) return n / t;
                        if (c(t)) return r(new o(n, 0), t)
                    }
                    if (c(n)) {
                        if (c(t)) return r(n, t);
                        if (u(t)) return r(n, new o(t, 0))
                    }
                    if (n instanceof i) return u(t) ? t = i.convert(t) : f(t) && (t = new i(t ? 1 : 0)), t instanceof i ? n.div(t) : m(n.toNumber(), t);
                    if (t instanceof i) return u(n) ? n = i.convert(n) : f(n) && (n = new i(n ? 1 : 0)), n instanceof i ? n.div(t) : m(n, t.toNumber());
                    if (l(n) && u(t)) {
                        var a = n.clone();
                        return a.value /= t, a
                    }
                    if (p(n)) return p(t) ? e.multiply(n, e.inv(t)) : s.deepMap2(n, t, m);
                    if (p(t)) return e.multiply(n, e.inv(t));
                    if (f(n)) return m(+n, t);
                    if (f(t)) return m(n, +t);
                    throw new e.error.UnsupportedTypeError("divide", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(11);
                e.edivide = function (n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("edivide", arguments.length, 2);
                    return r.deepMap2(n, t, e.divide)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = (n(120), n(11));
                e.emultiply = function (n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("emultiply", arguments.length, 2);
                    return r.deepMap2(n, t, e.multiply)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = (n(120), n(11));
                e.epow = function (n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("epow", arguments.length, 2);
                    return r.deepMap2(n, t, e.pow)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(9),
                    s = n(11),
                    u = t.number.isNumber,
                    f = t.number.nearlyEqual,
                    c = t["boolean"].isBoolean,
                    l = t.string.isString,
                    p = o.isComplex,
                    m = a.isUnit,
                    h = s.isCollection;
                e.equal = function g(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("equal", arguments.length, 2);
                    if (u(n)) {
                        if (u(t)) return f(n, t, r.epsilon);
                        if (p(t)) return f(n, t.re, r.epsilon) && f(t.im, 0, r.epsilon)
                    }
                    if (p(n)) {
                        if (u(t)) return f(n.re, t, r.epsilon) && f(n.im, 0, r.epsilon);
                        if (p(t)) return f(n.re, t.re, r.epsilon) && f(n.im, t.im, r.epsilon)
                    }
                    if (n instanceof i) return u(t) ? t = i.convert(t) : c(t) && (t = new i(t ? 1 : 0)), t instanceof i ? n.eq(t) : g(n.toNumber(), t);
                    if (t instanceof i) return u(n) ? n = i.convert(n) : c(n) && (n = new i(n ? 1 : 0)), n instanceof i ? n.eq(t) : g(n, t.toNumber());
                    if (m(n) && m(t)) {
                        if (!n.equalBase(t)) throw new Error("Cannot compare units with different base");
                        return n.value == t.value
                    }
                    if (h(n) || h(t)) return s.deepMap2(n, t, g);
                    if (l(n) || l(t)) return n == t;
                    if (c(n)) return g(+n, t);
                    if (c(t)) return g(n, +t);
                    throw new e.error.UnsupportedTypeError("equal", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = (n(8), n(11)),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.exp = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("exp", arguments.length, 1);
                    if (a(r)) return Math.exp(r);
                    if (u(r)) {
                        var n = Math.exp(r.re);
                        return new i(n * Math.cos(r.im), n * Math.sin(r.im))
                    }
                    if (r instanceof t) return r.exp();
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return Math.exp(r);
                    throw new e.error.UnsupportedTypeError("exp", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.fix = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("fix", arguments.length, 1);
                    if (a(r)) return r > 0 ? Math.floor(r) : Math.ceil(r);
                    if (u(r)) return new i(r.re > 0 ? Math.floor(r.re) : Math.ceil(r.re), r.im > 0 ? Math.floor(r.im) : Math.ceil(r.im));
                    if (r instanceof t) return r.isNegative() ? r.ceil() : r.floor();
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return c(+r);
                    throw new e.error.UnsupportedTypeError("fix", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.floor = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("floor", arguments.length, 1);
                    if (a(r)) return Math.floor(r);
                    if (u(r)) return new i(Math.floor(r.re), Math.floor(r.im));
                    if (r instanceof t) return r.floor();
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return c(+r);
                    throw new e.error.UnsupportedTypeError("floor", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(11),
                    o = r.number.isNumber,
                    a = r["boolean"].isBoolean,
                    s = r.number.isInteger,
                    u = i.isCollection;
                e.gcd = function f() {
                    var r, n = arguments[0],
                        c = arguments[1];
                    if (2 == arguments.length) {
                        if (o(n) && o(c)) {
                            if (!s(n) || !s(c)) throw new Error("Parameters in function gcd must be integer numbers");
                            for (; 0 != c;) r = n % c, n = c, c = r;
                            return 0 > n ? -n : n
                        }
                        if (u(n) || u(c)) return i.deepMap2(n, c, f);
                        if (n instanceof t) return f(n.toNumber(), c);
                        if (c instanceof t) return f(n, c.toNumber());
                        if (a(n)) return f(+n, c);
                        if (a(c)) return f(n, +c);
                        throw new e.error.UnsupportedTypeError("gcd", e["typeof"](n), e["typeof"](c))
                    }
                    if (arguments.length > 2) {
                        for (var l = 1; l < arguments.length; l++) n = f(n, arguments[l]);
                        return n
                    }
                    throw new SyntaxError("Function gcd expects two or more arguments")
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(9),
                    s = n(11),
                    u = t.number.isNumber,
                    f = t.number.nearlyEqual,
                    c = t["boolean"].isBoolean,
                    l = t.string.isString,
                    p = o.isComplex,
                    m = a.isUnit,
                    h = s.isCollection;
                e.larger = function g(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("larger", arguments.length, 2);
                    if (u(n) && u(t)) return !f(n, t, r.epsilon) && n > t;
                    if (n instanceof i) return u(t) ? t = i.convert(t) : c(t) && (t = new i(t ? 1 : 0)), t instanceof i ? n.gt(t) : g(n.toNumber(), t);
                    if (t instanceof i) return u(n) ? n = i.convert(n) : c(n) && (n = new i(n ? 1 : 0)), n instanceof i ? n.gt(t) : g(n, t.toNumber());
                    if (m(n) && m(t)) {
                        if (!n.equalBase(t)) throw new Error("Cannot compare units with different base");
                        return n.value > t.value
                    }
                    if (h(n) || h(t)) return s.deepMap2(n, t, g);
                    if (l(n) || l(t)) return n > t;
                    if (c(n)) return g(+n, t);
                    if (c(t)) return g(n, +t);
                    if (p(n) || p(t)) throw new TypeError("No ordering relation is defined for complex numbers");
                    throw new e.error.UnsupportedTypeError("larger", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(9),
                    s = n(11),
                    u = t.number.isNumber,
                    f = t.number.nearlyEqual,
                    c = t["boolean"].isBoolean,
                    l = t.string.isString,
                    p = o.isComplex,
                    m = a.isUnit,
                    h = s.isCollection;
                e.largereq = function g(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("largereq", arguments.length, 2);
                    if (u(n) && u(t)) return f(n, t, r.epsilon) || n > t;
                    if (n instanceof i) return u(t) ? t = i.convert(t) : c(t) && (t = new i(t ? 1 : 0)), t instanceof i ? n.gte(t) : g(n.toNumber(), t);
                    if (t instanceof i) return u(n) ? n = i.convert(n) : c(n) && (n = new i(n ? 1 : 0)), n instanceof i ? n.gte(t) : g(n, t.toNumber());
                    if (m(n) && m(t)) {
                        if (!n.equalBase(t)) throw new Error("Cannot compare units with different base");
                        return n.value >= t.value
                    }
                    if (h(n) || h(t)) return s.deepMap2(n, t, g);
                    if (l(n) || l(t)) return n >= t;
                    if (c(n)) return g(+n, t);
                    if (c(t)) return g(n, +t);
                    if (p(n) || p(t)) throw new TypeError("No ordering relation is defined for complex numbers");
                    throw new e.error.UnsupportedTypeError("largereq", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(11),
                    o = r.number.isNumber,
                    a = r["boolean"].isBoolean,
                    s = r.number.isInteger,
                    u = i.isCollection;
                e.lcm = function f() {
                    var r, n = arguments[0],
                        c = arguments[1];
                    if (2 == arguments.length) {
                        if (o(n) && o(c)) {
                            if (!s(n) || !s(c)) throw new Error("Parameters in function lcm must be integer numbers");
                            if (0 == n || 0 == c) return 0;
                            for (var l = n * c; 0 != c;) r = c, c = n % r, n = r;
                            return Math.abs(l / n)
                        }
                        if (u(n) || u(c)) return i.deepMap2(n, c, f);
                        if (a(n)) return f(+n, c);
                        if (a(c)) return f(n, +c);
                        if (n instanceof t) return f(n.toNumber(), c);
                        if (c instanceof t) return f(n, c.toNumber());
                        throw new e.error.UnsupportedTypeError("lcm", e["typeof"](n), e["typeof"](c))
                    }
                    if (arguments.length > 2) {
                        for (var p = 1; p < arguments.length; p++) n = f(n, arguments[p]);
                        return n
                    }
                    throw new SyntaxError("Function lcm expects two or more arguments")
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.log = function c(r, n) {
                    if (1 == arguments.length) {
                        if (a(r)) return r >= 0 ? Math.log(r) : c(new i(r, 0));
                        if (u(r)) return new i(Math.log(Math.sqrt(r.re * r.re + r.im * r.im)), Math.atan2(r.im, r.re));
                        if (r instanceof t) return r.isNegative() ? c(r.toNumber()) : r.ln();
                        if (f(r)) return o.deepMap(r, c);
                        if (s(r)) return c(+r);
                        throw new e.error.UnsupportedTypeError("log", e["typeof"](r))
                    }
                    if (2 == arguments.length) return e.divide(c(r), c(n));
                    throw new e.error.ArgumentsError("log", arguments.length, 1, 2)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.log10 = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("log10", arguments.length, 1);
                    if (a(r)) return r >= 0 ? Math.log(r) / Math.LN10 : c(new i(r, 0));
                    if (r instanceof t) return r.isNegative() ? c(r.toNumber()) : r.log();
                    if (u(r)) return new i(Math.log(Math.sqrt(r.re * r.re + r.im * r.im)) / Math.LN10, Math.atan2(r.im, r.re) / Math.LN10);
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return c(+r);
                    throw new e.error.UnsupportedTypeError("log10", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(e, r) {
                    if (r > 0) return e - r * Math.floor(e / r);
                    if (0 == r) return e;
                    throw new Error("Cannot calculate mod for a negative divisor")
                }
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(11),
                    a = t.number.isNumber,
                    s = t["boolean"].isBoolean,
                    u = o.isCollection;
                e.mod = function f(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("mod", arguments.length, 2);
                    if (a(n) && a(t)) return r(n, t);
                    if (n instanceof i) return a(t) ? t = i.convert(t) : s(t) && (t = new i(t ? 1 : 0)), t instanceof i ? t.isZero() ? n : n.mod(t) : f(n.toNumber(), t);
                    if (t instanceof i) return a(n) ? n = i.convert(n) : s(n) && (n = new i(n ? 1 : 0)), n instanceof i ? t.isZero() ? n : n.mod(t) : f(n, t.toNumber());
                    if (u(n) || u(t)) return o.deepMap2(n, t, f);
                    if (s(n)) return f(+n, t);
                    if (s(t)) return f(n, +t);
                    throw new e.error.UnsupportedTypeError("mod", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n) {
                    for (var t = [], i = r.length, o = n[0].length, a = r[0].length, s = 0; i > s; s++) {
                        t[s] = [];
                        for (var u = 0; o > u; u++) {
                            for (var f = null, c = 0; a > c; c++) {
                                var l = e.multiply(r[s][c], n[c][u]);
                                f = null === f ? l : e.add(f, l)
                            }
                            t[s][u] = f
                        }
                    }
                    return t
                }

                function t(r, n) {
                    for (var t = [], i = n.length, o = n[0].length, a = 0; o > a; a++) {
                        for (var s = null, u = 0; i > u; u++) {
                            var f = e.multiply(r[u], n[u][a]);
                            s = 0 === u ? f : e.add(s, f)
                        }
                        t[a] = s
                    }
                    return t
                }

                function i(r, n) {
                    for (var t = [], i = r.length, o = r[0].length, a = 0; i > a; a++) {
                        for (var s = null, u = 0; o > u; u++) {
                            var f = e.multiply(r[a][u], n[u]);
                            s = 0 === u ? f : e.add(s, f)
                        }
                        t[a] = s
                    }
                    return t
                }

                function o(r, n) {
                    var t = r.length;
                    if (!t) throw new Error("Cannot multiply two empty vectors");
                    for (var i = 0, o = 0; t > o; o++) i = e.add(i, e.multiply(r[o], n[o]));
                    return i
                }

                function a(e, r) {
                    return 0 == e.im ? 0 == r.im ? new f(e.re * r.re, 0) : 0 == r.re ? new f(0, e.re * r.im) : new f(e.re * r.re, e.re * r.im) : 0 == e.re ? 0 == r.im ? new f(0, e.im * r.re) : 0 == r.re ? new f(-e.im * r.im, 0) : new f(-e.im * r.im, e.im * r.re) : 0 == r.im ? new f(e.re * r.re, e.im * r.re) : 0 == r.re ? new f(-e.im * r.im, e.re * r.im) : new f(e.re * r.re - e.im * r.im, e.re * r.im + e.im * r.re)
                }
                var s = n(120),
                    u = e.type.BigNumber,
                    f = n(5),
                    c = n(8),
                    l = n(9),
                    p = n(11),
                    m = s.array,
                    h = s.number.isNumber,
                    g = s["boolean"].isBoolean,
                    d = f.isComplex,
                    x = Array.isArray,
                    w = l.isUnit;
                e.multiply = function y(n, s) {
                    var l;
                    if (2 != arguments.length) throw new e.error.ArgumentsError("multiply", arguments.length, 2);
                    if (h(n)) {
                        if (h(s)) return n * s;
                        if (d(s)) return a(new f(n, 0), s);
                        if (w(s)) return l = s.clone(), l.value *= n, l
                    }
                    if (d(n)) {
                        if (h(s)) return a(n, new f(s, 0));
                        if (d(s)) return a(n, s)
                    }
                    if (n instanceof u) return h(s) ? s = u.convert(s) : g(s) && (s = new u(s ? 1 : 0)), s instanceof u ? n.times(s) : y(n.toNumber(), s);
                    if (s instanceof u) return h(n) ? n = u.convert(n) : g(n) && (n = new u(n ? 1 : 0)), n instanceof u ? n.times(s) : y(n, s.toNumber());
                    if (w(n) && h(s)) return l = n.clone(), l.value *= s, l;
                    if (x(n)) {
                        if (x(s)) {
                            var v = m.size(n),
                                b = m.size(s);
                            if (1 == v.length) {
                                if (1 == b.length) {
                                    if (v[0] != b[0]) throw new RangeError("Dimension mismatch in multiplication. Length of A must match length of B (A is " + v[0] + ", B is " + b[0] + v[0] + " != " + b[0] + ")");
                                    return o(n, s)
                                }
                                if (2 == b.length) {
                                    if (v[0] != b[0]) throw new RangeError("Dimension mismatch in multiplication. Length of A must match rows of B (A is " + v[0] + ", B is " + b[0] + "x" + b[1] + ", " + v[0] + " != " + b[0] + ")");
                                    return t(n, s)
                                }
                                throw new Error("Can only multiply a 1 or 2 dimensional matrix (B has " + b.length + " dimensions)")
                            }
                            if (2 == v.length) {
                                if (1 == b.length) {
                                    if (v[1] != b[0]) throw new RangeError("Dimension mismatch in multiplication. Columns of A must match length of B (A is " + v[0] + "x" + v[0] + ", B is " + b[0] + ", " + v[1] + " != " + b[0] + ")");
                                    return i(n, s)
                                }
                                if (2 == b.length) {
                                    if (v[1] != b[0]) throw new RangeError("Dimension mismatch in multiplication. Columns of A must match rows of B (A is " + v[0] + "x" + v[1] + ", B is " + b[0] + "x" + b[1] + ", " + v[1] + " != " + b[0] + ")");
                                    return r(n, s)
                                }
                                throw new Error("Can only multiply a 1 or 2 dimensional matrix (B has " + b.length + " dimensions)")
                            }
                            throw new Error("Can only multiply a 1 or 2 dimensional matrix (A has " + v.length + " dimensions)")
                        }
                        return s instanceof c ? new c(y(n, s.valueOf())) : p.deepMap2(n, s, y)
                    }
                    if (n instanceof c) return new c(s instanceof c ? y(n.valueOf(), s.valueOf()) : y(n.valueOf(), s));
                    if (x(s)) return p.deepMap2(n, s, y);
                    if (s instanceof c) return new c(p.deepMap2(n, s.valueOf(), y));
                    if (g(n)) return y(+n, s);
                    if (g(s)) return y(n, +s);
                    throw new e.error.UnsupportedTypeError("multiply", e["typeof"](n), e["typeof"](s))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                {
                    var r = n(120),
                        t = n(154),
                        i = e.type.BigNumber,
                        o = n(5),
                        a = n(8),
                        s = n(11),
                        u = r.number.isNumber,
                        f = r["boolean"].isBoolean,
                        c = o.isComplex;
                    s.isCollection
                }
                e.norm = function l(r, n) {
                    if (arguments.length < 1 || arguments.length > 2) throw new e.error.ArgumentsError("abs", arguments.length, 1, 2);
                    if (u(r)) return Math.abs(r);
                    if (c(r)) return Math.sqrt(r.re * r.re + r.im * r.im);
                    if (r instanceof i) return r.abs();
                    if (f(r)) return Math.abs(r);
                    if (isArray(r)) {
                        var o = t.size(r);
                        if (null == n && (n = 2), 1 == o.length) {
                            if (n === Number.POSITIVE_INFINITY || "inf" === n) {
                                var s;
                                return e.forEach(r, function (r) {
                                    var n = e.abs(r);
                                    (!s || e.larger(n, s)) && (s = n)
                                }), s
                            }
                            if (n === Number.NEGATIVE_INFINITY || "-inf" === n) {
                                var s;
                                return e.forEach(r, function (r) {
                                    var n = e.abs(r);
                                    (!s || e.smaller(n, s)) && (s = n)
                                }), s
                            }
                            if ("fro" === n) return l(r);
                            if (u(n) && !isNaN(n)) {
                                if (!e.equal(n, 0)) {
                                    var s = 0;
                                    return e.forEach(r, function (r) {
                                        s = e.add(e.pow(e.abs(r), n), s)
                                    }), e.pow(s, 1 / n)
                                }
                                return Number.POSITIVE_INFINITY
                            }
                            throw new Error("Unsupported parameter value")
                        }
                        if (2 == o.length) {
                            if (1 == n) {
                                for (var p = [], m = 0; m < r.length; m++)
                                    for (var h = r[m], g = 0; g < h.length; g++) p[g] = e.add(p[g] || 0, e.abs(h[g]));
                                return e.max(p)
                            }
                            if (n == Number.POSITIVE_INFINITY || "inf" === n) {
                                for (var s = 0, m = 0; m < r.length; m++) {
                                    for (var d = 0, h = r[m], g = 0; g < h.length; g++) d = e.add(d, e.abs(h[g]));
                                    e.larger(d, s) && (s = d)
                                }
                                return s
                            }
                            if ("fro" === n) {
                                var x = e.diag(e.multiply(e.transpose(r), r)),
                                    w = 0;
                                return e.forEach(x, function (r) {
                                    w = e.add(r, w)
                                }), e.sqrt(w)
                            }
                            if (2 == n) throw new Error("Unsupported parameter value, missing implementation of matrix singular value decomposition");
                            throw new Error("Unsupported parameter value")
                        }
                    }
                    if (r instanceof a) return l(r.valueOf(), n);
                    throw new e.error.UnsupportedTypeError("norm", r)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n) {
                    var t = e.log(r),
                        i = e.multiply(t, n);
                    return e.exp(i)
                }
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(8),
                    s = (n(11), t.array),
                    u = t.number.isNumber,
                    f = t["boolean"].isBoolean,
                    c = Array.isArray,
                    l = t.number.isInteger,
                    p = o.isComplex;
                e.pow = function m(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("pow", arguments.length, 2);
                    if (u(n)) {
                        if (u(t)) return l(t) || n >= 0 ? Math.pow(n, t) : r(new o(n, 0), new o(t, 0));
                        if (p(t)) return r(new o(n, 0), t)
                    }
                    if (p(n)) {
                        if (u(t)) return r(n, new o(t, 0));
                        if (p(t)) return r(n, t)
                    }
                    if (n instanceof i) return u(t) ? t = i.convert(t) : f(t) && (t = new i(t ? 1 : 0)), t instanceof i ? t.isInteger() && !n.isNegative() ? n.pow(t) : m(n.toNumber(), t.toNumber()) : m(n.toNumber(), t);
                    if (t instanceof i) return u(n) ? n = i.convert(n) : f(n) && (n = new i(n ? 1 : 0)), n instanceof i ? t.isInteger() && !n.isNegative() ? n.pow(t) : m(n.toNumber(), t.toNumber()) : m(n, t.toNumber());
                    if (c(n)) {
                        if (!u(t) || !l(t) || 0 > t) throw new TypeError("For A^b, b must be a positive integer (value is " + t + ")");
                        var h = s.size(n);
                        if (2 != h.length) throw new Error("For A^b, A must be 2 dimensional (A has " + h.length + " dimensions)");
                        if (h[0] != h[1]) throw new Error("For A^b, A must be square (size is " + h[0] + "x" + h[1] + ")");
                        for (var g = e.eye(h[0]).valueOf(), d = n; t >= 1;) 1 == (1 & t) && (g = e.multiply(d, g)), t >>= 1, d = e.multiply(d, d);
                        return g
                    }
                    if (n instanceof a) return new a(m(n.valueOf(), t));
                    if (f(n)) return m(+n, t);
                    if (f(t)) return m(n, +t);
                    throw new e.error.UnsupportedTypeError("pow", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(e, r) {
                    var n = Math.pow(10, r);
                    return Math.round(e * n) / n
                }
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(11),
                    s = t.number.isNumber,
                    u = t.number.isInteger,
                    f = t["boolean"].isBoolean,
                    c = o.isComplex,
                    l = a.isCollection;
                e.round = function p(n, t) {
                    if (1 != arguments.length && 2 != arguments.length) throw new e.error.ArgumentsError("round", arguments.length, 1, 2);
                    if (void 0 == t) {
                        if (s(n)) return Math.round(n);
                        if (c(n)) return new o(Math.round(n.re), Math.round(n.im));
                        if (n instanceof i) return n.toDecimalPlaces(0);
                        if (l(n)) return a.deepMap(n, p);
                        if (f(n)) return Math.round(n);
                        throw new e.error.UnsupportedTypeError("round", e["typeof"](n))
                    }
                    if (!s(t) || !u(t)) {
                        if (!(t instanceof i)) {
                            if (f(t)) return p(n, +t);
                            throw new TypeError("Number of decimals in function round must be an integer")
                        }
                        t = parseFloat(t.valueOf())
                    }
                    if (0 > t || t > 15) throw new Error("Number of decimals in function round must be in te range of 0-15");
                    if (s(n)) return r(n, t);
                    if (c(n)) return new o(r(n.re, t), r(n.im, t));
                    if (n instanceof i) return n.toDecimalPlaces(t);
                    if (l(n) || l(t)) return a.deepMap2(n, t, p);
                    if (f(n)) return p(+n, t);
                    throw new e.error.UnsupportedTypeError("round", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number,
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isCollection;
                e.sign = function l(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("sign", arguments.length, 1);
                    if (s(r)) return a.sign(r);
                    if (f(r)) {
                        var n = Math.sqrt(r.re * r.re + r.im * r.im);
                        return new i(r.re / n, r.im / n)
                    }
                    if (r instanceof t) return new t(r.cmp(0));
                    if (c(r)) return o.deepMap(r, l);
                    if (u(r)) return a.sign(r);
                    throw new e.error.UnsupportedTypeError("sign", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(9),
                    s = n(11),
                    u = t.number.isNumber,
                    f = t.number.nearlyEqual,
                    c = t["boolean"].isBoolean,
                    l = t.string.isString,
                    p = o.isComplex,
                    m = a.isUnit,
                    h = s.isCollection;
                e.smaller = function g(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("smaller", arguments.length, 2);
                    if (u(n) && u(t)) return !f(n, t, r.epsilon) && t > n;
                    if (n instanceof i) return u(t) ? t = i.convert(t) : c(t) && (t = new i(t ? 1 : 0)), t instanceof i ? n.lt(t) : g(n.toNumber(), t);
                    if (t instanceof i) return u(n) ? n = i.convert(n) : c(n) && (n = new i(n ? 1 : 0)), n instanceof i ? n.lt(t) : g(n, t.toNumber());
                    if (m(n) && m(t)) {
                        if (!n.equalBase(t)) throw new Error("Cannot compare units with different base");
                        return n.value < t.value
                    }
                    if (h(n) || h(t)) return s.deepMap2(n, t, g);
                    if (l(n) || l(t)) return t > n;
                    if (c(n)) return g(+n, t);
                    if (c(t)) return g(n, +t);
                    if (p(n) || p(t)) throw new TypeError("No ordering relation is defined for complex numbers");
                    throw new e.error.UnsupportedTypeError("smaller", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(9),
                    s = n(11),
                    u = t.number.isNumber,
                    f = t.number.nearlyEqual,
                    c = t["boolean"].isBoolean,
                    l = t.string.isString,
                    p = o.isComplex,
                    m = a.isUnit,
                    h = s.isCollection;
                e.smallereq = function g(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("smallereq", arguments.length, 2);
                    if (u(n) && u(t)) return f(n, t, r.epsilon) || t > n;
                    if (n instanceof i) return u(t) ? t = i.convert(t) : c(t) && (t = new i(t ? 1 : 0)), t instanceof i ? n.lte(t) : g(n.toNumber(), t);
                    if (t instanceof i) return u(n) ? n = i.convert(n) : c(n) && (n = new i(n ? 1 : 0)), n instanceof i ? n.lte(t) : g(n, t.toNumber());
                    if (m(n) && m(t)) {
                        if (!n.equalBase(t)) throw new Error("Cannot compare units with different base");
                        return n.value <= t.value
                    }
                    if (h(n) || h(t)) return s.deepMap2(n, t, g);
                    if (l(n) || l(t)) return t >= n;
                    if (c(n)) return g(+n, t);
                    if (c(t)) return g(n, +t);
                    if (p(n) || p(t)) throw new TypeError("No ordering relation is defined for complex numbers");
                    throw new e.error.UnsupportedTypeError("smallereq", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.sqrt = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("sqrt", arguments.length, 1);
                    if (a(r)) return r >= 0 ? Math.sqrt(r) : c(new i(r, 0));
                    if (u(r)) {
                        var n = Math.sqrt(r.re * r.re + r.im * r.im);
                        return r.im >= 0 ? new i(.5 * Math.sqrt(2 * (n + r.re)), .5 * Math.sqrt(2 * (n - r.re))) : new i(.5 * Math.sqrt(2 * (n + r.re)), -.5 * Math.sqrt(2 * (n - r.re)))
                    }
                    if (r instanceof t) return r.isNegative() ? c(r.toNumber()) : r.sqrt();
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return c(+r);
                    throw new e.error.UnsupportedTypeError("sqrt", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.square = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("square", arguments.length, 1);
                    if (a(r)) return r * r;
                    if (u(r)) return e.multiply(r, r);
                    if (r instanceof t) return r.times(r);
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return r * r;
                    throw new e.error.UnsupportedTypeError("square", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = (n(8), n(9)),
                    a = n(11),
                    s = r["boolean"].isBoolean,
                    u = r.number.isNumber,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.subtract = function p(r, n) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("subtract", arguments.length, 2);
                    if (u(r)) {
                        if (u(n)) return r - n;
                        if (f(n)) return new i(r - n.re, -n.im)
                    } else if (f(r)) {
                        if (u(n)) return new i(r.re - n, r.im);
                        if (f(n)) return new i(r.re - n.re, r.im - n.im)
                    }
                    if (r instanceof t) return u(n) ? n = t.convert(n) : s(n) && (n = new t(n ? 1 : 0)), n instanceof t ? r.minus(n) : p(r.toNumber(), n);
                    if (n instanceof t) return u(r) ? r = t.convert(r) : s(r) && (r = new t(r ? 1 : 0)), r instanceof t ? r.minus(n) : p(r, n.toNumber());
                    if (c(r) && c(n)) {
                        if (null == r.value) throw new Error("Parameter x contains a unit with undefined value");
                        if (null == n.value) throw new Error("Parameter y contains a unit with undefined value");
                        if (!r.equalBase(n)) throw new Error("Units do not match");
                        var o = r.clone();
                        return o.value -= n.value, o.fixPrefix = !1, o
                    }
                    if (l(r) || l(n)) return a.deepMap2(r, n, p);
                    if (s(r)) return p(+r, n);
                    if (s(n)) return p(r, +n);
                    throw new e.error.UnsupportedTypeError("subtract", e["typeof"](r), e["typeof"](n))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.unary = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("unary", arguments.length, 1);
                    if (s(r)) return -r;
                    if (f(r)) return new i(-r.re, -r.im);
                    if (r instanceof t) return r.neg();
                    if (c(r)) {
                        var n = r.clone();
                        return n.value = -r.value, n
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return -r;
                    throw new e.error.UnsupportedTypeError("unary", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(9),
                    s = n(11),
                    u = t.number.isNumber,
                    f = t.number.nearlyEqual,
                    c = t["boolean"].isBoolean,
                    l = t.string.isString,
                    p = o.isComplex,
                    m = a.isUnit,
                    h = s.isCollection;
                e.unequal = function g(n, t) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("unequal", arguments.length, 2);
                    if (u(n)) {
                        if (u(t)) return !f(n, t, r.epsilon);
                        if (p(t)) return !f(n, t.re, r.epsilon) || !f(t.im, 0, r.epsilon)
                    }
                    if (p(n)) {
                        if (u(t)) return !f(n.re, t, r.epsilon) || !f(n.im, 0, r.epsilon);
                        if (p(t)) return !f(n.re, t.re, r.epsilon) || !f(n.im, t.im, r.epsilon)
                    }
                    if (n instanceof i) return u(t) ? t = i.convert(t) : c(t) && (t = new i(t ? 1 : 0)), t instanceof i ? !n.eq(t) : g(n.toNumber(), t);
                    if (t instanceof i) return u(n) ? n = i.convert(n) : c(n) && (n = new i(n ? 1 : 0)), n instanceof i ? !n.eq(t) : g(n, t.toNumber());
                    if (m(n) && m(t)) {
                        if (!n.equalBase(t)) throw new Error("Cannot compare units with different base");
                        return n.value != t.value
                    }
                    if (h(n) || h(t)) return s.deepMap2(n, t, g);
                    if (l(n) || l(t)) return n != t;
                    if (c(n)) return g(+n, t);
                    if (c(t)) return g(n, +t);
                    throw new e.error.UnsupportedTypeError("unequal", e["typeof"](n), e["typeof"](t))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(e, r) {
                    for (var n, t, i, o = 0, a = 1, s = 1, u = 0; r;) t = Math.floor(e / r), i = e % r, n = o, o = a - t * o, a = n, n = s, s = u - t * s, u = n, e = r, r = i;
                    return 0 > e ? [-e, -a, -u] : [e, e ? a : 0, u]
                }
                var t = n(120),
                    i = e.type.BigNumber,
                    o = t.number.isNumber,
                    a = t["boolean"].isBoolean,
                    s = t.number.isInteger;
                e.xgcd = function u(n, t) {
                    if (2 == arguments.length) {
                        if (o(n) && o(t)) {
                            if (!s(n) || !s(t)) throw new Error("Parameters in function xgcd must be integer numbers");
                            return r(n, t)
                        }
                        if (n instanceof i) return u(n.toNumber(), t);
                        if (t instanceof i) return u(n, t.toNumber());
                        if (a(n)) return u(+n, t);
                        if (a(t)) return u(n, +t);
                        throw new e.error.UnsupportedTypeError("xgcd", e["typeof"](n), e["typeof"](t))
                    }
                    throw new SyntaxError("Function xgcd expects two arguments")
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = o.isCollection,
                    f = i.isComplex;
                e.arg = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("arg", arguments.length, 1);
                    if (a(r)) return Math.atan2(0, r);
                    if (f(r)) return Math.atan2(r.im, r.re);
                    if (u(r)) return o.deepMap(r, c);
                    if (s(r)) return c(+r);
                    if (r instanceof t) return c(r.toNumber());
                    throw new e.error.UnsupportedTypeError("arg", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.object,
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = o.isCollection,
                    c = i.isComplex;
                e.conj = function l(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("conj", arguments.length, 1);
                    return s(r) ? r : r instanceof t ? new t(r) : c(r) ? new i(r.re, -r.im) : f(r) ? o.deepMap(r, l) : u(r) ? +r : a.clone(r)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.object,
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = o.isCollection,
                    c = i.isComplex;
                e.re = function l(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("re", arguments.length, 1);
                    return s(r) ? r : r instanceof t ? new t(r) : c(r) ? r.re : f(r) ? o.deepMap(r, l) : u(r) ? +r : a.clone(r)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = o.isCollection,
                    f = i.isComplex;
                e.im = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("im", arguments.length, 1);
                    return a(r) ? 0 : r instanceof t ? new t(0) : f(r) ? r.im : u(r) ? o.deepMap(r, c) : s(r) ? 0 : 0
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(11),
                    o = i.isCollection,
                    a = r.number.isNumber,
                    s = r.string.isString,
                    u = r["boolean"].isBoolean;
                e.bignumber = function f(r) {
                    if (arguments.length > 1) throw new e.error.ArgumentsError("bignumber", arguments.length, 0, 1);
                    if (r instanceof t || a(r) || s(r)) return new t(r);
                    if (u(r)) return new t(+r);
                    if (o(r)) return i.deepMap(r, f);
                    if (0 == arguments.length) return new t(0);
                    throw new e.error.UnsupportedTypeError("bignumber", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(11),
                    o = i.isCollection,
                    a = r.number.isNumber,
                    s = r.string.isString;
                e["boolean"] = function u(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("boolean", arguments.length, 0, 1);
                    if ("true" === r || r === !0) return !0;
                    if ("false" === r || r === !1) return !1;
                    if (r instanceof Boolean) return 1 == r;
                    if (a(r)) return 0 !== r;
                    if (r instanceof t) return !r.isZero();
                    if (s(r)) {
                        var n = r.toLowerCase();
                        if ("true" === n) return !0;
                        if ("false" === n) return !1;
                        var f = Number(r);
                        if ("" != r && !isNaN(f)) return 0 !== f
                    }
                    if (o(r)) return i.deepMap(r, u);
                    throw new SyntaxError(r.toString() + " is no valid boolean")
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = o.isCollection,
                    s = r.number.isNumber,
                    u = r.string.isString,
                    f = i.isComplex;
                e.complex = function c() {
                    switch (arguments.length) {
                    case 0:
                        return new i(0, 0);
                    case 1:
                        var r = arguments[0];
                        if (s(r)) return new i(r, 0);
                        if (r instanceof t) return new i(r.toNumber(), 0);
                        if (f(r)) return r.clone();
                        if (u(r)) {
                            var n = i.parse(r);
                            if (n) return n;
                            throw new SyntaxError('String "' + r + '" is no valid complex number')
                        }
                        if (a(r)) return o.deepMap(r, c);
                        if ("object" == typeof r) {
                            if ("re" in r && "im" in r) return new i(r.re, r.im);
                            if ("r" in r && "phi" in r) return i.fromPolar(r.r, r.phi)
                        }
                        throw new TypeError("Two numbers, single string or an fitting object expected in function complex");
                    case 2:
                        var l = arguments[0],
                            p = arguments[1];
                        if (l instanceof t && (l = l.toNumber()), p instanceof t && (p = p.toNumber()), s(l) && s(p)) return new i(l, p);
                        throw new TypeError("Two numbers or a single string expected in function complex");
                    default:
                        throw new e.error.ArgumentsError("complex", arguments.length, 0, 2)
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = (n(120), e.type.BigNumber),
                    t = n(7);
                e.index = function () {
                    var e = new t,
                        n = Array.prototype.slice.apply(arguments).map(function (e) {
                            return e instanceof r ? e.toNumber() : Array.isArray(e) ? e.map(function (e) {
                                return e instanceof r ? e.toNumber() : e
                            }) : e
                        });
                    return t.apply(e, n), e
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = (n(120), n(8));
                e.matrix = function (n) {
                    if (arguments.length > 1) throw new e.error.ArgumentsError("matrix", arguments.length, 0, 1);
                    return new r(n)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(11),
                    o = i.isCollection,
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = r.string.isString;
                e.number = function f(r) {
                    switch (arguments.length) {
                    case 0:
                        return 0;
                    case 1:
                        if (o(r)) return i.deepMap(r, f);
                        if (r instanceof t) return r.toNumber();
                        if (u(r)) {
                            var n = Number(r);
                            if (isNaN(n) && (n = Number(r.valueOf())), isNaN(n)) throw new SyntaxError(r.toString() + " is no valid number");
                            return n
                        }
                        if (s(r)) return r + 0;
                        if (a(r)) return r;
                        throw new e.error.UnsupportedTypeError("number", e["typeof"](r));
                    default:
                        throw new e.error.ArgumentsError("number", arguments.length, 0, 1)
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(13);
                e.parser = function () {
                    return new r(e)
                }
            }
        },
        function (e) {
            e.exports = function (e) {
                e.select = function (r) {
                    return new e.chaining.Selector(r)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = n(11),
                    i = r.number,
                    o = r.number.isNumber,
                    a = t.isCollection;
                e.string = function s(r) {
                    switch (arguments.length) {
                    case 0:
                        return "";
                    case 1:
                        return o(r) ? i.format(r) : a(r) ? t.deepMap(r, s) : null === r ? "null" : r.toString();
                    default:
                        throw new e.error.ArgumentsError("string", arguments.length, 0, 1)
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(9),
                    o = n(11),
                    a = o.isCollection,
                    s = r.string.isString;
                e.unit = function u(r) {
                    switch (arguments.length) {
                    case 1:
                        var n = arguments[0];
                        if (n instanceof i) return n.clone();
                        if (s(n)) {
                            if (i.isValuelessUnit(n)) return new i(null, n);
                            var f = i.parse(n);
                            if (f) return f;
                            throw new SyntaxError('String "' + n + '" is no valid unit')
                        }
                        if (a(r)) return o.deepMap(r, u);
                        throw new TypeError("A string or a number and string expected in function unit");
                    case 2:
                        return arguments[0] instanceof t ? new i(arguments[0].toNumber(), arguments[1]) : new i(arguments[0], arguments[1]);
                    default:
                        throw new e.error.ArgumentsError("unit", arguments.length, 1, 2)
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(n, t, i, o) {
                    if (i > o) {
                        if (n.length != t.length) throw new e.error.DimensionError(n.length, t.length);
                        for (var a = [], s = 0; s < n.length; s++) a[s] = r(n[s], t[s], i, o + 1);
                        return a
                    }
                    return n.concat(t)
                }
                var t = n(120),
                    i = n(8),
                    o = n(11),
                    a = t.object,
                    s = t.array,
                    u = t.number.isNumber,
                    f = t.number.isInteger,
                    c = o.isCollection;
                e.concat = function () {
                    var n, t, o = arguments.length,
                        l = -1,
                        p = !1,
                        m = [];
                    for (n = 0; o > n; n++) {
                        var h = arguments[n];
                        if (h instanceof i && (p = !0), n == o - 1 && u(h)) {
                            if (t = l, l = h, !f(l) || 0 > l) throw new TypeError("Dimension number must be a positive integer (dim = " + l + ")");
                            if (n > 0 && l > t) throw new e.error.DimensionError(l, t, ">")
                        } else {
                            if (!c(h)) throw new e.error.UnsupportedTypeError("concat", e["typeof"](h));
                            var g = a.clone(h).valueOf(),
                                d = s.size(h.valueOf());
                            if (m[n] = g, t = l, l = d.length - 1, n > 0 && l != t) throw new e.error.DimensionError(l, t)
                        }
                    }
                    if (0 == m.length) throw new SyntaxError("At least one matrix expected");
                    for (var x = m.shift(); m.length;) x = r(x, m.shift(), l, 0);
                    return p ? new i(x) : x
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n) {
                    function t(r) {
                        var n, t, i = new Array(r.length),
                            o = 0;
                        for (n = 1; n < r.length; n++) o = e.add(o, r[n][n]);
                        for (n = 0; n < r.length; n++) {
                            for (i[n] = new Array(r.length), i[n][n] = e.unary(o), t = 0; n > t; t++) i[n][t] = 0;
                            for (t = n + 1; t < r.length; t++) i[n][t] = r[n][t];
                            n + 1 < r.length && (o = e.subtract(o, r[n + 1][n + 1]))
                        }
                        return i
                    }
                    if (1 == n) return o.clone(r[0][0]);
                    if (2 == n) return e.subtract(e.multiply(r[0][0], r[1][1]), e.multiply(r[1][0], r[0][1]));
                    for (var i = r, a = 0; n - 1 > a; a++) i = e.multiply(t(i), r);
                    return n % 2 == 0 ? e.unary(i[0][0]) : i[0][0]
                }
                var t = n(120),
                    i = n(8),
                    o = t.object,
                    a = t.string;
                e.det = function (n) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("det", arguments.length, 1);
                    var t;
                    switch (n instanceof i ? t = n.size() : n instanceof Array ? (n = new i(n), t = n.size()) : t = [], t.length) {
                    case 0:
                        return o.clone(n);
                    case 1:
                        if (1 == t[0]) return o.clone(n.valueOf()[0]);
                        throw new RangeError("Matrix must be square (size: " + a.format(t) + ")");
                    case 2:
                        var s = t[0],
                            u = t[1];
                        if (s == u) return r(n.clone().valueOf(), s, u);
                        throw new RangeError("Matrix must be square (size: " + a.format(t) + ")");
                    default:
                        throw new RangeError("Matrix must be two dimensional (size: " + a.format(t) + ")")
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(8),
                    o = r.object,
                    a = r.array.isArray,
                    s = r.number.isNumber,
                    u = r.number.isInteger;
                e.diag = function (r, n) {
                    var f, c, l, p;
                    if (1 != arguments.length && 2 != arguments.length) throw new e.error.ArgumentsError("diag", arguments.length, 1, 2);
                    if (n) {
                        if (n instanceof t && (n = n.toNumber()), !s(n) || !u(n)) throw new TypeError("Second parameter in function diag must be an integer")
                    } else n = 0;
                    var m, h = n > 0 ? n : 0,
                        g = 0 > n ? -n : 0;
                    if (r instanceof i) m = !1;
                    else {
                        if (!a(r)) throw new TypeError("First parameter in function diag must be a Matrix or Array");
                        r = new i(r), m = !0
                    }
                    var d = r.size();
                    switch (d.length) {
                    case 1:
                        c = r.valueOf();
                        var x = new i,
                            w = c[0] instanceof t ? new t(0) : 0;
                        for (x.resize([c.length + g, c.length + h], w), f = x.valueOf(), p = c.length, l = 0; p > l; l++) f[l + g][l + h] = o.clone(c[l]);
                        return m ? x.valueOf() : x;
                    case 2:
                        for (c = [], f = r.valueOf(), p = Math.min(d[0] - g, d[1] - h), l = 0; p > l; l++) c[l] = o.clone(f[l + g][l + h]);
                        return m ? c : new i(c);
                    default:
                        throw new RangeError("Matrix for function diag must be 2 dimensional")
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(8),
                    a = n(11),
                    s = t.number.isNumber,
                    u = t.number.isInteger,
                    f = Array.isArray;
                e.eye = function (n) {
                    var t = a.argsToArray(arguments),
                        c = n instanceof o ? !0 : f(n) ? !1 : "matrix" === r.matrix;
                    if (0 == t.length) return c ? new o : [];
                    if (1 == t.length) t[1] = t[0];
                    else if (t.length > 2) throw new e.error.ArgumentsError("eye", t.length, 0, 2);
                    var l = t[0],
                        p = t[1];
                    if (l instanceof i && (l = l.toNumber()), p instanceof i && (p = p.toNumber()), !s(l) || !u(l) || 1 > l) throw new Error("Parameters in function eye must be positive integers");
                    if (!s(p) || !u(p) || 1 > p) throw new Error("Parameters in function eye must be positive integers");
                    var m = !1;
                    t = t.map(function (e) {
                        return e instanceof i ? (m = !0, e.toNumber()) : e
                    });
                    var h = new o,
                        g = m ? new i(1) : 1,
                        d = m ? new i(0) : 0;
                    h.resize(t, d);
                    for (var x = e.min(t), w = h.valueOf(), y = 0; x > y; y++) w[y][y] = g;
                    return c ? h : h.valueOf()
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n, t) {
                    var i, o, a, s, u;
                    if (1 == n) {
                        if (s = r[0][0], 0 == s) throw Error("Cannot calculate inverse, determinant is zero");
                        return [
                            [e.divide(1, s)]
                        ]
                    }
                    if (2 == n) {
                        var f = e.det(r);
                        if (0 == f) throw Error("Cannot calculate inverse, determinant is zero");
                        return [
                            [e.divide(r[1][1], f), e.divide(e.unary(r[0][1]), f)],
                            [e.divide(e.unary(r[1][0]), f), e.divide(r[0][0], f)]
                        ]
                    }
                    var c = r.concat();
                    for (i = 0; n > i; i++) c[i] = c[i].concat();
                    for (var l = e.eye(n).valueOf(), p = 0; t > p; p++) {
                        for (i = p; n > i && 0 == c[i][p];) i++;
                        if (i == n || 0 == c[i][p]) throw Error("Cannot calculate inverse, determinant is zero");
                        i != p && (u = c[p], c[p] = c[i], c[i] = u, u = l[p], l[p] = l[i], l[i] = u);
                        var m = c[p],
                            h = l[p];
                        for (i = 0; n > i; i++) {
                            var g = c[i],
                                d = l[i];
                            if (i != p) {
                                if (0 != g[p]) {
                                    for (a = e.divide(e.unary(g[p]), m[p]), o = p; t > o; o++) g[o] = e.add(g[o], e.multiply(a, m[o]));
                                    for (o = 0; t > o; o++) d[o] = e.add(d[o], e.multiply(a, h[o]))
                                }
                            } else {
                                for (a = m[p], o = p; t > o; o++) g[o] = e.divide(g[o], a);
                                for (o = 0; t > o; o++) d[o] = e.divide(d[o], a)
                            }
                        }
                    }
                    return l
                } {
                    var t = n(120),
                        i = t.string,
                        o = n(8);
                    n(11)
                }
                e.inv = function (n) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("inv", arguments.length, 1);
                    var t = e.size(n).valueOf();
                    switch (t.length) {
                    case 0:
                        return e.divide(1, n);
                    case 1:
                        if (1 == t[0]) return n instanceof o ? new o([e.divide(1, n.valueOf()[0])]) : [e.divide(1, n[0])];
                        throw new RangeError("Matrix must be square (size: " + i.format(t) + ")");
                    case 2:
                        var a = t[0],
                            s = t[1];
                        if (a == s) return n instanceof o ? new o(r(n.valueOf(), a, s)) : r(n, a, s);
                        throw new RangeError("Matrix must be square (size: " + i.format(t) + ")");
                    default:
                        throw new RangeError("Matrix must be two dimensional (size: " + i.format(t) + ")")
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(8),
                    a = n(11),
                    s = t.array,
                    u = Array.isArray;
                e.ones = function (e) {
                    var n = a.argsToArray(arguments),
                        t = e instanceof o ? !0 : u(e) ? !1 : "matrix" === r.matrix;
                    if (0 == n.length) return t ? new o : [];
                    var f = !1;
                    n = n.map(function (e) {
                        return e instanceof i ? (f = !0, e.toNumber()) : e
                    });
                    var c = [],
                        l = f ? new i(1) : 1;
                    return c = s.resize(c, n, l), t ? new o(c) : c
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                function t(e, r, n) {
                    var t = [],
                        i = e;
                    if (n > 0)
                        for (; r > i;) t.push(i), i += n;
                    else if (0 > n)
                        for (; i > r;) t.push(i), i += n;
                    return t
                }

                function i(e, r, n) {
                    var t = [],
                        i = e;
                    if (n > 0)
                        for (; r >= i;) t.push(i), i += n;
                    else if (0 > n)
                        for (; i >= r;) t.push(i), i += n;
                    return t
                }

                function o(e, r, n) {
                    var t = [],
                        i = e.clone(),
                        o = new f(0);
                    if (n.gt(o))
                        for (; i.lt(r);) t.push(i), i = i.plus(n);
                    else if (n.lt(o))
                        for (; i.gt(r);) t.push(i), i = i.plus(n);
                    return t
                }

                function a(e, r, n) {
                    var t = [],
                        i = e.clone(),
                        o = new f(0);
                    if (n.gt(o))
                        for (; i.lte(r);) t.push(i), i = i.plus(n);
                    else if (n.lt(o))
                        for (; i.gte(r);) t.push(i), i = i.plus(n);
                    return t
                }

                function s(e) {
                    var n = e.split(":"),
                        t = null;
                    if ("bignumber" === r.number) try {
                        t = n.map(function (e) {
                            return new f(e)
                        })
                    } catch (i) {
                        return null
                    } else {
                        t = n.map(function (e) {
                            return Number(e)
                        });
                        var o = t.some(function (e) {
                            return isNaN(e)
                        });
                        if (o) return null
                    }
                    switch (t.length) {
                    case 2:
                        return {
                            start: t[0],
                            end: t[1],
                            step: 1
                        };
                    case 3:
                        return {
                            start: t[0],
                            end: t[2],
                            step: t[1]
                        };
                    default:
                        return null
                    }
                }
                var u = n(120),
                    f = e.type.BigNumber,
                    c = n(8),
                    l = (n(11), u["boolean"].isBoolean),
                    p = u.string.isString,
                    m = u.number.isNumber;
                e.range = function () {
                    var n, u, h, g = Array.prototype.slice.call(arguments),
                        d = !1;
                    switch (l(g[g.length - 1]) && (d = g.pop() ? !0 : !1), g.length) {
                    case 1:
                        if (!p(g[0])) throw new TypeError("Two or three numbers or a single string expected in function range");
                        var x = s(g[0]);
                        if (!x) throw new SyntaxError('String "' + g[0] + '" is no valid range');
                        n = x.start, u = x.end, h = x.step;
                        break;
                    case 2:
                        n = g[0], u = g[1], h = 1;
                        break;
                    case 3:
                        n = g[0], u = g[1], h = g[2];
                        break;
                    case 4:
                        throw new TypeError("Parameter includeEnd must be a boolean");
                    default:
                        throw new e.error.ArgumentsError("range", arguments.length, 2, 4)
                    }
                    if (!(m(n) || n instanceof f)) throw new TypeError("Parameter start must be a number");
                    if (!(m(u) || u instanceof f)) throw new TypeError("Parameter end must be a number");
                    if (!(m(h) || h instanceof f)) throw new TypeError("Parameter step must be a number");
                    if (n instanceof f || u instanceof f || h instanceof f) {
                        var w = !0;
                        n instanceof f || (n = f.convert(n)), u instanceof f || (u = f.convert(u)), h instanceof f || (h = f.convert(h)), n instanceof f && u instanceof f && h instanceof f || (w = !1, n instanceof f && (n = n.toNumber()), u instanceof f && (u = u.toNumber()), h instanceof f && (h = h.toNumber()))
                    }
                    var y = w ? d ? a : o : d ? i : t,
                        v = y(n, u, h);
                    return "array" === r.matrix ? v : new c(v)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                function t(r, n, t) {
                    if (void 0 !== t) {
                        if (!c(t) || 1 !== t.length) throw new TypeError("Single character expected as defaultValue")
                    } else t = " "; if (1 !== n.length) throw new e.error.DimensionError(n.length, 1);
                    var i = n[0];
                    if (!l(i) || !p(i)) throw new TypeError("Invalid size, must contain positive integers (size: " + f.format(n) + ")");
                    if (r.length > i) return r.substring(0, i);
                    if (r.length < i) {
                        for (var o = r, a = 0, s = i - r.length; s > a; a++) o += t;
                        return o
                    }
                    return r
                }
                var i = n(120),
                    o = e.type.BigNumber,
                    a = n(8),
                    s = i.array,
                    u = i.object.clone,
                    f = i.string,
                    c = i.string.isString,
                    l = i.number.isNumber,
                    p = i.number.isInteger,
                    m = s.isArray;
                e.resize = function (n, i, f) {
                    if (2 != arguments.length && 3 != arguments.length) throw new e.error.ArgumentsError("resize", arguments.length, 2, 3);
                    var l = n instanceof a ? !0 : m(n) ? !1 : "array" !== r.matrix;
                    if (n instanceof a && (n = n.valueOf()), i instanceof a && (i = i.valueOf()), i.length && i[0] instanceof o && (i = i.map(function (e) {
                        return e instanceof o ? e.toNumber() : e
                    })), c(n)) return t(n, i, f);
                    if (0 == i.length) {
                        for (; m(n);) n = n[0];
                        return u(n)
                    }
                    m(n) || (n = [n]), n = u(n);
                    var p = s.resize(n, i, f);
                    return l ? new a(p) : p
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(5),
                    a = n(9),
                    s = n(8),
                    u = t.array,
                    f = t.number.isNumber,
                    c = t["boolean"].isBoolean,
                    l = t.string.isString,
                    p = o.isComplex,
                    m = a.isUnit;
                e.size = function (n) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("size", arguments.length, 1);
                    var t = "array" === r.matrix;
                    if (f(n) || p(n) || m(n) || c(n) || null == n || n instanceof i) return t ? [] : new s([]);
                    if (l(n)) return t ? [n.length] : new s([n.length]);
                    if (Array.isArray(n)) return u.size(n);
                    if (n instanceof s) return new s(n.size());
                    throw new e.error.UnsupportedTypeError("size", e["typeof"](n))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = n(8),
                    i = r.object,
                    o = r.array,
                    a = Array.isArray;
                e.squeeze = function (r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("squeeze", arguments.length, 1);
                    if (a(r)) return o.squeeze(i.clone(r));
                    if (r instanceof t) {
                        var n = o.squeeze(r.toArray());
                        return a(n) ? new t(n) : n
                    }
                    return i.clone(r)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n) {
                    var i, o;
                    if (l(r)) return i = new s(r), o = i.subset(n), o.valueOf();
                    if (r instanceof s) return r.subset(n);
                    if (c(r)) return t(r, n);
                    throw new e.error.UnsupportedTypeError("subset", e["typeof"](r))
                }

                function t(r, n) {
                    if (!(n instanceof u)) throw new TypeError("Index expected");
                    if (1 != n.size().length) throw new e.error.DimensionError(n.size().length, 1);
                    var t = n.range(0),
                        i = "",
                        o = r.length;
                    return t.forEach(function (e) {
                        f.validateIndex(e, o), i += r.charAt(e)
                    }), i
                }

                function i(r, n, t, i) {
                    var a;
                    if (l(r)) return a = new s(e.clone(r)), a.subset(n, t, i), a.valueOf();
                    if (r instanceof s) return r.clone().subset(n, t, i);
                    if (c(r)) return o(r, n, t, i);
                    throw new e.error.UnsupportedTypeError("subset", e["typeof"](r))
                }

                function o(r, n, t, i) {
                    if (!(n instanceof u)) throw new TypeError("Index expected");
                    if (1 != n.size().length) throw new e.error.DimensionError(n.size().length, 1);
                    if (void 0 !== i) {
                        if (!c(i) || 1 !== i.length) throw new TypeError("Single character expected as defaultValue")
                    } else i = " ";
                    var o = n.range(0),
                        a = o.size()[0];
                    if (a != t.length) throw new e.error.DimensionError(o.size()[0], t.length);
                    for (var s = r.length, l = [], p = 0; s > p; p++) l[p] = r.charAt(p);
                    if (o.forEach(function (e, r) {
                        f.validateIndex(e), l[e] = t.charAt(r)
                    }), l.length > s)
                        for (p = s - 1, a = l.length; a > p; p++) l[p] || (l[p] = i);
                    return l.join("")
                }
                var a = n(120),
                    s = n(8),
                    u = n(7),
                    f = a.array,
                    c = a.string.isString,
                    l = Array.isArray;
                e.subset = function () {
                    switch (arguments.length) {
                    case 2:
                        return r(arguments[0], arguments[1]);
                    case 3:
                    case 4:
                        return i(arguments[0], arguments[1], arguments[2], arguments[3]);
                    default:
                        throw new e.error.ArgumentsError("subset", arguments.length, 2, 4)
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = n(8),
                    i = (n(11), r.object),
                    o = r.string;
                e.transpose = function (r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("transpose", arguments.length, 1);
                    var n = e.size(r).valueOf();
                    switch (n.length) {
                    case 0:
                        return i.clone(r);
                    case 1:
                        return i.clone(r);
                    case 2:
                        var a, s = n[1],
                            u = n[0],
                            f = r instanceof t,
                            c = r.valueOf(),
                            l = [],
                            p = i.clone;
                        if (0 === s) throw new RangeError("Cannot transpose a 2D matrix with no rows(size: " + o.format(n) + ")");
                        for (var m = 0; s > m; m++) {
                            a = l[m] = [];
                            for (var h = 0; u > h; h++) a[h] = p(c[h][m])
                        }
                        return f ? new t(l) : l;
                    default:
                        throw new RangeError("Matrix must be two dimensional (size: " + o.format(n) + ")")
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(8),
                    a = n(11),
                    s = t.array,
                    u = Array.isArray;
                e.zeros = function (e) {
                    var n = a.argsToArray(arguments),
                        t = e instanceof o ? !0 : u(e) ? !1 : "matrix" === r.matrix;
                    if (0 == n.length) return t ? new o : [];
                    var f = !1;
                    n = n.map(function (e) {
                        return e instanceof i ? (f = !0, e.toNumber()) : e
                    });
                    var c = [],
                        l = f ? new i(0) : 0;
                    return c = s.resize(c, n, l), t ? new o(c) : c
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(11),
                    o = r.number.isNumber,
                    a = r["boolean"].isBoolean,
                    s = r.number.isInteger,
                    u = i.isCollection;
                e.factorial = function c(r) {
                    var n, l;
                    if (1 != arguments.length) throw new e.error.ArgumentsError("factorial", arguments.length, 1);
                    if (o(r)) {
                        if (!s(r) || 0 > r) throw new TypeError("Positive integer value expected in function factorial");
                        for (n = r - 1, l = r; n > 1;) l *= n, n--;
                        return 0 == l && (l = 1), l
                    }
                    if (r instanceof t) {
                        if (!f(r)) throw new TypeError("Positive integer value expected in function factorial");
                        var p = new t(1);
                        for (n = r.minus(p), l = r; n.gt(p);) l = l.times(n), n = n.minus(p);
                        return l.equals(0) && (l = p), l
                    }
                    if (a(r)) return 1;
                    if (u(r)) return i.deepMap(r, c);
                    throw new e.error.UnsupportedTypeError("factorial", e["typeof"](r))
                };
                var f = function (e) {
                    return e.isInteger() && e.gte(0)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e, r) {
                var t = n(8),
                    i = (n(11), {
                        uniform: function () {
                            return Math.random
                        },
                        normal: function () {
                            return function () {
                                for (var e, r, n = -1; 0 > n || n > 1;) e = Math.random(), r = Math.random(), n = 1 / 6 * Math.pow(-2 * Math.log(e), .5) * Math.cos(2 * Math.PI * r) + .5;
                                return n
                            }
                        }
                    });
                e.distribution = function (n) {
                    if (!i.hasOwnProperty(n)) throw new Error("unknown distribution " + n);
                    var o = Array.prototype.slice.call(arguments, 1),
                        a = i[n].apply(this, o);
                    return function (n) {
                        var i = {
                                random: function (n, i, a) {
                                    var u, f, c;
                                    if (arguments.length > 3) throw new e.error.ArgumentsError("random", arguments.length, 0, 3);
                                    if (1 === arguments.length ? Array.isArray(n) ? u = n : c = n : 2 === arguments.length ? Array.isArray(n) ? u = n : (f = n, c = i) : (u = n, f = i, c = a), void 0 === c && (c = 1), void 0 === f && (f = 0), void 0 !== u) {
                                        var l = s(u, f, c, o);
                                        return "array" === r.matrix ? l : new t(l)
                                    }
                                    return o(f, c)
                                },
                                randomInt: function (n, i, o) {
                                    var u, f, c;
                                    if (arguments.length > 3 || arguments.length < 1) throw new e.error.ArgumentsError("randomInt", arguments.length, 1, 3);
                                    if (1 === arguments.length ? c = n : 2 === arguments.length ? "[object Array]" === Object.prototype.toString.call(n) ? u = n : (f = n, c = i) : (u = n, f = i, c = o), void 0 === f && (f = 0), void 0 !== u) {
                                        var l = s(u, f, c, a);
                                        return "array" === r.matrix ? l : new t(l)
                                    }
                                    return a(f, c)
                                },
                                pickRandom: function (r) {
                                    if (1 !== arguments.length) throw new e.error.ArgumentsError("pickRandom", arguments.length, 1);
                                    if (!Array.isArray(r)) throw new e.error.UnsupportedTypeError("pickRandom", e["typeof"](r));
                                    return r[Math.floor(Math.random() * r.length)]
                                }
                            },
                            o = function (e, r) {
                                return e + n() * (r - e)
                            },
                            a = function (e, r) {
                                return Math.floor(e + n() * (r - e))
                            },
                            s = function (e, r, n, t) {
                                var i, o, a = [];
                                if (e = e.slice(0), e.length > 1)
                                    for (o = 0, i = e.shift(); i > o; o++) a.push(s(e, r, n, t));
                                else
                                    for (o = 0, i = e.shift(); i > o; o++) a.push(t(r, n));
                                return a
                            };
                        return i
                    }(a)
                };
                var o = e.distribution("uniform");
                e.random = o.random, e.randomInt = o.randomInt, e.pickRandom = o.pickRandom
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = r.number.isNumber,
                    o = r.number.isInteger;
                e.permutations = function (r, n) {
                    var s, u, f = arguments.length;
                    if (f > 2) throw new e.error.ArgumentsError("permutations", arguments.length, 2);
                    if (i(r)) {
                        if (!o(r) || 0 > r) throw new TypeError("Positive integer value expected in function permutations");
                        if (1 == f) return e.factorial(r);
                        if (2 == f && i(n)) {
                            if (!o(n) || 0 > n) throw new TypeError("Positive integer value expected in function permutations");
                            if (n > r) throw new TypeError("second argument k must be less than or equal to first argument n");
                            for (s = 1, u = r - n + 1; r >= u; u++) s *= u;
                            return s
                        }
                    }
                    if (r instanceof t) {
                        if (void 0 === n && a(r)) return e.factorial(r);
                        if (n = t.convert(n), !(n instanceof t && a(r) && a(n))) throw new TypeError("Positive integer value expected in function permutations");
                        if (n.gt(r)) throw new TypeError("second argument k must be less than or equal to first argument n");
                        for (s = new t(1), u = r.minus(n).plus(1); u.lte(r); u = u.plus(1)) s = s.times(u);
                        return s
                    }
                    throw new e.error.UnsupportedTypeError("permutations", e["typeof"](r))
                };
                var a = function (e) {
                    return e.isInteger() && e.gte(0)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = (n(11), r.number.isNumber),
                    o = r.number.isInteger;
                e.combinations = function (r, n) {
                    var s, u, f, c, l = arguments.length;
                    if (2 != l) throw new e.error.ArgumentsError("combinations", arguments.length, 2);
                    if (i(r)) {
                        if (!o(r) || 0 > r) throw new TypeError("Positive integer value enpected in function combinations");
                        if (n > r) throw new TypeError("k must be less than or equal to n");
                        for (s = Math.max(n, r - n), u = 1, f = 1; r - s >= f; f++) u = u * (s + f) / f;
                        return u
                    }
                    if (r instanceof t) {
                        if (n = t.convert(n), !(n instanceof t && a(r) && a(n))) throw new TypeError("Positive integer value expected in function combinations");
                        if (n.gt(r)) throw new TypeError("k must be less than n in function combinations");
                        for (s = r.minus(n), n.lt(s) && (s = n), u = new t(1), f = new t(1), c = r.minus(s); f.lte(c); f = f.plus(1)) u = u.times(s.plus(f)).dividedBy(f);
                        return u
                    }
                    throw new e.error.UnsupportedTypeError("combinations", e["typeof"](r))
                };
                var a = function (e) {
                    return e.isInteger() && e.gte(0)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n) {
                    return e.smaller(r, n) ? r : n
                }

                function t(r) {
                    var n = void 0;
                    if (i.deepForEach(r, function (r) {
                        (void 0 === n || e.smaller(r, n)) && (n = r)
                    }), void 0 === n) throw new Error("Cannot calculate min of an empty array");
                    return n
                }
                var i = (n(8), n(11)),
                    o = i.isCollection;
                e.min = function (e) {
                    if (0 == arguments.length) throw new SyntaxError("Function min requires one or more parameters (0 provided)");
                    if (o(e)) {
                        if (1 == arguments.length) return t(e);
                        if (2 == arguments.length) return i.reduce(arguments[0], arguments[1], r);
                        throw new SyntaxError("Wrong number of parameters")
                    }
                    return t(arguments)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n) {
                    return e.larger(r, n) ? r : n
                }

                function t(r) {
                    var n = void 0;
                    if (i.deepForEach(r, function (r) {
                        (void 0 === n || e.larger(r, n)) && (n = r)
                    }), void 0 === n) throw new Error("Cannot calculate max of an empty array");
                    return n
                }
                var i = (n(8), n(11)),
                    o = i.isCollection;
                e.max = function (e) {
                    if (0 == arguments.length) throw new SyntaxError("Function max requires one or more parameters (0 provided)");
                    if (o(e)) {
                        if (1 == arguments.length) return t(e);
                        if (2 == arguments.length) return i.reduce(arguments[0], arguments[1], r);
                        throw new SyntaxError("Wrong number of parameters")
                    }
                    return t(arguments)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n) {
                    var t;
                    return t = i.reduce(r, n, e.add), e.divide(t, a(r)[n])
                }

                function t(r) {
                    var n = 0,
                        t = 0;
                    if (i.deepForEach(r, function (r) {
                        n = e.add(n, r), t++
                    }), 0 === t) throw new Error("Cannot calculate mean of an empty array");
                    return e.divide(n, t)
                }
                var i = (n(8), n(11)),
                    o = i.isCollection,
                    a = n(154).size;
                e.mean = function (e) {
                    if (0 == arguments.length) throw new SyntaxError("Function mean requires one or more parameters (0 provided)");
                    if (o(e)) {
                        if (1 == arguments.length) return t(e);
                        if (2 == arguments.length) return r(arguments[0], arguments[1]);
                        throw new SyntaxError("Wrong number of parameters")
                    }
                    return t(arguments)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r) {
                    var n = u(r);
                    n.sort(e.compare);
                    var o = n.length;
                    if (0 == o) throw new Error("Cannot calculate median of an empty array");
                    if (o % 2 == 0) {
                        var s = n[o / 2 - 1],
                            f = n[o / 2];
                        if (!(a(s) || s instanceof i || s instanceof t)) throw new e.error.UnsupportedTypeError("median", e["typeof"](s));
                        if (!(a(f) || f instanceof i || f instanceof t)) throw new e.error.UnsupportedTypeError("median", e["typeof"](f));
                        return e.divide(e.add(s, f), 2)
                    }
                    var c = n[(o - 1) / 2];
                    if (!(a(c) || c instanceof i || c instanceof t)) throw new e.error.UnsupportedTypeError("median", e["typeof"](c));
                    return c
                }
                var t = (n(8), n(9)),
                    i = e.type.BigNumber,
                    o = n(11),
                    a = n(155).isNumber,
                    s = o.isCollection,
                    u = n(154).flatten;
                e.median = function (e) {
                    if (0 == arguments.length) throw new SyntaxError("Function median requires one or more parameters (0 provided)");
                    if (s(e)) {
                        if (1 == arguments.length) return r(e.valueOf());
                        throw 2 == arguments.length ? new Error("median(A, dim) is not yet supported") : new SyntaxError("Wrong number of parameters")
                    }
                    return r(Array.prototype.slice.call(arguments))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r) {
                    var n = void 0;
                    if (t.deepForEach(r, function (r) {
                        n = void 0 === n ? r : e.multiply(n, r)
                    }), void 0 === n) throw new Error("Cannot calculate prod of an empty array");
                    return n
                }
                var t = (n(8), n(11)),
                    i = t.isCollection;
                e.prod = function (e) {
                    if (0 == arguments.length) throw new SyntaxError("Function prod requires one or more parameters (0 provided)");
                    if (i(e)) {
                        if (1 == arguments.length) return r(e);
                        throw 2 == arguments.length ? new Error("prod(A, dim) is not yet supported") : new SyntaxError("Wrong number of parameters")
                    }
                    return r(arguments)
                }
            }
        },
        function (e) {
            e.exports = function (e) {
                e.std = function () {
                    if (0 == arguments.length) throw new SyntaxError("Function std requires one or more parameters (0 provided)");
                    var r = e["var"].apply(null, arguments);
                    return e.sqrt(r)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r) {
                    var n = void 0;
                    if (t.deepForEach(r, function (r) {
                        n = void 0 === n ? r : e.add(n, r)
                    }), void 0 === n) throw new Error("Cannot calculate sum of an empty array");
                    return n
                }
                var t = (n(8), n(11)),
                    i = t.isCollection;
                e.sum = function (e) {
                    if (0 == arguments.length) throw new SyntaxError("Function sum requires one or more parameters (0 provided)");
                    if (i(e)) {
                        if (1 == arguments.length) return r(e);
                        throw 2 == arguments.length ? new Error("sum(A, dim) is not yet supported") : new SyntaxError("Wrong number of parameters")
                    }
                    return r(arguments)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n) {
                    var o = 0,
                        a = 0;
                    if (i.deepForEach(r, function (r) {
                        o = e.add(o, r), a++
                    }), 0 === a) throw new Error("Cannot calculate var of an empty array");
                    var s = e.divide(o, a);
                    switch (o = 0, i.deepForEach(r, function (r) {
                        var n = e.subtract(r, s);
                        o = e.add(o, e.multiply(n, n))
                    }), n) {
                    case "uncorrected":
                        return e.divide(o, a);
                    case "biased":
                        return e.divide(o, a + 1);
                    case "unbiased":
                        var u = o instanceof t ? new t(0) : 0;
                        return 1 == a ? u : e.divide(o, a - 1);
                    default:
                        throw new Error('Unknown normalization "' + n + '". Choose "unbiased" (default), "uncorrected", or "biased".')
                    }
                }
                var t = (n(8), e.type.BigNumber),
                    i = n(11),
                    o = i.isCollection,
                    a = n(139).isString,
                    s = "unbiased";
                e["var"] = function (e, n) {
                    if (0 == arguments.length) throw new SyntaxError("Function var requires one or more parameters (0 provided)");
                    if (o(e)) {
                        if (1 == arguments.length) return r(e, s);
                        if (2 == arguments.length) {
                            if (!a(n)) throw new Error("String expected for parameter normalization");
                            return r(e, n)
                        }
                        throw new SyntaxError("Wrong number of parameters")
                    }
                    return r(arguments, s)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.acos = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("acos", arguments.length, 1);
                    if (a(r)) return r >= -1 && 1 >= r ? Math.acos(r) : c(new i(r, 0));
                    if (u(r)) {
                        var n = new i(r.im * r.im - r.re * r.re + 1, -2 * r.re * r.im),
                            l = e.sqrt(n),
                            p = new i(l.re - r.im, l.im + r.re),
                            m = e.log(p);
                        return new i(1.5707963267948966 - m.im, m.re)
                    }
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return Math.acos(r);
                    if (r instanceof t) return c(r.toNumber());
                    throw new e.error.UnsupportedTypeError("acos", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.asin = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("asin", arguments.length, 1);
                    if (a(r)) return r >= -1 && 1 >= r ? Math.asin(r) : c(new i(r, 0));
                    if (u(r)) {
                        var n = r.re,
                            l = r.im,
                            p = new i(l * l - n * n + 1, -2 * n * l),
                            m = e.sqrt(p),
                            h = new i(m.re - l, m.im + n),
                            g = e.log(h);
                        return new i(g.im, -g.re)
                    }
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return Math.asin(r);
                    if (r instanceof t) return c(r.toNumber());
                    throw new e.error.UnsupportedTypeError("asin", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = i.isComplex,
                    f = o.isCollection;
                e.atan = function c(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("atan", arguments.length, 1);
                    if (a(r)) return Math.atan(r);
                    if (u(r)) {
                        var n = r.re,
                            l = r.im,
                            p = n * n + (1 - l) * (1 - l),
                            m = new i((1 - l * l - n * n) / p, -2 * n / p),
                            h = e.log(m);
                        return new i(-.5 * h.im, .5 * h.re)
                    }
                    if (f(r)) return o.deepMap(r, c);
                    if (s(r)) return Math.atan(r);
                    if (r instanceof t) return c(r.toNumber());
                    throw new e.error.UnsupportedTypeError("atan", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(11),
                    a = r.number.isNumber,
                    s = r["boolean"].isBoolean,
                    u = (i.isComplex, o.isCollection);
                e.atan2 = function f(r, n) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("atan2", arguments.length, 2);
                    if (a(r) && a(n)) return Math.atan2(r, n);
                    if (u(r) || u(n)) return o.deepMap2(r, n, f);
                    if (s(r)) return f(+r, n);
                    if (s(n)) return f(r, +n);
                    if (r instanceof t) return f(r.toNumber(), n);
                    if (n instanceof t) return f(r, n.toNumber());
                    throw new e.error.UnsupportedTypeError("atan2", e["typeof"](r), e["typeof"](n))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.cos = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("cos", arguments.length, 1);
                    if (s(r)) return Math.cos(r);
                    if (f(r)) return new i(.5 * Math.cos(r.re) * (Math.exp(-r.im) + Math.exp(r.im)), .5 * Math.sin(r.re) * (Math.exp(-r.im) - Math.exp(r.im)));
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function cos is no angle");
                        return Math.cos(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return Math.cos(r);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("cos", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.cosh = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("cosh", arguments.length, 1);
                    if (s(r)) return (Math.exp(r) + Math.exp(-r)) / 2;
                    if (f(r)) {
                        var n = Math.exp(r.re),
                            m = Math.exp(-r.re);
                        return new i(Math.cos(r.im) * (n + m) / 2, Math.sin(r.im) * (n - m) / 2)
                    }
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function cosh is no angle");
                        return p(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return p(r ? 1 : 0);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("cosh", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.cot = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("cot", arguments.length, 1);
                    if (s(r)) return 1 / Math.tan(r);
                    if (f(r)) {
                        var n = Math.exp(-4 * r.im) - 2 * Math.exp(-2 * r.im) * Math.cos(2 * r.re) + 1;
                        return new i(2 * Math.exp(-2 * r.im) * Math.sin(2 * r.re) / n, (Math.exp(-4 * r.im) - 1) / n)
                    }
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function cot is no angle");
                        return 1 / Math.tan(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return p(+r);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("cot", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.coth = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("coth", arguments.length, 1);
                    if (s(r)) {
                        var n = Math.exp(2 * r);
                        return (n + 1) / (n - 1)
                    }
                    if (f(r)) {
                        var m = Math.exp(2 * r.re),
                            h = m * Math.cos(2 * r.im),
                            g = m * Math.sin(2 * r.im),
                            d = (h - 1) * (h - 1) + g * g;
                        return new i(((h + 1) * (h - 1) + g * g) / d, -2 * g / d)
                    }
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function coth is no angle");
                        return p(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return p(r ? 1 : 0);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("coth", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.csc = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("csc", arguments.length, 1);
                    if (s(r)) return 1 / Math.sin(r);
                    if (f(r)) {
                        var n = .25 * (Math.exp(-2 * r.im) + Math.exp(2 * r.im)) - .5 * Math.cos(2 * r.re);
                        return new i(.5 * Math.sin(r.re) * (Math.exp(-r.im) + Math.exp(r.im)) / n, .5 * Math.cos(r.re) * (Math.exp(-r.im) - Math.exp(r.im)) / n)
                    }
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function csc is no angle");
                        return 1 / Math.sin(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return p(+r);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("csc", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number,
                    u = r.number.isNumber,
                    f = r["boolean"].isBoolean,
                    c = i.isComplex,
                    l = o.isUnit,
                    p = a.isCollection;
                e.csch = function m(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("csch", arguments.length, 1);
                    if (u(r)) return 0 == r ? Number.NaN : Math.abs(2 / (Math.exp(r) - Math.exp(-r))) * s.sign(r);
                    if (c(r)) {
                        var n = Math.exp(r.re),
                            h = Math.exp(-r.re),
                            g = Math.cos(r.im) * (n - h),
                            d = Math.sin(r.im) * (n + h),
                            x = g * g + d * d;
                        return new i(2 * g / x, -2 * d / x)
                    }
                    if (l(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function csch is no angle");
                        return m(r.value)
                    }
                    if (p(r)) return a.deepMap(r, m);
                    if (f(r)) return m(r ? 1 : 0);
                    if (r instanceof t) return m(r.toNumber());
                    throw new e.error.UnsupportedTypeError("csch", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.sec = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("sec", arguments.length, 1);
                    if (s(r)) return 1 / Math.cos(r);
                    if (f(r)) {
                        var n = .25 * (Math.exp(-2 * r.im) + Math.exp(2 * r.im)) + .5 * Math.cos(2 * r.re);
                        return new i(.5 * Math.cos(r.re) * (Math.exp(-r.im) + Math.exp(r.im)) / n, .5 * Math.sin(r.re) * (Math.exp(r.im) - Math.exp(-r.im)) / n)
                    }
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function sec is no angle");
                        return 1 / Math.cos(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return p(+r);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("sec", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.sech = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("sech", arguments.length, 1);
                    if (s(r)) return 2 / (Math.exp(r) + Math.exp(-r));
                    if (f(r)) {
                        var n = Math.exp(r.re),
                            m = Math.exp(-r.re),
                            h = Math.cos(r.im) * (n + m),
                            g = Math.sin(r.im) * (n - m),
                            d = h * h + g * g;
                        return new i(2 * h / d, -2 * g / d)
                    }
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function sech is no angle");
                        return p(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return p(r ? 1 : 0);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("sech", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.sin = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("sin", arguments.length, 1);
                    if (s(r)) return Math.sin(r);
                    if (f(r)) return new i(.5 * Math.sin(r.re) * (Math.exp(-r.im) + Math.exp(r.im)), .5 * Math.cos(r.re) * (Math.exp(r.im) - Math.exp(-r.im)));
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function sin is no angle");
                        return Math.sin(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return Math.sin(r);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("sin", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.sinh = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("sinh", arguments.length, 1);
                    if (s(r)) return (Math.exp(r) - Math.exp(-r)) / 2;
                    if (f(r)) {
                        var n = Math.cos(r.im),
                            m = Math.sin(r.im),
                            h = Math.exp(r.re),
                            g = Math.exp(-r.re);
                        return new i(n * (h - g) / 2, m * (h + g) / 2)
                    }
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function sinh is no angle");
                        return p(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return p(r ? 1 : 0);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("sinh", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.tan = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("tan", arguments.length, 1);
                    if (s(r)) return Math.tan(r);
                    if (f(r)) {
                        var n = Math.exp(-4 * r.im) + 2 * Math.exp(-2 * r.im) * Math.cos(2 * r.re) + 1;
                        return new i(2 * Math.exp(-2 * r.im) * Math.sin(2 * r.re) / n, (1 - Math.exp(-4 * r.im)) / n)
                    }
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function tan is no angle");
                        return Math.tan(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return Math.tan(r);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("tan", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = e.type.BigNumber,
                    i = n(5),
                    o = n(9),
                    a = n(11),
                    s = r.number.isNumber,
                    u = r["boolean"].isBoolean,
                    f = i.isComplex,
                    c = o.isUnit,
                    l = a.isCollection;
                e.tanh = function p(r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("tanh", arguments.length, 1);
                    if (s(r)) {
                        var n = Math.exp(2 * r);
                        return (n - 1) / (n + 1)
                    }
                    if (f(r)) {
                        var m = Math.exp(2 * r.re),
                            h = m * Math.cos(2 * r.im),
                            g = m * Math.sin(2 * r.im),
                            d = (h + 1) * (h + 1) + g * g;
                        return new i(((h - 1) * (h + 1) + g * g) / d, 2 * g / d)
                    }
                    if (c(r)) {
                        if (!r.hasBase(o.BASE_UNITS.ANGLE)) throw new TypeError("Unit in function tanh is no angle");
                        return p(r.value)
                    }
                    if (l(r)) return a.deepMap(r, p);
                    if (u(r)) return p(r ? 1 : 0);
                    if (r instanceof t) return p(r.toNumber());
                    throw new e.error.UnsupportedTypeError("tanh", e["typeof"](r))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = n(9),
                    i = n(11),
                    o = r.string.isString,
                    a = t.isUnit,
                    s = i.isCollection;
                e.to = function u(r, n) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("to", arguments.length, 2);
                    if (a(r) && (a(n) || o(n))) return r.to(n);
                    if (s(r) || s(n)) return i.deepMap2(r, n, u);
                    throw new e.error.UnsupportedTypeError("to", e["typeof"](r), e["typeof"](n))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = r.object;
                e.clone = function (r) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("clone", arguments.length, 1);
                    return t.clone(r)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = r.string;
                e.format = function (r, n) {
                    var i = arguments.length;
                    if (1 !== i && 2 !== i) throw new e.error.ArgumentsError("format", i, 1, 2);
                    return t.format(r, n)
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n, t) {
                    var i = r instanceof o || n instanceof o || t instanceof o;
                    if (r instanceof o || (r = new o(r)), g(n) && (n instanceof o || (n = new o(n)), !f(r.size(), n.size()))) throw new RangeError("Dimension mismatch ([" + r.size().join(", ") + "] != [" + n.size().join(", ") + "])");
                    if (g(t) && (t instanceof o || (t = new o(t)), !f(r.size(), t.size()))) throw new e.error.DimensionError(r.size(), t.size());
                    var a = n instanceof o,
                        s = t instanceof o,
                        u = r.map(function (r, i) {
                            return e.ifElse(r, a ? n.get(i) : n, s ? t.get(i) : t)
                        });
                    return i ? u : u.valueOf()
                }
                var t = n(120),
                    i = e.type.BigNumber,
                    o = n(8),
                    a = n(5),
                    s = n(9),
                    u = n(11),
                    f = t.object.deepEqual,
                    c = t.number.isNumber,
                    l = t.string.isString,
                    p = t["boolean"].isBoolean,
                    m = a.isComplex,
                    h = s.isUnit,
                    g = u.isCollection;
                e.ifElse = function (n, t, o) {
                    if (3 != arguments.length) throw new e.error.ArgumentsError("ifElse", arguments.length, 3);
                    if (c(n) || p(n)) return n ? t : o;
                    if (n instanceof i) return n.isZero() ? o : t;
                    if (l(n)) return n ? t : o;
                    if (m(n)) return n.re || n.im ? t : o;
                    if (h(n)) return n.value ? t : o;
                    if (null === n || void 0 === n) return o;
                    if (g(n)) return r(n, t, o);
                    throw new e.error.UnsupportedTypeError("ifElse", e["typeof"](n))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(r, n, t) {
                    (t.override || void 0 === e[r]) && (e[r] = t.wrap && "function" == typeof n ? function () {
                        for (var r = [], t = 0, i = arguments.length; i > t; t++) r[t] = arguments[t].valueOf();
                        return n.apply(e, r)
                    } : n, e.chaining.Selector.createProxy(r, n))
                }

                function t(e) {
                    return "function" == typeof e || s(e) || u(e) || f(e) || c(e)
                }
                var i = n(120),
                    o = n(5),
                    a = n(9),
                    s = i.number.isNumber,
                    u = i.string.isString,
                    f = o.isComplex,
                    c = a.isUnit;
                e["import"] = function l(o, a) {
                    var s = arguments.length;
                    if (1 != s && 2 != s) throw new e.error.ArgumentsError("import", s, 1, 2);
                    var f, c = {
                        override: !1,
                        wrap: !0
                    };
                    if (a && a instanceof Object && i.object.extend(c, a), u(o)) {
                        var p = n(156)(o);
                        l(p)
                    } else {
                        if ("object" != typeof o) throw new TypeError("Object or module name expected");
                        for (f in o)
                            if (o.hasOwnProperty(f)) {
                                var m = o[f];
                                t(m) ? r(f, m, c) : l(m)
                            }
                    }
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(e, r) {
                    var n = [],
                        t = function (i, o) {
                            return Array.isArray(i) ? i.map(function (e, r) {
                                return n[o] = r, t(e, o + 1)
                            }) : r(i, n, e)
                        };
                    return t(e, 0)
                }
                var t = n(8).isMatrix;
                e.map = function (n, i) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("map", arguments.length, 2);
                    if (Array.isArray(n)) return r(n, i);
                    if (t(n)) return n.map(i);
                    throw new e.error.UnsupportedTypeError("map", e["typeof"](n))
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(120),
                    t = r.string.isString;
                e.print = function (r, n, i) {
                    var o = arguments.length;
                    if (2 != o && 3 != o) throw new e.error.ArgumentsError("print", o, 2, 3);
                    if (!t(r)) throw new TypeError("String expected as first parameter in function format");
                    if (!(n instanceof Object)) throw new TypeError("Object expected as second parameter in function format");
                    return r.replace(/\$([\w\.]+)/g, function (r, o) {
                        for (var a = o.split("."), s = n[a.shift()]; a.length && void 0 !== s;) {
                            var u = a.shift();
                            s = u ? s[u] : s + "."
                        }
                        return void 0 !== s ? t(s) ? s : e.format(s, i) : r
                    })
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                var r = n(157),
                    t = n(5),
                    i = n(8),
                    o = n(9),
                    a = n(7),
                    s = n(6),
                    u = n(10);
                e["typeof"] = function (n) {
                    if (1 != arguments.length) throw new e.error.ArgumentsError("typeof", arguments.length, 1);
                    var f = r.type(n);
                    if ("object" === f) {
                        if (n instanceof t) return "complex";
                        if (n instanceof i) return "matrix";
                        if (n instanceof o) return "unit";
                        if (n instanceof a) return "index";
                        if (n instanceof s) return "range";
                        if (n instanceof u) return "help";
                        if (n instanceof e.type.BigNumber) return "bignumber";
                        if (n instanceof e.chaining.Selector) return "selector"
                    }
                    return f
                }
            }
        },
        function (e, r, n) {
            e.exports = function (e) {
                function r(e, r) {
                    var n = [],
                        t = function (i, o) {
                            Array.isArray(i) ? i.forEach(function (e, r) {
                                n[o] = r, t(e, o + 1)
                            }) : r(i, n, e)
                        };
                    t(e, 0)
                }
                var t = n(8).isMatrix;
                e.forEach = function (n, i) {
                    if (2 != arguments.length) throw new e.error.ArgumentsError("forEach", arguments.length, 2);
                    if (Array.isArray(n)) return r(n, i);
                    if (t(n)) return n.forEach(i);
                    throw new e.error.UnsupportedTypeError("forEach", e["typeof"](n))
                }
            }
        },
        function (e, r, n) {
            var t;
            (function (e) {
                ! function (i) {
                    "use strict";

                    function o(e, r, n, t) {
                        return !((!(!t && n > 3 && 4 == e[r] || (t || 4 > n) && 9 == e[r]) || 9 != e[r + 1] || 9 != e[r + 2] || 9 != e[r + 3] || null == t && 9 != e[r + 4]) && (null != t || 5 != e[r] && e[r] || e[r + 1] || e[r + 2] || e[r + 3] || e[r + 4]))
                    }

                    function a(e, r, n) {
                        var t = e.constructor;
                        return null == r || ((w = 0 > r || r > 8) || 0 !== r && (t.errors ? parseInt : parseFloat)(r) != r) && !l(t, "rounding mode", r, n, 0) ? t.rounding : 0 | r
                    }

                    function s(e, r, n, t) {
                        var i = e.constructor;
                        return !(w = (t || 0) > r || r >= A + 1) && (0 === r || (i.errors ? parseInt : parseFloat)(r) == r) || l(i, "argument", r, n, 0)
                    }

                    function u(e, r, n, t, i, o) {
                        var a = e.constructor,
                            s = e.e - r.e,
                            u = e.s == r.s ? 1 : -1,
                            f = e.c,
                            c = r.c;
                        if (!(f && f[0] && c && c[0])) return new a(e.s && r.s && (f ? !c || f[0] != c[0] : c) ? f && 0 == f[0] || !c ? 0 * u : u / 0 : 0 / 0);
                        var l, p, m, g, d, x, w = c.slice(),
                            y = x = c.length,
                            v = f.length,
                            b = f.slice(0, x),
                            E = b.length,
                            N = new a(u),
                            M = N.c = [];
                        for (p = u = 0; c[p] == (f[p] || 0); p++);
                        if (c[p] > (f[p] || 0) && (s--, u = 1), N.e = s, null == n ? (n = a.precision, t = a.rounding) : i && (n += s + 1), o = o || 10, n >= 0) {
                            for (u += n; E++ < x; b.push(0));
                            w.unshift(p = 0);
                            do {
                                for (m = 0; o > m; m++) {
                                    if (x != (E = b.length)) l = x > E ? 1 : -1;
                                    else
                                        for (g = -1, l = 0; ++g < x;)
                                            if (c[g] != b[g]) {
                                                l = c[g] > b[g] ? 1 : -1;
                                                break
                                            } if (!(0 > l)) break;
                                    for (d = E == x ? c : w; E;) {
                                        if (b[--E] < d[E]) {
                                            for (g = E; g && !b[--g]; b[g] = o - 1);
                                            --b[g], b[E] += o
                                        }
                                        b[E] -= d[E]
                                    }
                                    for (; !b[0]; b.shift());
                                }
                                M[p++] = l ? m : ++m, b[0] && l ? b[E] = f[y] || 0 : b = [f[y]]
                            } while ((y++ < v || null != b[0]) && u--);
                            !M[0] && p > 1 && M.shift(), n >= p && (n = null)
                        }
                        return h(N, n, t, null != b[0], o)
                    }

                    function f(e, r) {
                        var n, t, i, a, s, f, c, l = 0,
                            p = 0,
                            m = 0,
                            g = e.constructor,
                            d = g.ONE,
                            x = g.rounding,
                            w = g.precision;
                        if (!e.c || !e.c[0] || e.e > 17) return new g(e.c ? e.c[0] ? e.s < 0 ? 0 : 1 / 0 : d : e.s ? e.s < 0 ? 0 : e : 0 / 0);
                        for (null == r ? (b = !1, s = w) : s = r, c = new g(.03125); e.e > -2;) e = e.times(c), m += 5;
                        for (t = Math.log(Math.pow(2, m)) / Math.LN10 * 2 + 5 | 0, s += t, n = a = f = new g(d), g.precision = s;;) {
                            if (a = h(a.times(e), s, 1), n = n.times(++p), c = f.plus(u(a, n, s, 1)), c.c.slice(0, s).join("") === f.c.slice(0, s).join("")) {
                                for (i = m; i--;) f = h(f.times(f), s, 1);
                                if (null != r) return g.precision = w, f;
                                if (!(3 > l && o(f.c, s - t, x, l))) return h(f, g.precision = w, x, b = !0);
                                g.precision = s += 10, n = a = c = new g(d), p = 0, l++
                            }
                            f = c
                        }
                    }

                    function c(e, r, n, t) {
                        var i = e.constructor,
                            o = (e = new i(e)).e,
                            a = e.c;
                        if (!a) return e.toString();
                        for (a.length > ++r && h(e, r, n), o = t ? r : r + e.e - o; a.length < o; a.push(0));
                        return o = e.e, 1 == t || 2 == t && (o >= r || o <= i.toExpNeg) ? (e.s < 0 && a[0] ? "-" : "") + (a.length > 1 ? a[0] + "." + a.slice(1).join("") : a[0]) + (0 > o ? "e" : "e+") + o : e.toString()
                    }

                    function l(e, r, n, t, i) {
                        if (e.errors) {
                            var o = new Error((t || ["new Decimal", "cmp", "div", "eq", "gt", "gte", "lt", "lte", "minus", "mod", "plus", "times", "toFraction", "pow", "random", "log", "sqrt", "toNearest", "divToInt"][v ? 0 > v ? -v : v : 0 > 1 / v ? 1 : 0]) + "() " + (["number type has more than 15 significant digits", "LN10 out of digits"][r] || r + ([w ? " out of range" : " not an integer", " not a boolean or binary digit"][i] || "")) + ": " + n);
                            throw o.name = "Decimal Error", w = v = 0, o
                        }
                    }

                    function p(e, r, n) {
                        var t = new e(e.ONE);
                        for (b = !1; 1 & n && (t = t.times(r)), n >>= 1, n;) r = r.times(r);
                        return b = !0, t
                    }

                    function m(e, r) {
                        var n, t, i, a, s, f, c, p, g, d = 1,
                            x = 10,
                            w = e,
                            y = w.c,
                            v = w.constructor,
                            E = v.ONE,
                            N = v.rounding,
                            M = v.precision;
                        if (w.s < 0 || !y || !y[0] || !w.e && 1 == y[0] && 1 == y.length) return new v(y && !y[0] ? -1 / 0 : 1 != w.s ? 0 / 0 : y ? 0 : w);
                        if (null == r ? (b = !1, s = M) : s = r, v.precision = s += x, !(Math.abs(t = w.e) < 15e14)) return w = new v(w), w.e = 0, s + 2 > S.length && l(v, 1, s + 2, "ln"), w = m(w, s - x).plus(new v(S.slice(0, s + 2)).times(t + "")), v.precision = M, null == r ? h(w, M, N, b = !0) : w;
                        for (; y[0] < 7 && 1 != y[0] || 1 == y[0] && y[1] > 3;) w = w.times(e), y = w.c, d++;
                        for (t = w.e, y[0] > 1 ? (1 == d ? w = new v("0." + y.join("")) : w.e = -1, t++) : w = new v("1." + y.slice(1).join("")), p = w, f = i = w = u(w.minus(E), w.plus(E), s, 1), g = h(w.times(w), s, 1), n = 3;;) {
                            if (i = h(i.times(g), s, 1), c = f.plus(u(i, new v(n), s, 1)), c.c.slice(0, s).join("") === f.c.slice(0, s).join("")) {
                                if (f = f.times(2), 0 !== t && (s + 2 > S.length && l(v, 1, s + 2, "ln"), f = f.plus(new v(S.slice(0, s + 2)).times(t + ""))), f = u(f, new v(d), s, 1), null != r) return v.precision = M, f;
                                if (!o(f.c, s - x, N, a)) return h(f, v.precision = M, N, b = !0);
                                v.precision = s += x, c = i = w = u(p.minus(E), p.plus(E), s, 1), g = h(w.times(w), s, 1), n = a = 1
                            }
                            f = c, n += 2
                        }
                    }

                    function h(e, r, n, t, i) {
                        var o, a, s, u, f = e.constructor;
                        if (r != o) {
                            if (!(u = e.c)) return e;
                            if (s = e.s < 0, a = (i = i || 10) / 2, o = u[r], t = t || 0 > r || null != u[r + 1], t = 4 > n ? (null != o || t) && (0 == n || 2 == n && !s || 3 == n && s) : o > a || o == a && (4 == n || t || 6 == n && 1 & u[r - 1] || 7 == n && !s || 8 == n && s), 1 > r || !u[0]) return u.length = 0, t ? (r = r - e.e - 1, u[0] = 1, e.e = -r || 0) : u[0] = e.e = 0, e;
                            if (u.length > r && (u.length = r), r--, t) {
                                for (o = r; null == u[o]; u[o--] = 0);
                                for (--i; ++u[r] > i;) u[r] = 0, r-- || (++e.e, u.unshift(1))
                            }
                            for (r = u.length; !u[--r]; u.pop());
                        }
                        return b && (e.e > f.maxE ? e.c = e.e = null : e.e < f.minE && (e.c = [e.e = 0])), e
                    }
                    var g, d, x, w, y = Object.prototype.toString,
                        v = 0,
                        b = !0,
                        E = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_",
                        N = {},
                        M = 9e15,
                        A = 1e9,
                        T = 3e3,
                        S = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058";
                    N.absoluteValue = N.abs = function () {
                        var e = new this.constructor(this);
                        return e.s < 0 && (e.s = 1), h(e)
                    }, N.ceil = function () {
                        return h(new this.constructor(this), this.e + 1, 2)
                    }, N.comparedTo = N.cmp = function (e, r) {
                        var n, t = this,
                            i = t.c,
                            o = (v = -v, e = new t.constructor(e, r), e.c),
                            a = t.s,
                            s = e.s,
                            u = t.e,
                            f = e.e;
                        if (!a || !s) return null;
                        if (n = i && !i[0], r = o && !o[0], n || r) return n ? r ? 0 : -s : a;
                        if (a != s) return a;
                        if (n = 0 > a, !i || !o) return u == f ? 0 : !i ^ n ? 1 : -1;
                        if (u != f) return u > f ^ n ? 1 : -1;
                        for (a = -1, s = (u = i.length) < (f = o.length) ? u : f; ++a < s;)
                            if (i[a] != o[a]) return i[a] > o[a] ^ n ? 1 : -1;
                        return u == f ? 0 : u > f ^ n ? 1 : -1
                    }, N.decimalPlaces = N.dp = function () {
                        var e = this;
                        return e.c ? Math.max(e.c.length - e.e - 1, 0) : null
                    }, N.dividedBy = N.div = function (e, r) {
                        return v = 2, u(this, new this.constructor(e, r))
                    }, N.dividedToIntegerBy = N.divToInt = function (e, r) {
                        var n = this,
                            t = n.constructor;
                        return v = 18, h(u(n, new t(e, r), 0, 1, 1), t.precision, t.rounding)
                    }, N.equals = N.eq = function (e, r) {
                        return v = 3, 0 === this.cmp(e, r)
                    }, N.exponential = N.exp = function () {
                        return f(this)
                    }, N.floor = function () {
                        return h(new this.constructor(this), this.e + 1, 3)
                    }, N.greaterThan = N.gt = function (e, r) {
                        return v = 4, this.cmp(e, r) > 0
                    }, N.greaterThanOrEqualTo = N.gte = function (e, r) {
                        return v = 5, r = this.cmp(e, r), 1 == r || 0 === r
                    }, N.isFinite = function () {
                        return !!this.c
                    }, N.isInteger = N.isInt = function () {
                        return !!this.c && this.e > this.c.length - 2
                    }, N.isNaN = function () {
                        return !this.s
                    }, N.isNegative = N.isNeg = function () {
                        return this.s < 0
                    }, N.isZero = function () {
                        return !!this.c && 0 == this.c[0]
                    }, N.lessThan = N.lt = function (e, r) {
                        return v = 6, this.cmp(e, r) < 0
                    }, N.lessThanOrEqualTo = N.lte = function (e, r) {
                        return v = 7, r = this.cmp(e, r), -1 == r || 0 === r
                    }, N.logarithm = N.log = function (e, r) {
                        var n, t, i, a, s, f, c, p, g, d = this,
                            x = d.constructor,
                            w = x.precision,
                            y = x.rounding,
                            E = 5;
                        if (null == e) e = new x(10), n = !0;
                        else {
                            if (v = 15, e = new x(e, r), t = e.c, e.s < 0 || !t || !t[0] || !e.e && 1 == t[0] && 1 == t.length) return new x(0 / 0);
                            n = e.eq(10)
                        } if (t = d.c, d.s < 0 || !t || !t[0] || !d.e && 1 == t[0] && 1 == t.length) return new x(t && !t[0] ? -1 / 0 : 1 != d.s ? 0 / 0 : t ? 0 : 1 / 0);
                        if (s = n && (1 != t[0] || t.length > 1) || (1 & e.c[e.c.length - 1]) != (1 & t[t.length - 1]) || 0, b = !1, c = w + E, p = c + 10, f = m(d, c), n ? (p > S.length && l(x, 1, p, "log"), i = new x(S.slice(0, p))) : i = m(e, c), g = u(f, i, c, 1), o(g.c, a = w, y))
                            do
                                if (c += 10, f = m(d, c), n ? (p = c + 10, p > S.length && l(x, 1, p, "log"), i = new x(S.slice(0, p))) : i = m(e, c), g = u(f, i, c, 1), !s) {
                                    for (t = g.c; 9 == t[++a];);
                                    a == w + E + 10 && (g = h(g, w + 1, 0));
                                    break
                                }
                        while (o(g.c, a += 10, y));
                        return b = !0, h(g, w, y)
                    }, N.minus = function (e, r) {
                        var n, t, i, o, a = this,
                            s = a.constructor,
                            u = a.s;
                        if (v = 8, e = new s(e, r), r = e.s, !u || !r) return new s(0 / 0);
                        if (u != r) return e.s = -r, a.plus(e);
                        var f = a.c,
                            c = a.e,
                            l = e.c,
                            p = e.e,
                            m = s.precision,
                            g = s.rounding;
                        if (!c || !p) {
                            if (!f || !l) return f ? (e.s = -r, e) : new s(l ? a : 0 / 0);
                            if (!f[0] || !l[0]) return a = l[0] ? (e.s = -r, e) : new s(f[0] ? a : 3 == g ? -0 : 0), b ? h(a, m, g) : a
                        }
                        if (f = f.slice(), t = f.length, u = c - p) {
                            for ((o = 0 > u) ? (u = -u, n = f, t = l.length) : (p = c, n = l), m > t && (t = m), u > (t += 2) && (u = t, n.length = 1), n.reverse(), r = u; r--; n.push(0));
                            n.reverse()
                        } else
                            for ((o = t < (i = l.length)) && (i = t), u = r = 0; i > r; r++)
                                if (f[r] != l[r]) {
                                    o = f[r] < l[r];
                                    break
                                } if (o && (n = f, f = l, l = n, e.s = -e.s), (r = -((i = f.length) - l.length)) > 0)
                            for (; r--; f[i++] = 0);
                        for (r = l.length; r > u;) {
                            if (f[--r] < l[r]) {
                                for (t = r; t && !f[--t]; f[t] = 9);
                                --f[t], f[r] += 10
                            }
                            f[r] -= l[r]
                        }
                        for (; 0 == f[--i]; f.pop());
                        for (; 0 == f[0]; f.shift(), --p);
                        return f[0] || (f = [p = 0], e.s = 3 == g ? -1 : 1), e.c = f, e.e = p, b ? h(e, m, g) : e
                    }, N.modulo = N.mod = function (e, r) {
                        var n, t, i = this,
                            o = i.constructor,
                            a = o.modulo;
                        return v = 9, e = new o(e, r), r = e.s, n = !i.c || !r || e.c && !e.c[0], n || !e.c || i.c && !i.c[0] ? n ? new o(0 / 0) : h(new o(i), o.precision, o.rounding) : (b = !1, 9 == a ? (e.s = 1, t = u(i, e, 0, 3, 1), e.s = r, t.s *= r) : t = u(i, e, 0, a, 1), t = t.times(e), b = !0, i.minus(t))
                    }, N.naturalLogarithm = N.ln = function () {
                        return m(this)
                    }, N.negated = N.neg = function () {
                        var e = new this.constructor(this);
                        return e.s = -e.s || null, h(e)
                    }, N.plus = function (e, r) {
                        var n, t = this,
                            i = t.constructor,
                            o = t.s;
                        if (v = 10, e = new i(e, r), r = e.s, !o || !r) return new i(0 / 0);
                        if (o != r) return e.s = -r, t.minus(e);
                        var a = t.e,
                            s = t.c,
                            u = e.e,
                            f = e.c,
                            c = i.precision,
                            l = i.rounding;
                        if (!a || !u) {
                            if (!s || !f) return new i(o / 0);
                            if (!s[0] || !f[0]) return t = f[0] ? e : new i(s[0] ? t : 0 * o), b ? h(t, c, l) : t
                        }
                        if (s = s.slice(), o = a - u) {
                            for (0 > o ? (o = -o, n = s, r = f.length) : (u = a, n = f, r = s.length), c > r && (r = c), o > ++r && (o = r, n.length = 1), n.reverse(); o--; n.push(0));
                            n.reverse()
                        }
                        for (s.length - f.length < 0 && (n = f, f = s, s = n), o = f.length, r = 0; o; s[o] %= 10) r = (s[--o] = s[o] + f[o] + r) / 10 | 0;
                        for (r && (s.unshift(r), ++u), o = s.length; 0 == s[--o]; s.pop());
                        return e.c = s, e.e = u, b ? h(e, c, l) : e
                    }, N.precision = N.sd = function (e) {
                        var r = this;
                        return null != e && e !== !!e && 1 !== e && 0 !== e && l(r.constructor, "argument", e, "precision", 1), r.c ? e ? Math.max(r.e + 1, r.c.length) : r.c.length : null
                    }, N.round = function () {
                        var e = this,
                            r = e.constructor;
                        return h(new r(e), e.e + 1, r.rounding)
                    }, N.squareRoot = N.sqrt = function () {
                        var e, r, n, t, i, o = this,
                            a = o.c,
                            s = o.s,
                            f = o.e,
                            c = o.constructor,
                            l = new c(.5);
                        if (1 !== s || !a || !a[0]) return new c(!s || 0 > s && (!a || a[0]) ? 0 / 0 : a ? o : 1 / 0);
                        for (b = !1, s = Math.sqrt(+o), 0 == s || s == 1 / 0 ? (e = a.join(""), (e.length + f) % 2 == 0 && (e += "0"), n = new c(Math.sqrt(e) + ""), n.c || (n.c = [1]), n.e = Math.floor((f + 1) / 2) - (0 > f || f % 2)) : n = new c(s.toString()), r = (f = c.precision) + 3;;)
                            if (i = n, n = l.times(i.plus(u(o, i, r + 2, 1))), i.c.slice(0, r).join("") === n.c.slice(0, r).join("")) {
                                if (a = n.c, 9 != a[r - 3] && (t || 4 != a[r - 3]) || 9 != a[r - 2] || 9 != a[r - 1] || 9 != a[r]) {
                                    if (!(a[r - 3] && 5 != a[r - 3] || a[r - 2] || a[r - 1] || a[r] || (a.length > f + 1 && (a.length = f + 1), n.times(n).eq(o)))) {
                                        for (; a.length < f;) a.push(0);
                                        a[f]++
                                    }
                                    break
                                }
                                if (!t && (i = h(i, f + 1, 0), i.times(i).eq(o))) {
                                    n = i;
                                    break
                                }
                                r += 4, t = 1
                            }
                        return b = !0, h(n, f, c.rounding)
                    }, N.times = function (e, r) {
                        var n, t = this,
                            i = t.constructor,
                            o = t.c,
                            a = (v = 11, e = new i(e, r), e.c),
                            s = t.e,
                            u = e.e,
                            f = t.s;
                        if (r = e.s, e.s = f == r ? 1 : -1, !((s || o && o[0]) && (u || a && a[0]))) return new i(!f || !r || o && !o[0] && !a || a && !a[0] && !o ? 0 / 0 : o && a ? 0 * e.s : e.s / 0);
                        for (e.e = s + u, f = o.length, r = a.length, r > f && (n = o, o = a, a = n, u = f, f = r, r = u), u = f + r, n = []; u--; n.push(0));
                        for (s = r - 1; s > -1; s--) {
                            for (r = 0, u = f + s; u > s; r = r / 10 | 0) r = n[u] + a[s] * o[u - s - 1] + r, n[u--] = r % 10 | 0;
                            r && (n[u] = (n[u] + r) % 10)
                        }
                        for (r && ++e.e, n[0] || n.shift(), u = n.length; !n[--u]; n.pop());
                        return e.c = n, b ? h(e, i.precision, i.rounding) : e
                    }, N.toDecimalPlaces = N.toDP = function (e, r) {
                        var n = this;
                        return n = new n.constructor(n), null != e && s(n, e, "toDP") ? h(n, (0 | e) + n.e + 1, a(n, r, "toDP")) : n
                    }, N.toExponential = function (e, r) {
                        var n = this;
                        return c(n, null != e && s(n, e, "toExponential") || !n.c ? 0 | e : n.c.length - 1, null != e && a(n, r, "toExponential"), 1)
                    }, N.toFixed = function (e, r) {
                        var n, t = this,
                            i = t.constructor,
                            o = i.toExpNeg,
                            u = i.toExpPos;
                        return null != e && (e = s(t, e, n = "toFixed", -A) ? t.e + (0 | e) : null, r = a(t, r, n)), i.toExpNeg = -(i.toExpPos = 1 / 0), null == e ? n = t.toString() : (n = c(t, e, r), t.s < 0 && t.c && (t.c[0] ? n.indexOf("-") < 0 && (n = "-" + n) : n = n.replace("-", ""))), i.toExpNeg = o, i.toExpPos = u, n
                    }, N.toFormat = function (e, r, n) {
                        var t = this.toFixed(r).split(".");
                        return t[0].replace(/\B(?=(\d{3})+$)/g, null == e ? "," : e + "") + (t[1] ? "." + (n ? t[1].replace(/\d{5}\B/g, "$&" + n) : t[1]) : "")
                    }, N.toFraction = function (e) {
                        var r, n, t, i, o, a, s, f = this,
                            c = f.constructor,
                            p = r = new c(c.ONE),
                            m = a = new c(0),
                            h = f.c,
                            g = new c(c.ONE),
                            d = c.precision;
                        if (!h) return f.toString();
                        for (t = g.e = h.length - f.e - 1, (null == e || (!(v = 12, o = new c(e)).s || (w = o.cmp(p) < 0 || !o.c) || c.errors && o.e < o.c.length - 1) && !l(c, "max denominator", e, "toFraction", 0) || (e = o).cmp(g) > 0) && (e = t > 0 ? g : p), b = !1, o = new c(h.join("")), c.precision = h.length; s = u(o, g, 0, 1, 1), n = r.plus(s.times(m)), 1 != n.cmp(e);) r = m, m = n, p = a.plus(s.times(n = p)), a = n, g = o.minus(s.times(n = g)), o = n;
                        return n = u(e.minus(r), m, 0, 1, 1), a = a.plus(n.times(p)), r = r.plus(n.times(m)), a.s = p.s = f.s, t *= 2, i = u(p, m, t, 1, 1).minus(f).abs().cmp(u(a, r, t, 1, 1).minus(f).abs()) < 1 ? [p.toString(), m.toString()] : [a.toString(), r.toString()], b = !0, c.precision = d, i
                    }, N.toNearest = function (e, r) {
                        var n = this,
                            t = n.constructor;
                        return n = new t(n), null == e ? (e = new t(t.ONE), r = t.rounding) : (v = 17, e = new t(e), r = a(n, r, "toNearest")), e.c ? n.c && (b = !1, 4 > r && (r = [4, 5, 7, 8][r]), 1 == e.c[0] && 1 == e.c.length ? (n.e -= e.e, h(n, n.e + 1, r), n.c[0] && (n.e += e.e)) : e.c[0] ? n = u(n, e, 0, r, 1).times(e) : n.c = [n.e = 0], b = !0, h(n)) : n.s && (e.s && (e.s = n.s), n = e), n
                    }, N.toNumber = function () {
                        var e = this;
                        return +e || (e.s ? 0 * e.s : 0 / 0)
                    }, N.toPower = N.pow = function (e, r) {
                        var n, t, i, a, s = this,
                            u = s.constructor,
                            c = s.s,
                            l = (v = 13, +(e = new u(e, r))),
                            g = 0 > l ? -l : l,
                            d = u.precision,
                            x = u.rounding;
                        if (!s.c || !e.c || (i = !s.c[0]) || !e.c[0]) return new u(Math.pow(i ? 0 * c : +s, l));
                        if (s = new u(s), n = s.c.length, !s.e && s.c[0] == s.s && 1 == n) return s;
                        if (r = e.c.length - 1, e.e || e.c[0] != e.s || r)
                            if (i = e.e >= r, !i && 0 > c) a = new u(0 / 0);
                            else {
                                if (i && T > n * g) {
                                    if (a = p(u, s, g), e.s < 0) return u.ONE.div(a)
                                } else {
                                    if (c = 0 > c && 1 & e.c[Math.max(e.e, r)] ? -1 : 1, r = Math.pow(+s, l), t = 0 != r && isFinite(r) ? new u(r + "").e : Math.floor(l * (Math.log("0." + s.c.join("")) / Math.LN10 + s.e + 1)), t > u.maxE + 1 || t < u.minE - 1) return new u(t > 0 ? c / 0 : 0);
                                    if (b = !1, u.rounding = s.s = 1, g = Math.min(12, (t + "").length), a = f(e.times(m(s, d + g)), d), a = h(a, d + 5, 1), o(a.c, d, x)) {
                                        for (t = d + 10, a = h(f(e.times(m(s, t + g)), t), t + 5, 1), g = d; 9 == a.c[++g];);
                                        g == d + 15 && (a = h(a, d + 1, 0))
                                    }
                                    a.s = c, b = !0, u.rounding = x
                                }
                                a = h(a, d, x)
                            } else a = h(s, d, x);
                        return a
                    }, N.toPrecision = function (e, r) {
                        return null != e && s(this, e, "toPrecision", 1) ? c(this, 0 | --e, a(this, r, "toPrecision"), 2) : this.toString()
                    }, N.toSignificantDigits = N.toSD = function (e, r) {
                        var n = this,
                            t = n.constructor;
                        return n = new t(n), null != e && s(n, e, "toSD", 1) ? h(n, 0 | e, a(n, r, "toSD")) : h(n, t.precision, t.rounding)
                    }, N.toString = function (e) {
                        var r, n, t, i = this,
                            o = i.constructor,
                            a = i.e;
                        if (null === a) n = i.s ? "Infinity" : "NaN";
                        else {
                            if (e === r && (a <= o.toExpNeg || a >= o.toExpPos)) return c(i, i.c.length - 1, o.rounding, 1);
                            if (n = i.c.join(""), 0 > a) {
                                for (; ++a; n = "0" + n);
                                n = "0." + n
                            } else if (t = n.length, a > 0)
                                if (++a > t)
                                    for (a -= t; a--; n += "0");
                                else t > a && (n = n.slice(0, a) + "." + n.slice(a));
                            else if (r = n.charAt(0), t > 1) n = r + "." + n.slice(1);
                            else if ("0" == r) return r;
                            if (null != e)
                                if ((w = !(e >= 2 && 65 > e)) || e != (0 | e) && o.errors) l(o, "base", e, "toString", 0);
                                else if (n = g(o, n, 0 | e, 10, i.s), "0" == n) return n
                        }
                        return i.s < 0 ? "-" + n : n
                    }, N.truncated = N.trunc = function () {
                        return h(new this.constructor(this), this.e + 1, 1)
                    }, N.valueOf = N.toJSON = function () {
                        return this.toString()
                    }, g = function () {
                        function e(e, r, n) {
                            for (var t, i, o = [0], a = 0, s = e.length; s > a;) {
                                for (i = o.length; i--; o[i] *= r);
                                for (o[t = 0] += E.indexOf(e.charAt(a++)); t < o.length; t++) o[t] > n - 1 && (null == o[t + 1] && (o[t + 1] = 0), o[t + 1] += o[t] / n | 0, o[t] %= n)
                            }
                            return o.reverse()
                        }
                        return function (r, n, t, i, o) {
                            var a, s, f, c = n.indexOf("."),
                                l = new r(i);
                            for (37 > i && (n = n.toLowerCase()), 0 > c ? (a = new r(l), f = [1]) : (a = p(r, l, n.length - c - 1), f = e(a.toFixed(), 10, t), n = n.replace(".", "")), l.c = f, l.e = f.length, s = e(n, i, t), a.c = s, a.e = s.length, a.s = o, a = u(a, l, r.precision, r.rounding, 0, t), s = a.c, c = s.length; c--;) s[c] = E.charAt(s[c]);
                            return a.s = 1, a.toFixed()
                        }
                    }(), x = function () {
                        function e(e) {
                            var r, n, t, i = this,
                                o = "config",
                                a = i.errors ? parseInt : parseFloat;
                            return e == n || "object" != typeof e && !l(i, "object expected", e, o) ? i : ((t = e[r = "precision"]) != n && ((w = 1 > t || t > A) || a(t) != t ? l(i, r, t, o, 0) : i[r] = 0 | t), (t = e[r = "rounding"]) != n && ((w = 0 > t || t > 8) || a(t) != t ? l(i, r, t, o, 0) : i[r] = 0 | t), (t = e[r = "toExpNeg"]) != n && ((w = -M > t || t > 0) || a(t) != t ? l(i, r, t, o, 0) : i[r] = Math.floor(t)), (t = e[r = "toExpPos"]) != n && ((w = 0 > t || t > M) || a(t) != t ? l(i, r, t, o, 0) : i[r] = Math.floor(t)), (t = e[r = "minE"]) != n && ((w = -M > t || t > 0) || a(t) != t ? l(i, r, t, o, 0) : i[r] = Math.floor(t)), (t = e[r = "maxE"]) != n && ((w = 0 > t || t > M) || a(t) != t ? l(i, r, t, o, 0) : i[r] = Math.floor(t)), (t = e[r = "errors"]) != n && (t === !!t || 1 === t || 0 === t ? (w = v = 0, i[r] = !!t) : l(i, r, t, o, 1)), (t = e[r = "crypto"]) != n && (t === !!t || 1 === t || 0 === t ? i[r] = !(!t || !d || "object" != typeof d) : l(i, r, t, o, 1)), (t = e[r = "modulo"]) != n && ((w = 0 > t || t > 9) || a(t) != t ? l(i, r, t, o, 0) : i[r] = 0 | t), i)
                        }

                        function r(e) {
                            return new this(e).exp()
                        }

                        function n(e) {
                            return new this(e).ln()
                        }

                        function t(e, r) {
                            return new this(e).log(r)
                        }

                        function o(e, r, n) {
                            var t, i, o = 0;
                            for ("[object Array]" == y.call(r[0]) && (r = r[0]), t = new e(r[0]); ++o < r.length;) {
                                if (i = new e(r[o]), !i.s) {
                                    t = i;
                                    break
                                }
                                t[n](i) && (t = i)
                            }
                            return t
                        }

                        function a() {
                            return o(this, arguments, "lt")
                        }

                        function u() {
                            return o(this, arguments, "gt")
                        }

                        function f(e, r) {
                            return new this(e).pow(r)
                        }

                        function c(e) {
                            return new this(e).sqrt()
                        }

                        function p(i) {
                            function o(e, r) {
                                var n = this;
                                if (!(n instanceof o)) return l(o, "Decimal called without new", e), new o(e, r);
                                if (e instanceof o) {
                                    if (null == r) return v = 0, n.constructor = e.constructor, n.s = e.s, n.e = e.e, void(n.c = (e = e.c) ? e.slice() : e);
                                    if (10 == r) return h(new o(e), o.precision, o.rounding);
                                    e += ""
                                }
                                return m(n.constructor = o, n, e, r)
                            }
                            return o.precision = 20, o.rounding = 4, o.modulo = 1, o.toExpNeg = -7, o.toExpPos = 21, o.minE = -M, o.maxE = M, o.errors = !0, o.crypto = !1, o.prototype = N, o.ONE = new o(1), o.ROUND_UP = 0, o.ROUND_DOWN = 1, o.ROUND_CEIL = 2, o.ROUND_FLOOR = 3, o.ROUND_HALF_UP = 4, o.ROUND_HALF_DOWN = 5, o.ROUND_HALF_EVEN = 6, o.ROUND_HALF_CEIL = 7, o.ROUND_HALF_FLOOR = 8, o.EUCLID = 9, o.config = e, o.constructor = p, o.exp = r, o.ln = n, o.log = t, o.max = a, o.min = u, o.pow = f, o.sqrt = c, o.random = x, null != i && o.config(i), o
                        }
                        var m = function () {
                                var e = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
                                    r = String.prototype.trim || function () {
                                        return this.replace(/^\s+|\s+$/g, "")
                                    };
                                return function (n, t, i, o) {
                                    var a, s, u, f, c, p;
                                    if ("string" != typeof i && (i = (f = "number" == typeof i || "[object Number]" == y.call(i)) && 0 === i && 0 > 1 / i ? "-0" : i + ""), c = i, o == s && e.test(i)) t.s = "-" == i.charAt(0) ? (i = i.slice(1), -1) : 1;
                                    else {
                                        if (10 == o) return h(new n(i), n.precision, n.rounding);
                                        if (i = r.call(i).replace(/^\+(?!-)/, ""), t.s = "-" == i.charAt(0) ? (i = i.replace(/^-(?!-)/, ""), -1) : 1, o != s ? o != (0 | o) && n.errors || (w = !(o >= 2 && 65 > o)) ? (l(n, "base", o, 0, 0), p = e.test(i)) : (a = "[" + E.slice(0, o = 0 | o) + "]+", i = i.replace(/\.$/, "").replace(/^\./, "0."), (p = new RegExp("^" + a + "(?:\\." + a + ")?$", 37 > o ? "i" : "").test(i)) ? (f && (i.replace(/^0\.0*|\./, "").length > 15 && l(n, 0, c), f = !f), i = g(n, i, 10, o, t.s)) : "Infinity" != i && "NaN" != i && (l(n, "not a base " + o + " number", c), i = "NaN")) : p = e.test(i), !p) return t.c = t.e = null, "Infinity" != i && ("NaN" != i && l(n, "not a number", c), t.s = null), v = 0, t
                                    }
                                    for ((s = i.indexOf(".")) > -1 && (i = i.replace(".", "")), (u = i.search(/e/i)) > 0 ? (0 > s && (s = u), s += +i.slice(u + 1), i = i.substring(0, u)) : 0 > s && (s = i.length), u = 0;
                                        "0" == i.charAt(u); u++);
                                    if (u == (o = i.length)) t.c = [t.e = 0];
                                    else {
                                        for (f && o > 15 && i.slice(u).length > 15 && l(n, 0, c);
                                            "0" == i.charAt(--o););
                                        for (t.e = s - u - 1, t.c = [], s = 0; o >= u; t.c[s++] = +i.charAt(u++));
                                        b && (t.e > n.maxE ? t.c = t.e = null : t.e < n.minE && (t.c = [t.e = 0]))
                                    }
                                    v = 0
                                }
                            }(),
                            x = function () {
                                function e(e) {
                                    var r = Math.random();
                                    return e ? (r * e | 0) + "" : (1 + r + "").slice(2, -2)
                                }

                                function r(e) {
                                    var n;
                                    return e ? (n = d.getRandomValues(new i.Uint8Array(1))[0], n > (256 / e | 0) * e - 1 ? r(e) : n % e + "") : (n = d.getRandomValues(new i.Uint32Array(1))[0], n >= 4e9 ? r(e) : (n + 1e9 + "").slice(1))
                                }

                                function n(e) {
                                    var r, t, i = d.randomBytes;
                                    return e ? (t = i(1)[0], t > (256 / e | 0) * e - 1 ? n(e) : t % e + "") : (r = i(8), r[0] = 67, r[1] = 15 & r[1] | 48, t = r.readDoubleBE(0), t > 9003599627370495 ? n(e) : (t - 0xc72815b398000 + "").slice(2))
                                }
                                return function (t, i) {
                                    var o, a, u, f, c, p, m, h, g = this,
                                        x = new g(0),
                                        w = e;
                                    if (p = t == a || !(v = 14, t = new g(t)).c && !l(g, "limit must be finite", t, "random")) t = new g(g.ONE);
                                    else if (!t.c[0]) return x;
                                    g.crypto && (d.getRandomValues ? w = r : d.randomBytes && (w = n)), a = t.e, c = (o = t.c).length;
                                    do {
                                        u = 0, h = w(o[0] + 1) + w();
                                        do f = o[u], m = h.charAt(u++); while (f == m)
                                    } while (m > f || u > c || "" == m);
                                    for (u = 0;
                                        "0" == h.charAt(u); u++, a--);
                                    for (p ? i = g.precision : null != i && s(t, i, "random", 1) ? i |= 0 : i = a + 1, i += u; h.length < i;) h += w();
                                    for (;
                                        "0" == h.charAt(--i););
                                    if (++i > 0)
                                        for (x.c = []; i > u; x.c.push(+h.charAt(u++)));
                                    else x.c = [a = 0];
                                    return x.e = a, x.s = t.s, x
                                }
                            }();
                        return p()
                    }(), "undefined" != typeof e && e && e.exports ? (e.exports = x, d = n(257)) : (d = i.crypto, t = function () {
                        return x
                    }.call(r, n, r, e), !(void 0 !== t && (e.exports = t)))
                }(this)
            }).call(r, n(260)(e))
        },
        function (e, r, n) {
            r.array = n(154), r["boolean"] = n(258), r.number = n(155), r.bignumber = n(259), r.object = n(3), r.string = n(139), r.types = n(157)
        },
        function (e) {
            function r(e, n, t, i) {
                if (!(this instanceof r)) throw new SyntaxError("Constructor must be called with the new operator");
                this.fn = e, this.count = n, this.min = t, this.max = i, this.message = "Wrong number of arguments in function " + e + " (" + n + " provided, " + t + (void 0 != i ? "-" + i : "") + " expected)", this.stack = (new Error).stack
            }
            r.prototype = new Error, r.prototype.constructor = Error, r.prototype.name = "ArgumentsError", e.exports = r
        },
        function (e) {
            function r(e, n, t) {
                if (!(this instanceof r)) throw new SyntaxError("Constructor must be called with the new operator");
                this.actual = e, this.expected = n, this.relation = t, this.message = "Dimension mismatch (" + (Array.isArray(e) ? "[" + e.join(", ") + "]" : e) + " " + (this.relation || "!=") + " " + (Array.isArray(n) ? "[" + n.join(", ") + "]" : n) + ")", this.stack = (new Error).stack
            }
            r.prototype = new RangeError, r.prototype.constructor = RangeError, r.prototype.name = "DimensionError", e.exports = r
        },
        function (e) {
            function r(e, n, t) {
                if (!(this instanceof r)) throw new SyntaxError("Constructor must be called with the new operator");
                this.index = e, arguments.length < 3 ? (this.min = 0, this.max = n) : (this.min = n, this.max = t), this.message = void 0 !== this.min && this.index < this.min ? "Index out of range (" + this.index + " < " + this.min + ")" : void 0 !== this.max && this.index >= this.max ? "Index out of range (" + this.index + " > " + (this.max - 1) + ")" : "Index out of range (" + this.index + ")", this.stack = (new Error).stack
            }
            r.prototype = new RangeError, r.prototype.constructor = RangeError, r.prototype.name = "IndexError", e.exports = r
        },
        function (e) {
            function r(e) {
                if (!(this instanceof r)) throw new SyntaxError("Constructor must be called with the new operator");
                this.fn = e, this.types = Array.prototype.splice.call(arguments, 1), this.message = e ? 0 == this.types.length ? "Unsupported type of argument in function " + e : "Function " + e + "(" + this.types.join(", ") + ") not supported" : "Unsupported type of argument", this.stack = (new Error).stack
            }
            r.prototype = new TypeError, r.prototype.constructor = TypeError, r.prototype.name = "UnsupportedTypeError", e.exports = r
        },
        function (e, r, n) {
            function t(e) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (this.nodes = e || [], !a(this.nodes) || !this.nodes.every(s)) throw new TypeError("Array containing Nodes expected")
            }
            var i = n(138),
                o = (n(3), n(139)),
                a = (n(11), n(120), Array.isArray),
                s = i.isNode;
            t.prototype = new i, t.prototype.type = "ArrayNode", t.prototype._compile = function (e) {
                var r = "array" !== e.math.config().matrix,
                    n = this.nodes.map(function (r) {
                        return r._compile(e)
                    });
                return (r ? "math.matrix([" : "[") + n.join(",") + (r ? "])" : "]")
            }, t.prototype.find = function (e) {
                var r = [];
                this.match(e) && r.push(this);
                for (var n = this.nodes, t = 0, i = n.length; i > t; t++) r = r.concat(n[t].find(e));
                return r
            }, t.prototype.toString = function () {
                return o.format(this.nodes)
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (!o(e)) throw new TypeError('String expected for parameter "name"');
                if (!(r instanceof i)) throw new TypeError('Node expected for parameter "expr"');
                this.name = e, this.expr = r
            }
            var i = n(138),
                o = n(139).isString;
            t.prototype = new i, t.prototype.type = "AssignmentNode", t.prototype._compile = function (e) {
                return 'scope["' + this.name + '"] = ' + this.expr._compile(e)
            }, t.prototype.find = function (e) {
                var r = [];
                return this.match(e) && r.push(this), r = r.concat(this.expr.find(e))
            }, t.prototype.toString = function () {
                return this.name + " = " + this.expr.toString()
            }, e.exports = t
        },
        function (e, r, n) {
            function t() {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                this.params = []
            }
            var i = n(138),
                o = n(258).isBoolean;
            t.prototype = new i, t.prototype.type = "BlockNode", t.prototype.add = function (e, r) {
                if (void 0 === r && (r = !0), !(e instanceof i)) throw new TypeError('Node expected for parameter "expr"');
                if (!o(r)) throw new TypeError('Boolean expected for parameter "visible"');
                var n = this.params.length;
                this.params[n] = {
                    node: e,
                    visible: r
                }
            }, t.prototype._compile = function (e) {
                var r = this.params.map(function (r) {
                    var n = r.node._compile(e);
                    return r.visible ? "results.push(" + n + ");" : n + ";"
                });
                return "(function () {var results = [];" + r.join("") + "return results;})()"
            }, t.prototype.find = function (e) {
                var r = [];
                this.match(e) && r.push(this);
                for (var n = this.params, t = 0, i = n.length; i > t; t++) r = r.concat(n[t].node.find(e));
                return r
            }, t.prototype.toString = function () {
                return this.params.map(function (e) {
                    return e.node.toString() + (e.visible ? "" : ";")
                }).join("\n")
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (!a(e)) throw new TypeError('String expected for parameter "type"');
                if (!a(r)) throw new TypeError('String expected for parameter "value"');
                this.valueType = e, this.value = r
            }
            var i = n(138),
                o = n(139),
                a = o.isString;
            t.prototype = new i, t.prototype.type = "ConstantNode", t.prototype._compile = function (e) {
                switch (this.valueType) {
                case "number":
                    return "bignumber" === e.math.config().number ? 'math.bignumber("' + this.value + '")' : this.value.replace(/^(0*)[0-9]/, function (e, r) {
                        return e.substring(r.length)
                    });
                case "string":
                    return '"' + this.value + '"';
                case "complex":
                    return "math.complex(0, " + this.value + ")";
                case "boolean":
                    return this.value;
                case "undefined":
                    return this.value;
                case "null":
                    return this.value;
                default:
                    throw new TypeError('Unsupported type of constant "' + this.valueType + '"')
                }
            }, t.prototype.toString = function () {
                switch (this.valueType) {
                case "string":
                    return '"' + this.value + '"';
                case "complex":
                    return this.value + "i";
                default:
                    return this.value
                }
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r, n) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (!o(e)) throw new TypeError('String expected for parameter "name"');
                if (!isArray(r) || !r.every(o)) throw new TypeError('Array containing strings expected for parameter "args"');
                if (!(n instanceof i)) throw new TypeError('Node expected for parameter "expr"');
                this.name = e, this.args = r, this.expr = n
            }
            var i = n(138),
                o = n(139).isString;
            isArray = Array.isArray, t.prototype = new i, t.prototype.type = "FunctionNode", t.prototype._compile = function (e) {
                return 'scope["' + this.name + '"] =   (function (scope) {    scope = Object.create(scope);     var fn = function ' + this.name + "(" + this.args.join(",") + ") {      if (arguments.length != " + this.args.length + ') {        throw new SyntaxError("Wrong number of arguments in function ' + this.name + ' (" + arguments.length + " provided, ' + this.args.length + ' expected)");      }' + this.args.map(function (e, r) {
                    return 'scope["' + e + '"] = arguments[' + r + "];"
                }).join("") + "      return " + this.expr._compile(e) + '    };    fn.syntax = "' + this.name + "(" + this.args.join(", ") + ')";    return fn;  })(scope);'
            }, t.prototype.find = function (e) {
                var r = [];
                return this.match(e) && r.push(this), r = r.concat(this.expr.find(e))
            }, t.prototype.toString = function () {
                return "function " + this.name + "(" + this.args.join(", ") + ") = " + this.expr.toString()
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (!(e instanceof i)) throw new TypeError('Node expected for parameter "object"');
                if (!isArray(r) || !r.every(s)) throw new TypeError('Array containing Nodes expected for parameter "ranges"');
                this.object = e, this.ranges = r
            }
            var i = n(138),
                o = n(133),
                a = n(134),
                s = i.isNode;
            t.prototype = new i, t.prototype.type = "IndexNode", t.prototype._compile = function (e) {
                return this.compileSubset(e)
            }, t.prototype.compileSubset = function (e, r) {
                var n = {
                        type: a,
                        properties: {
                            name: "end"
                        }
                    },
                    t = !1,
                    i = this.ranges.map(function (e) {
                        var r = e.find(n).length > 0;
                        return t = r ? r : t, r
                    }),
                    s = this.ranges.map(function (r, n) {
                        var t = i[n];
                        return r instanceof o ? t ? '(function (scope) {  scope = Object.create(scope);   scope["end"] = size[' + n + "];  var step = " + (r.step ? r.step._compile(e) : "1") + ";  return [    " + r.start._compile(e) + " - 1,     " + r.end._compile(e) + " - (step > 0 ? 0 : 2),     step  ];})(scope)" : "(function () {  var step = " + (r.step ? r.step._compile(e) : "1") + ";  return [    " + r.start._compile(e) + " - 1,     " + r.end._compile(e) + " - (step > 0 ? 0 : 2),     step  ];})()" : t ? '(function (scope) {  scope = Object.create(scope);   scope["end"] = size[' + n + "];  return " + r._compile(e) + " - 1;})(scope)" : r._compile(e) + " - 1"
                    });
                return t ? "(function () {  var obj = " + this.object._compile(e) + ";  var size = math.size(obj).valueOf();  return math.subset(    obj,     math.index(" + s.join(", ") + ")    " + (r ? ", " + r : "") + "  );})()" : "math.subset(" + this.object._compile(e) + ",math.index(" + s.join(", ") + ")" + (r ? ", " + r : "") + ")"
            }, t.prototype.find = function (e) {
                var r = [];
                this.match(e) && r.push(this), r = r.concat(this.object.find(e));
                for (var n = this.ranges, t = 0, i = n.length; i > t; t++) r = r.concat(n[t].find(e));
                return r
            }, t.prototype.objectName = function () {
                return this.object.name
            }, t.prototype.toString = function () {
                return this.object.toString() + "[" + this.ranges.join(", ") + "]"
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r, n) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                this.op = e, this.fn = r, this.params = n
            }
            var i = n(138);
            t.prototype = new i, t.prototype.type = "OperatorNode", t.prototype._compile = function (e) {
                if (!(this.fn in e.math)) throw new Error("Function " + this.fn + ' missing in provided namespace "math"');
                var r = this.params.map(function (r) {
                    return r._compile(e)
                });
                return "math." + this.fn + "(" + r.join(", ") + ")"
            }, t.prototype.find = function (e) {
                var r = [];
                this.match(e) && r.push(this);
                var n = this.params;
                if (n)
                    for (var t = 0, i = n.length; i > t; t++) r = r.concat(n[t].find(e));
                return r
            }, t.prototype.toString = function () {
                var e = this.params;
                switch (e.length) {
                case 1:
                    return "-" == this.op ? "-" + e[0].toString() : e[0].toString() + this.op;
                case 2:
                    var r = e[0].toString();
                    e[0] instanceof t && (r = "(" + r + ")");
                    var n = e[1].toString();
                    return e[1] instanceof t && (n = "(" + n + ")"), r + " " + this.op + " " + n;
                default:
                    return this.op + "(" + this.params.join(", ") + ")"
                }
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (!(e instanceof i)) throw new TypeError('Node expected for parameter "object"');
                if (!isArray(r) || !r.every(o)) throw new TypeError('Array containing Nodes expected for parameter "params"');
                this.object = e, this.params = r
            }
            var i = n(138),
                o = i.isNode;
            t.prototype = new i, t.prototype.type = "ParamsNode", t.prototype._compile = function (e) {
                var r = this.params.map(function (r) {
                    return r._compile(e)
                });
                return this.object._compile(e) + "(" + r.join(", ") + ")"
            }, t.prototype.find = function (e) {
                var r = [];
                this.match(e) && r.push(this), r = r.concat(this.object.find(e));
                for (var n = this.params, t = 0, i = n.length; i > t; t++) r = r.concat(n[t].find(e));
                return r
            }, t.prototype.toString = function () {
                return this.object.toString() + "(" + this.params.join(", ") + ")"
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (!Array.isArray(e) || 2 != e.length && 3 != e.length || !e.every(o)) throw new TypeError('Expected an Array containing 2 or 3 Nodes as parameter "params"');
                this.start = e[0], this.end = e[1], this.step = e[2]
            }
            var i = n(138),
                o = i.isNode;
            t.prototype = new i, t.prototype.type = "RangeNode", t.prototype._compile = function (e) {
                return "math.range(" + this.start._compile(e) + ", " + this.end._compile(e) + ", " + (this.step ? this.step._compile(e) + ", " : "") + "true)"
            }, t.prototype.find = function (e) {
                var r = [];
                return this.match(e) && r.push(this), r = r.concat(this.start.find(e)), this.step && (r = r.concat(this.step.find(e))), r = r.concat(this.end.find(e))
            }, t.prototype.toString = function () {
                var e = this.start.toString();
                return this.step && (e += ":" + this.step.toString()), e += ":" + this.end.toString()
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (!s(e)) throw new TypeError('String expected for parameter "name"');
                this.name = e
            }

            function i(e) {
                throw new Error("Undefined symbol " + e)
            }
            var o = n(138),
                a = n(9),
                s = n(139).isString;
            t.prototype = new o, t.prototype.type = "SymbolNode", t.prototype._compile = function (e) {
                return e.undef = i, e.Unit = a, '(scope["' + this.name + '"] !== undefined ? scope["' + this.name + '"] : math["' + this.name + '"] !== undefined ? math["' + this.name + '"] : ' + (a.isValuelessUnit(this.name) ? 'new Unit(null, "' + this.name + '")' : 'undef("' + this.name + '")') + ")"
            }, t.prototype.toString = function () {
                return this.name
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r, n) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                this.ops = e, this.fn = r, this.params = n
            }
            var i = n(131);
            t.prototype = new i, t.prototype.type = "TernaryNode", t.prototype.toString = function () {
                return this.params[0] + " " + this.ops[0] + " " + this.params[1] + " " + this.ops[1] + " " + this.params[2]
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (!(e instanceof i)) throw new TypeError('Node expected for parameter "value"');
                if (!o(r)) throw new TypeError('String expected for parameter "unit"');
                this.value = e, this.unit = r
            }
            var i = n(138),
                o = (n(9), n(139).isString);
            t.prototype = new i, t.prototype.type = "UnitNode", t.prototype._compile = function (e) {
                return "math.unit(" + this.value._compile(e) + ', "' + this.unit + '")'
            }, t.prototype.find = function (e) {
                var r = [];
                return this.match(e) && r.push(this), r = r.concat(this.value.find(e))
            }, t.prototype.toString = function () {
                return this.value + " " + this.unit
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, r) {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator");
                if (!(e instanceof o)) throw new TypeError('Expected IndexNode for parameter "index"');
                if (!(r instanceof i)) throw new TypeError('Expected Node for parameter "expr"');
                this.index = e, this.expr = r
            }
            var i = n(138),
                o = n(130);
            t.prototype = new i, t.prototype.type = "UpdateNode", t.prototype._compile = function (e) {
                return 'scope["' + this.index.objectName() + '"] = ' + this.index.compileSubset(e, this.expr._compile(e))
            }, t.prototype.find = function (e) {
                var r = [];
                return this.match(e) && r.push(this), r = r.concat(this.index.find(e)), r = r.concat(this.expr.find(e))
            }, t.prototype.toString = function () {
                return this.index.toString() + " = " + this.expr.toString()
            }, e.exports = t
        },
        function (e, r, n) {
            function t() {
                if (!(this instanceof t)) throw new SyntaxError("Constructor must be called with the new operator")
            }
            var i = n(4);
            t.prototype.eval = function () {
                throw new Error("Node.eval is deprecated. Use Node.compile(math).eval([scope]) instead.")
            }, t.prototype.type = "Node", t.prototype.compile = function (e) {
                if ("object" != typeof e) throw new TypeError("Object expected for parameter math");
                var r = {
                        math: e,
                        error: i
                    },
                    n = this._compile(r),
                    t = Object.keys(r).map(function (e) {
                        return "    var " + e + ' = defs["' + e + '"];'
                    }),
                    o = t.join(" ") + 'return {  "eval": function (scope) {    try {      scope = scope || {};      return ' + n + ";    } catch (err) {      if (err instanceof defs.error.IndexError) {        err = new defs.error.IndexError(err.index + 1, err.min + 1, err.max + 1);      }      throw err;    }  }};",
                    a = new Function("defs", o);
                return a(r)
            }, t.prototype._compile = function () {
                throw new Error("Cannot compile a Node interface")
            }, t.prototype.find = function (e) {
                return this.match(e) ? [this] : []
            }, t.prototype.match = function (e) {
                var r = !0;
                if (e) {
                    !e.type || this instanceof e.type || (r = !1);
                    var n = e.properties;
                    if (r && n)
                        for (var t in n)
                            if (n.hasOwnProperty(t) && this[t] !== n[t]) {
                                r = !1;
                                break
                            }
                }
                return r
            }, t.prototype.toString = function () {
                return ""
            }, t.isNode = function (e) {
                return e instanceof t
            }, e.exports = t
        },
        function (e, r, n) {
            function t(e, n) {
                if (Array.isArray(e)) {
                    for (var i = "[", o = e.length, a = 0; o > a; a++) 0 != a && (i += ", "), i += t(e[a], n);
                    return i += "]"
                }
                return r.format(e, n)
            }
            var i = n(155),
                o = n(259),
                a = n(119);
            r.isString = function (e) {
                return e instanceof String || "string" == typeof e
            }, r.endsWith = function (e, r) {
                var n = e.length - r.length,
                    t = e.length;
                return e.substring(n, t) === r
            }, r.format = function (e, n) {
                return i.isNumber(e) ? i.format(e, n) : e instanceof a ? o.format(e, n) : Array.isArray(e) ? t(e, n) : r.isString(e) ? '"' + e + '"' : "function" == typeof e ? e.syntax ? e.syntax + "" : "function" : e instanceof Object ? "function" == typeof e.format ? e.format(n) : e.toString() : String(e)
            }
        },
        function (e) {
            e.exports = {
                name: "e",
                category: "Constants",
                syntax: ["e"],
                description: "Euler's number, the base of the natural logarithm. Approximately equal to 2.71828",
                examples: ["e", "e ^ 2", "exp(2)", "log(e)"],
                seealso: ["exp"]
            }
        },
        function (e) {
            e.exports = {
                name: "false",
                category: "Constants",
                syntax: ["false"],
                description: "Boolean value false",
                examples: ["false"],
                seealso: ["true"]
            }
        },
        function (e) {
            e.exports = {
                name: "i",
                category: "Constants",
                syntax: ["i"],
                description: "Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.",
                examples: ["i", "i * i", "sqrt(-1)"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "Infinity",
                category: "Constants",
                syntax: ["Infinity"],
                description: "Infinity, a number which is larger than the maximum number that can be handled by a floating point number.",
                examples: ["Infinity", "1 / 0"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "LN2",
                category: "Constants",
                syntax: ["LN2"],
                description: "Returns the natural logarithm of 2, approximately equal to 0.693",
                examples: ["LN2", "log(2)"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "LN10",
                category: "Constants",
                syntax: ["LN10"],
                description: "Returns the natural logarithm of 10, approximately equal to 2.302",
                examples: ["LN10", "log(10)"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "LOG2E",
                category: "Constants",
                syntax: ["LOG2E"],
                description: "Returns the base-2 logarithm of E, approximately equal to 1.442",
                examples: ["LOG2E", "log(e, 2)"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "LOG10E",
                category: "Constants",
                syntax: ["LOG10E"],
                description: "Returns the base-10 logarithm of E, approximately equal to 0.434",
                examples: ["LOG10E", "log(e, 10)"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "NaN",
                category: "Constants",
                syntax: ["NaN"],
                description: "Not a number",
                examples: ["NaN", "0 / 0"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "pi",
                category: "Constants",
                syntax: ["pi"],
                description: "The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159",
                examples: ["pi", "sin(pi/2)"],
                seealso: ["tau"]
            }
        },
        function (e) {
            e.exports = {
                name: "SQRT1_2",
                category: "Constants",
                syntax: ["SQRT1_2"],
                description: "Returns the square root of 1/2, approximately equal to 0.707",
                examples: ["SQRT1_2", "sqrt(1/2)"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "SQRT2",
                category: "Constants",
                syntax: ["SQRT2"],
                description: "Returns the square root of 2, approximately equal to 1.414",
                examples: ["SQRT2", "sqrt(2)"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "tau",
                category: "Constants",
                syntax: ["pi"],
                description: "Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.",
                examples: ["tau", "2 * pi"],
                seealso: ["pi"]
            }
        },
        function (e) {
            e.exports = {
                name: "true",
                category: "Constants",
                syntax: ["true"],
                description: "Boolean value true",
                examples: ["true"],
                seealso: ["false"]
            }
        },
        function (e, r, n) {
            function t(e) {
                for (var r = []; l(e);) r.push(e.length), e = e[0];
                return r
            }

            function i(e, r, n) {
                var t, o = e.length;
                if (o != r[n]) throw new f(o, r[n]);
                if (n < r.length - 1) {
                    var a = n + 1;
                    for (t = 0; o > t; t++) {
                        var s = e[t];
                        if (!l(s)) throw new f(r.length - 1, r.length, "<");
                        i(e[t], r, a)
                    }
                } else
                    for (t = 0; o > t; t++)
                        if (l(e[t])) throw new f(r.length + 1, r.length, ">")
            }

            function o(e, r, n, t) {
                if (!l(e)) throw Error("Array expected");
                var i, a, s = e.length,
                    f = r[n],
                    c = Math.min(s, f);
                if (e.length = f, n < r.length - 1) {
                    var p = n + 1;
                    for (i = 0; c > i; i++) a = e[i], o(a, r, p, t);
                    for (i = c; f > i; i++) a = [], e[i] = a, o(a, r, p, t)
                } else if (void 0 !== t)
                    for (i = s; f > i; i++) e[i] = u.clone(t)
            }
            var a = n(155),
                s = n(139),
                u = n(3),
                f = (n(157), n(122)),
                c = n(123),
                l = Array.isArray;
            r.size = function (e) {
                var n = t(e);
                return r.validate(e, n), n
            }, r.validate = function (e, r) {
                var n = 0 == r.length;
                if (n) {
                    if (l(e)) throw new f(e.length, 0)
                } else i(e, r, 0)
            }, r.validateIndex = function (e, r) {
                if (!a.isNumber(e) || !a.isInteger(e)) throw new TypeError("Index must be an integer (value: " + e + ")");
                if (0 > e) throw new c(e);
                if (void 0 !== r && e >= r) throw new c(e, r)
            }, r.resize = function (e, r, n) {
                if (!l(e) || !l(r)) throw new TypeError("Array expected");
                if (0 === r.length) throw new Error("Resizing to scalar is not supported");
                r.forEach(function (e) {
                    if (!a.isNumber(e) || !a.isInteger(e) || 0 > e) throw new TypeError("Invalid size, must contain positive integers (size: " + s.format(r) + ")")
                });
                for (var t = 1, i = e[0]; l(i);) t++, i = i[0];
                for (; t < r.length;) e = [e], t++;
                for (; t > r.length;) e = e[0], t--;
                return o(e, r, 0, n), e
            }, r.squeeze = function (e) {
                for (; l(e) && 1 === e.length;) e = e[0];
                return e
            }, r.unsqueeze = function (e, n) {
                for (var t = r.size(e), i = 0, o = n - t.length; o > i; i++) e = [e];
                return e
            }, r.flatten = function (e) {
                for (var r = e, n = Array.isArray; n(r[0]);) {
                    for (var t = [], i = 0, o = r.length; o > i; i++) t = t.concat.apply(t, r[i]);
                    r = t
                }
                return r
            }, r.isArray = l
        },
        function (e, r) {
            r.isNumber = function (e) {
                return e instanceof Number || "number" == typeof e
            }, r.isInteger = function (e) {
                return e == Math.round(e)
            }, r.sign = function (e) {
                return e > 0 ? 1 : 0 > e ? -1 : 0
            }, r.format = function (e, n) {
                if ("function" == typeof n) return n(e);
                if (1 / 0 === e) return "Infinity";
                if (e === -1 / 0) return "-Infinity";
                if (isNaN(e)) return "NaN";
                var t = "auto",
                    i = void 0;
                switch (void 0 !== n && (n.notation && (t = n.notation), r.isNumber(n) ? i = n : n.precision && (i = n.precision)), t) {
                case "fixed":
                    return r.toFixed(e, i);
                case "exponential":
                    return r.toExponential(e, i);
                case "auto":
                    var o = .001,
                        a = 1e5;
                    if (n && n.exponential && (void 0 !== n.exponential.lower && (o = n.exponential.lower), void 0 !== n.exponential.upper && (a = n.exponential.upper)), 0 === e) return "0";
                    var s, u = Math.abs(e);
                    if (u >= o && a > u) {
                        var f = i ? e.toPrecision(Math.min(i, 21)) : e.toPrecision();
                        s = parseFloat(f) + ""
                    } else s = r.toExponential(e, i);
                    return s.replace(/((\.\d*?)(0+))($|e)/, function () {
                        var e = arguments[2],
                            r = arguments[4];
                        return "." !== e ? e + r : r
                    });
                default:
                    throw new Error('Unknown notation "' + t + '". Choose "auto", "exponential", or "fixed".')
                }
            }, r.toExponential = function (e, r) {
                return void 0 !== r ? e.toExponential(Math.min(r - 1, 20)) : e.toExponential()
            }, r.toFixed = function (e, r) {
                return e.toFixed(Math.min(r, 20))
            }, r.digits = function (e) {
                return e.toExponential().replace(/e.*$/, "").replace(/^0\.?0*|\./, "").length
            }, r.DBL_EPSILON = Number.EPSILON || 2.220446049250313e-16, r.nearlyEqual = function (e, n, t) {
                if (null == t) return e == n;
                if (e == n) return !0;
                if (isNaN(e) || isNaN(n)) return !1;
                if (isFinite(e) && isFinite(n)) {
                    var i = Math.abs(e - n);
                    return i < r.DBL_EPSILON ? !0 : i <= Math.max(Math.abs(e), Math.abs(n)) * t
                }
                return !1
            }
        },
        function (e, r, n) {
            function t(e) {
                return n(i(e))
            }

            function i(e) {
                return o[e] || function () {
                    throw new Error("Cannot find module '" + e + "'.")
                }()
            }
            var o = {
                "./clone": 111,
                "./clone.js": 111,
                "./forEach": 118,
                "./forEach.js": 118,
                "./format": 112,
                "./format.js": 112,
                "./ifElse": 113,
                "./ifElse.js": 113,
                "./import": 114,
                "./import.js": 114,
                "./map": 115,
                "./map.js": 115,
                "./print": 116,
                "./print.js": 116,
                "./typeof": 117,
                "./typeof.js": 117
            };
            t.keys = function () {
                return Object.keys(o)
            }, t.resolve = i, e.exports = t
        },
        function (e, r) {
            r.type = function n(e) {
                var n = typeof e;
                if ("object" === n) {
                    if (null === e) return "null";
                    if (e instanceof Boolean) return "boolean";
                    if (e instanceof Number) return "number";
                    if (e instanceof String) return "string";
                    if (Array.isArray(e)) return "array";
                    if (e instanceof Date) return "date"
                }
                return n
            }
        },
        function (e) {
            e.exports = {
                name: "abs",
                category: "Arithmetic",
                syntax: ["abs(x)"],
                description: "Compute the absolute value.",
                examples: ["abs(3.5)", "abs(-4.2)"],
                seealso: ["sign"]
            }
        },
        function (e) {
            e.exports = {
                name: "add",
                category: "Operators",
                syntax: ["x + y", "add(x, y)"],
                description: "Add two values.",
                examples: ["2.1 + 3.6", "ans - 3.6", "3 + 2i", '"hello" + " world"', "3 cm + 2 inch"],
                seealso: ["subtract"]
            }
        },
        function (e) {
            e.exports = {
                name: "ceil",
                category: "Arithmetic",
                syntax: ["ceil(x)"],
                description: "Round a value towards plus infinity.If x is complex, both real and imaginary part are rounded towards plus infinity.",
                examples: ["ceil(3.2)", "ceil(3.8)", "ceil(-4.2)"],
                seealso: ["floor", "fix", "round"]
            }
        },
        function (e) {
            e.exports = {
                name: "compare",
                category: "Operators",
                syntax: ["compare(x, y)"],
                description: "Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.",
                examples: ["compare(2, 3)", "compare(3, 2)", "compare(2, 2)", "compare(5cm, 40mm)", "compare(2, [1, 2, 3])"],
                seealso: ["equal", "unequal", "smaller", "smallereq", "largereq"]
            }
        },
        function (e) {
            e.exports = {
                name: "cube",
                category: "Arithmetic",
                syntax: ["cube(x)"],
                description: "Compute the cube of a value. The cube of x is x * x * x.",
                examples: ["cube(2)", "2^3", "2 * 2 * 2"],
                seealso: ["multiply", "square", "pow"]
            }
        },
        function (e) {
            e.exports = {
                name: "divide",
                category: "Operators",
                syntax: ["x / y", "divide(x, y)"],
                description: "Divide two values.",
                examples: ["2 / 3", "ans * 3", "4.5 / 2", "3 + 4 / 2", "(3 + 4) / 2", "18 km / 4.5"],
                seealso: ["multiply"]
            }
        },
        function (e) {
            e.exports = {
                name: "edivide",
                category: "Operators",
                syntax: ["x ./ y", "edivide(x, y)"],
                description: "divide two values element wise.",
                examples: ["a = [1, 2, 3; 4, 5, 6]", "b = [2, 1, 1; 3, 2, 5]", "a ./ b"],
                seealso: ["multiply", "emultiply", "divide"]
            }
        },
        function (e) {
            e.exports = {
                name: "emultiply",
                category: "Operators",
                syntax: ["x .* y", "emultiply(x, y)"],
                description: "multiply two values element wise.",
                examples: ["a = [1, 2, 3; 4, 5, 6]", "b = [2, 1, 1; 3, 2, 5]", "a .* b"],
                seealso: ["multiply", "divide", "edivide"]
            }
        },
        function (e) {
            e.exports = {
                name: "epow",
                category: "Operators",
                syntax: ["x .^ y", "epow(x, y)"],
                description: "Calculates the power of x to y element wise.",
                examples: ["a = [1, 2, 3; 4, 5, 6]", "a .^ 2"],
                seealso: ["pow"]
            }
        },
        function (e) {
            e.exports = {
                name: "equal",
                category: "Operators",
                syntax: ["x == y", "equal(x, y)"],
                description: "Check equality of two values. Returns true if the values are equal, and false if not.",
                examples: ["2+2 == 3", "2+2 == 4", "a = 3.2", "b = 6-2.8", "a == b", "50cm == 0.5m"],
                seealso: ["unequal", "smaller", "larger", "smallereq", "largereq", "compare"]
            }
        },
        function (e) {
            e.exports = {
                name: "exp",
                category: "Arithmetic",
                syntax: ["exp(x)"],
                description: "Calculate the exponent of a value.",
                examples: ["exp(1.3)", "e ^ 1.3", "log(exp(1.3))", "x = 2.4", "(exp(i*x) == cos(x) + i*sin(x))   # Euler's formula"],
                seealso: ["square", "multiply", "log"]
            }
        },
        function (e) {
            e.exports = {
                name: "fix",
                category: "Arithmetic",
                syntax: ["fix(x)"],
                description: "Round a value towards zero.If x is complex, both real and imaginary part are rounded towards zero.",
                examples: ["fix(3.2)", "fix(3.8)", "fix(-4.2)", "fix(-4.8)"],
                seealso: ["ceil", "floor", "round"]
            }
        },
        function (e) {
            e.exports = {
                name: "floor",
                category: "Arithmetic",
                syntax: ["floor(x)"],
                description: "Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.",
                examples: ["floor(3.2)", "floor(3.8)", "floor(-4.2)"],
                seealso: ["ceil", "fix", "round"]
            }
        },
        function (e) {
            e.exports = {
                name: "gcd",
                category: "Arithmetic",
                syntax: ["gcd(a, b)", "gcd(a, b, c, ...)"],
                description: "Compute the greatest common divisor.",
                examples: ["gcd(8, 12)", "gcd(-4, 6)", "gcd(25, 15, -10)"],
                seealso: ["lcm", "xgcd"]
            }
        },
        function (e) {
            e.exports = {
                name: "larger",
                category: "Operators",
                syntax: ["x > y", "larger(x, y)"],
                description: "Check if value x is larger than y. Returns true if x is larger than y, and false if not.",
                examples: ["2 > 3", "5 > 2*2", "a = 3.3", "b = 6-2.8", "(a > b)", "(b < a)", "5 cm > 2 inch"],
                seealso: ["equal", "unequal", "smaller", "smallereq", "largereq", "compare"]
            }
        },
        function (e) {
            e.exports = {
                name: "largereq",
                category: "Operators",
                syntax: ["x >= y", "largereq(x, y)"],
                description: "Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.",
                examples: ["2 > 1+1", "2 >= 1+1", "a = 3.2", "b = 6-2.8", "(a > b)"],
                seealso: ["equal", "unequal", "smallereq", "smaller", "largereq", "compare"]
            }
        },
        function (e) {
            e.exports = {
                name: "lcm",
                category: "Arithmetic",
                syntax: ["lcm(x, y)"],
                description: "Compute the least common multiple.",
                examples: ["lcm(4, 6)", "lcm(6, 21)", "lcm(6, 21, 5)"],
                seealso: ["gcd"]
            }
        },
        function (e) {
            e.exports = {
                name: "log",
                category: "Arithmetic",
                syntax: ["log(x)", "log(x, base)"],
                description: "Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).",
                examples: ["log(3.5)", "a = log(2.4)", "exp(a)", "10 ^ 3", "log(1000, 10)", "log(1000) / log(10)", "b = logb(1024, 2)", "2 ^ b"],
                seealso: ["exp", "log10"]
            }
        },
        function (e) {
            e.exports = {
                name: "log10",
                category: "Arithmetic",
                syntax: ["log10(x)"],
                description: "Compute the 10-base logarithm of a value.",
                examples: ["log10(1000)", "10 ^ 3", "log10(0.01)", "log(1000) / log(10)", "log(1000, 10)"],
                seealso: ["exp", "log"]
            }
        },
        function (e) {
            e.exports = {
                name: "mod",
                category: "Operators",
                syntax: ["x % y", "x mod y", "mod(x, y)"],
                description: "Calculates the modulus, the remainder of an integer division.",
                examples: ["7 % 3", "11 % 2", "10 mod 4", "function isOdd(x) = x % 2", "isOdd(2)", "isOdd(3)"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "multiply",
                category: "Operators",
                syntax: ["x * y", "multiply(x, y)"],
                description: "multiply two values.",
                examples: ["2.1 * 3.6", "ans / 3.6", "2 * 3 + 4", "2 * (3 + 4)", "3 * 2.1 km"],
                seealso: ["divide"]
            }
        },
        function (e) {
            e.exports = {
                name: "norm",
                category: "Arithmetic",
                syntax: ["norm(x)", "norm(x, p)"],
                description: "Calculate the norm of a number, vector or matrix.",
                examples: ["norm([[1, 2], [3, 4]])", "norm([[1, 2, 3, 4]], 3.5)", "norm(-4.2)", "norm([[1, 2], [-3, -4]], 'fro')"]
            }
        },
        function (e) {
            e.exports = {
                name: "pow",
                category: "Operators",
                syntax: ["x ^ y", "pow(x, y)"],
                description: "Calculates the power of x to y, x^y.",
                examples: ["2^3 = 8", "2*2*2", "1 + e ^ (pi * i)"],
                seealso: ["unequal", "smaller", "larger", "smallereq", "largereq"]
            }
        },
        function (e) {
            e.exports = {
                name: "round",
                category: "Arithmetic",
                syntax: ["round(x)", "round(x, n)"],
                description: "round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.",
                examples: ["round(3.2)", "round(3.8)", "round(-4.2)", "round(-4.8)", "round(pi, 3)", "round(123.45678, 2)"],
                seealso: ["ceil", "floor", "fix"]
            }
        },
        function (e) {
            e.exports = {
                name: "sign",
                category: "Arithmetic",
                syntax: ["sign(x)"],
                description: "Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.",
                examples: ["sign(3.5)", "sign(-4.2)", "sign(0)"],
                seealso: ["abs"]
            }
        },
        function (e) {
            e.exports = {
                name: "smaller",
                category: "Operators",
                syntax: ["x < y", "smaller(x, y)"],
                description: "Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.",
                examples: ["2 < 3", "5 < 2*2", "a = 3.3", "b = 6-2.8", "(a < b)", "5 cm < 2 inch"],
                seealso: ["equal", "unequal", "larger", "smallereq", "largereq", "compare"]
            }
        },
        function (e) {
            e.exports = {
                name: "smallereq",
                category: "Operators",
                syntax: ["x <= y", "smallereq(x, y)"],
                description: "Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.",
                examples: ["2 < 1+1", "2 <= 1+1", "a = 3.2", "b = 6-2.8", "(a < b)"],
                seealso: ["equal", "unequal", "larger", "smaller", "largereq", "compare"]
            }
        },
        function (e) {
            e.exports = {
                name: "sqrt",
                category: "Arithmetic",
                syntax: ["sqrt(x)"],
                description: "Compute the square root value. If x = y * y, then y is the square root of x.",
                examples: ["sqrt(25)", "5 * 5", "sqrt(-1)"],
                seealso: ["square", "multiply"]
            }
        },
        function (e) {
            e.exports = {
                name: "square",
                category: "Arithmetic",
                syntax: ["square(x)"],
                description: "Compute the square of a value. The square of x is x * x.",
                examples: ["square(3)", "sqrt(9)", "3^2", "3 * 3"],
                seealso: ["multiply", "pow", "sqrt", "cube"]
            }
        },
        function (e) {
            e.exports = {
                name: "subtract",
                category: "Operators",
                syntax: ["x - y", "subtract(x, y)"],
                description: "subtract two values.",
                examples: ["5.3 - 2", "ans + 2", "2/3 - 1/6", "2 * 3 - 3", "2.1 km - 500m"],
                seealso: ["add"]
            }
        },
        function (e) {
            e.exports = {
                name: "unary",
                category: "Operators",
                syntax: ["-x", "unary(x)"],
                description: "Inverse the sign of a value.",
                examples: ["-4.5", "-(-5.6)"],
                seealso: ["add", "subtract"]
            }
        },
        function (e) {
            e.exports = {
                name: "unequal",
                category: "Operators",
                syntax: ["x != y", "unequal(x, y)"],
                description: "Check unequality of two values. Returns true if the values are unequal, and false if they are equal.",
                examples: ["2+2 != 3", "2+2 != 4", "a = 3.2", "b = 6-2.8", "a != b", "50cm != 0.5m", "5 cm != 2 inch"],
                seealso: ["equal", "smaller", "larger", "smallereq", "largereq", "compare"]
            }
        },
        function (e) {
            e.exports = {
                name: "xgcd",
                category: "Arithmetic",
                syntax: ["xgcd(a, b)"],
                description: "Calculate the extended greatest common divisor for two values",
                examples: ["xgcd(8, 12)", "gcd(8, 12)", "xgcd(36163, 21199)"],
                seealso: ["gcd", "lcm"]
            }
        },
        function (e) {
            e.exports = {
                name: "arg",
                category: "Complex",
                syntax: ["arg(x)"],
                description: "Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).",
                examples: ["arg(2 + 2i)", "atan2(3, 2)", "arg(2 - 3i)"],
                seealso: ["re", "im", "conj", "abs"]
            }
        },
        function (e) {
            e.exports = {
                name: "conj",
                category: "Complex",
                syntax: ["conj(x)"],
                description: "Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.",
                examples: ["conj(2 + 3i)", "conj(2 - 3i)", "conj(-5.2i)"],
                seealso: ["re", "im", "abs", "arg"]
            }
        },
        function (e) {
            e.exports = {
                name: "re",
                category: "Complex",
                syntax: ["re(x)"],
                description: "Get the real part of a complex number.",
                examples: ["re(2 + 3i)", "im(2 + 3i)", "re(-5.2i)", "re(2.4)"],
                seealso: ["im", "conj", "abs", "arg"]
            }
        },
        function (e) {
            e.exports = {
                name: "im",
                category: "Complex",
                syntax: ["im(x)"],
                description: "Get the imaginary part of a complex number.",
                examples: ["im(2 + 3i)", "re(2 + 3i)", "im(-5.2i)", "im(2.4)"],
                seealso: ["re", "conj", "abs", "arg"]
            }
        },
        function (e) {
            e.exports = {
                name: "bignumber",
                category: "Type",
                syntax: ["bignumber(x)"],
                description: "Create a big number from a number or string.",
                examples: ["0.1 + 0.2", "bignumber(0.1) + bignumber(0.2)", 'bignumber("7.2")', 'bignumber("7.2e500")', "bignumber([0.1, 0.2, 0.3])"],
                seealso: ["boolean", "complex", "index", "matrix", "string", "unit"]
            }
        },
        function (e) {
            e.exports = {
                name: "boolean",
                category: "Type",
                syntax: ["x", "boolean(x)"],
                description: "Convert a string or number into a boolean.",
                examples: ["boolean(0)", "boolean(1)", "boolean(3)", 'boolean("true")', 'boolean("false")', "boolean([1, 0, 1, 1])"],
                seealso: ["bignumber", "complex", "index", "matrix", "number", "string", "unit"]
            }
        },
        function (e) {
            e.exports = {
                name: "complex",
                category: "Type",
                syntax: ["complex()", "complex(re, im)", "complex(string)"],
                description: "Create a complex number.",
                examples: ["complex()", "complex(2, 3)", 'complex("7 - 2i")'],
                seealso: ["bignumber", "boolean", "index", "matrix", "number", "string", "unit"]
            }
        },
        function (e) {
            e.exports = {
                name: "index",
                category: "Type",
                syntax: ["[start]", "[start:end]", "[start:step:end]", "[start1, start 2, ...]", "[start1:end1, start2:end2, ...]", "[start1:step1:end1, start2:step2:end2, ...]"],
                description: "Create an index to get or replace a subset of a matrix",
                examples: ["[]", "[1, 2, 3]", "A = [1, 2, 3; 4, 5, 6]", "A[1, :]", "A[1, 2] = 50", "A[0:2, 0:2] = ones(2, 2)"],
                seealso: ["bignumber", "boolean", "complex", "matrix,", "number", "range", "string", "unit"]
            }
        },
        function (e) {
            e.exports = {
                name: "matrix",
                category: "Type",
                syntax: ["[]", "[a1, b1, ...; a2, b2, ...]", "matrix()", "matrix([...])"],
                description: "Create a matrix.",
                examples: ["[]", "[1, 2, 3]", "[1, 2, 3; 4, 5, 6]", "matrix()", "matrix([3, 4])"],
                seealso: ["bignumber", "boolean", "complex", "index", "number", "string", "unit"]
            }
        },
        function (e) {
            e.exports = {
                name: "number",
                category: "Type",
                syntax: ["x", "number(x)"],
                description: "Create a number or convert a string or boolean into a number.",
                examples: ["2", "2e3", "4.05", "number(2)", 'number("7.2")', "number(true)", "number([true, false, true, true])"],
                seealso: ["bignumber", "boolean", "complex", "index", "matrix", "string", "unit"]
            }
        },
        function (e) {
            e.exports = {
                name: "string",
                category: "Type",
                syntax: ['"text"', "string(x)"],
                description: "Create a string or convert a value to a string",
                examples: ['"Hello World!"', "string(4.2)", "string(3 + 2i)"],
                seealso: ["bignumber", "boolean", "complex", "index", "matrix", "number", "unit"]
            }
        },
        function (e) {
            e.exports = {
                name: "unit",
                category: "Type",
                syntax: ["value unit", "unit(value, unit)", "unit(string)"],
                description: "Create a unit.",
                examples: ["5.5 mm", "3 inch", 'unit(7.1, "kilogram")', 'unit("23 deg")'],
                seealso: ["bignumber", "boolean", "complex", "index", "matrix", "number", "string"]
            }
        },
        function (e) {
            e.exports = {
                name: "eval",
                category: "Expression",
                syntax: ["eval(expression)", "eval([expr1, expr2, expr3, ...])"],
                description: "Evaluate an expression or an array with expressions.",
                examples: ['eval("2 + 3")', 'eval("sqrt(" + 4 + ")")'],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "help",
                category: "Expression",
                syntax: ["help(object)", "help(string)"],
                description: "Display documentation on a function or data type.",
                examples: ["help(sqrt)", 'help("complex")'],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "concat",
                category: "Matrix",
                syntax: ["concat(a, b, c, ...)", "concat(a, b, c, ..., dim)"],
                description: "Concatenate matrices. By default, the matrices are concatenated by the first dimension. The dimension on which to concatenate can be provided as last argument.",
                examples: ["a = [1, 2; 5, 6]", "b = [3, 4; 7, 8]", "concat(a, b)", "[a, b]", "concat(a, b, 2)", "[a; b]"],
                seealso: ["det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "det",
                category: "Matrix",
                syntax: ["det(x)"],
                description: "Calculate the determinant of a matrix",
                examples: ["det([1, 2; 3, 4])", "det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"],
                seealso: ["concat", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "diag",
                category: "Matrix",
                syntax: ["diag(x)", "diag(x, k)"],
                description: "Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned.When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.",
                examples: ["diag(1:3)", "diag(1:3, 1)", "a = [1, 2, 3; 4, 5, 6; 7, 8, 9]", "diag(a)"],
                seealso: ["concat", "det", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "eye",
                category: "Matrix",
                syntax: ["eye(n)", "eye(m, n)", "eye([m, n])", "eye"],
                description: "Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.",
                examples: ["eye(3)", "eye(3, 5)", "a = [1, 2, 3; 4, 5, 6]", "eye(size(a))"],
                seealso: ["concat", "det", "diag", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "inv",
                category: "Matrix",
                syntax: ["inv(x)"],
                description: "Calculate the inverse of a matrix",
                examples: ["inv([1, 2; 3, 4])", "inv(4)", "1 / 4"],
                seealso: ["concat", "det", "diag", "eye", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "ones",
                category: "Matrix",
                syntax: ["ones(m)", "ones(m, n)", "ones(m, n, p, ...)", "ones([m])", "ones([m, n])", "ones([m, n, p, ...])", "ones"],
                description: "Create a matrix containing ones.",
                examples: ["ones(3)", "ones(3, 5)", "ones([2,3]) * 4.5", "a = [1, 2, 3; 4, 5, 6]", "ones(size(a))"],
                seealso: ["concat", "det", "diag", "eye", "inv", "range", "size", "squeeze", "subset", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "range",
                category: "Type",
                syntax: ["start:end", "start:step:end", "range(start, end)", "range(start, end, step)", "range(string)"],
                description: "Create a range. Lower bound of the range is included, upper bound is excluded.",
                examples: ["1:5", "3:-1:-3", "range(3, 7)", "range(0, 12, 2)", 'range("4:10")', "a = [1, 2, 3, 4; 5, 6, 7, 8]", "a[1:2, 1:2]"],
                seealso: ["concat", "det", "diag", "eye", "inv", "ones", "size", "squeeze", "subset", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "resize",
                category: "Matrix",
                syntax: ["resize(x, size)", "resize(x, size, defaultValue)"],
                description: "Resize a matrix.",
                examples: ["resize([1,2,3,4,5], [3])", "resize([1,2,3], [5], 0)", "resize(2, [2, 3], 0)", 'resize("hello", [8], "!")'],
                seealso: ["size", "subset", "squeeze"]
            }
        },
        function (e) {
            e.exports = {
                name: "size",
                category: "Matrix",
                syntax: ["size(x)"],
                description: "Calculate the size of a matrix.",
                examples: ["size(2.3)", 'size("hello world")', "a = [1, 2; 3, 4; 5, 6]", "size(a)", "size(1:6)"],
                seealso: ["concat", "det", "diag", "eye", "inv", "ones", "range", "squeeze", "subset", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "squeeze",
                category: "Matrix",
                syntax: ["squeeze(x)"],
                description: "Remove singleton dimensions from a matrix.",
                examples: ["a = zeros(1,3,2)", "size(squeeze(a))", "b = zeros(3,1,1)", "size(squeeze(b))"],
                seealso: ["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "subset", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "subset",
                category: "Matrix",
                syntax: ["value(index)", "value(index) = replacement", "subset(value, [index])", "subset(value, [index], replacement)"],
                description: "Get or set a subset of a matrix or string. Indexes are one-based. Both the ranges lower-bound and upper-bound are included.",
                examples: ["d = [1, 2; 3, 4]", "e = []", "e[1, 1:2] = [5, 6]", "e[2, :] = [7, 8]", "f = d * e", "f[2, 1]", "f[:, 1]"],
                seealso: ["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "transpose", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "transpose",
                category: "Matrix",
                syntax: ["x'", "transpose(x)"],
                description: "Transpose a matrix",
                examples: ["a = [1, 2, 3; 4, 5, 6]", "a'", "transpose(a)"],
                seealso: ["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "zeros"]
            }
        },
        function (e) {
            e.exports = {
                name: "zeros",
                category: "Matrix",
                syntax: ["zeros(m)", "zeros(m, n)", "zeros(m, n, p, ...)", "zeros([m])", "zeros([m, n])", "zeros([m, n, p, ...])", "zeros"],
                description: "Create a matrix containing zeros.",
                examples: ["zeros(3)", "zeros(3, 5)", "a = [1, 2, 3; 4, 5, 6]", "zeros(size(a))"],
                seealso: ["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose"]
            }
        },
        function (e) {
            e.exports = {
                name: "combinations",
                category: "Probability",
                syntax: ["combinations(n, k)"],
                description: "Compute the number of combinations of n items taken k at a time",
                examples: ["combinations(7, 5)"],
                seealso: ["permutations", "factorial"]
            }
        },
        function (e) {
            e.exports = {
                name: "distribution",
                category: "Probability",
                syntax: ["distribution(name)", "distribution(name, arg1, arg2, ...)"],
                description: 'Create a distribution object of a specific type. A distribution object contains functions `random([size,] [min,] [max])`, `randomInt([size,] [min,] [max])`, and `pickRandom(array)`. Available types of distributions: "uniform", "normal". Note that the function distribution is currently not available via the expression parser.',
                examples: [],
                seealso: ["random", "randomInt"]
            }
        },
        function (e) {
            e.exports = {
                name: "factorial",
                category: "Probability",
                syntax: ["n!", "factorial(n)"],
                description: "Compute the factorial of a value",
                examples: ["5!", "5*4*3*2*1", "3!"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "permutations",
                category: "Probability",
                syntax: ["permutations(n)", "permutations(n, k)"],
                description: "Compute the number of permutations of n items taken k at a time",
                examples: ["permutations(5)", "permutations(5, 4)"],
                seealso: ["combinations", "factorial"]
            }
        },
        function (e) {
            e.exports = {
                name: "pickRandom",
                category: "Probability",
                syntax: ["pickRandom(array)"],
                description: "Pick a random entry from a given array.",
                examples: ["pickRandom(0:10)", "pickRandom([1, 3, 1, 6])"],
                seealso: ["distribution", "random", "randomInt"]
            }
        },
        function (e) {
            e.exports = {
                name: "random",
                category: "Probability",
                syntax: ["random()", "random(max)", "random(min, max)", "random(size)", "random(size, max)", "random(size, min, max)"],
                description: "Return a random number.",
                examples: ["random()", "random(10, 20)", "random([2, 3])"],
                seealso: ["distribution", "pickRandom", "randomInt"]
            }
        },
        function (e) {
            e.exports = {
                name: "randInt",
                category: "Probability",
                syntax: ["randInt()", "randInt(max)", "randInt(min, max)", "randInt(size)", "randInt(size, max)", "randInt(size, min, max)"],
                description: "Return a random integer number",
                examples: ["randInt()", "randInt(10, 20)", "randInt([2, 3], 10)"],
                seealso: ["distribution", "pickRandom", "random"]
            }
        },
        function (e) {
            e.exports = {
                name: "max",
                category: "Statistics",
                syntax: ["max(a, b, c, ...)", "max(A)", "max(A, dim)"],
                description: "Compute the maximum value of a list of values.",
                examples: ["max(2, 3, 4, 1)", "max([2, 3, 4, 1])", "max([2, 5; 4, 3], 0)", "max([2, 5; 4, 3], 1)", "max(2.7, 7.1, -4.5, 2.0, 4.1)", "min(2.7, 7.1, -4.5, 2.0, 4.1)"],
                seealso: ["mean", "median", "min", "prod", "std", "sum", "var"]
            }
        },
        function (e) {
            e.exports = {
                name: "mean",
                category: "Statistics",
                syntax: ["mean(a, b, c, ...)", "mean(A)", "mean(A, dim)"],
                description: "Compute the arithmetic mean of a list of values.",
                examples: ["mean(2, 3, 4, 1)", "mean([2, 3, 4, 1])", "mean([2, 5; 4, 3], 0)", "mean([2, 5; 4, 3], 1)", "mean([1.0, 2.7, 3.2, 4.0])"],
                seealso: ["max", "median", "min", "prod", "std", "sum", "var"]
            }
        },
        function (e) {
            e.exports = {
                name: "median",
                category: "Statistics",
                syntax: ["median(a, b, c, ...)", "median(A)"],
                description: "Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.",
                examples: ["median(4, 2, 7)", "median([3, -1, 5, 7])"],
                seealso: ["max", "mean", "min", "prod", "std", "sum", "var"]
            }
        },
        function (e) {
            e.exports = {
                name: "min",
                category: "Statistics",
                syntax: ["min(a, b, c, ...)", "min(A)", "min(A, dim)"],
                description: "Compute the minimum value of a list of values.",
                examples: ["min(2, 3, 4, 1)", "min([2, 3, 4, 1])", "min([2, 5; 4, 3], 0)", "min([2, 5; 4, 3], 1)", "min(2.7, 7.1, -4.5, 2.0, 4.1)", "max(2.7, 7.1, -4.5, 2.0, 4.1)"],
                seealso: ["max", "mean", "median", "prod", "std", "sum", "var"]
            }
        },
        function (e) {
            e.exports = {
                name: "prod",
                category: "Statistics",
                syntax: ["prod(a, b, c, ...)", "prod(A)"],
                description: "Compute the product of all values.",
                examples: ["prod(2, 3, 4)", "prod([2, 3, 4])", "prod([2, 5; 4, 3])"],
                seealso: ["max", "mean", "min", "median", "min", "std", "sum", "var"]
            }
        },
        function (e) {
            e.exports = {
                name: "std",
                category: "Statistics",
                syntax: ["std(a, b, c, ...)", "std(A)", "std(A, normalization)"],
                description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
                examples: ["std(2, 4, 6)", "std([2, 4, 6, 8])", 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', "std([1, 2, 3; 4, 5, 6])"],
                seealso: ["max", "mean", "min", "median", "min", "prod", "sum", "var"]
            }
        },
        function (e) {
            e.exports = {
                name: "sum",
                category: "Statistics",
                syntax: ["sum(a, b, c, ...)", "sum(A)"],
                description: "Compute the sum of all values.",
                examples: ["sum(2, 3, 4, 1)", "sum([2, 3, 4, 1])", "sum([2, 5; 4, 3])"],
                seealso: ["max", "mean", "median", "min", "prod", "std", "sum", "var"]
            }
        },
        function (e) {
            e.exports = {
                name: "var",
                category: "Statistics",
                syntax: ["var(a, b, c, ...)", "var(A)", "var(A, normalization)"],
                description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
                examples: ["var(2, 4, 6)", "var([2, 4, 6, 8])", 'var([2, 4, 6, 8], "uncorrected")', 'var([2, 4, 6, 8], "biased")', "var([1, 2, 3; 4, 5, 6])"],
                seealso: ["max", "mean", "min", "median", "min", "prod", "std", "sum"]
            }
        },
        function (e) {
            e.exports = {
                name: "acos",
                category: "Trigonometry",
                syntax: ["acos(x)"],
                description: "Compute the inverse cosine of a value in radians.",
                examples: ["acos(0.5)", "acos(cos(2.3))"],
                seealso: ["cos", "acos", "asin"]
            }
        },
        function (e) {
            e.exports = {
                name: "asin",
                category: "Trigonometry",
                syntax: ["asin(x)"],
                description: "Compute the inverse sine of a value in radians.",
                examples: ["asin(0.5)", "asin(sin(2.3))"],
                seealso: ["sin", "acos", "asin"]
            }
        },
        function (e) {
            e.exports = {
                name: "atan",
                category: "Trigonometry",
                syntax: ["atan(x)"],
                description: "Compute the inverse tangent of a value in radians.",
                examples: ["atan(0.5)", "atan(tan(2.3))"],
                seealso: ["tan", "acos", "asin"]
            }
        },
        function (e) {
            e.exports = {
                name: "atan2",
                category: "Trigonometry",
                syntax: ["atan2(y, x)"],
                description: "Computes the principal value of the arc tangent of y/x in radians.",
                examples: ["atan2(2, 2) / pi", "angle = 60 deg in rad", "x = cos(angle)", "y = sin(angle)", "atan2(y, x)"],
                seealso: ["sin", "cos", "tan"]
            }
        },
        function (e) {
            e.exports = {
                name: "cos",
                category: "Trigonometry",
                syntax: ["cos(x)"],
                description: "Compute the cosine of x in radians.",
                examples: ["cos(2)", "cos(pi / 4) ^ 2", "cos(180 deg)", "cos(60 deg)", "sin(0.2)^2 + cos(0.2)^2"],
                seealso: ["acos", "sin", "tan"]
            }
        },
        function (e) {
            e.exports = {
                name: "cosh",
                category: "Trigonometry",
                syntax: ["cosh(x)"],
                description: "Compute the hyperbolic cosine of x in radians.",
                examples: ["cosh(2)", "cosh(pi / 4) ^ 2", "cosh(180 deg)", "cosh(60 deg)", "sinh(0.2)^2 + cosh(0.2)^2"],
                seealso: ["sinh", "tanh", "coth"]
            }
        },
        function (e) {
            e.exports = {
                name: "cot",
                category: "Trigonometry",
                syntax: ["cot(x)"],
                description: "Compute the cotangent of x in radians. Defined as 1/tan(x)",
                examples: ["cot(2)", "1 / tan(2)"],
                seealso: ["sec", "csc", "tan"]
            }
        },
        function (e) {
            e.exports = {
                name: "coth",
                category: "Trigonometry",
                syntax: ["coth(x)"],
                description: "Compute the hyperbolic cotangent of x in radians.",
                examples: ["coth(2)"],
                seealso: ["sech", "csch", "tanh"]
            }
        },
        function (e) {
            e.exports = {
                name: "csc",
                category: "Trigonometry",
                syntax: ["csc(x)"],
                description: "Compute the cosecant of x in radians. Defined as 1/sin(x)",
                examples: ["csc(2)", "1 / sin(2)"],
                seealso: ["sec", "cot", "sin"]
            }
        },
        function (e) {
            e.exports = {
                name: "csch",
                category: "Trigonometry",
                syntax: ["csch(x)"],
                description: "Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)",
                examples: ["csch(2)", "1 / sinh(2)"],
                seealso: ["sech", "coth", "sinh"]
            }
        },
        function (e) {
            e.exports = {
                name: "sec",
                category: "Trigonometry",
                syntax: ["sec(x)"],
                description: "Compute the secant of x in radians. Defined as 1/cos(x)",
                examples: ["sec(2)", "1 / cos(2)"],
                seealso: ["cot", "csc", "cos"]
            }
        },
        function (e) {
            e.exports = {
                name: "sech",
                category: "Trigonometry",
                syntax: ["sech(x)"],
                description: "Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)",
                examples: ["sech(2)", "1 / cosh(2)"],
                seealso: ["coth", "csch", "cosh"]
            }
        },
        function (e) {
            e.exports = {
                name: "sin",
                category: "Trigonometry",
                syntax: ["sin(x)"],
                description: "Compute the sine of x in radians.",
                examples: ["sin(2)", "sin(pi / 4) ^ 2", "sin(90 deg)", "sin(30 deg)", "sin(0.2)^2 + cos(0.2)^2"],
                seealso: ["asin", "cos", "tan"]
            }
        },
        function (e) {
            e.exports = {
                name: "sinh",
                category: "Trigonometry",
                syntax: ["sinh(x)"],
                description: "Compute the hyperbolic sine of x in radians.",
                examples: ["sinh(2)", "sinh(pi / 4) ^ 2", "sinh(90 deg)", "sinh(30 deg)", "sinh(0.2)^2 + cosh(0.2)^2"],
                seealso: ["cosh", "tanh"]
            }
        },
        function (e) {
            e.exports = {
                name: "tan",
                category: "Trigonometry",
                syntax: ["tan(x)"],
                description: "Compute the tangent of x in radians.",
                examples: ["tan(0.5)", "sin(0.5) / cos(0.5)", "tan(pi / 4)", "tan(45 deg)"],
                seealso: ["atan", "sin", "cos"]
            }
        },
        function (e) {
            e.exports = {
                name: "tanh",
                category: "Trigonometry",
                syntax: ["tanh(x)"],
                description: "Compute the hyperbolic tangent of x in radians.",
                examples: ["tanh(0.5)", "sinh(0.5) / cosh(0.5)", "tanh(pi / 4)", "tanh(45 deg)"],
                seealso: ["sinh", "cosh"]
            }
        },
        function (e) {
            e.exports = {
                name: "to",
                category: "Units",
                syntax: ["x to unit", "to(x, unit)"],
                description: "Change the unit of a value.",
                examples: ["5 inch in cm", "3.2kg in g", "16 bytes in bits"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "clone",
                category: "Utils",
                syntax: ["clone(x)"],
                description: "Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices",
                examples: ["clone(3.5)", "clone(2 - 4i)", "clone(45 deg)", "clone([1, 2; 3, 4])", 'clone("hello world")'],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "map",
                category: "Utils",
                syntax: ["map(x, callback)"],
                description: "Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.",
                examples: ["map([1, 2, 3], function(val) { return math.max(val, 1.5) })"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "forEach",
                category: "Utils",
                syntax: ["forEach(x, callback)"],
                description: "Iterates over all elements of a matrix/array, and executes the given callback.",
                examples: ["forEach([1, 2, 3], function(val) { console.log(val) })"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "format",
                category: "Utils",
                syntax: ["format(value)", "format(value, precision)"],
                description: "Format a value of any type as string.",
                examples: ["format(2.3)", "format(3 - 4i)", "format([])", "format(pi, 3)"],
                seealso: ["print"]
            }
        },
        function (e) {
            e.exports = {
                name: "ifElse",
                category: "Utils",
                syntax: ["ifElse(conditional, trueExpr, falseExpr)"],
                description: "Executes a conditional expression.",
                examples: ["ifElse(10 > 0, 10, 0)", 'ifElse("", true, false)', "ifElse([4, 6, 0, -1], true, false)"],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "import",
                category: "Utils",
                syntax: ["import(string)"],
                description: "Import functions from a file.",
                examples: ['import("numbers")', 'import("./mylib.js")'],
                seealso: []
            }
        },
        function (e) {
            e.exports = {
                name: "typeof",
                category: "Utils",
                syntax: ["typeof(x)"],
                description: "Get the type of a variable.",
                examples: ["typeof(3.5)", "typeof(2 - 4i)", "typeof(45 deg)", 'typeof("hello world")'],
                seealso: []
            }
        },
        function (r) {
            r.exports = e
        },
        function (e, r) {
            r.isBoolean = function (e) {
                return e instanceof Boolean || "boolean" == typeof e
            }
        },
        function (e, r, n) {
            var t = n(119),
                i = n(155).isNumber;
            digits = n(155).digits, r.isBigNumber = function (e) {
                return e instanceof t
            }, r.format = function (e, n) {
                if ("function" == typeof n) return n(e);
                if (!e.isFinite()) return e.isNaN() ? "NaN" : e.gt(0) ? "Infinity" : "-Infinity";
                var t = "auto",
                    o = void 0;
                switch (void 0 !== n && (n.notation && (t = n.notation), i(n) ? o = n : n.precision && (o = n.precision)), t) {
                case "fixed":
                    return r.toFixed(e, o);
                case "exponential":
                    return r.toExponential(e, o);
                case "auto":
                    var a = .001,
                        s = 1e5;
                    n && n.exponential && (void 0 !== n.exponential.lower && (a = n.exponential.lower), void 0 !== n.exponential.upper && (s = n.exponential.upper)); {
                        ({
                            toExpNeg: e.constructor.toExpNeg,
                            toExpPos: e.constructor.toExpPos
                        })
                    }
                    if (e.constructor.config({
                        toExpNeg: Math.round(Math.log(a) / Math.LN10),
                        toExpPos: Math.round(Math.log(s) / Math.LN10)
                    }), e.isZero()) return "0";
                    var u, f = e.abs();
                    return u = f.gte(a) && f.lt(s) ? e.toSignificantDigits(o).toFixed() : r.toExponential(e, o), u.replace(/((\.\d*?)(0+))($|e)/, function () {
                        var e = arguments[2],
                            r = arguments[4];
                        return "." !== e ? e + r : r
                    });
                default:
                    throw new Error('Unknown notation "' + t + '". Choose "auto", "exponential", or "fixed".')
                }
            }, r.toExponential = function (e, r) {
                return void 0 !== r ? e.toExponential(r - 1) : e.toExponential()
            }, r.toFixed = function (e, r) {
                return e.toFixed(r || 0)
            }
        },
        function (e) {
            e.exports = function (e) {
                return e.webpackPolyfill || (e.deprecate = function () {}, e.paths = [], e.children = [], e.webpackPolyfill = 1), e
            }
        }
    ])
});
var FBD = {
    has_flash_blocker: false,
    callback_func: null,
    fake_embed_1: null,
    fake_embed_2: null,
    fake_embed_watcher: null,
    dom_node_inserted: function (ev) {
        var target = ev.target;
        if (target.nodeType != 1) {
            return;
        }
        if (target.nodeName.toLowerCase() != 'div') {
            return;
        }
        if (target.className == 'ujs_flashblock_placeholder') {
            FBD.has_flash_blocker = true;
            if (target.title === '') {
                target.style.position = 'absolute';
                target.style.left = '-5000px';
            }
            window.setTimeout(FBD.cleanup, 0);
        } else if (target.hasAttribute('bgactive')) {
            FBD.has_flash_blocker = true;
            if (target.title == document.location.href) {
                target.style.position = 'absolute';
                target.style.left = '-5000px';
            }
            window.setTimeout(FBD.cleanup, 0);
        } else if (target.hasAttribute('style') && target.getAttribute('style').indexOf('gofhjkjmkpinhpoiabjplobcaignabnl') != -1) {
            FBD.has_flash_blocker = true;
            target.style.position = 'absolute';
            target.style.left = '-5000px';
            window.setTimeout(FBD.cleanup, 0);
        }
    },
    check_embed_type: function () {
        if ((FBD.fake_embed_1.type == 'application/x-shockwave-flash') && (FBD.fake_embed_2.type != 'application/x-shockwave-flash')) {
            FBD.has_flash_blocker = true;
            FBD.cleanup();
        }
    },
    cleanup: function () {
        try {
            document.body.removeEventListener('DOMNodeInserted', FBD.dom_node_inserted, false);
        } catch (e) {}
        if (FBD.fake_embed_1) {
            FBD.fake_embed_1.parentNode.removeChild(FBD.fake_embed_1);
        }
        FBD.fake_embed_1 = null;
        if (FBD.fake_embed_2) {
            FBD.fake_embed_2.parentNode.removeChild(FBD.fake_embed_2);
        }
        FBD.fake_embed_2 = null;
        if (FBD.fake_embed_watcher !== null) {
            window.clearInterval(FBD.fake_embed_watcher);
            FBD.fake_embed_watcher = null;
        }
        var overlays = document.getElementsByTagName('div');
        for (var i = 0; i < overlays.length; i++) {
            var o = overlays[i];
            if ((o.hasAttribute('bgactive') && o.title == document.location.href) || (o.className == 'ujs_flashblock_placeholder' && o.title === '')) {
                o.parentNode.removeChild(o);
            }
        }
        FBD.callback_func(FBD.has_flash_blocker);
    },
    initialize: function (callback_function) {
        if (false) {
            callback_function(false);
            return;
        }
        if (window.opera) {
            callback_function(false);
            return;
        }
        FBD.callback_func = callback_function;
        document.body.addEventListener('DOMNodeInserted', FBD.dom_node_inserted, false);
        var e = document.createElement('embed');
        e.style.position = 'absolute';
        e.style.left = '-5000px';
        e.width = 10;
        e.height = 10;
        e.src = '';
        e.type = 'application/x-shockwave-flash';
        FBD.fake_embed_1 = e;
        document.body.appendChild(e);
        var e2 = document.createElement('embed');
        e2.style.position = 'absolute';
        e2.style.left = '-5000px';
        e2.width = 1;
        e2.height = 1;
        e2.src = '';
        e2.type = 'application/x-shockwave-flash';
        FBD.fake_embed_2 = e2;
        document.body.appendChild(e2);
        FBD.fake_embed_watcher = window.setInterval(FBD.check_embed_type, 100);
        window.setTimeout(FBD.cleanup, 1000);
    }
};
! function ($) {
    "use strict";
    var _render = function (obj, p, config) {
        var parent = $(p);
        var ic = 0;
        var count = 0;
        for (var key in obj) {
            if (!obj.hasOwnProperty(key)) {
                continue;
            }
            count += 1;
        }
        if (count === 0) {
            parent.slideUp();
            parent.parent().find('.fold').removeClass('fold');
        }
        for (var key in obj) {
            if (!obj.hasOwnProperty(key)) {
                continue;
            }
            ic += 1;
            var coma = '',
                lcurl = '',
                rcurl = '',
                lsqr = '',
                rsqr = '',
                quot = '"',
                colon = '';
            if (config.terminators !== false) {
                if (ic < count) {
                    coma = ',';
                }
                lcurl = '{';
                rcurl = '}';
                lsqr = '[';
                rsqr = ']';
                colon = ':';
            }
            if (obj[key] === null) {
                parent.append('<li><span class="key">' + key + ':</span><span class="null"> null </span>' + coma + '</li>');
            } else if (typeof obj[key] === 'boolean') {
                parent.append('<li><span class="key">' + key + ':</span><span class="boolean">' + obj[key] + '</span>' + coma + '</li>');
            } else if (typeof obj[key] === 'number') {
                parent.append('<li><span class="key">' + key + ':</span><span class="number">' + obj[key] + '</span>' + coma + '</li>');
            } else if (typeof obj[key] === 'string') {
                parent.append('<li><span class="key">' + key + ':</span><span class="string">' + quot + obj[key] + quot + '</span>' + coma + '</li>');
            } else if ($.isArray(obj[key])) {
                var arval = $('<li><span class="key">' + key + colon + '</span><span class="fold">' + lsqr + '</span><ul class="array"></ul><span>' + rsqr + '</span>' + coma + '</li>');
                parent.append(arval);
                arval.find('.unfold').data('card', _render(obj[key], arval.find('.array'), config));
            } else {
                var oval = $('<li><span class="key">' + key + colon + '</span><span class="fold">' + lcurl + '</span><ul class="object"></ul><span>' + rcurl + '</span>' + coma + '</li>');
                parent.append(oval);
                oval.find('.unfold').data('card', _render(obj[key], oval.find('.object'), config));
            }
        }
        return ic;
    };
    $(document).on("click", '.jsontree .fold', function (e) {
        e.preventDefault();
        $(this).addClass('folded').parent().find('ul').eq(0).slideUp();
    });
    $(document).on('click', '.jsontree .fold.folded', function (e) {
        e.preventDefault();
        $(this).removeClass('folded').parent().find('ul').eq(0).slideDown();
    });
    var JsonTree = function (self, config) {
        var j = $.parseJSON(self.data('jsontree'));
        self.append('<ul class="jsontree"></ul>');
        _render([j], self.find('.jsontree'), config);
        if (!config.collapsibleOuter) {
            self.find('.jsontree .fold').first().removeClass('fold');
            if (!config.terminators) {
                self.find('.jsontree>li>ul').css('margin-left', 0);
            }
        }
    };
    $.fn.jsontree = function (option, config) {
        return this.each(function () {
            var self = $(this),
                data = self.data('jsontree');
            if (!data) {
                if (typeof option == 'string') {
                    data = option;
                    self.data('jsontree', option);
                } else {
                    data = {};
                    self.data('jsontree', '');
                }
            }
            var cfg = $.extend({
                terminators: true,
                collapsibleOuter: true
            }, config || {});
            new JsonTree(self, cfg);
        });
    };
}(window.jQuery);
(function () {
    var n = this,
        t = n._,
        r = {},
        e = Array.prototype,
        u = Object.prototype,
        i = Function.prototype,
        a = e.push,
        o = e.slice,
        c = e.concat,
        l = u.toString,
        f = u.hasOwnProperty,
        s = e.forEach,
        p = e.map,
        h = e.reduce,
        v = e.reduceRight,
        g = e.filter,
        d = e.every,
        m = e.some,
        y = e.indexOf,
        b = e.lastIndexOf,
        x = Array.isArray,
        w = Object.keys,
        _ = i.bind,
        j = function (n) {
            return n instanceof j ? n : this instanceof j ? void(this._wrapped = n) : new j(n)
        };
    "undefined" != typeof exports ? ("undefined" != typeof module && module.exports && (exports = module.exports = j), exports._ = j) : n._ = j, j.VERSION = "1.6.0";
    var A = j.each = j.forEach = function (n, t, e) {
        if (null == n) return n;
        if (s && n.forEach === s) n.forEach(t, e);
        else if (n.length === +n.length) {
            for (var u = 0, i = n.length; i > u; u++)
                if (t.call(e, n[u], u, n) === r) return
        } else
            for (var a = j.keys(n), u = 0, i = a.length; i > u; u++)
                if (t.call(e, n[a[u]], a[u], n) === r) return; return n
    };
    j.map = j.collect = function (n, t, r) {
        var e = [];
        return null == n ? e : p && n.map === p ? n.map(t, r) : (A(n, function (n, u, i) {
            e.push(t.call(r, n, u, i))
        }), e)
    };
    var O = "Reduce of empty array with no initial value";
    j.reduce = j.foldl = j.inject = function (n, t, r, e) {
        var u = arguments.length > 2;
        if (null == n && (n = []), h && n.reduce === h) return e && (t = j.bind(t, e)), u ? n.reduce(t, r) : n.reduce(t);
        if (A(n, function (n, i, a) {
            u ? r = t.call(e, r, n, i, a) : (r = n, u = !0)
        }), !u) throw new TypeError(O);
        return r
    }, j.reduceRight = j.foldr = function (n, t, r, e) {
        var u = arguments.length > 2;
        if (null == n && (n = []), v && n.reduceRight === v) return e && (t = j.bind(t, e)), u ? n.reduceRight(t, r) : n.reduceRight(t);
        var i = n.length;
        if (i !== +i) {
            var a = j.keys(n);
            i = a.length
        }
        if (A(n, function (o, c, l) {
            c = a ? a[--i] : --i, u ? r = t.call(e, r, n[c], c, l) : (r = n[c], u = !0)
        }), !u) throw new TypeError(O);
        return r
    }, j.find = j.detect = function (n, t, r) {
        var e;
        return k(n, function (n, u, i) {
            return t.call(r, n, u, i) ? (e = n, !0) : void 0
        }), e
    }, j.filter = j.select = function (n, t, r) {
        var e = [];
        return null == n ? e : g && n.filter === g ? n.filter(t, r) : (A(n, function (n, u, i) {
            t.call(r, n, u, i) && e.push(n)
        }), e)
    }, j.reject = function (n, t, r) {
        return j.filter(n, function (n, e, u) {
            return !t.call(r, n, e, u)
        }, r)
    }, j.every = j.all = function (n, t, e) {
        t || (t = j.identity);
        var u = !0;
        return null == n ? u : d && n.every === d ? n.every(t, e) : (A(n, function (n, i, a) {
            return (u = u && t.call(e, n, i, a)) ? void 0 : r
        }), !!u)
    };
    var k = j.some = j.any = function (n, t, e) {
        t || (t = j.identity);
        var u = !1;
        return null == n ? u : m && n.some === m ? n.some(t, e) : (A(n, function (n, i, a) {
            return u || (u = t.call(e, n, i, a)) ? r : void 0
        }), !!u)
    };
    j.contains = j.include = function (n, t) {
        return null == n ? !1 : y && n.indexOf === y ? n.indexOf(t) != -1 : k(n, function (n) {
            return n === t
        })
    }, j.invoke = function (n, t) {
        var r = o.call(arguments, 2),
            e = j.isFunction(t);
        return j.map(n, function (n) {
            return (e ? t : n[t]).apply(n, r)
        })
    }, j.pluck = function (n, t) {
        return j.map(n, j.property(t))
    }, j.where = function (n, t) {
        return j.filter(n, j.matches(t))
    }, j.findWhere = function (n, t) {
        return j.find(n, j.matches(t))
    }, j.max = function (n, t, r) {
        if (!t && j.isArray(n) && n[0] === +n[0] && n.length < 65535) return Math.max.apply(Math, n);
        var e = -1 / 0,
            u = -1 / 0;
        return A(n, function (n, i, a) {
            var o = t ? t.call(r, n, i, a) : n;
            o > u && (e = n, u = o)
        }), e
    }, j.min = function (n, t, r) {
        if (!t && j.isArray(n) && n[0] === +n[0] && n.length < 65535) return Math.min.apply(Math, n);
        var e = 1 / 0,
            u = 1 / 0;
        return A(n, function (n, i, a) {
            var o = t ? t.call(r, n, i, a) : n;
            u > o && (e = n, u = o)
        }), e
    }, j.shuffle = function (n) {
        var t, r = 0,
            e = [];
        return A(n, function (n) {
            t = j.random(r++), e[r - 1] = e[t], e[t] = n
        }), e
    }, j.sample = function (n, t, r) {
        return null == t || r ? (n.length !== +n.length && (n = j.values(n)), n[j.random(n.length - 1)]) : j.shuffle(n).slice(0, Math.max(0, t))
    };
    var E = function (n) {
        return null == n ? j.identity : j.isFunction(n) ? n : j.property(n)
    };
    j.sortBy = function (n, t, r) {
        return t = E(t), j.pluck(j.map(n, function (n, e, u) {
            return {
                value: n,
                index: e,
                criteria: t.call(r, n, e, u)
            }
        }).sort(function (n, t) {
            var r = n.criteria,
                e = t.criteria;
            if (r !== e) {
                if (r > e || r === void 0) return 1;
                if (e > r || e === void 0) return -1
            }
            return n.index - t.index
        }), "value")
    };
    var F = function (n) {
        return function (t, r, e) {
            var u = {};
            return r = E(r), A(t, function (i, a) {
                var o = r.call(e, i, a, t);
                n(u, o, i)
            }), u
        }
    };
    j.groupBy = F(function (n, t, r) {
        j.has(n, t) ? n[t].push(r) : n[t] = [r]
    }), j.indexBy = F(function (n, t, r) {
        n[t] = r
    }), j.countBy = F(function (n, t) {
        j.has(n, t) ? n[t]++ : n[t] = 1
    }), j.sortedIndex = function (n, t, r, e) {
        r = E(r);
        for (var u = r.call(e, t), i = 0, a = n.length; a > i;) {
            var o = i + a >>> 1;
            r.call(e, n[o]) < u ? i = o + 1 : a = o
        }
        return i
    }, j.toArray = function (n) {
        return n ? j.isArray(n) ? o.call(n) : n.length === +n.length ? j.map(n, j.identity) : j.values(n) : []
    }, j.size = function (n) {
        return null == n ? 0 : n.length === +n.length ? n.length : j.keys(n).length
    }, j.first = j.head = j.take = function (n, t, r) {
        return null == n ? void 0 : null == t || r ? n[0] : 0 > t ? [] : o.call(n, 0, t)
    }, j.initial = function (n, t, r) {
        return o.call(n, 0, n.length - (null == t || r ? 1 : t))
    }, j.last = function (n, t, r) {
        return null == n ? void 0 : null == t || r ? n[n.length - 1] : o.call(n, Math.max(n.length - t, 0))
    }, j.rest = j.tail = j.drop = function (n, t, r) {
        return o.call(n, null == t || r ? 1 : t)
    }, j.compact = function (n) {
        return j.filter(n, j.identity)
    };
    var M = function (n, t, r) {
        return t && j.every(n, j.isArray) ? c.apply(r, n) : (A(n, function (n) {
            j.isArray(n) || j.isArguments(n) ? t ? a.apply(r, n) : M(n, t, r) : r.push(n)
        }), r)
    };
    j.flatten = function (n, t) {
        return M(n, t, [])
    }, j.without = function (n) {
        return j.difference(n, o.call(arguments, 1))
    }, j.partition = function (n, t) {
        var r = [],
            e = [];
        return A(n, function (n) {
            (t(n) ? r : e).push(n)
        }), [r, e]
    }, j.uniq = j.unique = function (n, t, r, e) {
        j.isFunction(t) && (e = r, r = t, t = !1);
        var u = r ? j.map(n, r, e) : n,
            i = [],
            a = [];
        return A(u, function (r, e) {
            (t ? e && a[a.length - 1] === r : j.contains(a, r)) || (a.push(r), i.push(n[e]))
        }), i
    }, j.union = function () {
        return j.uniq(j.flatten(arguments, !0))
    }, j.intersection = function (n) {
        var t = o.call(arguments, 1);
        return j.filter(j.uniq(n), function (n) {
            return j.every(t, function (t) {
                return j.contains(t, n)
            })
        })
    }, j.difference = function (n) {
        var t = c.apply(e, o.call(arguments, 1));
        return j.filter(n, function (n) {
            return !j.contains(t, n)
        })
    }, j.zip = function () {
        for (var n = j.max(j.pluck(arguments, "length").concat(0)), t = new Array(n), r = 0; n > r; r++) t[r] = j.pluck(arguments, "" + r);
        return t
    }, j.object = function (n, t) {
        if (null == n) return {};
        for (var r = {}, e = 0, u = n.length; u > e; e++) t ? r[n[e]] = t[e] : r[n[e][0]] = n[e][1];
        return r
    }, j.indexOf = function (n, t, r) {
        if (null == n) return -1;
        var e = 0,
            u = n.length;
        if (r) {
            if ("number" != typeof r) return e = j.sortedIndex(n, t), n[e] === t ? e : -1;
            e = 0 > r ? Math.max(0, u + r) : r
        }
        if (y && n.indexOf === y) return n.indexOf(t, r);
        for (; u > e; e++)
            if (n[e] === t) return e;
        return -1
    }, j.lastIndexOf = function (n, t, r) {
        if (null == n) return -1;
        var e = null != r;
        if (b && n.lastIndexOf === b) return e ? n.lastIndexOf(t, r) : n.lastIndexOf(t);
        for (var u = e ? r : n.length; u--;)
            if (n[u] === t) return u;
        return -1
    }, j.range = function (n, t, r) {
        arguments.length <= 1 && (t = n || 0, n = 0), r = arguments[2] || 1;
        for (var e = Math.max(Math.ceil((t - n) / r), 0), u = 0, i = new Array(e); e > u;) i[u++] = n, n += r;
        return i
    };
    var R = function () {};
    j.bind = function (n, t) {
        var r, e;
        if (_ && n.bind === _) return _.apply(n, o.call(arguments, 1));
        if (!j.isFunction(n)) throw new TypeError;
        return r = o.call(arguments, 2), e = function () {
            if (!(this instanceof e)) return n.apply(t, r.concat(o.call(arguments)));
            R.prototype = n.prototype;
            var u = new R;
            R.prototype = null;
            var i = n.apply(u, r.concat(o.call(arguments)));
            return Object(i) === i ? i : u
        }
    }, j.partial = function (n) {
        var t = o.call(arguments, 1);
        return function () {
            for (var r = 0, e = t.slice(), u = 0, i = e.length; i > u; u++) e[u] === j && (e[u] = arguments[r++]);
            for (; r < arguments.length;) e.push(arguments[r++]);
            return n.apply(this, e)
        }
    }, j.bindAll = function (n) {
        var t = o.call(arguments, 1);
        if (0 === t.length) throw new Error("bindAll must be passed function names");
        return A(t, function (t) {
            n[t] = j.bind(n[t], n)
        }), n
    }, j.memoize = function (n, t) {
        var r = {};
        return t || (t = j.identity),
            function () {
                var e = t.apply(this, arguments);
                return j.has(r, e) ? r[e] : r[e] = n.apply(this, arguments)
            }
    }, j.delay = function (n, t) {
        var r = o.call(arguments, 2);
        return setTimeout(function () {
            return n.apply(null, r)
        }, t)
    }, j.defer = function (n) {
        return j.delay.apply(j, [n, 1].concat(o.call(arguments, 1)))
    }, j.throttle = function (n, t, r) {
        var e, u, i, a = null,
            o = 0;
        r || (r = {});
        var c = function () {
            o = r.leading === !1 ? 0 : j.now(), a = null, i = n.apply(e, u), e = u = null
        };
        return function () {
            var l = j.now();
            o || r.leading !== !1 || (o = l);
            var f = t - (l - o);
            return e = this, u = arguments, 0 >= f ? (clearTimeout(a), a = null, o = l, i = n.apply(e, u), e = u = null) : a || r.trailing === !1 || (a = setTimeout(c, f)), i
        }
    }, j.debounce = function (n, t, r) {
        var e, u, i, a, o, c = function () {
            var l = j.now() - a;
            t > l ? e = setTimeout(c, t - l) : (e = null, r || (o = n.apply(i, u), i = u = null))
        };
        return function () {
            i = this, u = arguments, a = j.now();
            var l = r && !e;
            return e || (e = setTimeout(c, t)), l && (o = n.apply(i, u), i = u = null), o
        }
    }, j.once = function (n) {
        var t, r = !1;
        return function () {
            return r ? t : (r = !0, t = n.apply(this, arguments), n = null, t)
        }
    }, j.wrap = function (n, t) {
        return j.partial(t, n)
    }, j.compose = function () {
        var n = arguments;
        return function () {
            for (var t = arguments, r = n.length - 1; r >= 0; r--) t = [n[r].apply(this, t)];
            return t[0]
        }
    }, j.after = function (n, t) {
        return function () {
            return --n < 1 ? t.apply(this, arguments) : void 0
        }
    }, j.keys = function (n) {
        if (!j.isObject(n)) return [];
        if (w) return w(n);
        var t = [];
        for (var r in n) j.has(n, r) && t.push(r);
        return t
    }, j.values = function (n) {
        for (var t = j.keys(n), r = t.length, e = new Array(r), u = 0; r > u; u++) e[u] = n[t[u]];
        return e
    }, j.pairs = function (n) {
        for (var t = j.keys(n), r = t.length, e = new Array(r), u = 0; r > u; u++) e[u] = [t[u], n[t[u]]];
        return e
    }, j.invert = function (n) {
        for (var t = {}, r = j.keys(n), e = 0, u = r.length; u > e; e++) t[n[r[e]]] = r[e];
        return t
    }, j.functions = j.methods = function (n) {
        var t = [];
        for (var r in n) j.isFunction(n[r]) && t.push(r);
        return t.sort()
    }, j.extend = function (n) {
        return A(o.call(arguments, 1), function (t) {
            if (t)
                for (var r in t) n[r] = t[r]
        }), n
    }, j.pick = function (n) {
        var t = {},
            r = c.apply(e, o.call(arguments, 1));
        return A(r, function (r) {
            r in n && (t[r] = n[r])
        }), t
    }, j.omit = function (n) {
        var t = {},
            r = c.apply(e, o.call(arguments, 1));
        for (var u in n) j.contains(r, u) || (t[u] = n[u]);
        return t
    }, j.defaults = function (n) {
        return A(o.call(arguments, 1), function (t) {
            if (t)
                for (var r in t) n[r] === void 0 && (n[r] = t[r])
        }), n
    }, j.clone = function (n) {
        return j.isObject(n) ? j.isArray(n) ? n.slice() : j.extend({}, n) : n
    }, j.tap = function (n, t) {
        return t(n), n
    };
    var S = function (n, t, r, e) {
        if (n === t) return 0 !== n || 1 / n == 1 / t;
        if (null == n || null == t) return n === t;
        n instanceof j && (n = n._wrapped), t instanceof j && (t = t._wrapped);
        var u = l.call(n);
        if (u != l.call(t)) return !1;
        switch (u) {
        case "[object String]":
            return n == String(t);
        case "[object Number]":
            return n != +n ? t != +t : 0 == n ? 1 / n == 1 / t : n == +t;
        case "[object Date]":
        case "[object Boolean]":
            return +n == +t;
        case "[object RegExp]":
            return n.source == t.source && n.global == t.global && n.multiline == t.multiline && n.ignoreCase == t.ignoreCase
        }
        if ("object" != typeof n || "object" != typeof t) return !1;
        for (var i = r.length; i--;)
            if (r[i] == n) return e[i] == t;
        var a = n.constructor,
            o = t.constructor;
        if (a !== o && !(j.isFunction(a) && a instanceof a && j.isFunction(o) && o instanceof o) && "constructor" in n && "constructor" in t) return !1;
        r.push(n), e.push(t);
        var c = 0,
            f = !0;
        if ("[object Array]" == u) {
            if (c = n.length, f = c == t.length)
                for (; c-- && (f = S(n[c], t[c], r, e)););
        } else {
            for (var s in n)
                if (j.has(n, s) && (c++, !(f = j.has(t, s) && S(n[s], t[s], r, e)))) break;
            if (f) {
                for (s in t)
                    if (j.has(t, s) && !c--) break;
                f = !c
            }
        }
        return r.pop(), e.pop(), f
    };
    j.isEqual = function (n, t) {
        return S(n, t, [], [])
    }, j.isEmpty = function (n) {
        if (null == n) return !0;
        if (j.isArray(n) || j.isString(n)) return 0 === n.length;
        for (var t in n)
            if (j.has(n, t)) return !1;
        return !0
    }, j.isElement = function (n) {
        return !(!n || 1 !== n.nodeType)
    }, j.isArray = x || function (n) {
        return "[object Array]" == l.call(n)
    }, j.isObject = function (n) {
        return n === Object(n)
    }, A(["Arguments", "Function", "String", "Number", "Date", "RegExp"], function (n) {
        j["is" + n] = function (t) {
            return l.call(t) == "[object " + n + "]"
        }
    }), j.isArguments(arguments) || (j.isArguments = function (n) {
        return !(!n || !j.has(n, "callee"))
    }), "function" != typeof / . / && (j.isFunction = function (n) {
        return "function" == typeof n
    }), j.isFinite = function (n) {
        return isFinite(n) && !isNaN(parseFloat(n))
    }, j.isNaN = function (n) {
        return j.isNumber(n) && n != +n
    }, j.isBoolean = function (n) {
        return n === !0 || n === !1 || "[object Boolean]" == l.call(n)
    }, j.isNull = function (n) {
        return null === n
    }, j.isUndefined = function (n) {
        return n === void 0
    }, j.has = function (n, t) {
        return f.call(n, t)
    }, j.noConflict = function () {
        return n._ = t, this
    }, j.identity = function (n) {
        return n
    }, j.constant = function (n) {
        return function () {
            return n
        }
    }, j.property = function (n) {
        return function (t) {
            return t[n]
        }
    }, j.matches = function (n) {
        return function (t) {
            if (t === n) return !0;
            for (var r in n)
                if (n[r] !== t[r]) return !1;
            return !0
        }
    }, j.times = function (n, t, r) {
        for (var e = Array(Math.max(0, n)), u = 0; n > u; u++) e[u] = t.call(r, u);
        return e
    }, j.random = function (n, t) {
        return null == t && (t = n, n = 0), n + Math.floor(Math.random() * (t - n + 1))
    }, j.now = Date.now || function () {
        return (new Date).getTime()
    };
    var T = {
        escape: {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;"
        }
    };
    T.unescape = j.invert(T.escape);
    var I = {
        escape: new RegExp("[" + j.keys(T.escape).join("") + "]", "g"),
        unescape: new RegExp("(" + j.keys(T.unescape).join("|") + ")", "g")
    };
    j.each(["escape", "unescape"], function (n) {
        j[n] = function (t) {
            return null == t ? "" : ("" + t).replace(I[n], function (t) {
                return T[n][t]
            })
        }
    }), j.result = function (n, t) {
        if (null == n) return void 0;
        var r = n[t];
        return j.isFunction(r) ? r.call(n) : r
    }, j.mixin = function (n) {
        A(j.functions(n), function (t) {
            var r = j[t] = n[t];
            j.prototype[t] = function () {
                var n = [this._wrapped];
                return a.apply(n, arguments), z.call(this, r.apply(j, n))
            }
        })
    };
    var N = 0;
    j.uniqueId = function (n) {
        var t = ++N + "";
        return n ? n + t : t
    }, j.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var q = /(.)^/,
        B = {
            "'": "'",
            "\\": "\\",
            "\r": "r",
            "\n": "n",
            "	": "t",
            "\u2028": "u2028",
            "\u2029": "u2029"
        },
        D = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    j.template = function (n, t, r) {
        var e;
        r = j.defaults({}, r, j.templateSettings);
        var u = new RegExp([(r.escape || q).source, (r.interpolate || q).source, (r.evaluate || q).source].join("|") + "|$", "g"),
            i = 0,
            a = "__p+='";
        n.replace(u, function (t, r, e, u, o) {
            return a += n.slice(i, o).replace(D, function (n) {
                return "\\" + B[n]
            }), r && (a += "'+\n((__t=(" + r + "))==null?'':_.escape(__t))+\n'"), e && (a += "'+\n((__t=(" + e + "))==null?'':__t)+\n'"), u && (a += "';\n" + u + "\n__p+='"), i = o + t.length, t
        }), a += "';\n", r.variable || (a = "with(obj||{}){\n" + a + "}\n"), a = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + a + "return __p;\n";
        try {
            e = new Function(r.variable || "obj", "_", a)
        } catch (o) {
            throw o.source = a, o
        }
        if (t) return e(t, j);
        var c = function (n) {
            return e.call(this, n, j)
        };
        return c.source = "function(" + (r.variable || "obj") + "){\n" + a + "}", c
    }, j.chain = function (n) {
        return j(n).chain()
    };
    var z = function (n) {
        return this._chain ? j(n).chain() : n
    };
    j.mixin(j), A(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (n) {
        var t = e[n];
        j.prototype[n] = function () {
            var r = this._wrapped;
            return t.apply(r, arguments), "shift" != n && "splice" != n || 0 !== r.length || delete r[0], z.call(this, r)
        }
    }), A(["concat", "join", "slice"], function (n) {
        var t = e[n];
        j.prototype[n] = function () {
            return z.call(this, t.apply(this._wrapped, arguments))
        }
    }), j.extend(j.prototype, {
        chain: function () {
            return this._chain = !0, this
        },
        value: function () {
            return this._wrapped
        }
    }), "function" == typeof define && define.amd && define("underscore", [], function () {
        return j
    })
}).call(this);
! function (e) {
    if ("object" == typeof exports) module.exports = e();
    else if ("function" == typeof define && define.amd) define(e);
    else {
        var f;
        "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), f.SceneFrame = e()
    }
}(function () {
    var define, module, exports;
    return (function e(t, n, r) {
            function s(o, u) {
                if (!n[o]) {
                    if (!t[o]) {
                        var a = typeof require == "function" && require;
                        if (!u && a) return a(o, !0);
                        if (i) return i(o, !0);
                        throw new Error("Cannot find module '" + o + "'")
                    }
                    var f = n[o] = {
                        exports: {}
                    };
                    t[o][0].call(f.exports, function (e) {
                        var n = t[o][1][e];
                        return s(n ? n : e)
                    }, f, f.exports, e, t, n, r)
                }
                return n[o].exports
            }
            var i = typeof require == "function" && require;
            for (var o = 0; o < r.length; o++) s(r[o]);
            return s
        })({
            1: [
                function (_dereq_, module, exports) {
                    var at = _dereq_('arraytools')
                    module.exports = function (spec) {
                        if (!at.isObj(spec))
                            spec = {}
                        spec.colormap = spec.colormap || "jet"
                        spec.nshades = spec.nshades || 72
                        spec.format = spec.format || "hex"
                        var cmaps = {
                            jet: {
                                r: [
                                    [0.000, 0.376, 0.627, 0.878, 1.000],
                                    [0.000, 0.016, 1.000, 0.984, 0.500]
                                ],
                                g: [
                                    [0.000, 0.125, 0.376, 0.627, 0.878, 1.000],
                                    [0.000, 0.016, 1.000, 0.984, 0.000, 0.000]
                                ],
                                b: [
                                    [0.000, 0.125, 0.376, 0.627, 1.000],
                                    [0.516, 1.000, 0.984, 0.000, 0.000]
                                ]
                            },
                            hsv: {
                                r: [
                                    [0.000, 0.169, 0.173, 0.337, 0.341, 0.671, 0.675, 0.839, 0.843, 1.000],
                                    [1.000, 0.992, 0.969, 0.000, 0.000, 0.008, 0.031, 1.000, 1.000, 1.000]
                                ],
                                g: [
                                    [0.000, 0.169, 0.173, 0.506, 0.671, 0.675, 1.000],
                                    [0.000, 1.000, 1.000, 0.977, 0.000, 0.000, 0.000]
                                ],
                                b: [
                                    [0.000, 0.337, 0.341, 0.506, 0.839, 0.843, 1.000],
                                    [0.000, 0.016, 0.039, 1.000, 0.984, 0.961, 0.023]
                                ]
                            },
                            hot: {
                                r: [
                                    [0.000, 0.376, 1.000],
                                    [0.010, 1.000, 1.000]
                                ],
                                g: [
                                    [0.000, 0.376, 0.753, 1.000],
                                    [0.000, 0.010, 1.000, 1.000]
                                ],
                                b: [
                                    [0.000, 0.753, 1.000],
                                    [0.000, 0.016, 1.000]
                                ]
                            },
                            cool: {
                                r: [
                                    [0.000, 1.000],
                                    [0.000, 1.000]
                                ],
                                g: [
                                    [0.000, 1.000],
                                    [1.000, 0.000]
                                ],
                                b: [
                                    [0.000, 1.000],
                                    [1.000, 1.000]
                                ]
                            },
                            spring: {
                                r: [
                                    [0.000, 1.000],
                                    [1.000, 1.000]
                                ],
                                g: [
                                    [0.000, 1.000],
                                    [0.000, 1.000]
                                ],
                                b: [
                                    [0.000, 1.000],
                                    [1.000, 0.000]
                                ]
                            },
                            summer: {
                                r: [
                                    [0.000, 1.000],
                                    [0.000, 1.000]
                                ],
                                g: [
                                    [0.000, 1.000],
                                    [0.500, 1.000]
                                ],
                                b: [
                                    [0.000, 1.000],
                                    [0.400, 0.400]
                                ]
                            },
                            autumn: {
                                r: [
                                    [0.000, 1.000],
                                    [1.000, 1.000]
                                ],
                                g: [
                                    [0.000, 1.000],
                                    [0.000, 1.000]
                                ],
                                b: [
                                    [0.000, 1.000],
                                    [0.000, 0.000]
                                ]
                            },
                            winter: {
                                r: [
                                    [0.000, 1.000],
                                    [0.000, 0.000]
                                ],
                                g: [
                                    [0.000, 1.000],
                                    [0.000, 1.000]
                                ],
                                b: [
                                    [0.000, 1.000],
                                    [1.000, 0.500]
                                ]
                            },
                            gray: {
                                r: [
                                    [0.000, 1.000],
                                    [0.000, 1.000]
                                ],
                                g: [
                                    [0.000, 1.000],
                                    [0.000, 1.000]
                                ],
                                b: [
                                    [0.000, 1.000],
                                    [0.000, 1.000]
                                ]
                            },
                            bone: {
                                r: [
                                    [0.000, 0.753, 1.000],
                                    [0.000, 0.661, 1.000]
                                ],
                                g: [
                                    [0.000, 0.376, 0.753, 1.000],
                                    [0.000, 0.331, 0.784, 1.000]
                                ],
                                b: [
                                    [0.000, 0.376, 1.000],
                                    [0.001, 0.454, 1.000]
                                ]
                            },
                            copper: {
                                r: [
                                    [0.000, 0.804, 1.000],
                                    [0.000, 1.000, 1.000]
                                ],
                                g: [
                                    [0.000, 1.000],
                                    [0.000, 0.781]
                                ],
                                b: [
                                    [0.000, 1.000],
                                    [0.000, 0.497]
                                ]
                            }
                        }
                        var carray = buildmap(cmaps[spec.colormap], spec.nshades)
                        var result = []
                        if (spec.format === "hex") {
                            carray.forEach(function (ar) {
                                result.push(rgb2hex(ar))
                            })
                        } else result = carray

                        function buildmap(cmap, n) {
                            var div, val, res = []
                            var key = ['r', 'g', 'b']
                            for (var i = 0; i < 3; i++) {
                                if (cmap[key[i]][0].length > n) {
                                    throw new Error(spec.colormap + ' map requires nshades to be at least size ' + cmap[key[i]][0].length)
                                }
                                div = cmap[key[i]][0].map(function (x) {
                                    return x * n
                                }).map(Math.round)
                                val = cmap[key[i]][1].map(function (x) {
                                    return x * 255
                                })
                                res[i] = lines(div, val).map(Math.round)
                            }
                            return at.zip3(res[0], res[1], res[2])
                        }

                        function rgb2hex(rgbarray) {
                            var hex = '#'
                            rgbarray.forEach(function (dig) {
                                dig = dig.toString(16)
                                hex += ("00" + dig).substr(dig.length)
                            })
                            return hex
                        }

                        function lines(x, y) {
                            var a = []
                            for (var i = 0; i < x.length - 1; i++)
                                a = a.concat(at.linspace(y[i], y[i + 1], x[i + 1] - x[i]))
                            return a
                        }
                        return result
                    }
                }, {
                    "arraytools": 2
                }
            ],
            2: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var arraytools = function () {
                        var that = {}

                        function isObj(v) {
                            return (v != null) && (typeof v === 'object') && !Array.isArray(v)
                        }

                        function linspace(start, end, num) {
                            var inc = (end - start) / (num - 1)
                            var a = []
                            for (var ii = 0; ii < num; ii++)
                                a.push(start + ii * inc)
                            return a
                        }

                        function zip3(a, b, c) {
                            var len = Math.min.apply(null, [a.length, b.length, c.length])
                            var result = []
                            for (var n = 0; n < len; n++) {
                                result.push([a[n], b[n], c[n]])
                            }
                            return result
                        }

                        function sum(A) {
                            var acc = 0
                            accumulate(A, acc)

                            function accumulate(x) {
                                for (var i = 0; i < x.length; i++) {
                                    if (Array.isArray(x[i]))
                                        accumulate(x[i], acc)
                                    else
                                        acc += x[i]
                                }
                            }
                            return acc
                        }
                        that.isObj = isObj
                        that.linspace = linspace
                        that.zip3 = zip3
                        that.sum = sum
                        return that
                    }
                    module.exports = arraytools()
                }, {}
            ],
            3: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var EPSILON = _dereq_("almost-equal").DBL_EPSILON
                    module.exports = dirichlet
                    var PI = Math.PI
                    var sin = Math.sin

                    function dirichlet(n, x) {
                        var denom = sin(PI * x / n)
                        if (-EPSILON <= denom && denom <= EPSILON) {
                            return 1.0
                        }
                        return sin(PI * x) / (n * denom)
                    }
                }, {
                    "almost-equal": 4
                }
            ],
            4: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var abs = Math.abs,
                        min = Math.min

                    function almostEqual(a, b, absoluteError, relativeError) {
                        var d = abs(a - b)
                        if (d <= absoluteError) {
                            return true
                        }
                        if (d <= relativeError * min(abs(a), abs(b))) {
                            return true
                        }
                        return a === b
                    }
                    almostEqual.FLT_EPSILON = 1.19209290e-7
                    almostEqual.DBL_EPSILON = 2.2204460492503131e-16
                    module.exports = almostEqual
                }, {}
            ],
            5: [
                function (_dereq_, module, exports) {
                    "use strict"

                    function dupe_array(count, value, i) {
                        var c = count[i] | 0
                        if (c <= 0) {
                            return []
                        }
                        var result = new Array(c),
                            j
                        if (i === count.length - 1) {
                            for (j = 0; j < c; ++j) {
                                result[j] = value
                            }
                        } else {
                            for (j = 0; j < c; ++j) {
                                result[j] = dupe_array(count, value, i + 1)
                            }
                        }
                        return result
                    }

                    function dupe_number(count, value) {
                        var result, i
                        result = new Array(count)
                        for (i = 0; i < count; ++i) {
                            result[i] = value
                        }
                        return result
                    }

                    function dupe(count, value) {
                        if (typeof value === "undefined") {
                            value = 0
                        }
                        switch (typeof count) {
                        case "number":
                            if (count > 0) {
                                return dupe_number(count | 0, value)
                            }
                            break
                        case "object":
                            if (typeof (count.length) === "number") {
                                return dupe_array(count, value, 0)
                            }
                            break
                        }
                        return []
                    }
                    module.exports = dupe
                }, {}
            ],
            6: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = createAxes
                    var createText = _dereq_("./lib/text.js")
                    var createLines = _dereq_("./lib/lines.js")
                    var getCubeProperties = _dereq_("./lib/cube.js")
                    var createStateStack = _dereq_("gl-state")
                    var identity = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])

                    function Axes(gl) {
                        this.gl = gl
                        this.bounds = [
                            [-10, -10, -10],
                            [10, 10, 10]
                        ]
                        this.labels = ["x", "y", "z"]
                        this.tickSpacing = [0.5, 0.5, 0.5]
                        this.tickWidth = 1
                        this.showTicks = [true, true, true]
                        this.textScale = 0.0
                        this.font = "sans-serif"
                        this._text = null
                        this._lines = null
                        this._customTicks = null
                        this._state = createStateStack(gl, [gl.BLEND, gl.BLEND_DST_ALPHA, gl.BLEND_DST_RGB, gl.BLEND_SRC_ALPHA, gl.BLEND_SRC_RGB, gl.BLEND_EQUATION_ALPHA, gl.BLEND_EQUATION_RGB, gl.CULL_FACE, gl.CULL_FACE_MODE, gl.DEPTH_WRITEMASK, gl.DEPTH_TEST, gl.LINE_WIDTH])
                        this.axesColors = [
                            [0, 0, 0],
                            [0, 0, 0],
                            [0, 0, 0]
                        ]
                        this.gridColor = [0, 0, 0]
                    }
                    var proto = Axes.prototype

                    function prettyPrint(spacing, i) {
                        var stepStr = spacing + ""
                        var u = stepStr.indexOf(".")
                        var sigFigs = 0
                        if (u >= 0) {
                            sigFigs = stepStr.length - u - 1
                        }
                        var shift = Math.pow(10, sigFigs)
                        var x = Math.round(spacing * i * shift)
                        var xstr = x + ""
                        if (xstr.indexOf("e") >= 0) {
                            return xstr
                        }
                        var xi = x / shift,
                            xf = x % shift
                        if (x < 0) {
                            xi = -Math.ceil(xi) | 0
                            xf = (-xf) | 0
                        } else {
                            xi = Math.floor(xi) | 0
                            xf = xf | 0
                        }
                        var xis = "" + xi
                        if (x < 0) {
                            xis = "-" + xis
                        }
                        if (sigFigs) {
                            var xs = "" + xf
                            while (xs.length < sigFigs) {
                                xs = "0" + xs
                            }
                            return xis + "." + xs
                        } else {
                            return xis
                        }
                    }

                    function defaultTicks(bounds, tickSpacing) {
                        var array = []
                        for (var d = 0; d < 3; ++d) {
                            var ticks = []
                            var m = 0.5 * (bounds[0][d] + bounds[1][d])
                            for (var t = 0; t * tickSpacing[d] <= bounds[1][d]; ++t) {
                                ticks.push({
                                    x: t * tickSpacing[d],
                                    text: prettyPrint(tickSpacing[d], t)
                                })
                            }
                            for (var t = -1; t * tickSpacing[d] >= bounds[0][d]; --t) {
                                ticks.push({
                                    x: t * tickSpacing[d],
                                    text: prettyPrint(tickSpacing[d], t)
                                })
                            }
                            array.push(ticks)
                        }
                        return array
                    }
                    proto.update = function (options) {
                        options = options || {}
                        var lineUpdate = false
                        var textUpdate = false
                        var customTicks = this._customTicks
                        var ticksChanged = false
                        if ("ticks" in options) {
                            ticksChanged = true
                            customTicks = options.ticks
                            lineUpdate = true
                        }
                        if ("bounds" in options) {
                            this.bounds = options.bounds
                            lineUpdate = true
                            textUpdate = true
                            ticksChanged = true
                        }
                        if ("labels" in options) {
                            this.labels = options.labels
                            textUpdate = true
                        }
                        if ("tickSpacing" in options) {
                            if (typeof options.tickSpacing === "number") {
                                this.tickSpacing = [options.tickSpacing, options.tickSpacing, options.tickSpacing]
                            }
                            this.tickSpacing = options.tickSpacing
                            ticksChanged = true
                        }
                        if ("showAxes" in options) {
                            if (typeof options.showAxes === "boolean") {
                                this.showAxes = [options.showAxes, options.showAxes, options.showAxes]
                            } else {
                                this.showAxes = options.showAxes
                            }
                        }
                        if ("axesColors" in options) {
                            var colors = options.axesColors
                            if (Array.isArray(colors[0])) {
                                this.axesColors = colors
                            } else {
                                this.axesColors = [colors.slice(), colors.slice(), colors.slice()]
                            }
                        }
                        if ("gridColor" in options) {
                            this.gridColor = options.gridColor
                        }
                        if ("tickWidth" in options) {
                            this.tickWidth = options.tickWidth
                        }
                        if ("font" in options) {
                            this.font = options.font
                            textUpdate = true
                        }
                        if ("textSize" in options) {
                            this.textScale = options.textSize
                        }
                        if (!this.textScale) {
                            this.textScale = Infinity
                            for (var i = 0; i < 3; ++i) {
                                this.textScale = Math.min(this.textScale, 0.05 * (this.bounds[1][i] - this.bounds[0][i]) / this.tickSpacing[i])
                            }
                        }
                        var ticks = customTicks
                        if (ticksChanged) {
                            textUpdate = true
                            lineUpdate = true
                            if (options.ticks) {
                                ticks = options.ticks
                            } else {
                                ticks = defaultTicks(this.bounds, this.tickSpacing)
                            }
                            for (var i = 0; i < 3; ++i) {
                                ticks[i].sort(function (a, b) {
                                    return a.x - b.x
                                })
                            }
                            this._customTicks = ticks
                        }
                        if (textUpdate && this._text) {
                            this._text.dispose()
                            this._text = null
                        }
                        if (!this._text) {
                            this._text = createText(this.gl, this.bounds, ticks, this.font, this.labels)
                        }
                        if (lineUpdate && this._lines) {
                            this._lines.dispose()
                            this._lines = null
                        }
                        if (!this._lines) {
                            this._lines = createLines(this.gl, this.bounds, ticks)
                        }
                    }
                    proto.draw = function (params) {
                        params = params || {}
                        var model = params.model || identity
                        var view = params.view || identity
                        var projection = params.projection || identity
                        var bounds = this.bounds
                        var cubeParams = getCubeProperties(model, view, projection, bounds)
                        var cubeEdges = cubeParams.edges
                        var axis = cubeParams.axis
                        this._state.push()
                        var gl = this.gl
                        gl.enable(gl.CULL_FACE)
                        gl.cullFace(gl.BACK)
                        gl.enable(gl.DEPTH_TEST)
                        gl.depthMask(true)
                        gl.disable(gl.BLEND)
                        gl.lineWidth(this.tickWidth)
                        gl.lineWidth(1)
                        this._lines.bind(model, view, projection, this)
                        for (var i = 0; i < 3; ++i) {
                            var x = [0, 0, 0]
                            if (axis[i] > 0) {
                                x[i] = bounds[1][i]
                            } else {
                                x[i] = bounds[0][i]
                            }
                            this._lines.drawBox(i, x, this.gridColor)
                            if (!this.showTicks[i]) {
                                continue
                            }
                            var e = cubeEdges[i]
                            var c = [0, 0, 0]
                            var minor = [0, 0, 0]
                            for (var j = 0; j < 3; ++j) {
                                if (e & (1 << j)) {
                                    c[j] = bounds[1][j] + 0.5 * this.tickSpacing[j]
                                    minor[j] = -0.125 * this.tickSpacing[j]
                                } else {
                                    c[j] = bounds[0][j] - 0.5 * this.tickSpacing[j]
                                    minor[j] = 0.125 * this.tickSpacing[j]
                                }
                            }
                            c[i] = 0
                            minor[i] = 0
                            this._lines.drawAxis(i, c, minor, this.axesColors[i])
                        }
                        this._text.bind(model, view, projection, this.textScale)
                        for (var i = 0; i < 3; ++i) {
                            if (!this.showTicks[i]) {
                                continue
                            }
                            var e = cubeEdges[i]
                            var c = [0, 0, 0]
                            var q = [0, 0, 0]
                            for (var j = 0; j < 3; ++j) {
                                if (e & (1 << j)) {
                                    c[j] = bounds[1][j] + 1.0 * this.tickSpacing[j]
                                    q[j] = bounds[1][j] + 1.5 * this.tickSpacing[j]
                                } else {
                                    c[j] = bounds[0][j] - 1.0 * this.tickSpacing[j]
                                    q[j] = bounds[0][j] - 1.5 * this.tickSpacing[j]
                                }
                            }
                            c[i] = 0
                            q[i] = 0.5 * (bounds[0][i] + bounds[1][i])
                            this._text.drawAxis(i, c, this.axesColors[i])
                            this._text.drawLabel(i, q, this.axesColors[i])
                        }
                        this._state.pop()
                    }
                    proto.dispose = function () {
                        this._text.dispose()
                        this._lines.dispose()
                    }

                    function createAxes(gl, options) {
                        var axes = new Axes(gl)
                        axes.update(options)
                        return axes
                    }
                }, {
                    "./lib/cube.js": 7,
                    "./lib/lines.js": 8,
                    "./lib/text.js": 9,
                    "gl-state": 13
                }
            ],
            7: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = getCubeEdges
                    var bits = _dereq_("bit-twiddle")
                    var glm = _dereq_("gl-matrix")
                    var mat4 = glm.mat4
                    var vec4 = glm.vec4
                    var scratch = new Float32Array(16)

                    function getCubeEdges(model, view, projection, bounds) {
                        var mvp = scratch
                        mat4.multiply(mvp, view, model)
                        mat4.multiply(mvp, projection, mvp)
                        var cubeVerts = []
                        var x = [0, 0, 0, 1]
                        var y = [0, 0, 0, 0]
                        for (var i = 0; i < 2; ++i) {
                            x[2] = bounds[i][2]
                            for (var j = 0; j < 2; ++j) {
                                x[1] = bounds[j][1]
                                for (var k = 0; k < 2; ++k) {
                                    x[0] = bounds[k][0]
                                    vec4.transformMat4(y, x, mvp)
                                    var cv = [y[0] / y[3], y[1] / y[3], y[2]]
                                    cubeVerts.push(cv)
                                }
                            }
                        }
                        var closest = 0
                        for (var i = 0; i < 8; ++i) {
                            if (cubeVerts[i][2] < cubeVerts[closest][2]) {
                                closest = i
                            }
                        }
                        var farthest = 7 ^ closest
                        var bottom = -1
                        for (var i = 0; i < 8; ++i) {
                            if (i === closest || i === farthest) {
                                continue
                            }
                            if (bottom < 0) {
                                bottom = i
                            } else if (cubeVerts[bottom][1] > cubeVerts[i][1]) {
                                bottom = i
                            }
                        }
                        var left = -1
                        for (var i = 0; i < 3; ++i) {
                            var idx = bottom ^ (1 << i)
                            if (idx === closest || idx === farthest) {
                                continue
                            }
                            if (left < 0) {
                                left = idx
                            }
                            var v = cubeVerts[idx]
                            if (v[0] < cubeVerts[left][0]) {
                                left = idx
                            }
                        }
                        var right = -1
                        for (var i = 0; i < 3; ++i) {
                            var idx = bottom ^ (1 << i)
                            if (idx === closest || idx === farthest || idx === left) {
                                continue
                            }
                            if (right < 0) {
                                right = idx
                            }
                            var v = cubeVerts[idx]
                            if (v[0] > cubeVerts[right][0]) {
                                right = idx
                            }
                        }
                        var cubeEdges = [0, 0, 0]
                        cubeEdges[bits.log2(left ^ bottom)] = bottom & left
                        cubeEdges[bits.log2(bottom ^ right)] = bottom & right
                        var top = right ^ 7
                        if (top === closest || top === farthest) {
                            top = left ^ 7
                            cubeEdges[bits.log2(right ^ top)] = top & right
                        } else {
                            cubeEdges[bits.log2(left ^ top)] = top & left
                        }
                        var axis = [1, 1, 1]
                        var cutCorner = closest
                        for (var d = 0; d < 3; ++d) {
                            if (cutCorner & (1 << d)) {
                                axis[d] = -1
                            } else {
                                axis[d] = 1
                            }
                        }
                        return {
                            edges: cubeEdges,
                            axis: axis
                        }
                    }
                }, {
                    "bit-twiddle": 10,
                    "gl-matrix": 89
                }
            ],
            8: [
                function (_dereq_, module, exports) {
                    "use strict";
                    module.exports = createLines;
                    var createBuffer = _dereq_("gl-buffer");
                    var createVAO = _dereq_("gl-vao");
                    var glslify = _dereq_("glslify");
                    var createShader = _dereq_("glslify/adapter.js")("\n#define GLSLIFY 1\n\nattribute vec3 position;\nuniform mat4 model, view, projection;\nuniform vec3 offset, majorAxis, minorAxis;\nuniform float centerWeight;\nvoid main() {\n  vec3 vPosition = position.x * majorAxis + position.y * minorAxis + offset + centerWeight * position;\n  gl_Position = projection * view * model * vec4(vPosition, 1.0);\n}", "\n#define GLSLIFY 1\n\nprecision highp float;\nuniform vec3 color;\nvoid main() {\n  gl_FragColor = vec4(color, 1);\n}", [{
                        "name": "model",
                        "type": "mat4"
                    }, {
                        "name": "view",
                        "type": "mat4"
                    }, {
                        "name": "projection",
                        "type": "mat4"
                    }, {
                        "name": "offset",
                        "type": "vec3"
                    }, {
                        "name": "majorAxis",
                        "type": "vec3"
                    }, {
                        "name": "minorAxis",
                        "type": "vec3"
                    }, {
                        "name": "centerWeight",
                        "type": "float"
                    }, {
                        "name": "color",
                        "type": "vec3"
                    }], [{
                        "name": "position",
                        "type": "vec3"
                    }]);

                    function Lines(gl, vertBuffer, vao, shader, lineCount, lineOffset, boxCount, boxOffset) {
                        this.gl = gl;
                        this.vertBuffer = vertBuffer;
                        this.vao = vao;
                        this.shader = shader;
                        this.lineCount = lineCount;
                        this.lineOffset = lineOffset;
                        this.boxCount = boxCount;
                        this.boxOffset = boxOffset;
                    }
                    var proto = Lines.prototype;
                    proto.bind = function (model, view, projection) {
                        this.shader.bind();
                        this.shader.uniforms.model = model;
                        this.shader.uniforms.view = view;
                        this.shader.uniforms.projection = projection;
                        this.vao.bind();
                    };
                    proto.drawAxis = function (d, offset, minorAxis, color) {
                        this.shader.uniforms.offset = offset;
                        var majorAxis = [0, 0, 0];
                        majorAxis[d] = 1;
                        this.shader.uniforms.majorAxis = majorAxis;
                        this.shader.uniforms.minorAxis = minorAxis;
                        this.shader.uniforms.centerWeight = 0;
                        this.shader.uniforms.color = color;
                        this.vao.draw(this.gl.LINES, this.lineCount[d], this.lineOffset[d]);
                    };
                    proto.drawBox = function (d, offset, color) {
                        this.shader.uniforms.offset = offset;
                        this.shader.uniforms.majorAxis = [0, 0, 0];
                        this.shader.uniforms.minorAxis = [0, 0, 0];
                        this.shader.uniforms.centerWeight = 1;
                        this.shader.uniforms.color = color;
                        this.vao.draw(this.gl.LINES, this.boxCount[d], this.boxOffset[d]);
                    };
                    proto.dispose = function () {
                        this.vao.dispose();
                        this.vertBuffer.dispose();
                        this.shader.dispose();
                    };

                    function createLines(gl, bounds, ticks) {
                        var lineVertices = [];
                        var lineOffset = [0, 0, 0];
                        var lineCount = [0, 0, 0];
                        var boxOffset = [0, 0, 0];
                        var boxCount = [0, 0, 0];
                        for (var i = 0; i < 3; ++i) {
                            var start = lineVertices.length / 3 | 0;
                            lineVertices.push(bounds[0][i], 0, 0, bounds[1][i], 0, 0);
                            for (var j = 0; j < ticks[i].length; ++j) {
                                lineVertices.push(ticks[i][j].x, -1, 0, ticks[i][j].x, 1, 0);
                            }
                            var end = lineVertices.length / 3 | 0;
                            lineOffset[i] = start;
                            lineCount[i] = end - start;
                            var start = lineVertices.length / 3 | 0;
                            for (var h = 0; h <= 1; ++h) {
                                var u = (i + 1 + h) % 3;
                                var v = (i + 1 + (h ^ 1)) % 3;
                                var lo_u = bounds[0][u];
                                var hi_u = bounds[1][u];
                                var lo_v = bounds[0][v];
                                var hi_v = bounds[1][v];
                                var x = [0, 0, 0];
                                for (var j = 0; j < ticks[u].length; ++j) {
                                    x[u] = ticks[u][j].x;
                                    x[v] = lo_v;
                                    lineVertices.push.apply(lineVertices, x);
                                    x[v] = hi_v;
                                    lineVertices.push.apply(lineVertices, x);
                                }
                                x[u] = lo_u;
                                x[v] = lo_v;
                                lineVertices.push.apply(lineVertices, x);
                                x[v] = hi_v;
                                lineVertices.push.apply(lineVertices, x);
                                x[u] = hi_u;
                                x[v] = lo_v;
                                lineVertices.push.apply(lineVertices, x);
                                x[v] = hi_v;
                                lineVertices.push.apply(lineVertices, x);
                            }
                            var end = lineVertices.length / 3 | 0;
                            boxOffset[i] = start;
                            boxCount[i] = end - start;
                        }
                        var vertBuf = createBuffer(gl, new Float32Array(lineVertices));
                        var vao = createVAO(gl, [{
                            "buffer": vertBuf,
                            "type": gl.FLOAT,
                            "size": 3,
                            "stride": 0,
                            "offset": 0
                        }]);
                        var shader = createShader(gl);
                        shader.attributes.position.location = 0;
                        return new Lines(gl, vertBuf, vao, shader, lineCount, lineOffset, boxCount, boxOffset);
                    }
                }, {
                    "gl-buffer": 83,
                    "gl-vao": 171,
                    "glslify": 173,
                    "glslify/adapter.js": 172
                }
            ],
            9: [
                function (_dereq_, module, exports) {
                    "use strict";
                    module.exports = createTextSprites;
                    var createBuffer = _dereq_("gl-buffer");
                    var createVAO = _dereq_("gl-vao");
                    var vectorizeText = _dereq_("vectorize-text");
                    var glslify = _dereq_("glslify");
                    var createShader = _dereq_("glslify/adapter.js")("\n#define GLSLIFY 1\n\nattribute vec3 position;\nuniform mat4 model, view, projection;\nuniform vec3 offset, axis;\nuniform float textScale;\nvoid main() {\n  float t = position.z;\n  vec4 worldPosition = model * vec4(t * axis + offset, 1);\n  vec4 viewPosition = view * worldPosition + textScale * vec4(position.xy, 0, 0);\n  vec4 clipPosition = projection * viewPosition;\n  clipPosition /= clipPosition.w;\n  gl_Position = clipPosition;\n}", "\n#define GLSLIFY 1\n\nprecision highp float;\nuniform vec3 color;\nvoid main() {\n  gl_FragColor = vec4(color, 1);\n}", [{
                        "name": "model",
                        "type": "mat4"
                    }, {
                        "name": "view",
                        "type": "mat4"
                    }, {
                        "name": "projection",
                        "type": "mat4"
                    }, {
                        "name": "offset",
                        "type": "vec3"
                    }, {
                        "name": "axis",
                        "type": "vec3"
                    }, {
                        "name": "textScale",
                        "type": "float"
                    }, {
                        "name": "color",
                        "type": "vec3"
                    }], [{
                        "name": "position",
                        "type": "vec3"
                    }]);
                    var VERTEX_SIZE = 3;
                    var VERTEX_STRIDE = VERTEX_SIZE * 4;

                    function TextSprites(gl, shader, buffer, vao, axesStart, axesCount, labelOffset, labelCount) {
                        this.gl = gl;
                        this.shader = shader;
                        this.buffer = buffer;
                        this.vao = vao;
                        this.axesStart = axesStart;
                        this.axesCount = axesCount;
                        this.labelOffset = labelOffset;
                        this.labelCount = labelCount;
                    }
                    var proto = TextSprites.prototype;
                    proto.bind = function (model, view, projection, textScale) {
                        this.vao.bind();
                        this.shader.bind();
                        this.shader.uniforms.model = model;
                        this.shader.uniforms.view = view;
                        this.shader.uniforms.projection = projection;
                        this.shader.uniforms.textScale = textScale;
                    };
                    proto.drawAxis = function (d, offset, color) {
                        this.shader.uniforms.offset = offset;
                        var v = [0, 0, 0];
                        v[d] = 1;
                        this.shader.uniforms.axis = v;
                        this.shader.uniforms.color = color;
                        this.vao.draw(this.gl.TRIANGLES, this.axesCount[d], this.axesStart[d]);
                    };
                    proto.drawLabel = function (d, offset, color) {
                        this.shader.uniforms.offset = offset;
                        this.shader.uniforms.axis = [0, 0, 0];
                        this.shader.uniforms.color = color;
                        this.vao.draw(this.gl.TRIANGLES, this.labelCount[d], this.labelOffset[d]);
                    };
                    proto.dispose = function () {
                        this.shader.dispose();
                        this.vao.dispose();
                        this.buffer.dispose();
                    };

                    function prettyPrint(number) {
                        var str = number.toFixed(3);
                        if (+str === number) {
                            return number + "";
                        }
                        return str;
                    }

                    function createTextSprites(gl, bounds, ticks, font, labels) {
                        var data = [];

                        function addItem(t, text) {
                            var mesh = vectorizeText(text, {
                                triangles: true,
                                font: font,
                                textAlign: "center",
                                textBaseline: "middle"
                            });
                            var positions = mesh.positions;
                            var cells = mesh.cells;
                            var lo = [Infinity, Infinity];
                            var hi = [-Infinity, -Infinity];
                            for (var i = 0, nc = cells.length; i < nc; ++i) {
                                var c = cells[i];
                                for (var j = 2; j >= 0; --j) {
                                    var p = positions[c[j]];
                                    data.push(p[0], -p[1], t);
                                    for (var k = 0; k < 2; ++k) {
                                        lo[k] = Math.min(lo[k], p[k]);
                                        hi[k] = Math.max(hi[k], p[k]);
                                    }
                                }
                            }
                            var delta = [0, 0];
                            for (var k = 0; k < 2; ++k) {
                                delta[k] = hi[k] - lo[k];
                            }
                            return delta;
                        }
                        var axesStart = [];
                        var axesCount = [];
                        var labelOffset = [];
                        var labelCount = [];
                        for (var d = 0; d < 3; ++d) {
                            axesStart.push(data.length / VERTEX_SIZE | 0);
                            for (var i = 0; i < ticks[d].length; ++i) {
                                if (!ticks[d][i].text) {
                                    continue;
                                }
                                var size = addItem(ticks[d][i].x, ticks[d][i].text);
                                var delta = Infinity;
                                if (i > 0) {
                                    delta = Math.min(ticks[d][i].x - ticks[d][i - 1].x, delta);
                                } else if (i < ticks[d].length - 1) {
                                    delta = Math.min(ticks[d][i + 1].x - ticks[d][i].x, delta);
                                }
                            }
                            axesCount.push((data.length / VERTEX_SIZE | 0) - axesStart[d]);
                            labelOffset.push(data.length / VERTEX_SIZE | 0);
                            addItem(0.5 * (bounds[0][d] + bounds[1][d]), labels[d]);
                            labelCount.push(data.length / VERTEX_SIZE - labelOffset[d] | 0);
                        }
                        var buffer = createBuffer(gl, data);
                        var vao = createVAO(gl, [{
                            "buffer": buffer,
                            "offset": 0,
                            "size": 3
                        }]);
                        var shader = createShader(gl);
                        shader.attributes.position.location = 0;
                        return new TextSprites(gl, shader, buffer, vao, axesStart, axesCount, labelOffset, labelCount);
                    }
                }, {
                    "gl-buffer": 83,
                    "gl-vao": 171,
                    "glslify": 173,
                    "glslify/adapter.js": 172,
                    "vectorize-text": 18
                }
            ],
            10: [
                function (_dereq_, module, exports) {
                    "use strict";
                    "use restrict";
                    var INT_BITS = 32;
                    exports.INT_BITS = INT_BITS;
                    exports.INT_MAX = 0x7fffffff;
                    exports.INT_MIN = -1 << (INT_BITS - 1);
                    exports.sign = function (v) {
                        return (v > 0) - (v < 0);
                    }
                    exports.abs = function (v) {
                        var mask = v >> (INT_BITS - 1);
                        return (v ^ mask) - mask;
                    }
                    exports.min = function (x, y) {
                        return y ^ ((x ^ y) & -(x < y));
                    }
                    exports.max = function (x, y) {
                        return x ^ ((x ^ y) & -(x < y));
                    }
                    exports.isPow2 = function (v) {
                        return !(v & (v - 1)) && (!!v);
                    }
                    exports.log2 = function (v) {
                        var r, shift;
                        r = (v > 0xFFFF) << 4;
                        v >>>= r;
                        shift = (v > 0xFF) << 3;
                        v >>>= shift;
                        r |= shift;
                        shift = (v > 0xF) << 2;
                        v >>>= shift;
                        r |= shift;
                        shift = (v > 0x3) << 1;
                        v >>>= shift;
                        r |= shift;
                        return r | (v >> 1);
                    }
                    exports.log10 = function (v) {
                        return (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 : (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 : (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
                    }
                    exports.popCount = function (v) {
                        v = v - ((v >>> 1) & 0x55555555);
                        v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
                        return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
                    }

                    function countTrailingZeros(v) {
                        var c = 32;
                        v &= -v;
                        if (v) c--;
                        if (v & 0x0000FFFF) c -= 16;
                        if (v & 0x00FF00FF) c -= 8;
                        if (v & 0x0F0F0F0F) c -= 4;
                        if (v & 0x33333333) c -= 2;
                        if (v & 0x55555555) c -= 1;
                        return c;
                    }
                    exports.countTrailingZeros = countTrailingZeros;
                    exports.nextPow2 = function (v) {
                        v += v === 0;
                        --v;
                        v |= v >>> 1;
                        v |= v >>> 2;
                        v |= v >>> 4;
                        v |= v >>> 8;
                        v |= v >>> 16;
                        return v + 1;
                    }
                    exports.prevPow2 = function (v) {
                        v |= v >>> 1;
                        v |= v >>> 2;
                        v |= v >>> 4;
                        v |= v >>> 8;
                        v |= v >>> 16;
                        return v - (v >>> 1);
                    }
                    exports.parity = function (v) {
                        v ^= v >>> 16;
                        v ^= v >>> 8;
                        v ^= v >>> 4;
                        v &= 0xf;
                        return (0x6996 >>> v) & 1;
                    }
                    var REVERSE_TABLE = new Array(256);
                    (function (tab) {
                        for (var i = 0; i < 256; ++i) {
                            var v = i,
                                r = i,
                                s = 7;
                            for (v >>>= 1; v; v >>>= 1) {
                                r <<= 1;
                                r |= v & 1;
                                --s;
                            }
                            tab[i] = (r << s) & 0xff;
                        }
                    })(REVERSE_TABLE);
                    exports.reverse = function (v) {
                        return (REVERSE_TABLE[v & 0xff] << 24) | (REVERSE_TABLE[(v >>> 8) & 0xff] << 16) | (REVERSE_TABLE[(v >>> 16) & 0xff] << 8) | REVERSE_TABLE[(v >>> 24) & 0xff];
                    }
                    exports.interleave2 = function (x, y) {
                        x &= 0xFFFF;
                        x = (x | (x << 8)) & 0x00FF00FF;
                        x = (x | (x << 4)) & 0x0F0F0F0F;
                        x = (x | (x << 2)) & 0x33333333;
                        x = (x | (x << 1)) & 0x55555555;
                        y &= 0xFFFF;
                        y = (y | (y << 8)) & 0x00FF00FF;
                        y = (y | (y << 4)) & 0x0F0F0F0F;
                        y = (y | (y << 2)) & 0x33333333;
                        y = (y | (y << 1)) & 0x55555555;
                        return x | (y << 1);
                    }
                    exports.deinterleave2 = function (v, n) {
                        v = (v >>> n) & 0x55555555;
                        v = (v | (v >>> 1)) & 0x33333333;
                        v = (v | (v >>> 2)) & 0x0F0F0F0F;
                        v = (v | (v >>> 4)) & 0x00FF00FF;
                        v = (v | (v >>> 16)) & 0x000FFFF;
                        return (v << 16) >> 16;
                    }
                    exports.interleave3 = function (x, y, z) {
                        x &= 0x3FF;
                        x = (x | (x << 16)) & 4278190335;
                        x = (x | (x << 8)) & 251719695;
                        x = (x | (x << 4)) & 3272356035;
                        x = (x | (x << 2)) & 1227133513;
                        y &= 0x3FF;
                        y = (y | (y << 16)) & 4278190335;
                        y = (y | (y << 8)) & 251719695;
                        y = (y | (y << 4)) & 3272356035;
                        y = (y | (y << 2)) & 1227133513;
                        x |= (y << 1);
                        z &= 0x3FF;
                        z = (z | (z << 16)) & 4278190335;
                        z = (z | (z << 8)) & 251719695;
                        z = (z | (z << 4)) & 3272356035;
                        z = (z | (z << 2)) & 1227133513;
                        return x | (z << 2);
                    }
                    exports.deinterleave3 = function (v, n) {
                        v = (v >>> n) & 1227133513;
                        v = (v | (v >>> 2)) & 3272356035;
                        v = (v | (v >>> 4)) & 251719695;
                        v = (v | (v >>> 8)) & 4278190335;
                        v = (v | (v >>> 16)) & 0x3FF;
                        return (v << 22) >> 22;
                    }
                    exports.nextCombination = function (v) {
                        var t = v | (v - 1);
                        return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
                    }
                }, {}
            ],
            11: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = extractPlanes

                    function extractPlanes(M, zNear, zFar) {
                        var z = zNear || 0.0
                        var zf = zFar || 1.0
                        return [
                            [M[12] + M[0], M[13] + M[1], M[14] + M[2], M[15] + M[3]],
                            [M[12] - M[0], M[13] - M[1], M[14] - M[2], M[15] - M[3]],
                            [M[12] + M[4], M[13] + M[5], M[14] + M[6], M[15] + M[7]],
                            [M[12] - M[4], M[13] - M[5], M[14] - M[6], M[15] - M[7]],
                            [z * M[12] + M[8], z * M[13] + M[9], z * M[14] + M[10], z * M[15] + M[11]],
                            [zf * M[12] - M[8], zf * M[13] - M[9], zf * M[14] - M[10], zf * M[15] - M[11]]
                        ]
                    }
                }, {}
            ],
            12: [
                function (_dereq_, module, exports) {
                    "use strict"

                    function unique_pred(list, compare) {
                        var ptr = 1,
                            len = list.length,
                            a = list[0],
                            b = list[0]
                        for (var i = 1; i < len; ++i) {
                            b = a
                            a = list[i]
                            if (compare(a, b)) {
                                if (i === ptr) {
                                    ptr++
                                    continue
                                }
                                list[ptr++] = a
                            }
                        }
                        list.length = ptr
                        return list
                    }

                    function unique_eq(list) {
                        var ptr = 1,
                            len = list.length,
                            a = list[0],
                            b = list[0]
                        for (var i = 1; i < len; ++i, b = a) {
                            b = a
                            a = list[i]
                            if (a !== b) {
                                if (i === ptr) {
                                    ptr++
                                    continue
                                }
                                list[ptr++] = a
                            }
                        }
                        list.length = ptr
                        return list
                    }

                    function unique(list, compare, sorted) {
                        if (list.length === 0) {
                            return list
                        }
                        if (compare) {
                            if (!sorted) {
                                list.sort(compare)
                            }
                            return unique_pred(list, compare)
                        }
                        if (!sorted) {
                            list.sort()
                        }
                        return unique_eq(list)
                    }
                    module.exports = unique
                }, {}
            ],
            13: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = createGLStateStack
                    var uniq = _dereq_("uniq")

                    function createGLStateStack(gl, variables) {
                        if (!variables) {
                            variables = [gl.ACTIVE_TEXTURE, gl.ARRAY_BUFFER_BINDING, gl.BLEND, gl.BLEND_COLOR, gl.BLEND_SRC_ALPHA, gl.BLEND_SRC_RGB, gl.BLEND_DST_ALPHA, gl.BLEND_DST_RGB, gl.BLEND_EQUATION_ALPHA, gl.BLEND_EQUATION_RGB, gl.COLOR_WRITEMASK, gl.COLOR_CLEAR_VALUE, gl.CULL_FACE, gl.CULL_FACE_MODE, gl.CURRENT_PROGRAM, gl.DEPTH_CLEAR_VALUE, gl.DEPTH_FUNC, gl.DEPTH_RANGE, gl.DEPTH_WRITEMASK, gl.DITHER, gl.ELEMENT_ARRAY_BUFFER_BINDING, gl.FRAMEBUFFER_BINDING, gl.FRONT_FACE, gl.GENERATE_MIPMAP_HINT, gl.LINE_WIDTH, gl.PACK_ALIGNMENT, gl.POLYGON_OFFSET_FACTOR, gl.POLYGON_OFFSET_FILL, gl.POLYGON_OFFSET_UNITS, gl.RENDERBUFFER_BINDING, gl.SAMPLE_COVERAGE, gl.SAMPLE_COVERAGE_INVERT, gl.SAMPLE_COVERAGE_VALUE, gl.SCISSOR_BOX, gl.SCISSOR_TEST, gl.STENCIL_BACK_FAIL, gl.STENCIL_BACK_FUNC, gl.STENCIL_BACK_PASS_DEPTH_FAIL, gl.STENCIL_BACK_PASS_DEPTH_PASS, gl.STENCIL_BACK_REF, gl.STENCIL_BACK_VALUE_MASK, gl.STENCIL_BACK_WRITEMASK, gl.STENCIL_CLEAR_VALUE, gl.STENCIL_FAIL, gl.STENCIL_FUNC, gl.STENCIL_PASS_DEPTH_FAIL, gl.STENCIL_PASS_DEPTH_PASS, gl.STENCIL_REF, gl.STENCIL_TEST, gl.STENCIL_VALUE_MASK, gl.STENCIL_WRITEMASK, gl.TEXTURE, gl.UNPACK_ALIGNMENT, gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.UNPACK_FLIP_Y_WEBGL, gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, gl.VIEWPORT]
                        }
                        var ctorBody = ["'use strict'\nfunction StateStack(gl){this.gl=gl;"]
                        var pushBody = ["proto.push=function(){var gl=this.gl;"]
                        var popBody = ["proto.pop=function(){var gl=this.gl;"]
                        var nvariables = variables.slice()
                        nvariables.sort(function (a, b) {
                            return a - b
                        })
                        uniq(nvariables, undefined, true)
                        var textureTypes = [gl.TEXTURE, gl.TEXTURE_2D, gl.TEXTURE_CUBE_MAP, gl.TEXTURE_BINDING_2D, gl.TEXTURE_BINDING_CUBE_MAP]
                        if (textureTypes.some(function (v) {
                            return nvariables.indexOf(v) >= 0
                        })) {
                            var numTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)
                            ctorBody.push("this.textures=[];")
                            pushBody.push("var curTex=gl.getParameter(", gl.ACTIVE_TEXTURE, "),texState=new Array(", numTextures, ");")
                            for (var i = 0; i < numTextures; ++i) {
                                pushBody.push("gl.activeTexture(", gl.TEXTURE0 + i, ");texState[", i, "]=[gl.getParameter(", gl.TEXTURE_BINDING_2D, "),gl.getParameter(", gl.TEXTURE_BINDING_CUBE_MAP, ")];")
                            }
                            pushBody.push("this.textures.push(texState);gl.activeTexture(curTex);")
                            popBody.push("var texState=this.textures.pop();")
                            var restoreActive = nvariables.indexOf(gl.ACTIVE_TEXTURE) < 0
                            if (restoreActive) {
                                popBody.push("var curTex=gl.getParameter(", gl.ACTIVE_TEXTURE, ");")
                            }
                            for (var i = 0; i < numTextures; ++i) {
                                popBody.push("gl.activeTexture(", gl.TEXTURE0 + i, ");", "gl.bindTexture(", gl.TEXTURE_2D, ",texState[", i, "][0]);", "gl.bindTexture(", gl.TEXTURE_CUBE_MAP, ",texState[", i, "][1]);")
                            }
                            if (restoreActive) {
                                popBody.push("gl.activeTexture(curTex);")
                            }
                        }
                        var specialVars = {
                            blendEquationSeparate: [gl.BLEND_EQUATION_ALPHA, gl.BLEND_EQUATION_RGB],
                            blendFuncSeparate: [gl.BLEND_SRC_RGB, gl.BLEND_DST_RGB, gl.BLEND_SRC_ALPHA, gl.BLEND_DST_ALPHA],
                            sampleCoverage: [gl.SAMPLE_COVERAGE_INVERT, gl.SAMPLE_COVERAGE_VALUE],
                            polygonOffset: [gl.POLYGON_OFFSET_FACTOR, gl.POLYGON_OFFSET_UNITS],
                            stencilFuncSeparate_FRONT: [gl.STENCIL_FUNC, gl.STENCIL_REF, gl.STENCIL_VALUE_MASK],
                            stencilFuncSeparate_BACK: [gl.STENCIL_BACK_FUNC, gl.STENCIL_BACK_REF, gl.STENCIL_BACK_VALUE_MASK],
                            stencilOpSeparate_FRONT: [gl.STENCIL_FAIL, gl.STENCIL_PASS_DEPTH_FAIL, gl.STENCIL_PASS_DEPTH_PASS],
                            stencilOpSeparate_BACK: [gl.STENCIL_BACK_FAIL, gl.STENCIL_BACK_PASS_DEPTH_FAIL, gl.STENCIL_BACK_PASS_DEPTH_PASS]
                        }
                        for (var id in specialVars) {
                            var params = specialVars[id]
                            var variables = []
                            var snippets = []
                            for (var i = 0; i < params.length; ++i) {
                                var name = "v" + params[i]
                                var snip = [name, "=gl.getParameter(", params[i], ");"].join("")
                                variables.push(name)
                                snippets.push(snip)
                            }
                            specialVars[id] = {
                                present: false,
                                variables: variables,
                                snippets: snippets,
                                parameters: params
                            }
                        }
                        main_loop: for (var i = 0; i < nvariables.length; ++i) {
                            var type = nvariables[i]
                            if (textureTypes.indexOf(type) >= 0) {
                                continue
                            }
                            var stateStack = "this[" + type + "]"
                            ctorBody.push(stateStack, "=[];")
                            switch (type) {
                            case gl.SAMPLE_COVERAGE:
                                pushBody.push(stateStack, ".push(gl.isEnabled(", gl.SAMPLE_COVERAGE, "));")
                                break
                            default:
                                pushBody.push(stateStack, ".push(gl.getParameter(", type, "));")
                                break
                            }
                            var sv = stateStack + ".pop()"
                            switch (type) {
                            case gl.ACTIVE_TEXTURE:
                                popBody.push("gl.activeTexture(", sv, ");")
                                break
                            case gl.ARRAY_BUFFER_BINDING:
                                popBody.push("gl.bindBuffer(", gl.ARRAY_BUFFER, ",", sv, ");")
                                break
                            case gl.BLEND_COLOR:
                                popBody.push("var c=", sv, ";gl.blendColor(c[0], c[1], c[2], c[3]);")
                                break
                            case gl.COLOR_CLEAR_VALUE:
                                popBody.push("var c=", sv, ";gl.clearColor(c[0], c[1], c[2], c[3]);")
                                break
                            case gl.COLOR_WRITEMASK:
                                popBody.push("var c=", sv, ";gl.colorMask(c[0], c[1], c[2], c[3]);")
                                break
                            case gl.CULL_FACE_MODE:
                                popBody.push("gl.cullFace(", sv, ");")
                                break
                            case gl.CURRENT_PROGRAM:
                                popBody.push("gl.useProgram(", sv, ");")
                                break
                            case gl.DEPTH_CLEAR_VALUE:
                                popBody.push("gl.clearDepth(", sv, ");")
                                break
                            case gl.DEPTH_FUNC:
                                popBody.push("gl.depthFunc(", sv, ");")
                                break
                            case gl.DEPTH_RANGE:
                                popBody.push("var z=", sv, ";gl.depthRange(z[0], z[1]);")
                                break
                            case gl.DEPTH_WRITEMASK:
                                popBody.push("gl.depthMask(", sv, ");")
                                break
                            case gl.ELEMENT_ARRAY_BUFFER_BINDING:
                                popBody.push("gl.bindBuffer(", gl.ELEMENT_ARRAY_BUFFER, ",", sv, ");")
                                break
                            case gl.FRAMEBUFFER_BINDING:
                                popBody.push("gl.bindFramebuffer(", gl.FRAMEBUFFER, ",", sv, ");")
                                break
                            case gl.FRONT_FACE:
                                popBody.push("gl.frontFace(", sv, ");")
                                break
                            case gl.LINE_WIDTH:
                                popBody.push("gl.lineWidth(", sv, ");")
                                break
                            case gl.RENDERBUFFER_BINDING:
                                popBody.push("gl.bindRenderbuffer(", gl.RENDERBUFFER, ",", sv, ");")
                                break
                            case gl.SCISSOR_BOX:
                                popBody.push("var c=", sv, ";gl.scissor(c[0],c[1],c[2],c[3]);")
                                break
                            case gl.STENCIL_WRITEMASK:
                                popBody.push("gl.stencilMaskSeparate(", gl.FRONT, ",", sv, ");")
                                break
                            case gl.STENCIL_BACK_WRITEMASK:
                                popBody.push("gl.stencilMaskSeparate(", gl.BACK, ",", sv, ");")
                                break
                            case gl.STENCIL_CLEAR_VALUE:
                                popBody.push("gl.clearStencil(", sv, ");")
                                break
                            case gl.VIEWPORT:
                                popBody.push("var c=", sv, ";gl.viewport(c[0],c[1],c[2],c[3]);")
                                break
                            case gl.PACK_ALIGNMENT:
                            case gl.UNPACK_ALIGNMENT:
                            case gl.UNPACK_COLORSPACE_CONVERSION_WEBGL:
                            case gl.UNPACK_FLIP_Y_WEBGL:
                            case gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL:
                                popBody.push("gl.pixelStorei(", type, ",", sv, ");")
                                break
                            case gl.BLEND:
                            case gl.CULL_FACE:
                            case gl.DEPTH_TEST:
                            case gl.DITHER:
                            case gl.POLYGON_OFFSET_FILL:
                            case gl.SAMPLE_COVERAGE:
                            case gl.SCISSOR_TEST:
                            case gl.STENCIL_TEST:
                                popBody.push("if(", sv, "){gl.enable(", type, ")}else{gl.disable(", type, ")}")
                                break
                            case gl.GENERATE_MIPMAP_HINT:
                                popBody.push("gl.hint(", type, ",", sv, ");")
                                break
                            default:
                                for (var id in specialVars) {
                                    var special = specialVars[id]
                                    var index = special.parameters.indexOf(type)
                                    if (index < 0) {
                                        continue
                                    }
                                    special.present = true
                                    special.snippets[index] = "var " + special.variables[index] + "=" + sv + ";"
                                    continue main_loop
                                }
                                throw new Error("gl-state: Error, unknown state parameter " + type)
                            }
                        }
                        for (var id in specialVars) {
                            var data = specialVars[id]
                            if (data.present) {
                                popBody.push.apply(popBody, data.snippets)
                                var parts = id.split("_")
                                if (parts.length === 1) {
                                    popBody.push("gl.", parts[0], "(", data.variables.join(","), ");")
                                } else {
                                    popBody.push("gl.", parts[0], "(gl.", parts[1], ",", data.variables.join(","), ");")
                                }
                            }
                        }
                        var code = [ctorBody.join(""), "};var proto=StateStack.prototype;", pushBody.join(""), "};", popBody.join(""), "};", "return new StateStack(gl);"].join("")
                        var proc = new Function("gl", code)
                        return proc(gl)
                    }
                }, {
                    "uniq": 12
                }
            ],
            14: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var robustDot = _dereq_("robust-dot-product")
                    var robustSum = _dereq_("robust-sum")
                    module.exports = splitPolygon
                    module.exports.positive = positive
                    module.exports.negative = negative

                    function planeT(p, plane) {
                        var r = robustSum(robustDot(p, plane), [plane[plane.length - 1]])
                        return r[r.length - 1]
                    }

                    function lerpW(a, wa, b, wb) {
                        var d = wb - wa
                        var t = -wa / d
                        if (t < 0.0) {
                            t = 0.0
                        } else if (t > 1.0) {
                            t = 1.0
                        }
                        var ti = 1.0 - t
                        var n = a.length
                        var r = new Array(n)
                        for (var i = 0; i < n; ++i) {
                            r[i] = t * a[i] + ti * b[i]
                        }
                        return r
                    }

                    function splitPolygon(points, plane) {
                        var pos = []
                        var neg = []
                        var a = planeT(points[points.length - 1], plane)
                        for (var s = points[points.length - 1], t = points[0], i = 0; i < points.length; ++i, s = t) {
                            t = points[i]
                            var b = planeT(t, plane)
                            if ((a < 0 && b > 0) || (a > 0 && b < 0)) {
                                var p = lerpW(s, b, t, a)
                                pos.push(p)
                                neg.push(p.slice())
                            }
                            if (b < 0) {
                                neg.push(t.slice())
                            } else if (b > 0) {
                                pos.push(t.slice())
                            } else {
                                pos.push(t.slice())
                                neg.push(t.slice())
                            }
                            a = b
                        }
                        return {
                            positive: pos,
                            negative: neg
                        }
                    }

                    function positive(points, plane) {
                        var pos = []
                        var a = planeT(points[points.length - 1], plane)
                        for (var s = points[points.length - 1], t = points[0], i = 0; i < points.length; ++i, s = t) {
                            t = points[i]
                            var b = planeT(t, plane)
                            if ((a < 0 && b > 0) || (a > 0 && b < 0)) {
                                pos.push(lerpW(s, b, t, a))
                            }
                            if (b >= 0) {
                                pos.push(t.slice())
                            }
                            a = b
                        }
                        return pos
                    }

                    function negative(points, plane) {
                        var neg = []
                        var a = planeT(points[points.length - 1], plane)
                        for (var s = points[points.length - 1], t = points[0], i = 0; i < points.length; ++i, s = t) {
                            t = points[i]
                            var b = planeT(t, plane)
                            if ((a < 0 && b > 0) || (a > 0 && b < 0)) {
                                neg.push(lerpW(s, b, t, a))
                            }
                            if (b <= 0) {
                                neg.push(t.slice())
                            }
                            a = b
                        }
                        return neg
                    }
                }, {
                    "robust-dot-product": 15,
                    "robust-sum": 17
                }
            ],
            15: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var twoProduct = _dereq_("two-product")
                    var robustSum = _dereq_("robust-sum")
                    module.exports = robustDotProduct

                    function robustDotProduct(a, b) {
                        var r = twoProduct(a[0], b[0])
                        for (var i = 1; i < a.length; ++i) {
                            r = robustSum(r, twoProduct(a[i], b[i]))
                        }
                        return r
                    }
                }, {
                    "robust-sum": 17,
                    "two-product": 16
                }
            ],
            16: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = twoProduct
                    var SPLITTER = +(Math.pow(2, 27) + 1.0)

                    function twoProduct(a, b, result) {
                        var x = a * b
                        var c = SPLITTER * a
                        var abig = c - a
                        var ahi = c - abig
                        var alo = a - ahi
                        var d = SPLITTER * b
                        var bbig = d - b
                        var bhi = d - bbig
                        var blo = b - bhi
                        var err1 = x - (ahi * bhi)
                        var err2 = err1 - (alo * bhi)
                        var err3 = err2 - (ahi * blo)
                        var y = alo * blo - err3
                        if (result) {
                            result[0] = y
                            result[1] = x
                            return result
                        }
                        return [y, x]
                    }
                }, {}
            ],
            17: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = linearExpansionSum

                    function scalarScalar(a, b) {
                        var x = a + b
                        var bv = x - a
                        var av = x - bv
                        var br = b - bv
                        var ar = a - av
                        var y = ar + br
                        if (y) {
                            return [y, x]
                        }
                        return [x]
                    }

                    function linearExpansionSum(e, f) {
                        var ne = e.length | 0
                        var nf = f.length | 0
                        if (ne === 1 && nf === 1) {
                            return scalarScalar(e[0], f[0])
                        }
                        var n = ne + nf
                        var g = new Array(n)
                        var count = 0
                        var eptr = 0
                        var fptr = 0
                        var abs = Math.abs
                        var ei = e[eptr]
                        var ea = abs(ei)
                        var fi = f[fptr]
                        var fa = abs(fi)
                        var a, b
                        if (ea < fa) {
                            b = ei
                            eptr += 1
                            if (eptr < ne) {
                                ei = e[eptr]
                                ea = abs(ei)
                            }
                        } else {
                            b = fi
                            fptr += 1
                            if (fptr < nf) {
                                fi = f[fptr]
                                fa = abs(fi)
                            }
                        }
                        if ((eptr < ne && ea < fa) || (fptr >= nf)) {
                            a = ei
                            eptr += 1
                            if (eptr < ne) {
                                ei = e[eptr]
                                ea = abs(ei)
                            }
                        } else {
                            a = fi
                            fptr += 1
                            if (fptr < nf) {
                                fi = f[fptr]
                                fa = abs(fi)
                            }
                        }
                        var x = a + b
                        var bv = x - a
                        var y = b - bv
                        var q0 = y
                        var q1 = x
                        var _x, _bv, _av, _br, _ar
                        while (eptr < ne && fptr < nf) {
                            if (ea < fa) {
                                a = ei
                                eptr += 1
                                if (eptr < ne) {
                                    ei = e[eptr]
                                    ea = abs(ei)
                                }
                            } else {
                                a = fi
                                fptr += 1
                                if (fptr < nf) {
                                    fi = f[fptr]
                                    fa = abs(fi)
                                }
                            }
                            b = q0
                            x = a + b
                            bv = x - a
                            y = b - bv
                            if (y) {
                                g[count++] = y
                            }
                            _x = q1 + x
                            _bv = _x - q1
                            _av = _x - _bv
                            _br = x - _bv
                            _ar = q1 - _av
                            q0 = _ar + _br
                            q1 = _x
                        }
                        while (eptr < ne) {
                            a = ei
                            b = q0
                            x = a + b
                            bv = x - a
                            y = b - bv
                            if (y) {
                                g[count++] = y
                            }
                            _x = q1 + x
                            _bv = _x - q1
                            _av = _x - _bv
                            _br = x - _bv
                            _ar = q1 - _av
                            q0 = _ar + _br
                            q1 = _x
                            eptr += 1
                            if (eptr < ne) {
                                ei = e[eptr]
                            }
                        }
                        while (fptr < nf) {
                            a = fi
                            b = q0
                            x = a + b
                            bv = x - a
                            y = b - bv
                            if (y) {
                                g[count++] = y
                            }
                            _x = q1 + x
                            _bv = _x - q1
                            _av = _x - _bv
                            _br = x - _bv
                            _ar = q1 - _av
                            q0 = _ar + _br
                            q1 = _x
                            fptr += 1
                            if (fptr < nf) {
                                fi = f[fptr]
                            }
                        }
                        if (q0) {
                            g[count++] = q0
                        }
                        if (q1) {
                            g[count++] = q1
                        }
                        if (!count) {
                            g[count++] = 0.0
                        }
                        g.length = count
                        return g
                    }
                }, {}
            ],
            18: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = createText
                    var vectorizeText = _dereq_("./lib/vtext")
                    var Canvas = _dereq_("canvas-browserify")
                    var canvas = new Canvas(8192, 256)
                    var context = canvas.getContext("2d")

                    function createText(str, options) {
                        if ((typeof options !== "object") || (options === null)) {
                            options = {}
                        }
                        return vectorizeText(str, canvas, context, options)
                    }
                }, {
                    "./lib/vtext": 19,
                    "canvas-browserify": 20
                }
            ],
            19: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = vectorizeText
                    var surfaceNets = _dereq_("surface-nets")
                    var ndarray = _dereq_("ndarray")
                    var simplify = _dereq_("simplify-planar-graph")
                    var toPolygons = _dereq_("planar-graph-to-polyline")
                    var triangulate = _dereq_("triangulate-polyline")

                    function transformPositions(positions, options, size) {
                        var align = options.textAlign || "start"
                        var baseline = options.textBaseline || "alphabetic"
                        var lo = [1 << 30, 1 << 30]
                        var hi = [0, 0]
                        var n = positions.length
                        for (var i = 0; i < n; ++i) {
                            var p = positions[i]
                            for (var j = 0; j < 2; ++j) {
                                lo[j] = Math.min(lo[j], p[j]) | 0
                                hi[j] = Math.max(hi[j], p[j]) | 0
                            }
                        }
                        var xShift = 0
                        switch (align) {
                        case "center":
                            xShift = -0.5 * (lo[0] + hi[0])
                            break
                        case "right":
                        case "end":
                            xShift = -hi[0]
                            break
                        case "left":
                        case "start":
                            xShift = -lo[0]
                            break
                        default:
                            throw new Error("vectorize-text: Unrecognized textAlign: '" + align + "'")
                        }
                        var yShift = 0
                        switch (baseline) {
                        case "hanging":
                        case "top":
                            yShift = -lo[1]
                            break
                        case "middle":
                            yShift = -0.5 * (lo[1] + hi[1])
                            break
                        case "alphabetic":
                        case "ideographic":
                            yShift = -3 * size
                            break
                        case "bottom":
                            yShift = -hi[1]
                            break
                        default:
                            throw new Error("vectorize-text: Unrecoginized textBaseline: '" + baseline + "'")
                        }
                        var scale = 1.0 / size
                        if ("lineHeight" in options) {
                            scale *= +options.lineHeight
                        } else if ("width" in options) {
                            scale = (hi[0] - lo[0]) / options.width
                        } else if ("height" in options) {
                            scale = (hi[1] - lo[1]) / options.height
                        }
                        return positions.map(function (p) {
                            return [scale * (p[0] + xShift), scale * (p[1] + yShift)]
                        })
                    }

                    function vectorizeText(str, canvas, context, options) {
                        var size = options.size || 64
                        var family = options.font || "normal"
                        context.font = size + "px " + family
                        context.textAlign = "start"
                        context.textBaseline = "alphabetic"
                        context.direction = "ltr"
                        var width = Math.ceil(context.measureText(str).width + 10) | 0
                        if (width > 8192) {
                            throw new Error("vectorize-text: String too long (sorry, this will get fixed later)")
                        }
                        var height = 4 * size
                        if (canvas.height < height) {
                            canvas.height = height
                        }
                        context.fillStyle = "#000"
                        context.fillRect(0, 0, width, height)
                        context.fillStyle = "#fff"
                        context.fillText(str, 5, (3 * size) | 0)
                        var pixelData = context.getImageData(0, 0, width, height)
                        var pixels = ndarray(pixelData.data, [height, width, 4])
                        var contour = surfaceNets(pixels.pick(-1, -1, 0).transpose(1, 0), 128)
                        contour = simplify(contour.cells, contour.positions, 0.25)
                        var npositions = transformPositions(contour.positions, options, size)
                        var flip = "ccw" === options.orientation
                        if (options.polygons || options.polygon || options.polyline) {
                            var polygons = toPolygons(contour.edges, contour.positions)
                            return polygons.map(function (polygon) {
                                if (flip) {
                                    polygon.reverse()
                                }
                                return polygon.map(function (loop) {
                                    return loop.map(function (v) {
                                        return npositions[v]
                                    })
                                })
                            })
                        } else if (options.triangles || options.triangulate || options.triangle) {
                            var polygons = toPolygons(contour.edges, contour.positions)
                            var triangles = []
                            for (var i = 0; i < polygons.length; ++i) {
                                triangles.push.apply(triangles, triangulate(polygons[i], contour.positions))
                            }
                            if (flip) {
                                for (var i = 0; i < triangles.length; ++i) {
                                    var c = triangles[i]
                                    var tmp = c[0]
                                    c[0] = c[2]
                                    c[2] = tmp
                                }
                            }
                            return {
                                cells: triangles,
                                positions: npositions
                            }
                        } else {
                            return {
                                edges: contour.edges,
                                positions: npositions
                            }
                        }
                    }
                }, {
                    "ndarray": 199,
                    "planar-graph-to-polyline": 41,
                    "simplify-planar-graph": 51,
                    "surface-nets": 70,
                    "triangulate-polyline": 81
                }
            ],
            20: [
                function (_dereq_, module, exports) {
                    var Canvas = module.exports = function Canvas(w, h) {
                        var canvas = document.createElement('canvas')
                        canvas.width = w || 300
                        canvas.height = h || 150
                        return canvas
                    }
                    Canvas.Image = function () {
                        var img = document.createElement('img')
                        return img
                    }
                }, {}
            ],
            21: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            22: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = edgeToAdjacency
                    var uniq = _dereq_("uniq")

                    function edgeToAdjacency(edges, numVertices) {
                        var numEdges = edges.length
                        if (typeof numVertices !== "number") {
                            numVertices = 0
                            for (var i = 0; i < numEdges; ++i) {
                                var e = edges[i]
                                numVertices = Math.max(numVertices, e[0], e[1])
                            }
                            numVertices = (numVertices | 0) + 1
                        }
                        numVertices = numVertices | 0
                        var adj = new Array(numVertices)
                        for (var i = 0; i < numVertices; ++i) {
                            adj[i] = []
                        }
                        for (var i = 0; i < numEdges; ++i) {
                            var e = edges[i]
                            adj[e[0]].push(e[1])
                            adj[e[1]].push(e[0])
                        }
                        for (var j = 0; j < numVertices; ++j) {
                            uniq(adj[j], function (a, b) {
                                return a - b
                            })
                        }
                        return adj
                    }
                }, {
                    "uniq": 40
                }
            ],
            23: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = planarDual
                    var compareAngle = _dereq_("compare-angle")

                    function planarDual(cells, positions) {
                        var numVertices = positions.length | 0
                        var numEdges = cells.length
                        var adj = [new Array(numVertices), new Array(numVertices)]
                        for (var i = 0; i < numVertices; ++i) {
                            adj[0][i] = []
                            adj[1][i] = []
                        }
                        for (var i = 0; i < numEdges; ++i) {
                            var c = cells[i]
                            adj[0][c[0]].push(c)
                            adj[1][c[1]].push(c)
                        }
                        var cycles = []
                        for (var i = 0; i < numVertices; ++i) {
                            if (adj[0][i].length + adj[1][i].length === 0) {
                                cycles.push([i])
                            }
                        }

                        function cut(c, i) {
                            var a = adj[i][c[i]]
                            a.splice(a.indexOf(c), 1)
                        }

                        function next(a, b, noCut) {
                            var nextCell, nextVertex, nextDir
                            for (var i = 0; i < 2; ++i) {
                                if (adj[i][b].length > 0) {
                                    nextCell = adj[i][b][0]
                                    nextDir = i
                                    break
                                }
                            }
                            nextVertex = nextCell[nextDir ^ 1]
                            for (var dir = 0; dir < 2; ++dir) {
                                var nbhd = adj[dir][b]
                                for (var k = 0; k < nbhd.length; ++k) {
                                    var e = nbhd[k]
                                    var p = e[dir ^ 1]
                                    var cmp = compareAngle(positions[a], positions[b], positions[nextVertex], positions[p])
                                    if (cmp > 0) {
                                        nextCell = e
                                        nextVertex = p
                                        nextDir = dir
                                    }
                                }
                            }
                            if (noCut) {
                                return nextVertex
                            }
                            if (nextCell) {
                                cut(nextCell, nextDir)
                            }
                            return nextVertex
                        }

                        function extractCycle(v, dir) {
                            var e0 = adj[dir][v][0]
                            var cycle = [v]
                            cut(e0, dir)
                            var u = e0[dir ^ 1]
                            var d0 = dir
                            while (true) {
                                while (u !== v) {
                                    cycle.push(u)
                                    u = next(cycle[cycle.length - 2], u, false)
                                }
                                if (adj[0][v].length + adj[1][v].length === 0) {
                                    break
                                }
                                var a = cycle[cycle.length - 1]
                                var b = v
                                var c = cycle[1]
                                var d = next(a, b, true)
                                if (compareAngle(positions[a], positions[b], positions[c], positions[d]) < 0) {
                                    break
                                }
                                cycle.push(v)
                                u = next(a, b)
                            }
                            return cycle
                        }

                        function shouldGlue(pcycle, ncycle) {
                            return (ncycle[1] === ncycle[ncycle.length - 1])
                        }
                        for (var i = 0; i < numVertices; ++i) {
                            for (var j = 0; j < 2; ++j) {
                                var pcycle = []
                                while (adj[j][i].length > 0) {
                                    var ni = adj[0][i].length
                                    var ncycle = extractCycle(i, j)
                                    if (shouldGlue(pcycle, ncycle)) {
                                        pcycle.push.apply(pcycle, ncycle)
                                    } else {
                                        if (pcycle.length > 0) {
                                            cycles.push(pcycle)
                                        }
                                        pcycle = ncycle
                                    }
                                }
                                if (pcycle.length > 0) {
                                    cycles.push(pcycle)
                                }
                            }
                        }
                        return cycles
                    }
                }, {
                    "compare-angle": 24
                }
            ],
            24: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = compareAngle
                    var orient = _dereq_("robust-orientation")
                    var sgn = _dereq_("signum")
                    var twoSum = _dereq_("two-sum")
                    var robustProduct = _dereq_("robust-product")
                    var robustSum = _dereq_("robust-sum")

                    function testInterior(a, b, c) {
                        var x0 = twoSum(a[0], -b[0])
                        var y0 = twoSum(a[1], -b[1])
                        var x1 = twoSum(c[0], -b[0])
                        var y1 = twoSum(c[1], -b[1])
                        var d = robustSum(robustProduct(x0, x1), robustProduct(y0, y1))
                        return d[d.length - 1] >= 0
                    }

                    function compareAngle(a, b, c, d) {
                        var bcd = orient(b, c, d)
                        if (bcd === 0) {
                            var sabc = sgn(orient(a, b, c))
                            var sabd = sgn(orient(a, b, d))
                            if (sabc === sabd) {
                                if (sabc === 0) {
                                    var ic = testInterior(a, b, c)
                                    var id = testInterior(a, b, d)
                                    if (ic === id) {
                                        return 0
                                    } else if (ic) {
                                        return 1
                                    } else {
                                        return -1
                                    }
                                }
                                return 0
                            } else if (sabd === 0) {
                                if (sabc > 0) {
                                    return -1
                                } else if (testInterior(a, b, d)) {
                                    return -1
                                } else {
                                    return 1
                                }
                            } else if (sabc === 0) {
                                if (sabd > 0) {
                                    return 1
                                } else if (testInterior(a, b, c)) {
                                    return 1
                                } else {
                                    return -1
                                }
                            }
                            return sgn(sabd - sabc)
                        }
                        var abc = orient(a, b, c)
                        if (abc > 0) {
                            if (bcd > 0 && orient(a, b, d) > 0) {
                                return 1
                            }
                            return -1
                        } else if (abc < 0) {
                            if (bcd > 0 || orient(a, b, d) > 0) {
                                return 1
                            }
                            return -1
                        } else {
                            var abd = orient(a, b, d)
                            if (abd > 0) {
                                return 1
                            } else {
                                if (testInterior(a, b, c)) {
                                    return 1
                                } else {
                                    return -1
                                }
                            }
                        }
                    }
                }, {
                    "robust-orientation": 37,
                    "robust-product": 26,
                    "robust-sum": 38,
                    "signum": 27,
                    "two-sum": 28
                }
            ],
            25: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var twoProduct = _dereq_("two-product")
                    var twoSum = _dereq_("two-sum")
                    module.exports = scaleLinearExpansion

                    function scaleLinearExpansion(e, scale) {
                        var n = e.length
                        if (n === 1) {
                            var ts = twoProduct(e[0], scale)
                            if (ts[0]) {
                                return ts
                            }
                            return [ts[1]]
                        }
                        var g = new Array(2 * n)
                        var q = [0.1, 0.1]
                        var t = [0.1, 0.1]
                        var count = 0
                        twoProduct(e[0], scale, q)
                        if (q[0]) {
                            g[count++] = q[0]
                        }
                        for (var i = 1; i < n; ++i) {
                            twoProduct(e[i], scale, t)
                            var pq = q[1]
                            twoSum(pq, t[0], q)
                            if (q[0]) {
                                g[count++] = q[0]
                            }
                            var a = t[1]
                            var b = q[1]
                            var x = a + b
                            var bv = x - a
                            var y = b - bv
                            q[1] = x
                            if (y) {
                                g[count++] = y
                            }
                        }
                        if (q[1]) {
                            g[count++] = q[1]
                        }
                        if (count === 0) {
                            g[count++] = 0.0
                        }
                        g.length = count
                        return g
                    }
                }, {
                    "two-product": 39,
                    "two-sum": 28
                }
            ],
            26: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var robustSum = _dereq_("robust-sum")
                    var robustScale = _dereq_("robust-scale")
                    module.exports = robustProduct

                    function robustProduct(a, b) {
                        if (a.length === 1) {
                            return robustScale(b, a[0])
                        }
                        if (b.length === 1) {
                            return robustScale(a, b[0])
                        }
                        if (a.length === 0 || b.length === 0) {
                            return [0]
                        }
                        var r = [0]
                        if (a.length < b.length) {
                            for (var i = 0; i < a.length; ++i) {
                                r = robustSum(r, robustScale(b, a[i]))
                            }
                        } else {
                            for (var i = 0; i < b.length; ++i) {
                                r = robustSum(r, robustScale(a, b[i]))
                            }
                        }
                        return r
                    }
                }, {
                    "robust-scale": 25,
                    "robust-sum": 38
                }
            ],
            27: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = function signum(x) {
                        if (x < 0) {
                            return -1
                        }
                        if (x > 0) {
                            return 1
                        }
                        return 0.0
                    }
                }, {}
            ],
            28: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = fastTwoSum

                    function fastTwoSum(a, b, result) {
                        var x = a + b
                        var bv = x - a
                        var av = x - bv
                        var br = b - bv
                        var ar = a - av
                        if (result) {
                            result[0] = ar + br
                            result[1] = x
                            return result
                        }
                        return [ar + br, x]
                    }
                }, {}
            ],
            29: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = orderSegments
                    var orient = _dereq_("robust-orientation")

                    function horizontalOrder(a, b) {
                        var bl, br
                        if (b[0][0] < b[1][0]) {
                            bl = b[0]
                            br = b[1]
                        } else if (b[0][0] > b[1][0]) {
                            bl = b[1]
                            br = b[0]
                        } else {
                            var alo = Math.min(a[0][1], a[1][1])
                            var ahi = Math.max(a[0][1], a[1][1])
                            var blo = Math.min(b[0][1], b[1][1])
                            var bhi = Math.max(b[0][1], b[1][1])
                            if (ahi < blo) {
                                return ahi - blo
                            }
                            if (alo > bhi) {
                                return alo - bhi
                            }
                            return ahi - bhi
                        }
                        var al, ar
                        if (a[0][1] < a[1][1]) {
                            al = a[0]
                            ar = a[1]
                        } else {
                            al = a[1]
                            ar = a[0]
                        }
                        var d = orient(br, bl, al)
                        if (d) {
                            return d
                        }
                        d = orient(br, bl, ar)
                        if (d) {
                            return d
                        }
                        return ar - br
                    }

                    function orderSegments(b, a) {
                        var al, ar
                        if (a[0][0] < a[1][0]) {
                            al = a[0]
                            ar = a[1]
                        } else if (a[0][0] > a[1][0]) {
                            al = a[1]
                            ar = a[0]
                        } else {
                            return horizontalOrder(a, b)
                        }
                        var bl, br
                        if (b[0][0] < b[1][0]) {
                            bl = b[0]
                            br = b[1]
                        } else if (b[0][0] > b[1][0]) {
                            bl = b[1]
                            br = b[0]
                        } else {
                            return -horizontalOrder(b, a)
                        }
                        var d1 = orient(al, ar, br)
                        var d2 = orient(al, ar, bl)
                        if (d1 < 0) {
                            if (d2 <= 0) {
                                return d1
                            }
                        } else if (d1 > 0) {
                            if (d2 >= 0) {
                                return d1
                            }
                        } else if (d2) {
                            return d2
                        }
                        d1 = orient(br, bl, ar)
                        d2 = orient(br, bl, al)
                        if (d1 < 0) {
                            if (d2 <= 0) {
                                return d1
                            }
                        } else if (d1 > 0) {
                            if (d2 >= 0) {
                                return d1
                            }
                        } else if (d2) {
                            return d2
                        }
                        return ar[0] - br[0]
                    }
                }, {
                    "robust-orientation": 37
                }
            ],
            30: [
                function (_dereq_, module, exports) {
                    "use strict"

                    function compileSearch(funcName, predicate, reversed, extraArgs, useNdarray, earlyOut) {
                        var code = ["function ", funcName, "(a,l,h,", extraArgs.join(","), "){", earlyOut ? "" : "var i=", (reversed ? "l-1" : "h+1"), ";while(l<=h){\
var m=(l+h)>>>1,x=a", useNdarray ? ".get(m)" : "[m]"]
                        if (earlyOut) {
                            if (predicate.indexOf("c") < 0) {
                                code.push(";if(x===y){return m}else if(x<=y){")
                            } else {
                                code.push(";var p=c(x,y);if(p===0){return m}else if(p<=0){")
                            }
                        } else {
                            code.push(";if(", predicate, "){i=m;")
                        }
                        if (reversed) {
                            code.push("l=m+1}else{h=m-1}")
                        } else {
                            code.push("h=m-1}else{l=m+1}")
                        }
                        code.push("}")
                        if (earlyOut) {
                            code.push("return -1};")
                        } else {
                            code.push("return i};")
                        }
                        return code.join("")
                    }

                    function compileBoundsSearch(predicate, reversed, suffix, earlyOut) {
                        var result = new Function([compileSearch("A", "x" + predicate + "y", reversed, ["y"], false, earlyOut), compileSearch("B", "x" + predicate + "y", reversed, ["y"], true, earlyOut), compileSearch("P", "c(x,y)" + predicate + "0", reversed, ["y", "c"], false, earlyOut), compileSearch("Q", "c(x,y)" + predicate + "0", reversed, ["y", "c"], true, earlyOut), "function dispatchBsearch", suffix, "(a,y,c,l,h){\
if(a.shape){\
if(typeof(c)==='function'){\
return Q(a,(l===undefined)?0:l|0,(h===undefined)?a.shape[0]-1:h|0,y,c)\
}else{\
return B(a,(c===undefined)?0:c|0,(l===undefined)?a.shape[0]-1:l|0,y)\
}}else{\
if(typeof(c)==='function'){\
return P(a,(l===undefined)?0:l|0,(h===undefined)?a.length-1:h|0,y,c)\
}else{\
return A(a,(c===undefined)?0:c|0,(l===undefined)?a.length-1:l|0,y)\
}}}\
return dispatchBsearch", suffix].join(""))
                        return result()
                    }
                    module.exports = {
                        ge: compileBoundsSearch(">=", false, "GE"),
                        gt: compileBoundsSearch(">", false, "GT"),
                        lt: compileBoundsSearch("<", true, "LT"),
                        le: compileBoundsSearch("<=", true, "LE"),
                        eq: compileBoundsSearch("-", true, "EQ", true)
                    }
                }, {}
            ],
            31: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = createRBTree
                    var RED = 0
                    var BLACK = 1

                    function RBNode(color, key, value, left, right, count) {
                        this._color = color
                        this.key = key
                        this.value = value
                        this.left = left
                        this.right = right
                        this._count = count
                    }

                    function cloneNode(node) {
                        return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count)
                    }

                    function repaint(color, node) {
                        return new RBNode(color, node.key, node.value, node.left, node.right, node._count)
                    }

                    function recount(node) {
                        node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0)
                    }

                    function RedBlackTree(compare, root) {
                        this._compare = compare
                        this.root = root
                    }
                    var proto = RedBlackTree.prototype
                    Object.defineProperty(proto, "keys", {
                        get: function () {
                            var result = []
                            this.forEach(function (k, v) {
                                result.push(k)
                            })
                            return result
                        }
                    })
                    Object.defineProperty(proto, "values", {
                        get: function () {
                            var result = []
                            this.forEach(function (k, v) {
                                result.push(v)
                            })
                            return result
                        }
                    })
                    Object.defineProperty(proto, "length", {
                        get: function () {
                            if (this.root) {
                                return this.root._count
                            }
                            return 0
                        }
                    })
                    proto.insert = function (key, value) {
                        var cmp = this._compare
                        var n = this.root
                        var n_stack = []
                        var d_stack = []
                        while (n) {
                            var d = cmp(key, n.key)
                            n_stack.push(n)
                            d_stack.push(d)
                            if (d <= 0) {
                                n = n.left
                            } else {
                                n = n.right
                            }
                        }
                        n_stack.push(new RBNode(RED, key, value, null, null, 1))
                        for (var s = n_stack.length - 2; s >= 0; --s) {
                            var n = n_stack[s]
                            if (d_stack[s] <= 0) {
                                n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s + 1], n.right, n._count + 1)
                            } else {
                                n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s + 1], n._count + 1)
                            }
                        }
                        for (var s = n_stack.length - 1; s > 1; --s) {
                            var p = n_stack[s - 1]
                            var n = n_stack[s]
                            if (p._color === BLACK || n._color === BLACK) {
                                break
                            }
                            var pp = n_stack[s - 2]
                            if (pp.left === p) {
                                if (p.left === n) {
                                    var y = pp.right
                                    if (y && y._color === RED) {
                                        p._color = BLACK
                                        pp.right = repaint(BLACK, y)
                                        pp._color = RED
                                        s -= 1
                                    } else {
                                        pp._color = RED
                                        pp.left = p.right
                                        p._color = BLACK
                                        p.right = pp
                                        n_stack[s - 2] = p
                                        n_stack[s - 1] = n
                                        recount(pp)
                                        recount(p)
                                        if (s >= 3) {
                                            var ppp = n_stack[s - 3]
                                            if (ppp.left === pp) {
                                                ppp.left = p
                                            } else {
                                                ppp.right = p
                                            }
                                        }
                                        break
                                    }
                                } else {
                                    var y = pp.right
                                    if (y && y._color === RED) {
                                        p._color = BLACK
                                        pp.right = repaint(BLACK, y)
                                        pp._color = RED
                                        s -= 1
                                    } else {
                                        p.right = n.left
                                        pp._color = RED
                                        pp.left = n.right
                                        n._color = BLACK
                                        n.left = p
                                        n.right = pp
                                        n_stack[s - 2] = n
                                        n_stack[s - 1] = p
                                        recount(pp)
                                        recount(p)
                                        recount(n)
                                        if (s >= 3) {
                                            var ppp = n_stack[s - 3]
                                            if (ppp.left === pp) {
                                                ppp.left = n
                                            } else {
                                                ppp.right = n
                                            }
                                        }
                                        break
                                    }
                                }
                            } else {
                                if (p.right === n) {
                                    var y = pp.left
                                    if (y && y._color === RED) {
                                        p._color = BLACK
                                        pp.left = repaint(BLACK, y)
                                        pp._color = RED
                                        s -= 1
                                    } else {
                                        pp._color = RED
                                        pp.right = p.left
                                        p._color = BLACK
                                        p.left = pp
                                        n_stack[s - 2] = p
                                        n_stack[s - 1] = n
                                        recount(pp)
                                        recount(p)
                                        if (s >= 3) {
                                            var ppp = n_stack[s - 3]
                                            if (ppp.right === pp) {
                                                ppp.right = p
                                            } else {
                                                ppp.left = p
                                            }
                                        }
                                        break
                                    }
                                } else {
                                    var y = pp.left
                                    if (y && y._color === RED) {
                                        p._color = BLACK
                                        pp.left = repaint(BLACK, y)
                                        pp._color = RED
                                        s -= 1
                                    } else {
                                        p.left = n.right
                                        pp._color = RED
                                        pp.right = n.left
                                        n._color = BLACK
                                        n.right = p
                                        n.left = pp
                                        n_stack[s - 2] = n
                                        n_stack[s - 1] = p
                                        recount(pp)
                                        recount(p)
                                        recount(n)
                                        if (s >= 3) {
                                            var ppp = n_stack[s - 3]
                                            if (ppp.right === pp) {
                                                ppp.right = n
                                            } else {
                                                ppp.left = n
                                            }
                                        }
                                        break
                                    }
                                }
                            }
                        }
                        n_stack[0]._color = BLACK
                        return new RedBlackTree(cmp, n_stack[0])
                    }

                    function doVisitFull(visit, node) {
                        if (node.left) {
                            var v = doVisitFull(visit, node.left)
                            if (v) {
                                return v
                            }
                        }
                        var v = visit(node.key, node.value)
                        if (v) {
                            return v
                        }
                        if (node.right) {
                            return doVisitFull(visit, node.right)
                        }
                    }

                    function doVisitHalf(lo, compare, visit, node) {
                        var l = compare(lo, node.key)
                        if (l <= 0) {
                            if (node.left) {
                                var v = doVisitHalf(lo, compare, visit, node.left)
                                if (v) {
                                    return v
                                }
                            }
                            var v = visit(node.key, node.value)
                            if (v) {
                                return v
                            }
                        }
                        if (node.right) {
                            return doVisitHalf(lo, compare, visit, node.right)
                        }
                    }

                    function doVisit(lo, hi, compare, visit, node) {
                        var l = compare(lo, node.key)
                        var h = compare(hi, node.key)
                        var v
                        if (l <= 0) {
                            if (node.left) {
                                v = doVisit(lo, hi, compare, visit, node.left)
                                if (v) {
                                    return v
                                }
                            }
                            if (h > 0) {
                                v = visit(node.key, node.value)
                                if (v) {
                                    return v
                                }
                            }
                        }
                        if (h > 0 && node.right) {
                            return doVisit(lo, hi, compare, visit, node.right)
                        }
                    }
                    proto.forEach = function rbTreeForEach(visit, lo, hi) {
                        if (!this.root) {
                            return
                        }
                        switch (arguments.length) {
                        case 1:
                            return doVisitFull(visit, this.root)
                            break
                        case 2:
                            return doVisitHalf(lo, this._compare, visit, this.root)
                            break
                        case 3:
                            if (this._compare(lo, hi) >= 0) {
                                return
                            }
                            return doVisit(lo, hi, this._compare, visit, this.root)
                            break
                        }
                    }
                    Object.defineProperty(proto, "begin", {
                        get: function () {
                            var stack = []
                            var n = this.root
                            while (n) {
                                stack.push(n)
                                n = n.left
                            }
                            return new RedBlackTreeIterator(this, stack)
                        }
                    })
                    Object.defineProperty(proto, "end", {
                        get: function () {
                            var stack = []
                            var n = this.root
                            while (n) {
                                stack.push(n)
                                n = n.right
                            }
                            return new RedBlackTreeIterator(this, stack)
                        }
                    })
                    proto.at = function (idx) {
                        if (idx < 0) {
                            return new RedBlackTreeIterator(this, [])
                        }
                        var n = this.root
                        var stack = []
                        while (true) {
                            stack.push(n)
                            if (n.left) {
                                if (idx < n.left._count) {
                                    n = n.left
                                    continue
                                }
                                idx -= n.left._count
                            }
                            if (!idx) {
                                return new RedBlackTreeIterator(this, stack)
                            }
                            idx -= 1
                            if (n.right) {
                                if (idx >= n.right._count) {
                                    break
                                }
                                n = n.right
                            } else {
                                break
                            }
                        }
                        return new RedBlackTreeIterator(this, [])
                    }
                    proto.ge = function (key) {
                        var cmp = this._compare
                        var n = this.root
                        var stack = []
                        var last_ptr = 0
                        while (n) {
                            var d = cmp(key, n.key)
                            stack.push(n)
                            if (d <= 0) {
                                last_ptr = stack.length
                            }
                            if (d <= 0) {
                                n = n.left
                            } else {
                                n = n.right
                            }
                        }
                        stack.length = last_ptr
                        return new RedBlackTreeIterator(this, stack)
                    }
                    proto.gt = function (key) {
                        var cmp = this._compare
                        var n = this.root
                        var stack = []
                        var last_ptr = 0
                        while (n) {
                            var d = cmp(key, n.key)
                            stack.push(n)
                            if (d < 0) {
                                last_ptr = stack.length
                            }
                            if (d < 0) {
                                n = n.left
                            } else {
                                n = n.right
                            }
                        }
                        stack.length = last_ptr
                        return new RedBlackTreeIterator(this, stack)
                    }
                    proto.lt = function (key) {
                        var cmp = this._compare
                        var n = this.root
                        var stack = []
                        var last_ptr = 0
                        while (n) {
                            var d = cmp(key, n.key)
                            stack.push(n)
                            if (d > 0) {
                                last_ptr = stack.length
                            }
                            if (d <= 0) {
                                n = n.left
                            } else {
                                n = n.right
                            }
                        }
                        stack.length = last_ptr
                        return new RedBlackTreeIterator(this, stack)
                    }
                    proto.le = function (key) {
                        var cmp = this._compare
                        var n = this.root
                        var stack = []
                        var last_ptr = 0
                        while (n) {
                            var d = cmp(key, n.key)
                            stack.push(n)
                            if (d >= 0) {
                                last_ptr = stack.length
                            }
                            if (d < 0) {
                                n = n.left
                            } else {
                                n = n.right
                            }
                        }
                        stack.length = last_ptr
                        return new RedBlackTreeIterator(this, stack)
                    }
                    proto.find = function (key) {
                        var cmp = this._compare
                        var n = this.root
                        var stack = []
                        while (n) {
                            var d = cmp(key, n.key)
                            stack.push(n)
                            if (d === 0) {
                                return new RedBlackTreeIterator(this, stack)
                            }
                            if (d <= 0) {
                                n = n.left
                            } else {
                                n = n.right
                            }
                        }
                        return new RedBlackTreeIterator(this, [])
                    }
                    proto.remove = function (key) {
                        var iter = this.find(key)
                        if (iter) {
                            return iter.remove()
                        }
                        return this
                    }
                    proto.get = function (key) {
                        var cmp = this._compare
                        var n = this.root
                        var stack = []
                        while (n) {
                            var d = cmp(key, n.key)
                            stack.push(n)
                            if (d === 0) {
                                return n.value
                            }
                            if (d <= 0) {
                                n = n.left
                            } else {
                                n = n.right
                            }
                        }
                        return
                    }

                    function RedBlackTreeIterator(tree, stack) {
                        this.tree = tree
                        this._stack = stack
                    }
                    var iproto = RedBlackTreeIterator.prototype
                    Object.defineProperty(iproto, "valid", {
                        get: function () {
                            return this._stack.length > 0
                        }
                    })
                    Object.defineProperty(iproto, "node", {
                        get: function () {
                            if (this._stack.length > 0) {
                                return this._stack[this._stack.length - 1]
                            }
                            return null
                        },
                        enumerable: true
                    })
                    iproto.clone = function () {
                        return new RedBlackTreeIterator(this.tree, this._stack.slice())
                    }

                    function swapNode(n, v) {
                        n.key = v.key
                        n.value = v.value
                        n.left = v.left
                        n.right = v.right
                        n._color = v._color
                        n._count = v._count
                    }

                    function fixDoubleBlack(stack) {
                        var n, p, s, z
                        for (var i = stack.length - 1; i >= 0; --i) {
                            n = stack[i]
                            if (i === 0) {
                                n._color = BLACK
                                return
                            }
                            p = stack[i - 1]
                            if (p.left === n) {
                                s = p.right
                                if (s.right && s.right._color === RED) {
                                    s = p.right = cloneNode(s)
                                    z = s.right = cloneNode(s.right)
                                    p.right = s.left
                                    s.left = p
                                    s.right = z
                                    s._color = p._color
                                    n._color = BLACK
                                    p._color = BLACK
                                    z._color = BLACK
                                    recount(p)
                                    recount(s)
                                    if (i > 1) {
                                        var pp = stack[i - 2]
                                        if (pp.left === p) {
                                            pp.left = s
                                        } else {
                                            pp.right = s
                                        }
                                    }
                                    stack[i - 1] = s
                                    return
                                } else if (s.left && s.left._color === RED) {
                                    s = p.right = cloneNode(s)
                                    z = s.left = cloneNode(s.left)
                                    p.right = z.left
                                    s.left = z.right
                                    z.left = p
                                    z.right = s
                                    z._color = p._color
                                    p._color = BLACK
                                    s._color = BLACK
                                    n._color = BLACK
                                    recount(p)
                                    recount(s)
                                    recount(z)
                                    if (i > 1) {
                                        var pp = stack[i - 2]
                                        if (pp.left === p) {
                                            pp.left = z
                                        } else {
                                            pp.right = z
                                        }
                                    }
                                    stack[i - 1] = z
                                    return
                                }
                                if (s._color === BLACK) {
                                    if (p._color === RED) {
                                        p._color = BLACK
                                        p.right = repaint(RED, s)
                                        return
                                    } else {
                                        p.right = repaint(RED, s)
                                        continue
                                    }
                                } else {
                                    s = cloneNode(s)
                                    p.right = s.left
                                    s.left = p
                                    s._color = p._color
                                    p._color = RED
                                    recount(p)
                                    recount(s)
                                    if (i > 1) {
                                        var pp = stack[i - 2]
                                        if (pp.left === p) {
                                            pp.left = s
                                        } else {
                                            pp.right = s
                                        }
                                    }
                                    stack[i - 1] = s
                                    stack[i] = p
                                    if (i + 1 < stack.length) {
                                        stack[i + 1] = n
                                    } else {
                                        stack.push(n)
                                    }
                                    i = i + 2
                                }
                            } else {
                                s = p.left
                                if (s.left && s.left._color === RED) {
                                    s = p.left = cloneNode(s)
                                    z = s.left = cloneNode(s.left)
                                    p.left = s.right
                                    s.right = p
                                    s.left = z
                                    s._color = p._color
                                    n._color = BLACK
                                    p._color = BLACK
                                    z._color = BLACK
                                    recount(p)
                                    recount(s)
                                    if (i > 1) {
                                        var pp = stack[i - 2]
                                        if (pp.right === p) {
                                            pp.right = s
                                        } else {
                                            pp.left = s
                                        }
                                    }
                                    stack[i - 1] = s
                                    return
                                } else if (s.right && s.right._color === RED) {
                                    s = p.left = cloneNode(s)
                                    z = s.right = cloneNode(s.right)
                                    p.left = z.right
                                    s.right = z.left
                                    z.right = p
                                    z.left = s
                                    z._color = p._color
                                    p._color = BLACK
                                    s._color = BLACK
                                    n._color = BLACK
                                    recount(p)
                                    recount(s)
                                    recount(z)
                                    if (i > 1) {
                                        var pp = stack[i - 2]
                                        if (pp.right === p) {
                                            pp.right = z
                                        } else {
                                            pp.left = z
                                        }
                                    }
                                    stack[i - 1] = z
                                    return
                                }
                                if (s._color === BLACK) {
                                    if (p._color === RED) {
                                        p._color = BLACK
                                        p.left = repaint(RED, s)
                                        return
                                    } else {
                                        p.left = repaint(RED, s)
                                        continue
                                    }
                                } else {
                                    s = cloneNode(s)
                                    p.left = s.right
                                    s.right = p
                                    s._color = p._color
                                    p._color = RED
                                    recount(p)
                                    recount(s)
                                    if (i > 1) {
                                        var pp = stack[i - 2]
                                        if (pp.right === p) {
                                            pp.right = s
                                        } else {
                                            pp.left = s
                                        }
                                    }
                                    stack[i - 1] = s
                                    stack[i] = p
                                    if (i + 1 < stack.length) {
                                        stack[i + 1] = n
                                    } else {
                                        stack.push(n)
                                    }
                                    i = i + 2
                                }
                            }
                        }
                    }
                    iproto.remove = function () {
                        var stack = this._stack
                        if (stack.length === 0) {
                            return this.tree
                        }
                        var cstack = new Array(stack.length)
                        var n = stack[stack.length - 1]
                        cstack[cstack.length - 1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count)
                        for (var i = stack.length - 2; i >= 0; --i) {
                            var n = stack[i]
                            if (n.left === stack[i + 1]) {
                                cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count)
                            } else {
                                cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count)
                            }
                        }
                        n = cstack[cstack.length - 1]
                        if (n.left && n.right) {
                            var split = cstack.length
                            n = n.left
                            while (n.right) {
                                cstack.push(n)
                                n = n.right
                            }
                            var v = cstack[split - 1]
                            cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count))
                            cstack[split - 1].key = n.key
                            cstack[split - 1].value = n.value
                            for (var i = cstack.length - 2; i >= split; --i) {
                                n = cstack[i]
                                cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count)
                            }
                            cstack[split - 1].left = cstack[split]
                        }
                        n = cstack[cstack.length - 1]
                        if (n._color === RED) {
                            var p = cstack[cstack.length - 2]
                            if (p.left === n) {
                                p.left = null
                            } else if (p.right === n) {
                                p.right = null
                            }
                            cstack.pop()
                            for (var i = 0; i < cstack.length; ++i) {
                                cstack[i]._count--
                            }
                            return new RedBlackTree(this.tree._compare, cstack[0])
                        } else {
                            if (n.left || n.right) {
                                if (n.left) {
                                    swapNode(n, n.left)
                                } else if (n.right) {
                                    swapNode(n, n.right)
                                }
                                n._color = BLACK
                                for (var i = 0; i < cstack.length - 1; ++i) {
                                    cstack[i]._count--
                                }
                                return new RedBlackTree(this.tree._compare, cstack[0])
                            } else if (cstack.length === 1) {
                                return new RedBlackTree(this.tree._compare, null)
                            } else {
                                for (var i = 0; i < cstack.length; ++i) {
                                    cstack[i]._count--
                                }
                                var parent = cstack[cstack.length - 2]
                                fixDoubleBlack(cstack)
                                if (parent.left === n) {
                                    parent.left = null
                                } else {
                                    parent.right = null
                                }
                            }
                        }
                        return new RedBlackTree(this.tree._compare, cstack[0])
                    }
                    Object.defineProperty(iproto, "key", {
                        get: function () {
                            if (this._stack.length > 0) {
                                return this._stack[this._stack.length - 1].key
                            }
                            return
                        },
                        enumerable: true
                    })
                    Object.defineProperty(iproto, "value", {
                        get: function () {
                            if (this._stack.length > 0) {
                                return this._stack[this._stack.length - 1].value
                            }
                            return
                        },
                        enumerable: true
                    })
                    Object.defineProperty(iproto, "index", {
                        get: function () {
                            var idx = 0
                            var stack = this._stack
                            if (stack.length === 0) {
                                var r = this.tree.root
                                if (r) {
                                    return r._count
                                }
                                return 0
                            } else if (stack[stack.length - 1].left) {
                                idx = stack[stack.length - 1].left._count
                            }
                            for (var s = stack.length - 2; s >= 0; --s) {
                                if (stack[s + 1] === stack[s].right) {
                                    ++idx
                                    if (stack[s].left) {
                                        idx += stack[s].left._count
                                    }
                                }
                            }
                            return idx
                        },
                        enumerable: true
                    })
                    iproto.next = function () {
                        var stack = this._stack
                        if (stack.length === 0) {
                            return
                        }
                        var n = stack[stack.length - 1]
                        if (n.right) {
                            n = n.right
                            while (n) {
                                stack.push(n)
                                n = n.left
                            }
                        } else {
                            stack.pop()
                            while (stack.length > 0 && stack[stack.length - 1].right === n) {
                                n = stack[stack.length - 1]
                                stack.pop()
                            }
                        }
                    }
                    Object.defineProperty(iproto, "hasNext", {
                        get: function () {
                            var stack = this._stack
                            if (stack.length === 0) {
                                return false
                            }
                            if (stack[stack.length - 1].right) {
                                return true
                            }
                            for (var s = stack.length - 1; s > 0; --s) {
                                if (stack[s - 1].left === stack[s]) {
                                    return true
                                }
                            }
                            return false
                        }
                    })
                    iproto.update = function (value) {
                        var stack = this._stack
                        if (stack.length === 0) {
                            throw new Error("Can't update empty node!")
                        }
                        var cstack = new Array(stack.length)
                        var n = stack[stack.length - 1]
                        cstack[cstack.length - 1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count)
                        for (var i = stack.length - 2; i >= 0; --i) {
                            n = stack[i]
                            if (n.left === stack[i + 1]) {
                                cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count)
                            } else {
                                cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count)
                            }
                        }
                        return new RedBlackTree(this.tree._compare, cstack[0])
                    }
                    iproto.prev = function () {
                        var stack = this._stack
                        if (stack.length === 0) {
                            return
                        }
                        var n = stack[stack.length - 1]
                        if (n.left) {
                            n = n.left
                            while (n) {
                                stack.push(n)
                                n = n.right
                            }
                        } else {
                            stack.pop()
                            while (stack.length > 0 && stack[stack.length - 1].left === n) {
                                n = stack[stack.length - 1]
                                stack.pop()
                            }
                        }
                    }
                    Object.defineProperty(iproto, "hasPrev", {
                        get: function () {
                            var stack = this._stack
                            if (stack.length === 0) {
                                return false
                            }
                            if (stack[stack.length - 1].left) {
                                return true
                            }
                            for (var s = stack.length - 1; s > 0; --s) {
                                if (stack[s - 1].right === stack[s]) {
                                    return true
                                }
                            }
                            return false
                        }
                    })

                    function defaultCompare(a, b) {
                        if (a < b) {
                            return -1
                        }
                        if (a > b) {
                            return 1
                        }
                        return 0
                    }

                    function createRBTree(compare) {
                        return new RedBlackTree(compare || defaultCompare, null)
                    }
                }, {}
            ],
            32: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = createSlabDecomposition
                    var bounds = _dereq_("binary-search-bounds")
                    var createRBTree = _dereq_("functional-red-black-tree")
                    var orient = _dereq_("robust-orientation")
                    var orderSegments = _dereq_("./lib/order-segments")

                    function SlabDecomposition(slabs, coordinates, horizontal) {
                        this.slabs = slabs
                        this.coordinates = coordinates
                        this.horizontal = horizontal
                    }
                    var proto = SlabDecomposition.prototype

                    function compareHorizontal(e, y) {
                        return e.y - y
                    }

                    function searchBucket(root, p) {
                        var lastNode = null
                        while (root) {
                            var seg = root.key
                            var l, r
                            if (seg[0][0] < seg[1][0]) {
                                l = seg[0]
                                r = seg[1]
                            } else {
                                l = seg[1]
                                r = seg[0]
                            }
                            var o = orient(l, r, p)
                            if (o < 0) {
                                root = root.left
                            } else if (o > 0) {
                                if (p[0] !== seg[1][0]) {
                                    lastNode = root
                                    root = root.right
                                } else {
                                    var val = searchBucket(root.right, p)
                                    if (val) {
                                        return val
                                    }
                                    root = root.left
                                }
                            } else {
                                if (p[0] !== seg[1][0]) {
                                    return root
                                } else {
                                    var val = searchBucket(root.right, p)
                                    if (val) {
                                        return val
                                    }
                                    root = root.left
                                }
                            }
                        }
                        return lastNode
                    }
                    proto.castUp = function (p) {
                        var bucket = bounds.le(this.coordinates, p[0])
                        if (bucket < 0) {
                            return -1
                        }
                        var root = this.slabs[bucket]
                        var hitNode = searchBucket(this.slabs[bucket], p)
                        var lastHit = -1
                        if (hitNode) {
                            lastHit = hitNode.value
                        }
                        if (this.coordinates[bucket] === p[0]) {
                            var lastSegment = null
                            if (hitNode) {
                                lastSegment = hitNode.key
                            }
                            if (bucket > 0) {
                                var otherHitNode = searchBucket(this.slabs[bucket - 1], p)
                                if (otherHitNode) {
                                    if (lastSegment) {
                                        if (orderSegments(otherHitNode.key, lastSegment) > 0) {
                                            lastSegment = otherHitNode.key
                                            lastHit = otherHitNode.value
                                        }
                                    } else {
                                        lastHit = otherHitNode.value
                                        lastSegment = otherHitNode.key
                                    }
                                }
                            }
                            var horiz = this.horizontal[bucket]
                            if (horiz.length > 0) {
                                var hbucket = bounds.ge(horiz, p[1], compareHorizontal)
                                if (hbucket < horiz.length) {
                                    var e = horiz[hbucket]
                                    if (p[1] === e.y) {
                                        if (e.closed) {
                                            return e.index
                                        } else {
                                            while (hbucket < horiz.length - 1 && horiz[hbucket + 1].y === p[1]) {
                                                hbucket = hbucket + 1
                                                e = horiz[hbucket]
                                                if (e.closed) {
                                                    return e.index
                                                }
                                            }
                                            if (e.y === p[1] && !e.start) {
                                                hbucket = hbucket + 1
                                                if (hbucket >= horiz.length) {
                                                    return lastHit
                                                }
                                                e = horiz[hbucket]
                                            }
                                        }
                                    }
                                    if (e.start) {
                                        if (lastSegment) {
                                            var o = orient(lastSegment[0], lastSegment[1], [p[0], e.y])
                                            if (lastSegment[0][0] > lastSegment[1][0]) {
                                                o = -o
                                            }
                                            if (o > 0) {
                                                lastHit = e.index
                                            }
                                        } else {
                                            lastHit = e.index
                                        }
                                    } else if (e.y !== p[1]) {
                                        lastHit = e.index
                                    }
                                }
                            }
                        }
                        return lastHit
                    }

                    function IntervalSegment(y, index, start, closed) {
                        this.y = y
                        this.index = index
                        this.start = start
                        this.closed = closed
                    }

                    function Event(x, segment, create, index) {
                        this.x = x
                        this.segment = segment
                        this.create = create
                        this.index = index
                    }

                    function createSlabDecomposition(segments) {
                        var numSegments = segments.length
                        var numEvents = 2 * numSegments
                        var events = new Array(numEvents)
                        for (var i = 0; i < numSegments; ++i) {
                            var s = segments[i]
                            var f = s[0][0] < s[1][0]
                            events[2 * i] = new Event(s[0][0], s, f, i)
                            events[2 * i + 1] = new Event(s[1][0], s, !f, i)
                        }
                        events.sort(function (a, b) {
                            var d = a.x - b.x
                            if (d) {
                                return d
                            }
                            d = a.create - b.create
                            if (d) {
                                return d
                            }
                            return Math.min(a.segment[0][1], a.segment[1][1]) - Math.min(b.segment[0][1], b.segment[1][1])
                        })
                        var tree = createRBTree(orderSegments)
                        var slabs = []
                        var lines = []
                        var horizontal = []
                        var lastX = -Infinity
                        for (var i = 0; i < numEvents;) {
                            var x = events[i].x
                            var horiz = []
                            while (i < numEvents) {
                                var e = events[i]
                                if (e.x !== x) {
                                    break
                                }
                                i += 1
                                if (e.segment[0][0] === e.x && e.segment[1][0] === e.x) {
                                    if (e.create) {
                                        if (e.segment[0][1] < e.segment[1][1]) {
                                            horiz.push(new IntervalSegment(e.segment[0][1], e.index, true, true))
                                            horiz.push(new IntervalSegment(e.segment[1][1], e.index, false, false))
                                        } else {
                                            horiz.push(new IntervalSegment(e.segment[1][1], e.index, true, false))
                                            horiz.push(new IntervalSegment(e.segment[0][1], e.index, false, true))
                                        }
                                    }
                                } else {
                                    if (e.create) {
                                        tree = tree.insert(e.segment, e.index)
                                    } else {
                                        tree = tree.remove(e.segment)
                                    }
                                }
                            }
                            slabs.push(tree.root)
                            lines.push(x)
                            horizontal.push(horiz)
                        }
                        return new SlabDecomposition(slabs, lines, horizontal)
                    }
                }, {
                    "./lib/order-segments": 29,
                    "binary-search-bounds": 30,
                    "functional-red-black-tree": 31,
                    "robust-orientation": 37
                }
            ],
            33: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = preprocessPolygon
                    var orient = _dereq_("robust-orientation")
                    var makeSlabs = _dereq_("slab-decomposition")

                    function dummyFunction(p) {
                        return -1
                    }

                    function createClassifyPoint(segments, slabs, outside, orientation) {
                        function classifyPoint(p) {
                            var index = slabs.castUp(p)
                            if (index < 0) {
                                return outside
                            }
                            var seg = segments[index]
                            if (!orientation) {
                                return orient(p, seg[0], seg[1])
                            } else {
                                return orient(p, seg[1], seg[0])
                            }
                        }
                        return classifyPoint
                    }

                    function preprocessPolygon(loops, orientation) {
                        orientation = !!orientation
                        var numLoops = loops.length
                        var numSegments = 0
                        for (var i = 0; i < numLoops; ++i) {
                            numSegments += loops[i].length
                        }
                        if (numSegments === 0) {
                            return dummyFunction
                        }
                        var segments = new Array(numSegments)
                        var ptr = 0
                        for (var i = 0; i < numLoops; ++i) {
                            var loop = loops[i]
                            var numVertices = loop.length
                            for (var s = numVertices - 1, t = 0; t < numVertices; s = (t++)) {
                                segments[ptr++] = [loop[s], loop[t]]
                            }
                        }
                        var slabs = makeSlabs(segments)
                        var outside
                        var root = slabs.slabs[0]
                        if (root) {
                            while (root.left) {
                                root = root.left
                            }
                            var h = root.key
                            if (h[0][0] < h[1][0]) {
                                outside = -1
                            } else {
                                outside = 1
                            }
                        } else {
                            var h = segments[slabs.horizontal[0][0].index]
                            if (h[0][1] < h[1][1]) {
                                outside = 1
                            } else {
                                outside = -1
                            }
                        }
                        if (orientation) {
                            outside = -outside
                        }
                        return createClassifyPoint(segments, slabs, outside, orientation)
                    }
                }, {
                    "robust-orientation": 37,
                    "slab-decomposition": 32
                }
            ],
            34: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(28)
                }, {}
            ],
            35: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(25)
                }, {
                    "two-product": 39,
                    "two-sum": 34
                }
            ],
            36: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = robustSubtract

                    function scalarScalar(a, b) {
                        var x = a + b
                        var bv = x - a
                        var av = x - bv
                        var br = b - bv
                        var ar = a - av
                        var y = ar + br
                        if (y) {
                            return [y, x]
                        }
                        return [x]
                    }

                    function robustSubtract(e, f) {
                        var ne = e.length | 0
                        var nf = f.length | 0
                        if (ne === 1 && nf === 1) {
                            return scalarScalar(e[0], -f[0])
                        }
                        var n = ne + nf
                        var g = new Array(n)
                        var count = 0
                        var eptr = 0
                        var fptr = 0
                        var abs = Math.abs
                        var ei = e[eptr]
                        var ea = abs(ei)
                        var fi = -f[fptr]
                        var fa = abs(fi)
                        var a, b
                        if (ea < fa) {
                            b = ei
                            eptr += 1
                            if (eptr < ne) {
                                ei = e[eptr]
                                ea = abs(ei)
                            }
                        } else {
                            b = fi
                            fptr += 1
                            if (fptr < nf) {
                                fi = -f[fptr]
                                fa = abs(fi)
                            }
                        }
                        if ((eptr < ne && ea < fa) || (fptr >= nf)) {
                            a = ei
                            eptr += 1
                            if (eptr < ne) {
                                ei = e[eptr]
                                ea = abs(ei)
                            }
                        } else {
                            a = fi
                            fptr += 1
                            if (fptr < nf) {
                                fi = -f[fptr]
                                fa = abs(fi)
                            }
                        }
                        var x = a + b
                        var bv = x - a
                        var y = b - bv
                        var q0 = y
                        var q1 = x
                        var _x, _bv, _av, _br, _ar
                        while (eptr < ne && fptr < nf) {
                            if (ea < fa) {
                                a = ei
                                eptr += 1
                                if (eptr < ne) {
                                    ei = e[eptr]
                                    ea = abs(ei)
                                }
                            } else {
                                a = fi
                                fptr += 1
                                if (fptr < nf) {
                                    fi = -f[fptr]
                                    fa = abs(fi)
                                }
                            }
                            b = q0
                            x = a + b
                            bv = x - a
                            y = b - bv
                            if (y) {
                                g[count++] = y
                            }
                            _x = q1 + x
                            _bv = _x - q1
                            _av = _x - _bv
                            _br = x - _bv
                            _ar = q1 - _av
                            q0 = _ar + _br
                            q1 = _x
                        }
                        while (eptr < ne) {
                            a = ei
                            b = q0
                            x = a + b
                            bv = x - a
                            y = b - bv
                            if (y) {
                                g[count++] = y
                            }
                            _x = q1 + x
                            _bv = _x - q1
                            _av = _x - _bv
                            _br = x - _bv
                            _ar = q1 - _av
                            q0 = _ar + _br
                            q1 = _x
                            eptr += 1
                            if (eptr < ne) {
                                ei = e[eptr]
                            }
                        }
                        while (fptr < nf) {
                            a = fi
                            b = q0
                            x = a + b
                            bv = x - a
                            y = b - bv
                            if (y) {
                                g[count++] = y
                            }
                            _x = q1 + x
                            _bv = _x - q1
                            _av = _x - _bv
                            _br = x - _bv
                            _ar = q1 - _av
                            q0 = _ar + _br
                            q1 = _x
                            fptr += 1
                            if (fptr < nf) {
                                fi = -f[fptr]
                            }
                        }
                        if (q0) {
                            g[count++] = q0
                        }
                        if (q1) {
                            g[count++] = q1
                        }
                        if (!count) {
                            g[count++] = 0.0
                        }
                        g.length = count
                        return g
                    }
                }, {}
            ],
            37: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var twoProduct = _dereq_("two-product")
                    var robustSum = _dereq_("robust-sum")
                    var robustScale = _dereq_("robust-scale")
                    var robustSubtract = _dereq_("robust-subtract")
                    var NUM_EXPAND = 5
                    var EPSILON = 1.1102230246251565e-16
                    var ERRBOUND3 = (3.0 + 16.0 * EPSILON) * EPSILON
                    var ERRBOUND4 = (7.0 + 56.0 * EPSILON) * EPSILON

                    function cofactor(m, c) {
                        var result = new Array(m.length - 1)
                        for (var i = 1; i < m.length; ++i) {
                            var r = result[i - 1] = new Array(m.length - 1)
                            for (var j = 0, k = 0; j < m.length; ++j) {
                                if (j === c) {
                                    continue
                                }
                                r[k++] = m[i][j]
                            }
                        }
                        return result
                    }

                    function matrix(n) {
                        var result = new Array(n)
                        for (var i = 0; i < n; ++i) {
                            result[i] = new Array(n)
                            for (var j = 0; j < n; ++j) {
                                result[i][j] = ["m", j, "[", (n - i - 1), "]"].join("")
                            }
                        }
                        return result
                    }

                    function sign(n) {
                        if (n & 1) {
                            return "-"
                        }
                        return ""
                    }

                    function generateSum(expr) {
                        if (expr.length === 1) {
                            return expr[0]
                        } else if (expr.length === 2) {
                            return ["sum(", expr[0], ",", expr[1], ")"].join("")
                        } else {
                            var m = expr.length >> 1
                            return ["sum(", generateSum(expr.slice(0, m)), ",", generateSum(expr.slice(m)), ")"].join("")
                        }
                    }

                    function determinant(m) {
                        if (m.length === 2) {
                            return [
                                ["sum(prod(", m[0][0], ",", m[1][1], "),prod(-", m[0][1], ",", m[1][0], "))"].join("")
                            ]
                        } else {
                            var expr = []
                            for (var i = 0; i < m.length; ++i) {
                                expr.push(["scale(", generateSum(determinant(cofactor(m, i))), ",", sign(i), m[0][i], ")"].join(""))
                            }
                            return expr
                        }
                    }

                    function orientation(n) {
                        var pos = []
                        var neg = []
                        var m = matrix(n)
                        var args = []
                        for (var i = 0; i < n; ++i) {
                            if ((i & 1) === 0) {
                                pos.push.apply(pos, determinant(cofactor(m, i)))
                            } else {
                                neg.push.apply(neg, determinant(cofactor(m, i)))
                            }
                            args.push("m" + i)
                        }
                        var posExpr = generateSum(pos)
                        var negExpr = generateSum(neg)
                        var funcName = "orientation" + n + "Exact"
                        var code = ["function ", funcName, "(", args.join(), "){var p=", posExpr, ",n=", negExpr, ",d=sub(p,n);\
return d[d.length-1];};return ", funcName].join("")
                        var proc = new Function("sum", "prod", "scale", "sub", code)
                        return proc(robustSum, twoProduct, robustScale, robustSubtract)
                    }
                    var orientation3Exact = orientation(3)
                    var orientation4Exact = orientation(4)
                    var CACHED = [
                        function orientation0() {
                            return 0
                        },
                        function orientation1() {
                            return 0
                        },
                        function orientation2(a, b) {
                            return b[0] - a[0]
                        },
                        function orientation3(a, b, c) {
                            var l = (a[1] - c[1]) * (b[0] - c[0])
                            var r = (a[0] - c[0]) * (b[1] - c[1])
                            var det = l - r
                            var s
                            if (l > 0) {
                                if (r <= 0) {
                                    return det
                                } else {
                                    s = l + r
                                }
                            } else if (l < 0) {
                                if (r >= 0) {
                                    return det
                                } else {
                                    s = -(l + r)
                                }
                            } else {
                                return det
                            }
                            var tol = ERRBOUND3 * s
                            if (det >= tol || det <= -tol) {
                                return det
                            }
                            return orientation3Exact(a, b, c)
                        },
                        function orientation4(a, b, c, d) {
                            var adx = a[0] - d[0]
                            var bdx = b[0] - d[0]
                            var cdx = c[0] - d[0]
                            var ady = a[1] - d[1]
                            var bdy = b[1] - d[1]
                            var cdy = c[1] - d[1]
                            var adz = a[2] - d[2]
                            var bdz = b[2] - d[2]
                            var cdz = c[2] - d[2]
                            var bdxcdy = bdx * cdy
                            var cdxbdy = cdx * bdy
                            var cdxady = cdx * ady
                            var adxcdy = adx * cdy
                            var adxbdy = adx * bdy
                            var bdxady = bdx * ady
                            var det = adz * (bdxcdy - cdxbdy) + bdz * (cdxady - adxcdy) + cdz * (adxbdy - bdxady)
                            var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz)
                            var tol = ERRBOUND4 * permanent
                            if ((det > tol) || (-det > tol)) {
                                return det
                            }
                            return orientation4Exact(a, b, c, d)
                        }
                    ]

                    function slowOrient(args) {
                        var proc = CACHED[args.length]
                        if (!proc) {
                            proc = CACHED[args.length] = orientation(args.length)
                        }
                        return proc.apply(undefined, args)
                    }

                    function generateOrientationProc() {
                        while (CACHED.length <= NUM_EXPAND) {
                            CACHED.push(orientation(CACHED.length))
                        }
                        var args = []
                        var procArgs = ["slow"]
                        for (var i = 0; i <= NUM_EXPAND; ++i) {
                            args.push("a" + i)
                            procArgs.push("o" + i)
                        }
                        var code = ["function getOrientation(", args.join(), "){switch(arguments.length){case 0:case 1:return 0;"]
                        for (var i = 2; i <= NUM_EXPAND; ++i) {
                            code.push("case ", i, ":return o", i, "(", args.slice(0, i).join(), ");")
                        }
                        code.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation")
                        procArgs.push(code.join(""))
                        var proc = Function.apply(undefined, procArgs)
                        module.exports = proc.apply(undefined, [slowOrient].concat(CACHED))
                        for (var i = 0; i <= NUM_EXPAND; ++i) {
                            module.exports[i] = CACHED[i]
                        }
                    }
                    generateOrientationProc()
                }, {
                    "robust-scale": 35,
                    "robust-subtract": 36,
                    "robust-sum": 38,
                    "two-product": 39
                }
            ],
            38: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(17)
                }, {}
            ],
            39: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(16)
                }, {}
            ],
            40: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(12)
                }, {}
            ],
            41: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = planarGraphToPolyline
                    var e2a = _dereq_("edges-to-adjacency-list")
                    var planarDual = _dereq_("planar-dual")
                    var preprocessPolygon = _dereq_("point-in-big-polygon")
                    var twoProduct = _dereq_("two-product")
                    var robustSum = _dereq_("robust-sum")
                    var uniq = _dereq_("uniq")
                    var dup = _dereq_("dup")

                    function planarGraphToPolyline(edges, positions) {
                        var numVertices = positions.length
                        var numEdges = edges.length
                        var adj = e2a(edges, positions.length)
                        for (var i = 0; i < numVertices; ++i) {
                            if (adj[i].length % 2 === 1) {
                                throw new Error("planar-graph-to-polyline: graph must be manifold")
                            }
                        }
                        var faces = planarDual(edges, positions)

                        function ccw(c) {
                            var n = c.length
                            var area = [0]
                            for (var j = 0; j < n; ++j) {
                                var a = positions[c[j]]
                                var b = positions[c[(j + 1) % n]]
                                var t00 = twoProduct(-a[0], a[1])
                                var t01 = twoProduct(-a[0], b[1])
                                var t10 = twoProduct(b[0], a[1])
                                var t11 = twoProduct(b[0], b[1])
                                area = robustSum(area, robustSum(robustSum(t00, t01), robustSum(t10, t11)))
                            }
                            return area[area.length - 1] > 0
                        }
                        faces = faces.filter(ccw)
                        var numFaces = faces.length
                        var parent = new Array(numFaces)
                        var containment = new Array(numFaces)
                        for (var i = 0; i < numFaces; ++i) {
                            parent[i] = i
                            var row = new Array(numFaces)
                            var loopVertices = faces[i].map(function (v) {
                                return positions[v]
                            })
                            var pmc = preprocessPolygon([loopVertices])
                            var count = 0
                            outer: for (var j = 0; j < numFaces; ++j) {
                                row[j] = 0
                                if (i === j) {
                                    continue
                                }
                                var c = faces[j]
                                var n = c.length
                                for (var k = 0; k < n; ++k) {
                                    var d = pmc(positions[c[k]])
                                    if (d !== 0) {
                                        if (d > 0) {
                                            row[j] = 1
                                            count += 1
                                        }
                                        continue outer
                                    }
                                }
                                row[j] = 1
                                count += 1
                            }
                            containment[i] = [count, i, row]
                        }
                        containment.sort(function (a, b) {
                            return b[0] - a[0]
                        })
                        for (var i = 0; i < numFaces; ++i) {
                            var row = containment[i]
                            var idx = row[1]
                            var children = row[2]
                            for (var j = 0; j < numFaces; ++j) {
                                if (children[j]) {
                                    parent[j] = idx
                                }
                            }
                        }
                        var fadj = dup([numFaces, 0])
                        for (var i = 0; i < numFaces; ++i) {
                            fadj[i].push(parent[i])
                            fadj[parent[i]].push(i)
                        }
                        var edgeAdjacency = {}
                        var internalVertices = dup(numVertices, false)
                        for (var i = 0; i < numFaces; ++i) {
                            var c = faces[i]
                            var n = c.length
                            for (var j = 0; j < n; ++j) {
                                var a = c[j]
                                var b = c[(j + 1) % n]
                                var key = Math.min(a, b) + ":" + Math.max(a, b)
                                if (key in edgeAdjacency) {
                                    var neighbor = edgeAdjacency[key]
                                    fadj[neighbor].push(i)
                                    fadj[i].push(neighbor)
                                    internalVertices[a] = internalVertices[b] = true
                                } else {
                                    edgeAdjacency[key] = i
                                }
                            }
                        }

                        function sharedBoundary(c) {
                            var n = c.length
                            for (var i = 0; i < n; ++i) {
                                if (!internalVertices[c[i]]) {
                                    return false
                                }
                            }
                            return true
                        }
                        var toVisit = []
                        var parity = dup(numFaces, -1)
                        for (var i = 0; i < numFaces; ++i) {
                            if (parent[i] === i && !sharedBoundary(faces[i])) {
                                toVisit.push(i)
                                parity[i] = 0
                            } else {
                                parity[i] = -1
                            }
                        }
                        var result = []
                        while (toVisit.length > 0) {
                            var top = toVisit.pop()
                            var nbhd = fadj[top]
                            uniq(nbhd, function (a, b) {
                                return a - b
                            })
                            var nnbhr = nbhd.length
                            var p = parity[top]
                            var polyline
                            if (p === 0) {
                                var c = faces[top]
                                polyline = [c]
                            }
                            for (var i = 0; i < nnbhr; ++i) {
                                var f = nbhd[i]
                                if (parity[f] >= 0) {
                                    continue
                                }
                                parity[f] = p ^ 1
                                toVisit.push(f)
                                if (p === 0) {
                                    var c = faces[f]
                                    if (!sharedBoundary(c)) {
                                        c.reverse()
                                        polyline.push(c)
                                    }
                                }
                            }
                            if (p === 0) {
                                result.push(polyline)
                            }
                        }
                        return result
                    }
                }, {
                    "dup": 21,
                    "edges-to-adjacency-list": 22,
                    "planar-dual": 23,
                    "point-in-big-polygon": 33,
                    "robust-sum": 38,
                    "two-product": 39,
                    "uniq": 40
                }
            ],
            42: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(28)
                }, {}
            ],
            43: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(25)
                }, {
                    "two-product": 46,
                    "two-sum": 42
                }
            ],
            44: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(36)
                }, {}
            ],
            45: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(17)
                }, {}
            ],
            46: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(16)
                }, {}
            ],
            47: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(37)
                }, {
                    "robust-scale": 43,
                    "robust-subtract": 44,
                    "robust-sum": 45,
                    "two-product": 46
                }
            ],
            48: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(10)
                }, {}
            ],
            49: [
                function (_dereq_, module, exports) {
                    "use strict";
                    "use restrict";
                    module.exports = UnionFind;

                    function UnionFind(count) {
                        this.roots = new Array(count);
                        this.ranks = new Array(count);
                        for (var i = 0; i < count; ++i) {
                            this.roots[i] = i;
                            this.ranks[i] = 0;
                        }
                    }
                    UnionFind.prototype.length = function () {
                        return this.roots.length;
                    }
                    UnionFind.prototype.makeSet = function () {
                        var n = this.roots.length;
                        this.roots.push(n);
                        this.ranks.push(0);
                        return n;
                    }
                    UnionFind.prototype.find = function (x) {
                        var roots = this.roots;
                        while (roots[x] !== x) {
                            var y = roots[x];
                            roots[x] = roots[y];
                            x = y;
                        }
                        return x;
                    }
                    UnionFind.prototype.link = function (x, y) {
                        var xr = this.find(x),
                            yr = this.find(y);
                        if (xr === yr) {
                            return;
                        }
                        var ranks = this.ranks,
                            roots = this.roots,
                            xd = ranks[xr],
                            yd = ranks[yr];
                        if (xd < yd) {
                            roots[xr] = yr;
                        } else if (yd < xd) {
                            roots[yr] = xr;
                        } else {
                            roots[yr] = xr;
                            ++ranks[xr];
                        }
                    }
                }, {}
            ],
            50: [
                function (_dereq_, module, exports) {
                    "use strict";
                    "use restrict";
                    var bits = _dereq_("bit-twiddle"),
                        UnionFind = _dereq_("union-find")

                    function dimension(cells) {
                        var d = 0,
                            max = Math.max
                        for (var i = 0, il = cells.length; i < il; ++i) {
                            d = max(d, cells[i].length)
                        }
                        return d - 1
                    }
                    exports.dimension = dimension

                    function countVertices(cells) {
                        var vc = -1,
                            max = Math.max
                        for (var i = 0, il = cells.length; i < il; ++i) {
                            var c = cells[i]
                            for (var j = 0, jl = c.length; j < jl; ++j) {
                                vc = max(vc, c[j])
                            }
                        }
                        return vc + 1
                    }
                    exports.countVertices = countVertices

                    function cloneCells(cells) {
                        var ncells = new Array(cells.length)
                        for (var i = 0, il = cells.length; i < il; ++i) {
                            ncells[i] = cells[i].slice(0)
                        }
                        return ncells
                    }
                    exports.cloneCells = cloneCells

                    function compareCells(a, b) {
                        var n = a.length,
                            t = a.length - b.length,
                            min = Math.min
                        if (t) {
                            return t
                        }
                        switch (n) {
                        case 0:
                            return 0;
                        case 1:
                            return a[0] - b[0];
                        case 2:
                            var d = a[0] + a[1] - b[0] - b[1]
                            if (d) {
                                return d
                            }
                            return min(a[0], a[1]) - min(b[0], b[1])
                        case 3:
                            var l1 = a[0] + a[1],
                                m1 = b[0] + b[1]
                            d = l1 + a[2] - (m1 + b[2])
                            if (d) {
                                return d
                            }
                            var l0 = min(a[0], a[1]),
                                m0 = min(b[0], b[1]),
                                d = min(l0, a[2]) - min(m0, b[2])
                            if (d) {
                                return d
                            }
                            return min(l0 + a[2], l1) - min(m0 + b[2], m1)
                        default:
                            var as = a.slice(0)
                            as.sort()
                            var bs = b.slice(0)
                            bs.sort()
                            for (var i = 0; i < n; ++i) {
                                t = as[i] - bs[i]
                                if (t) {
                                    return t
                                }
                            }
                            return 0
                        }
                    }
                    exports.compareCells = compareCells

                    function compareZipped(a, b) {
                        return compareCells(a[0], b[0])
                    }

                    function normalize(cells, attr) {
                        if (attr) {
                            var len = cells.length
                            var zipped = new Array(len)
                            for (var i = 0; i < len; ++i) {
                                zipped[i] = [cells[i], attr[i]]
                            }
                            zipped.sort(compareZipped)
                            for (var i = 0; i < len; ++i) {
                                cells[i] = zipped[i][0]
                                attr[i] = zipped[i][1]
                            }
                            return cells
                        } else {
                            cells.sort(compareCells)
                            return cells
                        }
                    }
                    exports.normalize = normalize

                    function unique(cells) {
                        if (cells.length === 0) {
                            return []
                        }
                        var ptr = 1,
                            len = cells.length
                        for (var i = 1; i < len; ++i) {
                            var a = cells[i]
                            if (compareCells(a, cells[i - 1])) {
                                if (i === ptr) {
                                    ptr++
                                    continue
                                }
                                cells[ptr++] = a
                            }
                        }
                        cells.length = ptr
                        return cells
                    }
                    exports.unique = unique;

                    function findCell(cells, c) {
                        var lo = 0,
                            hi = cells.length - 1,
                            r = -1
                        while (lo <= hi) {
                            var mid = (lo + hi) >> 1,
                                s = compareCells(cells[mid], c)
                            if (s <= 0) {
                                if (s === 0) {
                                    r = mid
                                }
                                lo = mid + 1
                            } else if (s > 0) {
                                hi = mid - 1
                            }
                        }
                        return r
                    }
                    exports.findCell = findCell;

                    function incidence(from_cells, to_cells) {
                        var index = new Array(from_cells.length)
                        for (var i = 0, il = index.length; i < il; ++i) {
                            index[i] = []
                        }
                        var b = []
                        for (var i = 0, n = to_cells.length; i < n; ++i) {
                            var c = to_cells[i]
                            var cl = c.length
                            for (var k = 1, kn = (1 << cl); k < kn; ++k) {
                                b.length = bits.popCount(k)
                                var l = 0
                                for (var j = 0; j < cl; ++j) {
                                    if (k & (1 << j)) {
                                        b[l++] = c[j]
                                    }
                                }
                                var idx = findCell(from_cells, b)
                                if (idx < 0) {
                                    continue
                                }
                                while (true) {
                                    index[idx++].push(i)
                                    if (idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {
                                        break
                                    }
                                }
                            }
                        }
                        return index
                    }
                    exports.incidence = incidence

                    function dual(cells, vertex_count) {
                        if (!vertex_count) {
                            return incidence(unique(skeleton(cells, 0)), cells, 0)
                        }
                        var res = new Array(vertex_count)
                        for (var i = 0; i < vertex_count; ++i) {
                            res[i] = []
                        }
                        for (var i = 0, len = cells.length; i < len; ++i) {
                            var c = cells[i]
                            for (var j = 0, cl = c.length; j < cl; ++j) {
                                res[c[j]].push(i)
                            }
                        }
                        return res
                    }
                    exports.dual = dual

                    function explode(cells) {
                        var result = []
                        for (var i = 0, il = cells.length; i < il; ++i) {
                            var c = cells[i],
                                cl = c.length | 0
                            for (var j = 1, jl = (1 << cl); j < jl; ++j) {
                                var b = []
                                for (var k = 0; k < cl; ++k) {
                                    if ((j >>> k) & 1) {
                                        b.push(c[k])
                                    }
                                }
                                result.push(b)
                            }
                        }
                        return normalize(result)
                    }
                    exports.explode = explode

                    function skeleton(cells, n) {
                        if (n < 0) {
                            return []
                        }
                        var result = [],
                            k0 = (1 << (n + 1)) - 1
                        for (var i = 0; i < cells.length; ++i) {
                            var c = cells[i]
                            for (var k = k0; k < (1 << c.length); k = bits.nextCombination(k)) {
                                var b = new Array(n + 1),
                                    l = 0
                                for (var j = 0; j < c.length; ++j) {
                                    if (k & (1 << j)) {
                                        b[l++] = c[j]
                                    }
                                }
                                result.push(b)
                            }
                        }
                        return normalize(result)
                    }
                    exports.skeleton = skeleton;

                    function boundary(cells) {
                        var res = []
                        for (var i = 0, il = cells.length; i < il; ++i) {
                            var c = cells[i]
                            for (var j = 0, cl = c.length; j < cl; ++j) {
                                var b = new Array(c.length - 1)
                                for (var k = 0, l = 0; k < cl; ++k) {
                                    if (k !== j) {
                                        b[l++] = c[k]
                                    }
                                }
                                res.push(b)
                            }
                        }
                        return normalize(res)
                    }
                    exports.boundary = boundary;

                    function connectedComponents_dense(cells, vertex_count) {
                        var labels = new UnionFind(vertex_count)
                        for (var i = 0; i < cells.length; ++i) {
                            var c = cells[i]
                            for (var j = 0; j < c.length; ++j) {
                                for (var k = j + 1; k < c.length; ++k) {
                                    labels.link(c[j], c[k])
                                }
                            }
                        }
                        var components = [],
                            component_labels = labels.ranks
                        for (var i = 0; i < component_labels.length; ++i) {
                            component_labels[i] = -1
                        }
                        for (var i = 0; i < cells.length; ++i) {
                            var l = labels.find(cells[i][0])
                            if (component_labels[l] < 0) {
                                component_labels[l] = components.length
                                components.push([cells[i].slice(0)])
                            } else {
                                components[component_labels[l]].push(cells[i].slice(0))
                            }
                        }
                        return components
                    }

                    function connectedComponents_sparse(cells) {
                        var vertices = unique(normalize(skeleton(cells, 0))),
                            labels = new UnionFind(vertices.length)
                        for (var i = 0; i < cells.length; ++i) {
                            var c = cells[i]
                            for (var j = 0; j < c.length; ++j) {
                                var vj = findCell(vertices, [c[j]])
                                for (var k = j + 1; k < c.length; ++k) {
                                    labels.link(vj, findCell(vertices, [c[k]]))
                                }
                            }
                        }
                        var components = [],
                            component_labels = labels.ranks
                        for (var i = 0; i < component_labels.length; ++i) {
                            component_labels[i] = -1
                        }
                        for (var i = 0; i < cells.length; ++i) {
                            var l = labels.find(findCell(vertices, [cells[i][0]]));
                            if (component_labels[l] < 0) {
                                component_labels[l] = components.length
                                components.push([cells[i].slice(0)])
                            } else {
                                components[component_labels[l]].push(cells[i].slice(0))
                            }
                        }
                        return components
                    }

                    function connectedComponents(cells, vertex_count) {
                        if (vertex_count) {
                            return connectedComponents_dense(cells, vertex_count)
                        }
                        return connectedComponents_sparse(cells)
                    }
                    exports.connectedComponents = connectedComponents
                }, {
                    "bit-twiddle": 48,
                    "union-find": 49
                }
            ],
            51: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = simplifyPolygon
                    var orient = _dereq_("robust-orientation")
                    var sc = _dereq_("simplicial-complex")

                    function errorWeight(base, a, b) {
                        var area = Math.abs(orient(base, a, b))
                        var perim = Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2))
                        return area / perim
                    }

                    function simplifyPolygon(cells, positions, minArea) {
                        var n = positions.length
                        var nc = cells.length
                        var inv = new Array(n)
                        var outv = new Array(n)
                        var weights = new Array(n)
                        var dead = new Array(n)
                        for (var i = 0; i < n; ++i) {
                            inv[i] = outv[i] = -1
                            weights[i] = Infinity
                            dead[i] = false
                        }
                        for (var i = 0; i < nc; ++i) {
                            var c = cells[i]
                            if (c.length !== 2) {
                                throw new Error("Input must be a graph")
                            }
                            var s = c[1]
                            var t = c[0]
                            if (outv[t] !== -1) {
                                outv[t] = -2
                            } else {
                                outv[t] = s
                            }
                            if (inv[s] !== -1) {
                                inv[s] = -2
                            } else {
                                inv[s] = t
                            }
                        }

                        function computeWeight(i) {
                            if (dead[i]) {
                                return Infinity
                            }
                            var s = inv[i]
                            var t = outv[i]
                            if ((s < 0) || (t < 0)) {
                                return Infinity
                            } else {
                                return errorWeight(positions[i], positions[s], positions[t])
                            }
                        }

                        function heapSwap(i, j) {
                            var a = heap[i]
                            var b = heap[j]
                            heap[i] = b
                            heap[j] = a
                            index[a] = j
                            index[b] = i
                        }

                        function heapWeight(i) {
                            return weights[heap[i]]
                        }

                        function heapParent(i) {
                            if (i & 1) {
                                return (i - 1) >> 1
                            }
                            return (i >> 1) - 1
                        }

                        function heapDown(i) {
                            var w = heapWeight(i)
                            while (true) {
                                var tw = w
                                var left = 2 * i + 1
                                var right = 2 * (i + 1)
                                var next = i
                                if (left < heapCount) {
                                    var lw = heapWeight(left)
                                    if (lw < tw) {
                                        next = left
                                        tw = lw
                                    }
                                }
                                if (right < heapCount) {
                                    var rw = heapWeight(right)
                                    if (rw < tw) {
                                        next = right
                                    }
                                }
                                if (next === i) {
                                    return i
                                }
                                heapSwap(i, next)
                                i = next
                            }
                        }

                        function heapUp(i) {
                            var w = heapWeight(i)
                            while (i > 0) {
                                var parent = heapParent(i)
                                if (parent >= 0) {
                                    var pw = heapWeight(parent)
                                    if (w < pw) {
                                        heapSwap(i, parent)
                                        i = parent
                                        continue
                                    }
                                }
                                return i
                            }
                        }

                        function heapPop() {
                            if (heapCount > 0) {
                                var head = heap[0]
                                heapSwap(0, heapCount - 1)
                                heapCount -= 1
                                heapDown(0)
                                return head
                            }
                            return -1
                        }

                        function heapUpdate(i, w) {
                            var a = heap[i]
                            if (weights[a] === w) {
                                return i
                            }
                            weights[a] = -Infinity
                            heapUp(i)
                            heapPop()
                            weights[a] = w
                            heapCount += 1
                            return heapUp(heapCount - 1)
                        }

                        function kill(i) {
                            if (dead[i]) {
                                return
                            }
                            dead[i] = true
                            var s = inv[i]
                            var t = outv[i]
                            if (inv[t] >= 0) {
                                inv[t] = s
                            }
                            if (outv[s] >= 0) {
                                outv[s] = t
                            }
                            if (index[s] >= 0) {
                                heapUpdate(index[s], computeWeight(s))
                            }
                            if (index[t] >= 0) {
                                heapUpdate(index[t], computeWeight(t))
                            }
                        }
                        var heap = []
                        var index = new Array(n)
                        for (var i = 0; i < n; ++i) {
                            var w = weights[i] = computeWeight(i)
                            if (w < Infinity) {
                                index[i] = heap.length
                                heap.push(i)
                            } else {
                                index[i] = -1
                            }
                        }
                        var heapCount = heap.length
                        for (var i = heapCount >> 1; i >= 0; --i) {
                            heapDown(i)
                        }
                        while (true) {
                            var hmin = heapPop()
                            if ((hmin < 0) || (weights[hmin] > minArea)) {
                                break
                            }
                            kill(hmin)
                        }
                        var npositions = []
                        for (var i = 0; i < n; ++i) {
                            if (!dead[i]) {
                                index[i] = npositions.length
                                npositions.push(positions[i].slice())
                            }
                        }
                        var nv = npositions.length

                        function tortoiseHare(seq, start) {
                            if (seq[start] < 0) {
                                return start
                            }
                            var t = start
                            var h = start
                            do {
                                var nh = seq[h]
                                if (!dead[h] || nh < 0 || nh === h) {
                                    break
                                }
                                h = nh
                                nh = seq[h]
                                if (!dead[h] || nh < 0 || nh === h) {
                                    break
                                }
                                h = nh
                                t = seq[t]
                            } while (t !== h)
                            for (var v = start; v !== h; v = seq[v]) {
                                seq[v] = h
                            }
                            return h
                        }
                        var ncells = []
                        cells.forEach(function (c) {
                            var tin = tortoiseHare(inv, c[0])
                            var tout = tortoiseHare(outv, c[1])
                            if (tin >= 0 && tout >= 0 && tin !== tout) {
                                var cin = index[tin]
                                var cout = index[tout]
                                if (cin !== cout) {
                                    ncells.push([cin, cout])
                                }
                            }
                        })
                        sc.unique(sc.normalize(ncells))
                        return {
                            positions: npositions,
                            edges: ncells
                        }
                    }
                }, {
                    "robust-orientation": 47,
                    "simplicial-complex": 50
                }
            ],
            52: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var pool = _dereq_("typedarray-pool")
                    module.exports = createSurfaceExtractor

                    function array(i) {
                        return "a" + i
                    }

                    function data(i) {
                        return "d" + i
                    }

                    function cube(i, bitmask) {
                        return "c" + i + "_" + bitmask
                    }

                    function shape(i) {
                        return "s" + i
                    }

                    function stride(i, j) {
                        return "t" + i + "_" + j
                    }

                    function offset(i) {
                        return "o" + i
                    }

                    function scalar(i) {
                        return "x" + i
                    }

                    function pointer(i) {
                        return "p" + i
                    }

                    function delta(i, bitmask) {
                        return "d" + i + "_" + bitmask
                    }

                    function index(i) {
                        return "i" + i
                    }

                    function step(i, j) {
                        return "u" + i + "_" + j
                    }

                    function pcube(bitmask) {
                        return "b" + bitmask
                    }

                    function qcube(bitmask) {
                        return "y" + bitmask
                    }

                    function pdelta(bitmask) {
                        return "e" + bitmask
                    }

                    function vert(i) {
                        return "v" + i
                    }
                    var VERTEX_IDS = "V"
                    var PHASES = "P"
                    var VERTEX_COUNT = "N"
                    var POOL_SIZE = "Q"
                    var POINTER = "X"
                    var TEMPORARY = "T"

                    function permBitmask(dimension, mask, order) {
                        var r = 0
                        for (var i = 0; i < dimension; ++i) {
                            if (mask & (1 << i)) {
                                r |= (1 << order[i])
                            }
                        }
                        return r
                    }

                    function compileSurfaceProcedure(vertexFunc, faceFunc, phaseFunc, scalarArgs, order, typesig) {
                        var arrayArgs = typesig.length
                        var dimension = order.length
                        if (dimension < 2) {
                            throw new Error("ndarray-extract-contour: Dimension must be at least 2")
                        }
                        var funcName = "extractContour" + order.join("_")
                        var code = []
                        var vars = []
                        var args = []
                        for (var i = 0; i < arrayArgs; ++i) {
                            args.push(array(i))
                        }
                        for (var i = 0; i < scalarArgs; ++i) {
                            args.push(scalar(i))
                        }
                        for (var i = 0; i < dimension; ++i) {
                            vars.push(shape(i) + "=" + array(0) + ".shape[" + i + "]|0")
                        }
                        for (var i = 0; i < arrayArgs; ++i) {
                            vars.push(data(i) + "=" + array(i) + ".data", offset(i) + "=" + array(i) + ".offset|0")
                            for (var j = 0; j < dimension; ++j) {
                                vars.push(stride(i, j) + "=" + array(i) + ".stride[" + j + "]|0")
                            }
                        }
                        for (var i = 0; i < arrayArgs; ++i) {
                            vars.push(pointer(i) + "=" + offset(i))
                            vars.push(cube(i, 0))
                            for (var j = 1; j < (1 << dimension); ++j) {
                                var ptrStr = []
                                for (var k = 0; k < dimension; ++k) {
                                    if (j & (1 << k)) {
                                        ptrStr.push("-" + stride(i, k))
                                    }
                                }
                                vars.push(delta(i, j) + "=(" + ptrStr.join("") + ")|0")
                                vars.push(cube(i, j) + "=0")
                            }
                        }
                        for (var i = 0; i < arrayArgs; ++i) {
                            for (var j = 0; j < dimension; ++j) {
                                var stepVal = [stride(i, order[j])]
                                if (j > 0) {
                                    stepVal.push(stride(i, order[j - 1]) + "*" + shape(order[j - 1]))
                                }
                                vars.push(step(i, order[j]) + "=(" + stepVal.join("-") + ")|0")
                            }
                        }
                        for (var i = 0; i < dimension; ++i) {
                            vars.push(index(i) + "=0")
                        }
                        vars.push(VERTEX_COUNT + "=0")
                        var sizeVariable = ["2"]
                        for (var i = dimension - 2; i >= 0; --i) {
                            sizeVariable.push(shape(order[i]))
                        }
                        vars.push(POOL_SIZE + "=(" + sizeVariable.join("*") + ")|0", PHASES + "=mallocUint32(" + POOL_SIZE + ")", VERTEX_IDS + "=mallocUint32(" + POOL_SIZE + ")", POINTER + "=0")
                        vars.push(pcube(0) + "=0")
                        for (var j = 1; j < (1 << dimension); ++j) {
                            var cubeDelta = []
                            var cubeStep = []
                            for (var k = 0; k < dimension; ++k) {
                                if (j & (1 << k)) {
                                    if (cubeStep.length === 0) {
                                        cubeDelta.push("1")
                                    } else {
                                        cubeDelta.unshift(cubeStep.join("*"))
                                    }
                                }
                                cubeStep.push(shape(order[k]))
                            }
                            var signFlag = ""
                            if (cubeDelta[0].indexOf(shape(order[dimension - 2])) < 0) {
                                signFlag = "-"
                            }
                            var jperm = permBitmask(dimension, j, order)
                            vars.push(pdelta(jperm) + "=(-" + cubeDelta.join("-") + ")|0", qcube(jperm) + "=(" + signFlag + cubeDelta.join("-") + ")|0", pcube(jperm) + "=0")
                        }
                        vars.push(vert(0) + "=0", TEMPORARY + "=0")

                        function forLoopBegin(i, start) {
                            code.push("for(", index(order[i]), "=", start, ";", index(order[i]), "<", shape(order[i]), ";", "++", index(order[i]), "){")
                        }

                        function forLoopEnd(i) {
                            for (var j = 0; j < arrayArgs; ++j) {
                                code.push(pointer(j), "+=", step(j, order[i]), ";")
                            }
                            code.push("}")
                        }

                        function fillEmptySlice(k) {
                            for (var i = k - 1; i >= 0; --i) {
                                forLoopBegin(i, 0)
                            }
                            var phaseFuncArgs = []
                            for (var i = 0; i < arrayArgs; ++i) {
                                if (typesig[i]) {
                                    phaseFuncArgs.push(data(i) + ".get(" + pointer(i) + ")")
                                } else {
                                    phaseFuncArgs.push(data(i) + "[" + pointer(i) + "]")
                                }
                            }
                            for (var i = 0; i < scalarArgs; ++i) {
                                phaseFuncArgs.push(scalar(i))
                            }
                            code.push(PHASES, "[", POINTER, "++]=phase(", phaseFuncArgs.join(), ");")
                            for (var i = 0; i < k; ++i) {
                                forLoopEnd(i)
                            }
                            for (var j = 0; j < arrayArgs; ++j) {
                                code.push(pointer(j), "+=", step(j, order[k]), ";")
                            }
                        }

                        function processGridCell(mask) {
                            for (var i = 0; i < arrayArgs; ++i) {
                                if (typesig[i]) {
                                    code.push(cube(i, 0), "=", data(i), ".get(", pointer(i), ");")
                                } else {
                                    code.push(cube(i, 0), "=", data(i), "[", pointer(i), "];")
                                }
                            }
                            var phaseFuncArgs = []
                            for (var i = 0; i < arrayArgs; ++i) {
                                phaseFuncArgs.push(cube(i, 0))
                            }
                            for (var i = 0; i < scalarArgs; ++i) {
                                phaseFuncArgs.push(scalar(i))
                            }
                            code.push(pcube(0), "=", PHASES, "[", POINTER, "]=phase(", phaseFuncArgs.join(), ");")
                            for (var j = 1; j < (1 << dimension); ++j) {
                                code.push(pcube(j), "=", PHASES, "[", POINTER, "+", pdelta(j), "];")
                            }
                            var vertexPredicate = []
                            for (var j = 1; j < (1 << dimension); ++j) {
                                vertexPredicate.push("(" + pcube(0) + "!==" + pcube(j) + ")")
                            }
                            code.push("if(", vertexPredicate.join("||"), "){")
                            var vertexArgs = []
                            for (var i = 0; i < dimension; ++i) {
                                vertexArgs.push(index(i))
                            }
                            for (var i = 0; i < arrayArgs; ++i) {
                                vertexArgs.push(cube(i, 0))
                                for (var j = 1; j < (1 << dimension); ++j) {
                                    if (typesig[i]) {
                                        code.push(cube(i, j), "=", data(i), ".get(", pointer(i), "+", delta(i, j), ");")
                                    } else {
                                        code.push(cube(i, j), "=", data(i), "[", pointer(i), "+", delta(i, j), "];")
                                    }
                                    vertexArgs.push(cube(i, j))
                                }
                            }
                            for (var i = 0; i < (1 << dimension); ++i) {
                                vertexArgs.push(pcube(i))
                            }
                            for (var i = 0; i < scalarArgs; ++i) {
                                vertexArgs.push(scalar(i))
                            }
                            code.push("vertex(", vertexArgs.join(), ");", vert(0), "=", VERTEX_IDS, "[", POINTER, "]=", VERTEX_COUNT, "++;")
                            var base = (1 << dimension) - 1
                            var corner = pcube(base)
                            for (var j = 0; j < dimension; ++j) {
                                if ((mask & ~(1 << j)) === 0) {
                                    var subset = base ^ (1 << j)
                                    var edge = pcube(subset)
                                    var faceArgs = []
                                    for (var k = subset; k > 0; k = (k - 1) & subset) {
                                        faceArgs.push(VERTEX_IDS + "[" + POINTER + "+" + pdelta(k) + "]")
                                    }
                                    faceArgs.push(vert(0))
                                    for (var k = 0; k < arrayArgs; ++k) {
                                        if (j & 1) {
                                            faceArgs.push(cube(k, base), cube(k, subset))
                                        } else {
                                            faceArgs.push(cube(k, subset), cube(k, base))
                                        }
                                    }
                                    if (j & 1) {
                                        faceArgs.push(corner, edge)
                                    } else {
                                        faceArgs.push(edge, corner)
                                    }
                                    for (var k = 0; k < scalarArgs; ++k) {
                                        faceArgs.push(scalar(k))
                                    }
                                    code.push("if(", corner, "!==", edge, "){", "face(", faceArgs.join(), ")}")
                                }
                            }
                            code.push("}", POINTER, "+=1;")
                        }

                        function flip() {
                            for (var j = 1; j < (1 << dimension); ++j) {
                                code.push(TEMPORARY, "=", pdelta(j), ";", pdelta(j), "=", qcube(j), ";", qcube(j), "=", TEMPORARY, ";")
                            }
                        }

                        function createLoop(i, mask) {
                            if (i < 0) {
                                processGridCell(mask)
                                return
                            }
                            fillEmptySlice(i)
                            code.push("if(", shape(order[i]), ">0){", index(order[i]), "=1;")
                            createLoop(i - 1, mask | (1 << order[i]))
                            for (var j = 0; j < arrayArgs; ++j) {
                                code.push(pointer(j), "+=", step(j, order[i]), ";")
                            }
                            if (i === dimension - 1) {
                                code.push(POINTER, "=0;")
                                flip()
                            }
                            forLoopBegin(i, 2)
                            createLoop(i - 1, mask)
                            if (i === dimension - 1) {
                                code.push("if(", index(order[dimension - 1]), "&1){", POINTER, "=0;}")
                                flip()
                            }
                            forLoopEnd(i)
                            code.push("}")
                        }
                        createLoop(dimension - 1, 0)
                        code.push("freeUint32(", VERTEX_IDS, ");freeUint32(", PHASES, ");")
                        var procedureCode = ["'use strict';", "function ", funcName, "(", args.join(), "){", "var ", vars.join(), ";", code.join(""), "}", "return ", funcName].join("")
                        var proc = new Function("vertex", "face", "phase", "mallocUint32", "freeUint32", procedureCode)
                        return proc(vertexFunc, faceFunc, phaseFunc, pool.mallocUint32, pool.freeUint32)
                    }

                    function createSurfaceExtractor(args) {
                        function error(msg) {
                            throw new Error("ndarray-extract-contour: " + msg)
                        }
                        if (typeof args !== "object") {
                            error("Must specify arguments")
                        }
                        var order = args.order
                        if (!Array.isArray(order)) {
                            error("Must specify order")
                        }
                        var arrays = args.arrayArguments || 1
                        if (arrays < 1) {
                            error("Must have at least one array argument")
                        }
                        var scalars = args.scalarArguments || 0
                        if (scalars < 0) {
                            error("Scalar arg count must be > 0")
                        }
                        if (typeof args.vertex !== "function") {
                            error("Must specify vertex creation function")
                        }
                        if (typeof args.cell !== "function") {
                            error("Must specify cell creation function")
                        }
                        if (typeof args.phase !== "function") {
                            error("Must specify phase function")
                        }
                        var getters = args.getters || []
                        var typesig = new Array(arrays)
                        for (var i = 0; i < arrays; ++i) {
                            if (getters.indexOf(i) >= 0) {
                                typesig[i] = true
                            } else {
                                typesig[i] = false
                            }
                        }
                        return compileSurfaceProcedure(args.vertex, args.cell, args.phase, scalars, order, typesig)
                    }
                }, {
                    "typedarray-pool": 54
                }
            ],
            53: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            54: [
                function (_dereq_, module, exports) {
                    (function (global, Buffer) {
                        var bits = _dereq_("bit-twiddle")
                        var dup = _dereq_("dup")
                        if (!global.__TYPEDARRAY_POOL) {
                            global.__TYPEDARRAY_POOL = {
                                UINT8: dup([32, 0]),
                                UINT16: dup([32, 0]),
                                UINT32: dup([32, 0]),
                                INT8: dup([32, 0]),
                                INT16: dup([32, 0]),
                                INT32: dup([32, 0]),
                                FLOAT: dup([32, 0]),
                                DOUBLE: dup([32, 0]),
                                DATA: dup([32, 0]),
                                UINT8C: dup([32, 0]),
                                BUFFER: dup([32, 0])
                            }
                        }
                        var hasUint8C = (typeof Uint8ClampedArray) !== "undefined"
                        var POOL = global.__TYPEDARRAY_POOL
                        if (!POOL.UINT8C) {
                            POOL.UINT8C = dup([32, 0])
                        }
                        if (!POOL.BUFFER) {
                            POOL.BUFFER = dup([32, 0])
                        }
                        var UINT8 = POOL.UINT8,
                            UINT16 = POOL.UINT16,
                            UINT32 = POOL.UINT32,
                            INT8 = POOL.INT8,
                            INT16 = POOL.INT16,
                            INT32 = POOL.INT32,
                            FLOAT = POOL.FLOAT,
                            DOUBLE = POOL.DOUBLE,
                            DATA = POOL.DATA,
                            UINT8C = POOL.UINT8C,
                            BUFFER = POOL.BUFFER
                        exports.free = function free(array) {
                            var n = array.length | 0,
                                log_n = bits.log2(n)
                            if (Buffer.isBuffer(array)) {
                                BUFFER[log_n].push(array)
                            } else {
                                switch (Object.prototype.toString.call(array)) {
                                case "[object Uint8Array]":
                                    UINT8[log_n].push(array)
                                    break
                                case "[object Uint16Array]":
                                    UINT16[log_n].push(array)
                                    break
                                case "[object Uint32Array]":
                                    UINT32[log_n].push(array)
                                    break
                                case "[object Int8Array]":
                                    INT8[log_n].push(array)
                                    break
                                case "[object Int16Array]":
                                    INT16[log_n].push(array)
                                    break
                                case "[object Int32Array]":
                                    INT32[log_n].push(array)
                                    break
                                case "[object Uint8ClampedArray]":
                                    UINT8C[log_n].push(array)
                                    break
                                case "[object Float32Array]":
                                    FLOAT[log_n].push(array)
                                    break
                                case "[object Float64Array]":
                                    DOUBLE[log_n].push(array)
                                    break
                                case "[object ArrayBuffer]":
                                    DATA[log_n].push(array)
                                    break
                                default:
                                    throw new Error("typedarray-pool: Unspecified array type")
                                }
                            }
                        }
                        exports.freeUint8 = function freeUint8(array) {
                            UINT8[bits.log2(array.length)].push(array)
                        }
                        exports.freeUint16 = function freeUint16(array) {
                            UINT16[bits.log2(array.length)].push(array)
                        }
                        exports.freeUint32 = function freeUint32(array) {
                            UINT32[bits.log2(array.length)].push(array)
                        }
                        exports.freeInt8 = function freeInt8(array) {
                            INT8[bits.log2(array.length)].push(array)
                        }
                        exports.freeInt16 = function freeInt16(array) {
                            INT16[bits.log2(array.length)].push(array)
                        }
                        exports.freeInt32 = function freeInt32(array) {
                            INT32[bits.log2(array.length)].push(array)
                        }
                        exports.freeFloat32 = exports.freeFloat = function freeFloat(array) {
                            FLOAT[bits.log2(array.length)].push(array)
                        }
                        exports.freeFloat64 = exports.freeDouble = function freeDouble(array) {
                            DOUBLE[bits.log2(array.length)].push(array)
                        }
                        exports.freeArrayBuffer = function freeArrayBuffer(array) {
                            DATA[bits.log2(array.length)].push(array)
                        }
                        if (hasUint8C) {
                            exports.freeUint8Clamped = function freeUint8Clamped(array) {
                                UINT8C[bits.log2(array.length)].push(array)
                            }
                        } else {
                            exports.freeUint8Clamped = exports.freeUint8
                        }
                        exports.freeBuffer = function freeBuffer(array) {
                            BUFFER[bits.log2(array.length)].push(array)
                        }
                        exports.malloc = function malloc(n, dtype) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            if (dtype === undefined || dtype === "arraybuffer") {
                                var d = DATA[log_n]
                                if (d.length > 0) {
                                    var r = d[d.length - 1]
                                    d.pop()
                                    return r
                                }
                                return new ArrayBuffer(n)
                            } else {
                                switch (dtype) {
                                case "uint8":
                                    var u8 = UINT8[log_n]
                                    if (u8.length > 0) {
                                        return u8.pop()
                                    }
                                    return new Uint8Array(n)
                                    break
                                case "uint16":
                                    var u16 = UINT16[log_n]
                                    if (u16.length > 0) {
                                        return u16.pop()
                                    }
                                    return new Uint16Array(n)
                                    break
                                case "uint32":
                                    var u32 = UINT32[log_n]
                                    if (u32.length > 0) {
                                        return u32.pop()
                                    }
                                    return new Uint32Array(n)
                                    break
                                case "int8":
                                    var i8 = INT8[log_n]
                                    if (i8.length > 0) {
                                        return i8.pop()
                                    }
                                    return new Int8Array(n)
                                    break
                                case "int16":
                                    var i16 = INT16[log_n]
                                    if (i16.length > 0) {
                                        return i16.pop()
                                    }
                                    return new Int16Array(n)
                                    break
                                case "int32":
                                    var i32 = INT32[log_n]
                                    if (i32.length > 0) {
                                        return i32.pop()
                                    }
                                    return new Int32Array(n)
                                    break
                                case "float":
                                case "float32":
                                    var f = FLOAT[log_n]
                                    if (f.length > 0) {
                                        return f.pop()
                                    }
                                    return new Float32Array(n)
                                    break
                                case "double":
                                case "float64":
                                    var dd = DOUBLE[log_n]
                                    if (dd.length > 0) {
                                        return dd.pop()
                                    }
                                    return new Float64Array(n)
                                    break
                                case "uint8_clamped":
                                    if (hasUint8C) {
                                        var u8c = UINT8C[log_n]
                                        if (u8c.length > 0) {
                                            return u8c.pop()
                                        }
                                        return new Uint8ClampedArray(n)
                                    } else {
                                        var u8 = UINT8[log_n]
                                        if (u8.length > 0) {
                                            return u8.pop()
                                        }
                                        return new Uint8Array(n)
                                    }
                                    break
                                case "buffer":
                                    var buf = BUFFER[log_n]
                                    if (buf.length > 0) {
                                        return buf.pop()
                                    }
                                    return new Buffer(n)
                                    break
                                default:
                                    return null
                                }
                            }
                            return null
                        }
                        exports.mallocUint8 = function mallocUint8(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = UINT8[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new Uint8Array(n)
                        }
                        exports.mallocUint16 = function mallocUint16(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = UINT16[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new Uint16Array(n)
                        }
                        exports.mallocUint32 = function mallocUint32(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = UINT32[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new Uint32Array(n)
                        }
                        exports.mallocInt8 = function mallocInt8(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = INT8[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new Int8Array(n)
                        }
                        exports.mallocInt16 = function mallocInt16(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = INT16[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new Int16Array(n)
                        }
                        exports.mallocInt32 = function mallocInt32(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = INT32[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new Int32Array(n)
                        }
                        exports.mallocFloat32 = exports.mallocFloat = function mallocFloat(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = FLOAT[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new Float32Array(n)
                        }
                        exports.mallocFloat64 = exports.mallocDouble = function mallocDouble(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = DOUBLE[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new Float64Array(n)
                        }
                        exports.mallocArrayBuffer = function mallocArrayBuffer(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = DATA[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new ArrayBuffer(n)
                        }
                        if (hasUint8C) {
                            exports.mallocUint8Clamped = function mallocUint8Clamped(n) {
                                n = bits.nextPow2(n)
                                var log_n = bits.log2(n)
                                var cache = UINT8C[log_n]
                                if (cache.length > 0) {
                                    return cache.pop()
                                }
                                return new Uint8ClampedArray(n)
                            }
                        } else {
                            exports.mallocUint8Clamped = exports.mallocUint8
                        }
                        exports.mallocBuffer = function mallocBuffer(n) {
                            n = bits.nextPow2(n)
                            var log_n = bits.log2(n)
                            var cache = BUFFER[log_n]
                            if (cache.length > 0) {
                                return cache.pop()
                            }
                            return new Buffer(n)
                        }
                        exports.clearCache = function clearCache() {
                            for (var i = 0; i < 32; ++i) {
                                UINT8[i].length = 0
                                UINT16[i].length = 0
                                UINT32[i].length = 0
                                INT8[i].length = 0
                                INT16[i].length = 0
                                INT32[i].length = 0
                                FLOAT[i].length = 0
                                DOUBLE[i].length = 0
                                DATA[i].length = 0
                                UINT8C[i].length = 0
                                BUFFER[i].length = 0
                            }
                        }
                    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, _dereq_("buffer").Buffer)
                }, {
                    "bit-twiddle": 10,
                    "buffer": 205,
                    "dup": 53
                }
            ],
            55: [
                function (_dereq_, module, exports) {
                    var g = 7;
                    var p = [0.99999999999980993, 676.5203681218851, -1259.1392167224028, 771.32342877765313, -176.61502916214059, 12.507343278686905, -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7];
                    var g_ln = 607 / 128;
                    var p_ln = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];

                    function lngamma(z) {
                        if (z < 0) return Number('0/0');
                        var x = p_ln[0];
                        for (var i = p_ln.length - 1; i > 0; --i) x += p_ln[i] / (z + i);
                        var t = z + g_ln + 0.5;
                        return .5 * Math.log(2 * Math.PI) + (z + .5) * Math.log(t) - t + Math.log(x) - Math.log(z);
                    }
                    module.exports = function gamma(z) {
                        if (z < 0.5) {
                            return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));
                        } else if (z > 100) return Math.exp(lngamma(z));
                        else {
                            z -= 1;
                            var x = p[0];
                            for (var i = 1; i < g + 2; i++) {
                                x += p[i] / (z + i);
                            }
                            var t = z + g + 0.5;
                            return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;
                        }
                    };
                    module.exports.log = lngamma;
                }, {}
            ],
            56: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            57: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(54)
                }, {
                    "bit-twiddle": 10,
                    "buffer": 205,
                    "dup": 56
                }
            ],
            58: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = permutationSign
                    var BRUTE_FORCE_CUTOFF = 32
                    var pool = _dereq_("typedarray-pool")

                    function permutationSign(p) {
                        var n = p.length
                        if (n < BRUTE_FORCE_CUTOFF) {
                            var sgn = 1
                            for (var i = 0; i < n; ++i) {
                                for (var j = 0; j < i; ++j) {
                                    if (p[i] < p[j]) {
                                        sgn = -sgn
                                    } else if (p[i] === p[j]) {
                                        return 0
                                    }
                                }
                            }
                            return sgn
                        } else {
                            var visited = pool.mallocUint8(n)
                            for (var i = 0; i < n; ++i) {
                                visited[i] = 0
                            }
                            var sgn = 1
                            for (var i = 0; i < n; ++i) {
                                if (!visited[i]) {
                                    var count = 1
                                    visited[i] = 1
                                    for (var j = p[i]; j !== i; j = p[j]) {
                                        if (visited[j]) {
                                            pool.freeUint8(visited)
                                            return 0
                                        }
                                        count += 1
                                        visited[j] = 1
                                    }
                                    if (!(count & 1)) {
                                        sgn = -sgn
                                    }
                                }
                            }
                            pool.freeUint8(visited)
                            return sgn
                        }
                    }
                }, {
                    "typedarray-pool": 57
                }
            ],
            59: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var pool = _dereq_("typedarray-pool")
                    var inverse = _dereq_("invert-permutation")

                    function rank(permutation) {
                        var n = permutation.length
                        switch (n) {
                        case 0:
                        case 1:
                            return 0
                        case 2:
                            return permutation[1]
                        default:
                            break
                        }
                        var p = pool.mallocUint32(n)
                        var pinv = pool.mallocUint32(n)
                        var r = 0,
                            s, t, i
                        inverse(permutation, pinv)
                        for (i = 0; i < n; ++i) {
                            p[i] = permutation[i]
                        }
                        for (i = n - 1; i > 0; --i) {
                            t = pinv[i]
                            s = p[i]
                            p[i] = p[t]
                            p[t] = s
                            pinv[i] = pinv[s]
                            pinv[s] = t
                            r = (r + s) * i
                        }
                        pool.freeUint32(pinv)
                        pool.freeUint32(p)
                        return r
                    }

                    function unrank(n, r, p) {
                        switch (n) {
                        case 0:
                            if (p) {
                                return p
                            }
                            return []
                        case 1:
                            if (p) {
                                p[0] = 0
                                return p
                            } else {
                                return [0]
                            }
                        case 2:
                            if (p) {
                                if (r) {
                                    p[0] = 0
                                    p[1] = 1
                                } else {
                                    p[0] = 1
                                    p[1] = 0
                                }
                                return p
                            } else {
                                return r ? [0, 1] : [1, 0]
                            }
                        default:
                            break
                        }
                        p = p || new Array(n)
                        var s, t, i, nf = 1
                        p[0] = 0
                        for (i = 1; i < n; ++i) {
                            p[i] = i
                            nf = (nf * i) | 0
                        }
                        for (i = n - 1; i > 0; --i) {
                            s = (r / nf) | 0
                            r = (r - s * nf) | 0
                            nf = (nf / i) | 0
                            t = p[i] | 0
                            p[i] = p[s] | 0
                            p[s] = t | 0
                        }
                        return p
                    }
                    exports.rank = rank
                    exports.unrank = unrank
                }, {
                    "invert-permutation": 60,
                    "typedarray-pool": 62
                }
            ],
            60: [
                function (_dereq_, module, exports) {
                    "use strict"

                    function invertPermutation(pi, result) {
                        result = result || new Array(pi.length)
                        for (var i = 0; i < pi.length; ++i) {
                            result[pi[i]] = i
                        }
                        return result
                    }
                    module.exports = invertPermutation
                }, {}
            ],
            61: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            62: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(54)
                }, {
                    "bit-twiddle": 10,
                    "buffer": 205,
                    "dup": 61
                }
            ],
            63: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = triangulateCube
                    var perm = _dereq_("permutation-rank")
                    var sgn = _dereq_("permutation-parity")
                    var gamma = _dereq_("gamma")

                    function triangulateCube(dimension) {
                        if (dimension < 0) {
                            return []
                        }
                        if (dimension === 0) {
                            return [
                                [0]
                            ]
                        }
                        var dfactorial = gamma(dimension + 1) | 0
                        var result = []
                        for (var i = 0; i < dfactorial; ++i) {
                            var p = perm.unrank(dimension, i)
                            var cell = [0]
                            var v = 0
                            for (var j = 0; j < p.length; ++j) {
                                v += (1 << p[j])
                                cell.push(v)
                            }
                            if (sgn(p) < 1) {
                                cell[0] = v
                                cell[dimension] = 0
                            }
                            result.push(cell)
                        }
                        return result
                    }
                }, {
                    "gamma": 55,
                    "permutation-parity": 58,
                    "permutation-rank": 59
                }
            ],
            64: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_('cwise-compiler')({
                        args: ['array', {
                            offset: [1],
                            array: 0
                        }, 'scalar', 'scalar', 'index'],
                        pre: {
                            "body": "{}",
                            "args": [],
                            "thisVars": [],
                            "localVars": []
                        },
                        post: {
                            "body": "{}",
                            "args": [],
                            "thisVars": [],
                            "localVars": []
                        },
                        body: {
                            "body": "{\n        var _inline_1_da = _inline_1_arg0_ - _inline_1_arg3_\n        var _inline_1_db = _inline_1_arg1_ - _inline_1_arg3_\n        if((_inline_1_da >= 0) !== (_inline_1_db >= 0)) {\n          _inline_1_arg2_.push(_inline_1_arg4_[0] + 0.5 + 0.5 * (_inline_1_da + _inline_1_db) / (_inline_1_da - _inline_1_db))\n        }\n      }",
                            "args": [{
                                "name": "_inline_1_arg0_",
                                "lvalue": false,
                                "rvalue": true,
                                "count": 1
                            }, {
                                "name": "_inline_1_arg1_",
                                "lvalue": false,
                                "rvalue": true,
                                "count": 1
                            }, {
                                "name": "_inline_1_arg2_",
                                "lvalue": false,
                                "rvalue": true,
                                "count": 1
                            }, {
                                "name": "_inline_1_arg3_",
                                "lvalue": false,
                                "rvalue": true,
                                "count": 2
                            }, {
                                "name": "_inline_1_arg4_",
                                "lvalue": false,
                                "rvalue": true,
                                "count": 1
                            }],
                            "thisVars": [],
                            "localVars": ["_inline_1_da", "_inline_1_db"]
                        },
                        funcName: 'zeroCrossings'
                    })
                }, {
                    "cwise-compiler": 65
                }
            ],
            65: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var createThunk = _dereq_("./lib/thunk.js")

                    function Procedure() {
                        this.argTypes = []
                        this.shimArgs = []
                        this.arrayArgs = []
                        this.scalarArgs = []
                        this.offsetArgs = []
                        this.offsetArgIndex = []
                        this.indexArgs = []
                        this.shapeArgs = []
                        this.funcName = ""
                        this.pre = null
                        this.body = null
                        this.post = null
                        this.debug = false
                    }

                    function compileCwise(user_args) {
                        var proc = new Procedure()
                        proc.pre = user_args.pre
                        proc.body = user_args.body
                        proc.post = user_args.post
                        var proc_args = user_args.args.slice(0)
                        proc.argTypes = proc_args
                        for (var i = 0; i < proc_args.length; ++i) {
                            var arg_type = proc_args[i]
                            if (arg_type === "array") {
                                proc.arrayArgs.push(i)
                                proc.shimArgs.push("array" + i)
                                if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
                                    throw new Error("cwise: pre() block may not reference array args")
                                }
                                if (i < proc.post.args.length && proc.post.args[i].count > 0) {
                                    throw new Error("cwise: post() block may not reference array args")
                                }
                            } else if (arg_type === "scalar") {
                                proc.scalarArgs.push(i)
                                proc.shimArgs.push("scalar" + i)
                            } else if (arg_type === "index") {
                                proc.indexArgs.push(i)
                                if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
                                    throw new Error("cwise: pre() block may not reference array index")
                                }
                                if (i < proc.body.args.length && proc.body.args[i].lvalue) {
                                    throw new Error("cwise: body() block may not write to array index")
                                }
                                if (i < proc.post.args.length && proc.post.args[i].count > 0) {
                                    throw new Error("cwise: post() block may not reference array index")
                                }
                            } else if (arg_type === "shape") {
                                proc.shapeArgs.push(i)
                                if (i < proc.pre.args.length && proc.pre.args[i].lvalue) {
                                    throw new Error("cwise: pre() block may not write to array shape")
                                }
                                if (i < proc.body.args.length && proc.body.args[i].lvalue) {
                                    throw new Error("cwise: body() block may not write to array shape")
                                }
                                if (i < proc.post.args.length && proc.post.args[i].lvalue) {
                                    throw new Error("cwise: post() block may not write to array shape")
                                }
                            } else if (typeof arg_type === "object" && arg_type.offset) {
                                proc.argTypes[i] = "offset"
                                proc.offsetArgs.push({
                                    array: arg_type.array,
                                    offset: arg_type.offset
                                })
                                proc.offsetArgIndex.push(i)
                            } else {
                                throw new Error("cwise: Unknown argument type " + proc_args[i])
                            }
                        }
                        if (proc.arrayArgs.length <= 0) {
                            throw new Error("cwise: No array arguments specified")
                        }
                        if (proc.pre.args.length > proc_args.length) {
                            throw new Error("cwise: Too many arguments in pre() block")
                        }
                        if (proc.body.args.length > proc_args.length) {
                            throw new Error("cwise: Too many arguments in body() block")
                        }
                        if (proc.post.args.length > proc_args.length) {
                            throw new Error("cwise: Too many arguments in post() block")
                        }
                        proc.debug = !!user_args.printCode || !!user_args.debug
                        proc.funcName = user_args.funcName || "cwise"
                        proc.blockSize = user_args.blockSize || 64
                        return createThunk(proc)
                    }
                    module.exports = compileCwise
                }, {
                    "./lib/thunk.js": 67
                }
            ],
            66: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var uniq = _dereq_("uniq")

                    function innerFill(order, proc, body) {
                        var dimension = order.length,
                            nargs = proc.arrayArgs.length,
                            has_index = proc.indexArgs.length > 0,
                            code = [],
                            vars = [],
                            idx = 0,
                            pidx = 0,
                            i, j
                        for (i = 0; i < dimension; ++i) {
                            vars.push(["i", i, "=0"].join(""))
                        }
                        for (j = 0; j < nargs; ++j) {
                            for (i = 0; i < dimension; ++i) {
                                pidx = idx
                                idx = order[i]
                                if (i === 0) {
                                    vars.push(["d", j, "s", i, "=t", j, "p", idx].join(""))
                                } else {
                                    vars.push(["d", j, "s", i, "=(t", j, "p", idx, "-s", pidx, "*t", j, "p", pidx, ")"].join(""))
                                }
                            }
                        }
                        code.push("var " + vars.join(","))
                        for (i = dimension - 1; i >= 0; --i) {
                            idx = order[i]
                            code.push(["for(i", i, "=0;i", i, "<s", idx, ";++i", i, "){"].join(""))
                        }
                        code.push(body)
                        for (i = 0; i < dimension; ++i) {
                            pidx = idx
                            idx = order[i]
                            for (j = 0; j < nargs; ++j) {
                                code.push(["p", j, "+=d", j, "s", i].join(""))
                            }
                            if (has_index) {
                                if (i > 0) {
                                    code.push(["index[", pidx, "]-=s", pidx].join(""))
                                }
                                code.push(["++index[", idx, "]"].join(""))
                            }
                            code.push("}")
                        }
                        return code.join("\n")
                    }

                    function outerFill(matched, order, proc, body) {
                        var dimension = order.length,
                            nargs = proc.arrayArgs.length,
                            blockSize = proc.blockSize,
                            has_index = proc.indexArgs.length > 0,
                            code = []
                        for (var i = 0; i < nargs; ++i) {
                            code.push(["var offset", i, "=p", i].join(""))
                        }
                        for (var i = matched; i < dimension; ++i) {
                            code.push(["for(var j" + i + "=SS[", order[i], "]|0;j", i, ">0;){"].join(""))
                            code.push(["if(j", i, "<", blockSize, "){"].join(""))
                            code.push(["s", order[i], "=j", i].join(""))
                            code.push(["j", i, "=0"].join(""))
                            code.push(["}else{s", order[i], "=", blockSize].join(""))
                            code.push(["j", i, "-=", blockSize, "}"].join(""))
                            if (has_index) {
                                code.push(["index[", order[i], "]=j", i].join(""))
                            }
                        }
                        for (var i = 0; i < nargs; ++i) {
                            var indexStr = ["offset" + i]
                            for (var j = matched; j < dimension; ++j) {
                                indexStr.push(["j", j, "*t", i, "p", order[j]].join(""))
                            }
                            code.push(["p", i, "=(", indexStr.join("+"), ")"].join(""))
                        }
                        code.push(innerFill(order, proc, body))
                        for (var i = matched; i < dimension; ++i) {
                            code.push("}")
                        }
                        return code.join("\n")
                    }

                    function countMatches(orders) {
                        var matched = 0,
                            dimension = orders[0].length
                        while (matched < dimension) {
                            for (var j = 1; j < orders.length; ++j) {
                                if (orders[j][matched] !== orders[0][matched]) {
                                    return matched
                                }
                            }
                            ++matched
                        }
                        return matched
                    }

                    function processBlock(block, proc, dtypes) {
                        var code = block.body
                        var pre = []
                        var post = []
                        for (var i = 0; i < block.args.length; ++i) {
                            var carg = block.args[i]
                            if (carg.count <= 0) {
                                continue
                            }
                            var re = new RegExp(carg.name, "g")
                            var ptrStr = ""
                            var arrNum = proc.arrayArgs.indexOf(i)
                            switch (proc.argTypes[i]) {
                            case "offset":
                                var offArgIndex = proc.offsetArgIndex.indexOf(i)
                                var offArg = proc.offsetArgs[offArgIndex]
                                arrNum = offArg.array
                                ptrStr = "+q" + offArgIndex
                            case "array":
                                ptrStr = "p" + arrNum + ptrStr
                                var localStr = "l" + i
                                var arrStr = "a" + arrNum
                                if (carg.count === 1) {
                                    if (dtypes[arrNum] === "generic") {
                                        if (carg.lvalue) {
                                            pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join(""))
                                            code = code.replace(re, localStr)
                                            post.push([arrStr, ".set(", ptrStr, ",", localStr, ")"].join(""))
                                        } else {
                                            code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
                                        }
                                    } else {
                                        code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""))
                                    }
                                } else if (dtypes[arrNum] === "generic") {
                                    pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join(""))
                                    code = code.replace(re, localStr)
                                    if (carg.lvalue) {
                                        post.push([arrStr, ".set(", ptrStr, ",", localStr, ")"].join(""))
                                    }
                                } else {
                                    pre.push(["var ", localStr, "=", arrStr, "[", ptrStr, "]"].join(""))
                                    code = code.replace(re, localStr)
                                    if (carg.lvalue) {
                                        post.push([arrStr, "[", ptrStr, "]=", localStr].join(""))
                                    }
                                }
                                break
                            case "scalar":
                                code = code.replace(re, "Y" + proc.scalarArgs.indexOf(i))
                                break
                            case "index":
                                code = code.replace(re, "index")
                                break
                            case "shape":
                                code = code.replace(re, "shape")
                                break
                            }
                        }
                        return [pre.join("\n"), code, post.join("\n")].join("\n").trim()
                    }

                    function typeSummary(dtypes) {
                        var summary = new Array(dtypes.length)
                        var allEqual = true
                        for (var i = 0; i < dtypes.length; ++i) {
                            var t = dtypes[i]
                            var digits = t.match(/\d+/)
                            if (!digits) {
                                digits = ""
                            } else {
                                digits = digits[0]
                            }
                            if (t.charAt(0) === 0) {
                                summary[i] = "u" + t.charAt(1) + digits
                            } else {
                                summary[i] = t.charAt(0) + digits
                            }
                            if (i > 0) {
                                allEqual = allEqual && summary[i] === summary[i - 1]
                            }
                        }
                        if (allEqual) {
                            return summary[0]
                        }
                        return summary.join("")
                    }

                    function generateCWiseOp(proc, typesig) {
                        var dimension = typesig[1].length | 0
                        var orders = new Array(proc.arrayArgs.length)
                        var dtypes = new Array(proc.arrayArgs.length)
                        var arglist = ["SS"]
                        var code = ["'use strict'"]
                        var vars = []
                        for (var j = 0; j < dimension; ++j) {
                            vars.push(["s", j, "=SS[", j, "]"].join(""))
                        }
                        for (var i = 0; i < proc.arrayArgs.length; ++i) {
                            arglist.push("a" + i)
                            arglist.push("t" + i)
                            arglist.push("p" + i)
                            dtypes[i] = typesig[2 * i]
                            orders[i] = typesig[2 * i + 1]
                            for (var j = 0; j < dimension; ++j) {
                                vars.push(["t", i, "p", j, "=t", i, "[", j, "]"].join(""))
                            }
                        }
                        for (var i = 0; i < proc.scalarArgs.length; ++i) {
                            arglist.push("Y" + i)
                        }
                        if (proc.shapeArgs.length > 0) {
                            vars.push("shape=SS.slice(0)")
                        }
                        if (proc.indexArgs.length > 0) {
                            var zeros = new Array(dimension)
                            for (var i = 0; i < dimension; ++i) {
                                zeros[i] = "0"
                            }
                            vars.push(["index=[", zeros.join(","), "]"].join(""))
                        }
                        for (var i = 0; i < proc.offsetArgs.length; ++i) {
                            var off_arg = proc.offsetArgs[i]
                            var init_string = []
                            for (var j = 0; j < off_arg.offset.length; ++j) {
                                if (off_arg.offset[j] === 0) {
                                    continue
                                } else if (off_arg.offset[j] === 1) {
                                    init_string.push(["t", off_arg.array, "p", j].join(""))
                                } else {
                                    init_string.push([off_arg.offset[j], "*t", off_arg.array, "p", j].join(""))
                                }
                            }
                            if (init_string.length === 0) {
                                vars.push("q" + i + "=0")
                            } else {
                                vars.push(["q", i, "=", init_string.join("+")].join(""))
                            }
                        }
                        var thisVars = uniq([].concat(proc.pre.thisVars).concat(proc.body.thisVars).concat(proc.post.thisVars))
                        vars = vars.concat(thisVars)
                        code.push("var " + vars.join(","))
                        for (var i = 0; i < proc.arrayArgs.length; ++i) {
                            code.push("p" + i + "|=0")
                        }
                        if (proc.pre.body.length > 3) {
                            code.push(processBlock(proc.pre, proc, dtypes))
                        }
                        var body = processBlock(proc.body, proc, dtypes)
                        var matched = countMatches(orders)
                        if (matched < dimension) {
                            code.push(outerFill(matched, orders[0], proc, body))
                        } else {
                            code.push(innerFill(orders[0], proc, body))
                        }
                        if (proc.post.body.length > 3) {
                            code.push(processBlock(proc.post, proc, dtypes))
                        }
                        if (proc.debug) {
                            console.log("Generated cwise routine for ", typesig, ":\n\n", code.join("\n"))
                        }
                        var loopName = [(proc.funcName || "unnamed"), "_cwise_loop_", orders[0].join("s"), "m", matched, typeSummary(dtypes)].join("")
                        var f = new Function(["function ", loopName, "(", arglist.join(","), "){", code.join("\n"), "} return ", loopName].join(""))
                        return f()
                    }
                    module.exports = generateCWiseOp
                }, {
                    "uniq": 68
                }
            ],
            67: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var compile = _dereq_("./compile.js")

                    function createThunk(proc) {
                        var code = ["'use strict'", "var CACHED={}"]
                        var vars = []
                        var thunkName = proc.funcName + "_cwise_thunk"
                        code.push(["return function ", thunkName, "(", proc.shimArgs.join(","), "){"].join(""))
                        var typesig = []
                        var string_typesig = []
                        var proc_args = [
                            ["array", proc.arrayArgs[0], ".shape"].join("")
                        ]
                        for (var i = 0; i < proc.arrayArgs.length; ++i) {
                            var j = proc.arrayArgs[i]
                            vars.push(["t", j, "=array", j, ".dtype,", "r", j, "=array", j, ".order"].join(""))
                            typesig.push("t" + j)
                            typesig.push("r" + j)
                            string_typesig.push("t" + j)
                            string_typesig.push("r" + j + ".join()")
                            proc_args.push("array" + j + ".data")
                            proc_args.push("array" + j + ".stride")
                            proc_args.push("array" + j + ".offset|0")
                        }
                        for (var i = 0; i < proc.scalarArgs.length; ++i) {
                            proc_args.push("scalar" + proc.scalarArgs[i])
                        }
                        vars.push(["type=[", string_typesig.join(","), "].join()"].join(""))
                        vars.push("proc=CACHED[type]")
                        code.push("var " + vars.join(","))
                        code.push(["if(!proc){", "CACHED[type]=proc=compile([", typesig.join(","), "])}", "return proc(", proc_args.join(","), ")}"].join(""))
                        if (proc.debug) {
                            console.log("Generated thunk:", code.join("\n"))
                        }
                        var thunk = new Function("compile", code.join("\n"))
                        return thunk(compile.bind(undefined, proc))
                    }
                    module.exports = createThunk
                }, {
                    "./compile.js": 66
                }
            ],
            68: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(12)
                }, {}
            ],
            69: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = findZeroCrossings
                    var core = _dereq_("./lib/zc-core")

                    function findZeroCrossings(array, level) {
                        var cross = []
                        level = +level || 0.0
                        core(array.hi(array.shape[0] - 1), cross, level)
                        return cross
                    }
                }, {
                    "./lib/zc-core": 64
                }
            ],
            70: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = surfaceNets
                    var generateContourExtractor = _dereq_("ndarray-extract-contour")
                    var triangulateCube = _dereq_("triangulate-hypercube")
                    var zeroCrossings = _dereq_("zero-crossings")

                    function buildSurfaceNets(order, dtype) {
                        var dimension = order.length
                        var code = ["'use strict';"]
                        var funcName = "surfaceNets" + order.join("_") + "d" + dtype
                        code.push("var contour=genContour({", "order:[", order.join(), "],", "scalarArguments: 3,", "phase:function phaseFunc(p,a,b,c) { return (p > c)|0 },")
                        if (dtype === "generic") {
                            code.push("getters:[0],")
                        }
                        var cubeArgs = []
                        var extraArgs = []
                        for (var i = 0; i < dimension; ++i) {
                            cubeArgs.push("d" + i)
                            extraArgs.push("d" + i)
                        }
                        for (var i = 0; i < (1 << dimension); ++i) {
                            cubeArgs.push("v" + i)
                            extraArgs.push("v" + i)
                        }
                        for (var i = 0; i < (1 << dimension); ++i) {
                            cubeArgs.push("p" + i)
                            extraArgs.push("p" + i)
                        }
                        cubeArgs.push("a", "b", "c")
                        extraArgs.push("a", "c")
                        code.push("vertex:function vertexFunc(", cubeArgs.join(), "){")
                        var maskStr = []
                        for (var i = 0; i < (1 << dimension); ++i) {
                            maskStr.push("(p" + i + "<<" + i + ")")
                        }
                        code.push("var m=(", maskStr.join("+"), ")|0;if(m===0||m===", (1 << (1 << dimension)) - 1, "){return}")
                        var extraFuncs = []
                        var currentFunc = []
                        if (1 << (1 << dimension) <= 128) {
                            code.push("switch(m){")
                            currentFunc = code
                        } else {
                            code.push("switch(m>>>7){")
                        }
                        for (var i = 0; i < 1 << (1 << dimension); ++i) {
                            if (1 << (1 << dimension) > 128) {
                                if ((i % 128) === 0) {
                                    if (extraFuncs.length > 0) {
                                        currentFunc.push("}}")
                                    }
                                    var efName = "vExtra" + extraFuncs.length
                                    code.push("case ", (i >>> 7), ":", efName, "(m&0x7f,", extraArgs.join(), ");break;")
                                    currentFunc = ["function ", efName, "(m,", extraArgs.join(), "){switch(m){"]
                                    extraFuncs.push(currentFunc)
                                }
                            }
                            currentFunc.push("case ", (i & 0x7f), ":")
                            var crossings = new Array(dimension)
                            var denoms = new Array(dimension)
                            var crossingCount = new Array(dimension)
                            var bias = new Array(dimension)
                            var totalCrossings = 0
                            for (var j = 0; j < dimension; ++j) {
                                crossings[j] = []
                                denoms[j] = []
                                crossingCount[j] = 0
                                bias[j] = 0
                            }
                            for (var j = 0; j < (1 << dimension); ++j) {
                                for (var k = 0; k < dimension; ++k) {
                                    var u = j ^ (1 << k)
                                    if (u > j) {
                                        continue
                                    }
                                    if (!(i & (1 << u)) !== !(i & (1 << j))) {
                                        var sign = 1
                                        if (i & (1 << u)) {
                                            denoms[k].push("v" + u + "-v" + j)
                                        } else {
                                            denoms[k].push("v" + j + "-v" + u)
                                            sign = -sign
                                        }
                                        if (sign < 0) {
                                            crossings[k].push("-v" + j + "-v" + u)
                                            crossingCount[k] += 2
                                        } else {
                                            crossings[k].push("v" + j + "+v" + u)
                                            crossingCount[k] -= 2
                                        }
                                        totalCrossings += 1
                                        for (var l = 0; l < dimension; ++l) {
                                            if (l === k) {
                                                continue
                                            }
                                            if (u & (1 << l)) {
                                                bias[l] += 1
                                            } else {
                                                bias[l] -= 1
                                            }
                                        }
                                    }
                                }
                            }
                            var vertexStr = []
                            for (var k = 0; k < dimension; ++k) {
                                if (crossings[k].length === 0) {
                                    vertexStr.push("d" + k + "-0.5")
                                } else {
                                    var cStr = ""
                                    if (crossingCount[k] < 0) {
                                        cStr = crossingCount[k] + "*c"
                                    } else if (crossingCount[k] > 0) {
                                        cStr = "+" + crossingCount[k] + "*c"
                                    }
                                    var weight = 0.5 * (crossings[k].length / totalCrossings)
                                    var shift = 0.5 + 0.5 * (bias[k] / totalCrossings)
                                    vertexStr.push("d" + k + "-" + shift + "-" + weight + "*(" + crossings[k].join("+") + cStr + ")/(" + denoms[k].join("+") + ")")
                                }
                            }
                            currentFunc.push("a.push([", vertexStr.join(), "]);", "break;")
                        }
                        code.push("}},")
                        if (extraFuncs.length > 0) {
                            currentFunc.push("}}")
                        }
                        var faceArgs = []
                        for (var i = 0; i < (1 << (dimension - 1)); ++i) {
                            faceArgs.push("v" + i)
                        }
                        faceArgs.push("c0", "c1", "p0", "p1", "a", "b", "c")
                        code.push("cell:function cellFunc(", faceArgs.join(), "){")
                        var facets = triangulateCube(dimension - 1)
                        code.push("if(p0){b.push(", facets.map(function (f) {
                            return "[" + f.map(function (v) {
                                return "v" + v
                            }) + "]"
                        }).join(), ")}else{b.push(", facets.map(function (f) {
                            var e = f.slice()
                            e.reverse()
                            return "[" + e.map(function (v) {
                                return "v" + v
                            }) + "]"
                        }).join(), ")}}});function ", funcName, "(array,level){var verts=[],cells=[];contour(array,verts,cells,level);return {positions:verts,cells:cells};} return ", funcName, ";")
                        for (var i = 0; i < extraFuncs.length; ++i) {
                            code.push(extraFuncs[i].join(""))
                        }
                        var proc = new Function("genContour", code.join(""))
                        return proc(generateContourExtractor)
                    }

                    function mesh1D(array, level) {
                        var zc = zeroCrossings(array, level)
                        var n = zc.length
                        var npos = new Array(n)
                        var ncel = new Array(n)
                        for (var i = 0; i < n; ++i) {
                            npos[i] = [zc[i]]
                            ncel[i] = [i]
                        }
                        return {
                            positions: npos,
                            cells: ncel
                        }
                    }
                    var CACHE = {}

                    function surfaceNets(array, level) {
                        if (array.dimension <= 0) {
                            return {
                                positions: [],
                                cells: []
                            }
                        } else if (array.dimension === 1) {
                            return mesh1D(array, level)
                        }
                        var typesig = array.order.join() + "-" + array.dtype
                        var proc = CACHE[typesig]
                        var level = (+level) || 0.0
                        if (!proc) {
                            proc = CACHE[typesig] = buildSurfaceNets(array.order, array.dtype)
                        }
                        return proc(array, level)
                    }
                }, {
                    "ndarray-extract-contour": 52,
                    "triangulate-hypercube": 63,
                    "zero-crossings": 69
                }
            ],
            71: [
                function (_dereq_, module, exports) {
                    module.exports = {
                        "version": "1.3.3"
                    }
                }, {}
            ],
            72: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var Node = function (p, t) {
                        this.point = p;
                        this.triangle = t || null;
                        this.next = null;
                        this.prev = null;
                        this.value = p.x;
                    };
                    var AdvancingFront = function (head, tail) {
                        this.head_ = head;
                        this.tail_ = tail;
                        this.search_node_ = head;
                    };
                    AdvancingFront.prototype.head = function () {
                        return this.head_;
                    };
                    AdvancingFront.prototype.setHead = function (node) {
                        this.head_ = node;
                    };
                    AdvancingFront.prototype.tail = function () {
                        return this.tail_;
                    };
                    AdvancingFront.prototype.setTail = function (node) {
                        this.tail_ = node;
                    };
                    AdvancingFront.prototype.search = function () {
                        return this.search_node_;
                    };
                    AdvancingFront.prototype.setSearch = function (node) {
                        this.search_node_ = node;
                    };
                    AdvancingFront.prototype.findSearchNode = function () {
                        return this.search_node_;
                    };
                    AdvancingFront.prototype.locateNode = function (x) {
                        var node = this.search_node_;
                        if (x < node.value) {
                            while (node = node.prev) {
                                if (x >= node.value) {
                                    this.search_node_ = node;
                                    return node;
                                }
                            }
                        } else {
                            while (node = node.next) {
                                if (x < node.value) {
                                    this.search_node_ = node.prev;
                                    return node.prev;
                                }
                            }
                        }
                        return null;
                    };
                    AdvancingFront.prototype.locatePoint = function (point) {
                        var px = point.x;
                        var node = this.findSearchNode(px);
                        var nx = node.point.x;
                        if (px === nx) {
                            if (point !== node.point) {
                                if (point === node.prev.point) {
                                    node = node.prev;
                                } else if (point === node.next.point) {
                                    node = node.next;
                                } else {
                                    throw new Error('poly2tri Invalid AdvancingFront.locatePoint() call');
                                }
                            }
                        } else if (px < nx) {
                            while (node = node.prev) {
                                if (point === node.point) {
                                    break;
                                }
                            }
                        } else {
                            while (node = node.next) {
                                if (point === node.point) {
                                    break;
                                }
                            }
                        }
                        if (node) {
                            this.search_node_ = node;
                        }
                        return node;
                    };
                    module.exports = AdvancingFront;
                    module.exports.Node = Node;
                }, {}
            ],
            73: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var xy = _dereq_('./xy');
                    var Point = function (x, y) {
                        this.x = +x || 0;
                        this.y = +y || 0;
                        this._p2t_edge_list = null;
                    };
                    Point.prototype.toString = function () {
                        return xy.toStringBase(this);
                    };
                    Point.prototype.clone = function () {
                        return new Point(this.x, this.y);
                    };
                    Point.prototype.set_zero = function () {
                        this.x = 0.0;
                        this.y = 0.0;
                        return this;
                    };
                    Point.prototype.set = function (x, y) {
                        this.x = +x || 0;
                        this.y = +y || 0;
                        return this;
                    };
                    Point.prototype.negate = function () {
                        this.x = -this.x;
                        this.y = -this.y;
                        return this;
                    };
                    Point.prototype.add = function (n) {
                        this.x += n.x;
                        this.y += n.y;
                        return this;
                    };
                    Point.prototype.sub = function (n) {
                        this.x -= n.x;
                        this.y -= n.y;
                        return this;
                    };
                    Point.prototype.mul = function (s) {
                        this.x *= s;
                        this.y *= s;
                        return this;
                    };
                    Point.prototype.length = function () {
                        return Math.sqrt(this.x * this.x + this.y * this.y);
                    };
                    Point.prototype.normalize = function () {
                        var len = this.length();
                        this.x /= len;
                        this.y /= len;
                        return len;
                    };
                    Point.prototype.equals = function (p) {
                        return this.x === p.x && this.y === p.y;
                    };
                    Point.negate = function (p) {
                        return new Point(-p.x, -p.y);
                    };
                    Point.add = function (a, b) {
                        return new Point(a.x + b.x, a.y + b.y);
                    };
                    Point.sub = function (a, b) {
                        return new Point(a.x - b.x, a.y - b.y);
                    };
                    Point.mul = function (s, p) {
                        return new Point(s * p.x, s * p.y);
                    };
                    Point.cross = function (a, b) {
                        if (typeof (a) === 'number') {
                            if (typeof (b) === 'number') {
                                return a * b;
                            } else {
                                return new Point(-a * b.y, a * b.x);
                            }
                        } else {
                            if (typeof (b) === 'number') {
                                return new Point(b * a.y, -b * a.x);
                            } else {
                                return a.x * b.y - a.y * b.x;
                            }
                        }
                    };
                    Point.toString = xy.toString;
                    Point.compare = xy.compare;
                    Point.cmp = xy.compare;
                    Point.equals = xy.equals;
                    Point.dot = function (a, b) {
                        return a.x * b.x + a.y * b.y;
                    };
                    module.exports = Point;
                }, {
                    "./xy": 80
                }
            ],
            74: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var xy = _dereq_('./xy');
                    var PointError = function (message, points) {
                        this.name = "PointError";
                        this.points = points = points || [];
                        this.message = message || "Invalid Points!";
                        for (var i = 0; i < points.length; i++) {
                            this.message += " " + xy.toString(points[i]);
                        }
                    };
                    PointError.prototype = new Error();
                    PointError.prototype.constructor = PointError;
                    module.exports = PointError;
                }, {
                    "./xy": 80
                }
            ],
            75: [
                function (_dereq_, module, exports) {
                    (function (global) {
                        "use strict";
                        var previousPoly2tri = global.poly2tri;
                        exports.noConflict = function () {
                            global.poly2tri = previousPoly2tri;
                            return exports;
                        };
                        exports.VERSION = _dereq_('../dist/version.json').version;
                        exports.PointError = _dereq_('./pointerror');
                        exports.Point = _dereq_('./point');
                        exports.Triangle = _dereq_('./triangle');
                        exports.SweepContext = _dereq_('./sweepcontext');
                        var sweep = _dereq_('./sweep');
                        exports.triangulate = sweep.triangulate;
                        exports.sweep = {
                            Triangulate: sweep.triangulate
                        };
                    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                }, {
                    "../dist/version.json": 71,
                    "./point": 73,
                    "./pointerror": 74,
                    "./sweep": 76,
                    "./sweepcontext": 77,
                    "./triangle": 78
                }
            ],
            76: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var PointError = _dereq_('./pointerror');
                    var Triangle = _dereq_('./triangle');
                    var Node = _dereq_('./advancingfront').Node;
                    var utils = _dereq_('./utils');
                    var PI_3div4 = 3 * Math.PI / 4;
                    var PI_div2 = Math.PI / 2;
                    var EPSILON = utils.EPSILON;
                    var Orientation = utils.Orientation;
                    var orient2d = utils.orient2d;
                    var inScanArea = utils.inScanArea;

                    function triangulate(tcx) {
                        tcx.initTriangulation();
                        tcx.createAdvancingFront();
                        sweepPoints(tcx);
                        finalizationPolygon(tcx);
                    }

                    function sweepPoints(tcx) {
                        var i, len = tcx.pointCount();
                        for (i = 1; i < len; ++i) {
                            var point = tcx.getPoint(i);
                            var node = pointEvent(tcx, point);
                            var edges = point._p2t_edge_list;
                            for (var j = 0; edges && j < edges.length; ++j) {
                                edgeEventByEdge(tcx, edges[j], node);
                            }
                        }
                    }

                    function finalizationPolygon(tcx) {
                        var t = tcx.front().head().next.triangle;
                        var p = tcx.front().head().next.point;
                        while (!t.getConstrainedEdgeCW(p)) {
                            t = t.neighborCCW(p);
                        }
                        tcx.meshClean(t);
                    }

                    function pointEvent(tcx, point) {
                        var node = tcx.locateNode(point);
                        var new_node = newFrontTriangle(tcx, point, node);
                        if (point.x <= node.point.x + (EPSILON)) {
                            fill(tcx, node);
                        }
                        fillAdvancingFront(tcx, new_node);
                        return new_node;
                    }

                    function edgeEventByEdge(tcx, edge, node) {
                        tcx.edge_event.constrained_edge = edge;
                        tcx.edge_event.right = (edge.p.x > edge.q.x);
                        if (isEdgeSideOfTriangle(node.triangle, edge.p, edge.q)) {
                            return;
                        }
                        fillEdgeEvent(tcx, edge, node);
                        edgeEventByPoints(tcx, edge.p, edge.q, node.triangle, edge.q);
                    }

                    function edgeEventByPoints(tcx, ep, eq, triangle, point) {
                        if (isEdgeSideOfTriangle(triangle, ep, eq)) {
                            return;
                        }
                        var p1 = triangle.pointCCW(point);
                        var o1 = orient2d(eq, p1, ep);
                        if (o1 === Orientation.COLLINEAR) {
                            throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p1, ep]);
                        }
                        var p2 = triangle.pointCW(point);
                        var o2 = orient2d(eq, p2, ep);
                        if (o2 === Orientation.COLLINEAR) {
                            throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p2, ep]);
                        }
                        if (o1 === o2) {
                            if (o1 === Orientation.CW) {
                                triangle = triangle.neighborCCW(point);
                            } else {
                                triangle = triangle.neighborCW(point);
                            }
                            edgeEventByPoints(tcx, ep, eq, triangle, point);
                        } else {
                            flipEdgeEvent(tcx, ep, eq, triangle, point);
                        }
                    }

                    function isEdgeSideOfTriangle(triangle, ep, eq) {
                        var index = triangle.edgeIndex(ep, eq);
                        if (index !== -1) {
                            triangle.markConstrainedEdgeByIndex(index);
                            var t = triangle.getNeighbor(index);
                            if (t) {
                                t.markConstrainedEdgeByPoints(ep, eq);
                            }
                            return true;
                        }
                        return false;
                    }

                    function newFrontTriangle(tcx, point, node) {
                        var triangle = new Triangle(point, node.point, node.next.point);
                        triangle.markNeighbor(node.triangle);
                        tcx.addToMap(triangle);
                        var new_node = new Node(point);
                        new_node.next = node.next;
                        new_node.prev = node;
                        node.next.prev = new_node;
                        node.next = new_node;
                        if (!legalize(tcx, triangle)) {
                            tcx.mapTriangleToNodes(triangle);
                        }
                        return new_node;
                    }

                    function fill(tcx, node) {
                        var triangle = new Triangle(node.prev.point, node.point, node.next.point);
                        triangle.markNeighbor(node.prev.triangle);
                        triangle.markNeighbor(node.triangle);
                        tcx.addToMap(triangle);
                        node.prev.next = node.next;
                        node.next.prev = node.prev;
                        if (!legalize(tcx, triangle)) {
                            tcx.mapTriangleToNodes(triangle);
                        }
                    }

                    function fillAdvancingFront(tcx, n) {
                        var node = n.next;
                        var angle;
                        while (node.next) {
                            angle = holeAngle(node);
                            if (angle > PI_div2 || angle < -(PI_div2)) {
                                break;
                            }
                            fill(tcx, node);
                            node = node.next;
                        }
                        node = n.prev;
                        while (node.prev) {
                            angle = holeAngle(node);
                            if (angle > PI_div2 || angle < -(PI_div2)) {
                                break;
                            }
                            fill(tcx, node);
                            node = node.prev;
                        }
                        if (n.next && n.next.next) {
                            angle = basinAngle(n);
                            if (angle < PI_3div4) {
                                fillBasin(tcx, n);
                            }
                        }
                    }

                    function basinAngle(node) {
                        var ax = node.point.x - node.next.next.point.x;
                        var ay = node.point.y - node.next.next.point.y;
                        return Math.atan2(ay, ax);
                    }

                    function holeAngle(node) {
                        var ax = node.next.point.x - node.point.x;
                        var ay = node.next.point.y - node.point.y;
                        var bx = node.prev.point.x - node.point.x;
                        var by = node.prev.point.y - node.point.y;
                        return Math.atan2(ax * by - ay * bx, ax * bx + ay * by);
                    }

                    function legalize(tcx, t) {
                        for (var i = 0; i < 3; ++i) {
                            if (t.delaunay_edge[i]) {
                                continue;
                            }
                            var ot = t.getNeighbor(i);
                            if (ot) {
                                var p = t.getPoint(i);
                                var op = ot.oppositePoint(t, p);
                                var oi = ot.index(op);
                                if (ot.constrained_edge[oi] || ot.delaunay_edge[oi]) {
                                    t.constrained_edge[i] = ot.constrained_edge[oi];
                                    continue;
                                }
                                var inside = inCircle(p, t.pointCCW(p), t.pointCW(p), op);
                                if (inside) {
                                    t.delaunay_edge[i] = true;
                                    ot.delaunay_edge[oi] = true;
                                    rotateTrianglePair(t, p, ot, op);
                                    var not_legalized = !legalize(tcx, t);
                                    if (not_legalized) {
                                        tcx.mapTriangleToNodes(t);
                                    }
                                    not_legalized = !legalize(tcx, ot);
                                    if (not_legalized) {
                                        tcx.mapTriangleToNodes(ot);
                                    }
                                    t.delaunay_edge[i] = false;
                                    ot.delaunay_edge[oi] = false;
                                    return true;
                                }
                            }
                        }
                        return false;
                    }

                    function inCircle(pa, pb, pc, pd) {
                        var adx = pa.x - pd.x;
                        var ady = pa.y - pd.y;
                        var bdx = pb.x - pd.x;
                        var bdy = pb.y - pd.y;
                        var adxbdy = adx * bdy;
                        var bdxady = bdx * ady;
                        var oabd = adxbdy - bdxady;
                        if (oabd <= 0) {
                            return false;
                        }
                        var cdx = pc.x - pd.x;
                        var cdy = pc.y - pd.y;
                        var cdxady = cdx * ady;
                        var adxcdy = adx * cdy;
                        var ocad = cdxady - adxcdy;
                        if (ocad <= 0) {
                            return false;
                        }
                        var bdxcdy = bdx * cdy;
                        var cdxbdy = cdx * bdy;
                        var alift = adx * adx + ady * ady;
                        var blift = bdx * bdx + bdy * bdy;
                        var clift = cdx * cdx + cdy * cdy;
                        var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;
                        return det > 0;
                    }

                    function rotateTrianglePair(t, p, ot, op) {
                        var n1, n2, n3, n4;
                        n1 = t.neighborCCW(p);
                        n2 = t.neighborCW(p);
                        n3 = ot.neighborCCW(op);
                        n4 = ot.neighborCW(op);
                        var ce1, ce2, ce3, ce4;
                        ce1 = t.getConstrainedEdgeCCW(p);
                        ce2 = t.getConstrainedEdgeCW(p);
                        ce3 = ot.getConstrainedEdgeCCW(op);
                        ce4 = ot.getConstrainedEdgeCW(op);
                        var de1, de2, de3, de4;
                        de1 = t.getDelaunayEdgeCCW(p);
                        de2 = t.getDelaunayEdgeCW(p);
                        de3 = ot.getDelaunayEdgeCCW(op);
                        de4 = ot.getDelaunayEdgeCW(op);
                        t.legalize(p, op);
                        ot.legalize(op, p);
                        ot.setDelaunayEdgeCCW(p, de1);
                        t.setDelaunayEdgeCW(p, de2);
                        t.setDelaunayEdgeCCW(op, de3);
                        ot.setDelaunayEdgeCW(op, de4);
                        ot.setConstrainedEdgeCCW(p, ce1);
                        t.setConstrainedEdgeCW(p, ce2);
                        t.setConstrainedEdgeCCW(op, ce3);
                        ot.setConstrainedEdgeCW(op, ce4);
                        t.clearNeigbors();
                        ot.clearNeigbors();
                        if (n1) {
                            ot.markNeighbor(n1);
                        }
                        if (n2) {
                            t.markNeighbor(n2);
                        }
                        if (n3) {
                            t.markNeighbor(n3);
                        }
                        if (n4) {
                            ot.markNeighbor(n4);
                        }
                        t.markNeighbor(ot);
                    }

                    function fillBasin(tcx, node) {
                        if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {
                            tcx.basin.left_node = node.next.next;
                        } else {
                            tcx.basin.left_node = node.next;
                        }
                        tcx.basin.bottom_node = tcx.basin.left_node;
                        while (tcx.basin.bottom_node.next && tcx.basin.bottom_node.point.y >= tcx.basin.bottom_node.next.point.y) {
                            tcx.basin.bottom_node = tcx.basin.bottom_node.next;
                        }
                        if (tcx.basin.bottom_node === tcx.basin.left_node) {
                            return;
                        }
                        tcx.basin.right_node = tcx.basin.bottom_node;
                        while (tcx.basin.right_node.next && tcx.basin.right_node.point.y < tcx.basin.right_node.next.point.y) {
                            tcx.basin.right_node = tcx.basin.right_node.next;
                        }
                        if (tcx.basin.right_node === tcx.basin.bottom_node) {
                            return;
                        }
                        tcx.basin.width = tcx.basin.right_node.point.x - tcx.basin.left_node.point.x;
                        tcx.basin.left_highest = tcx.basin.left_node.point.y > tcx.basin.right_node.point.y;
                        fillBasinReq(tcx, tcx.basin.bottom_node);
                    }

                    function fillBasinReq(tcx, node) {
                        if (isShallow(tcx, node)) {
                            return;
                        }
                        fill(tcx, node);
                        var o;
                        if (node.prev === tcx.basin.left_node && node.next === tcx.basin.right_node) {
                            return;
                        } else if (node.prev === tcx.basin.left_node) {
                            o = orient2d(node.point, node.next.point, node.next.next.point);
                            if (o === Orientation.CW) {
                                return;
                            }
                            node = node.next;
                        } else if (node.next === tcx.basin.right_node) {
                            o = orient2d(node.point, node.prev.point, node.prev.prev.point);
                            if (o === Orientation.CCW) {
                                return;
                            }
                            node = node.prev;
                        } else {
                            if (node.prev.point.y < node.next.point.y) {
                                node = node.prev;
                            } else {
                                node = node.next;
                            }
                        }
                        fillBasinReq(tcx, node);
                    }

                    function isShallow(tcx, node) {
                        var height;
                        if (tcx.basin.left_highest) {
                            height = tcx.basin.left_node.point.y - node.point.y;
                        } else {
                            height = tcx.basin.right_node.point.y - node.point.y;
                        }
                        if (tcx.basin.width > height) {
                            return true;
                        }
                        return false;
                    }

                    function fillEdgeEvent(tcx, edge, node) {
                        if (tcx.edge_event.right) {
                            fillRightAboveEdgeEvent(tcx, edge, node);
                        } else {
                            fillLeftAboveEdgeEvent(tcx, edge, node);
                        }
                    }

                    function fillRightAboveEdgeEvent(tcx, edge, node) {
                        while (node.next.point.x < edge.p.x) {
                            if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {
                                fillRightBelowEdgeEvent(tcx, edge, node);
                            } else {
                                node = node.next;
                            }
                        }
                    }

                    function fillRightBelowEdgeEvent(tcx, edge, node) {
                        if (node.point.x < edge.p.x) {
                            if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {
                                fillRightConcaveEdgeEvent(tcx, edge, node);
                            } else {
                                fillRightConvexEdgeEvent(tcx, edge, node);
                                fillRightBelowEdgeEvent(tcx, edge, node);
                            }
                        }
                    }

                    function fillRightConcaveEdgeEvent(tcx, edge, node) {
                        fill(tcx, node.next);
                        if (node.next.point !== edge.p) {
                            if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {
                                if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {
                                    fillRightConcaveEdgeEvent(tcx, edge, node);
                                } else {}
                            }
                        }
                    }

                    function fillRightConvexEdgeEvent(tcx, edge, node) {
                        if (orient2d(node.next.point, node.next.next.point, node.next.next.next.point) === Orientation.CCW) {
                            fillRightConcaveEdgeEvent(tcx, edge, node.next);
                        } else {
                            if (orient2d(edge.q, node.next.next.point, edge.p) === Orientation.CCW) {
                                fillRightConvexEdgeEvent(tcx, edge, node.next);
                            } else {}
                        }
                    }

                    function fillLeftAboveEdgeEvent(tcx, edge, node) {
                        while (node.prev.point.x > edge.p.x) {
                            if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {
                                fillLeftBelowEdgeEvent(tcx, edge, node);
                            } else {
                                node = node.prev;
                            }
                        }
                    }

                    function fillLeftBelowEdgeEvent(tcx, edge, node) {
                        if (node.point.x > edge.p.x) {
                            if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {
                                fillLeftConcaveEdgeEvent(tcx, edge, node);
                            } else {
                                fillLeftConvexEdgeEvent(tcx, edge, node);
                                fillLeftBelowEdgeEvent(tcx, edge, node);
                            }
                        }
                    }

                    function fillLeftConvexEdgeEvent(tcx, edge, node) {
                        if (orient2d(node.prev.point, node.prev.prev.point, node.prev.prev.prev.point) === Orientation.CW) {
                            fillLeftConcaveEdgeEvent(tcx, edge, node.prev);
                        } else {
                            if (orient2d(edge.q, node.prev.prev.point, edge.p) === Orientation.CW) {
                                fillLeftConvexEdgeEvent(tcx, edge, node.prev);
                            } else {}
                        }
                    }

                    function fillLeftConcaveEdgeEvent(tcx, edge, node) {
                        fill(tcx, node.prev);
                        if (node.prev.point !== edge.p) {
                            if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {
                                if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {
                                    fillLeftConcaveEdgeEvent(tcx, edge, node);
                                } else {}
                            }
                        }
                    }

                    function flipEdgeEvent(tcx, ep, eq, t, p) {
                        var ot = t.neighborAcross(p);
                        if (!ot) {
                            throw new Error('poly2tri [BUG:FIXME] FLIP failed due to missing triangle!');
                        }
                        var op = ot.oppositePoint(t, p);
                        if (t.getConstrainedEdgeAcross(p)) {
                            var index = t.index(p);
                            throw new PointError("poly2tri Intersecting Constraints", [p, op, t.getPoint((index + 1) % 3), t.getPoint((index + 2) % 3)]);
                        }
                        if (inScanArea(p, t.pointCCW(p), t.pointCW(p), op)) {
                            rotateTrianglePair(t, p, ot, op);
                            tcx.mapTriangleToNodes(t);
                            tcx.mapTriangleToNodes(ot);
                            if (p === eq && op === ep) {
                                if (eq === tcx.edge_event.constrained_edge.q && ep === tcx.edge_event.constrained_edge.p) {
                                    t.markConstrainedEdgeByPoints(ep, eq);
                                    ot.markConstrainedEdgeByPoints(ep, eq);
                                    legalize(tcx, t);
                                    legalize(tcx, ot);
                                } else {}
                            } else {
                                var o = orient2d(eq, op, ep);
                                t = nextFlipTriangle(tcx, o, t, ot, p, op);
                                flipEdgeEvent(tcx, ep, eq, t, p);
                            }
                        } else {
                            var newP = nextFlipPoint(ep, eq, ot, op);
                            flipScanEdgeEvent(tcx, ep, eq, t, ot, newP);
                            edgeEventByPoints(tcx, ep, eq, t, p);
                        }
                    }

                    function nextFlipTriangle(tcx, o, t, ot, p, op) {
                        var edge_index;
                        if (o === Orientation.CCW) {
                            edge_index = ot.edgeIndex(p, op);
                            ot.delaunay_edge[edge_index] = true;
                            legalize(tcx, ot);
                            ot.clearDelunayEdges();
                            return t;
                        }
                        edge_index = t.edgeIndex(p, op);
                        t.delaunay_edge[edge_index] = true;
                        legalize(tcx, t);
                        t.clearDelunayEdges();
                        return ot;
                    }

                    function nextFlipPoint(ep, eq, ot, op) {
                        var o2d = orient2d(eq, op, ep);
                        if (o2d === Orientation.CW) {
                            return ot.pointCCW(op);
                        } else if (o2d === Orientation.CCW) {
                            return ot.pointCW(op);
                        } else {
                            throw new PointError("poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!", [eq, op, ep]);
                        }
                    }

                    function flipScanEdgeEvent(tcx, ep, eq, flip_triangle, t, p) {
                        var ot = t.neighborAcross(p);
                        if (!ot) {
                            throw new Error('poly2tri [BUG:FIXME] FLIP failed due to missing triangle');
                        }
                        var op = ot.oppositePoint(t, p);
                        if (inScanArea(eq, flip_triangle.pointCCW(eq), flip_triangle.pointCW(eq), op)) {
                            flipEdgeEvent(tcx, eq, op, ot, op);
                        } else {
                            var newP = nextFlipPoint(ep, eq, ot, op);
                            flipScanEdgeEvent(tcx, ep, eq, flip_triangle, ot, newP);
                        }
                    }
                    exports.triangulate = triangulate;
                }, {
                    "./advancingfront": 72,
                    "./pointerror": 74,
                    "./triangle": 78,
                    "./utils": 79
                }
            ],
            77: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var PointError = _dereq_('./pointerror');
                    var Point = _dereq_('./point');
                    var Triangle = _dereq_('./triangle');
                    var sweep = _dereq_('./sweep');
                    var AdvancingFront = _dereq_('./advancingfront');
                    var Node = AdvancingFront.Node;
                    var kAlpha = 0.3;
                    var Edge = function (p1, p2) {
                        this.p = p1;
                        this.q = p2;
                        if (p1.y > p2.y) {
                            this.q = p1;
                            this.p = p2;
                        } else if (p1.y === p2.y) {
                            if (p1.x > p2.x) {
                                this.q = p1;
                                this.p = p2;
                            } else if (p1.x === p2.x) {
                                throw new PointError('poly2tri Invalid Edge constructor: repeated points!', [p1]);
                            }
                        }
                        if (!this.q._p2t_edge_list) {
                            this.q._p2t_edge_list = [];
                        }
                        this.q._p2t_edge_list.push(this);
                    };
                    var Basin = function () {
                        this.left_node = null;
                        this.bottom_node = null;
                        this.right_node = null;
                        this.width = 0.0;
                        this.left_highest = false;
                    };
                    Basin.prototype.clear = function () {
                        this.left_node = null;
                        this.bottom_node = null;
                        this.right_node = null;
                        this.width = 0.0;
                        this.left_highest = false;
                    };
                    var EdgeEvent = function () {
                        this.constrained_edge = null;
                        this.right = false;
                    };
                    var SweepContext = function (contour, options) {
                        options = options || {};
                        this.triangles_ = [];
                        this.map_ = [];
                        this.points_ = (options.cloneArrays ? contour.slice(0) : contour);
                        this.edge_list = [];
                        this.pmin_ = this.pmax_ = null;
                        this.front_ = null;
                        this.head_ = null;
                        this.tail_ = null;
                        this.af_head_ = null;
                        this.af_middle_ = null;
                        this.af_tail_ = null;
                        this.basin = new Basin();
                        this.edge_event = new EdgeEvent();
                        this.initEdges(this.points_);
                    };
                    SweepContext.prototype.addHole = function (polyline) {
                        this.initEdges(polyline);
                        var i, len = polyline.length;
                        for (i = 0; i < len; i++) {
                            this.points_.push(polyline[i]);
                        }
                        return this;
                    };
                    SweepContext.prototype.AddHole = SweepContext.prototype.addHole;
                    SweepContext.prototype.addPoint = function (point) {
                        this.points_.push(point);
                        return this;
                    };
                    SweepContext.prototype.AddPoint = SweepContext.prototype.addPoint;
                    SweepContext.prototype.addPoints = function (points) {
                        this.points_ = this.points_.concat(points);
                        return this;
                    };
                    SweepContext.prototype.triangulate = function () {
                        sweep.triangulate(this);
                        return this;
                    };
                    SweepContext.prototype.getBoundingBox = function () {
                        return {
                            min: this.pmin_,
                            max: this.pmax_
                        };
                    };
                    SweepContext.prototype.getTriangles = function () {
                        return this.triangles_;
                    };
                    SweepContext.prototype.GetTriangles = SweepContext.prototype.getTriangles;
                    SweepContext.prototype.front = function () {
                        return this.front_;
                    };
                    SweepContext.prototype.pointCount = function () {
                        return this.points_.length;
                    };
                    SweepContext.prototype.head = function () {
                        return this.head_;
                    };
                    SweepContext.prototype.setHead = function (p1) {
                        this.head_ = p1;
                    };
                    SweepContext.prototype.tail = function () {
                        return this.tail_;
                    };
                    SweepContext.prototype.setTail = function (p1) {
                        this.tail_ = p1;
                    };
                    SweepContext.prototype.getMap = function () {
                        return this.map_;
                    };
                    SweepContext.prototype.initTriangulation = function () {
                        var xmax = this.points_[0].x;
                        var xmin = this.points_[0].x;
                        var ymax = this.points_[0].y;
                        var ymin = this.points_[0].y;
                        var i, len = this.points_.length;
                        for (i = 1; i < len; i++) {
                            var p = this.points_[i];
                            (p.x > xmax) && (xmax = p.x);
                            (p.x < xmin) && (xmin = p.x);
                            (p.y > ymax) && (ymax = p.y);
                            (p.y < ymin) && (ymin = p.y);
                        }
                        this.pmin_ = new Point(xmin, ymin);
                        this.pmax_ = new Point(xmax, ymax);
                        var dx = kAlpha * (xmax - xmin);
                        var dy = kAlpha * (ymax - ymin);
                        this.head_ = new Point(xmax + dx, ymin - dy);
                        this.tail_ = new Point(xmin - dx, ymin - dy);
                        this.points_.sort(Point.compare);
                    };
                    SweepContext.prototype.initEdges = function (polyline) {
                        var i, len = polyline.length;
                        for (i = 0; i < len; ++i) {
                            this.edge_list.push(new Edge(polyline[i], polyline[(i + 1) % len]));
                        }
                    };
                    SweepContext.prototype.getPoint = function (index) {
                        return this.points_[index];
                    };
                    SweepContext.prototype.addToMap = function (triangle) {
                        this.map_.push(triangle);
                    };
                    SweepContext.prototype.locateNode = function (point) {
                        return this.front_.locateNode(point.x);
                    };
                    SweepContext.prototype.createAdvancingFront = function () {
                        var head;
                        var middle;
                        var tail;
                        var triangle = new Triangle(this.points_[0], this.tail_, this.head_);
                        this.map_.push(triangle);
                        head = new Node(triangle.getPoint(1), triangle);
                        middle = new Node(triangle.getPoint(0), triangle);
                        tail = new Node(triangle.getPoint(2));
                        this.front_ = new AdvancingFront(head, tail);
                        head.next = middle;
                        middle.next = tail;
                        middle.prev = head;
                        tail.prev = middle;
                    };
                    SweepContext.prototype.removeNode = function (node) {};
                    SweepContext.prototype.mapTriangleToNodes = function (t) {
                        for (var i = 0; i < 3; ++i) {
                            if (!t.getNeighbor(i)) {
                                var n = this.front_.locatePoint(t.pointCW(t.getPoint(i)));
                                if (n) {
                                    n.triangle = t;
                                }
                            }
                        }
                    };
                    SweepContext.prototype.removeFromMap = function (triangle) {
                        var i, map = this.map_,
                            len = map.length;
                        for (i = 0; i < len; i++) {
                            if (map[i] === triangle) {
                                map.splice(i, 1);
                                break;
                            }
                        }
                    };
                    SweepContext.prototype.meshClean = function (triangle) {
                        var triangles = [triangle],
                            t, i;
                        while (t = triangles.pop()) {
                            if (!t.isInterior()) {
                                t.setInterior(true);
                                this.triangles_.push(t);
                                for (i = 0; i < 3; i++) {
                                    if (!t.constrained_edge[i]) {
                                        triangles.push(t.getNeighbor(i));
                                    }
                                }
                            }
                        }
                    };
                    module.exports = SweepContext;
                }, {
                    "./advancingfront": 72,
                    "./point": 73,
                    "./pointerror": 74,
                    "./sweep": 76,
                    "./triangle": 78
                }
            ],
            78: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var xy = _dereq_("./xy");
                    var Triangle = function (a, b, c) {
                        this.points_ = [a, b, c];
                        this.neighbors_ = [null, null, null];
                        this.interior_ = false;
                        this.constrained_edge = [false, false, false];
                        this.delaunay_edge = [false, false, false];
                    };
                    var p2s = xy.toString;
                    Triangle.prototype.toString = function () {
                        return ("[" + p2s(this.points_[0]) + p2s(this.points_[1]) + p2s(this.points_[2]) + "]");
                    };
                    Triangle.prototype.getPoint = function (index) {
                        return this.points_[index];
                    };
                    Triangle.prototype.GetPoint = Triangle.prototype.getPoint;
                    Triangle.prototype.getPoints = function () {
                        return this.points_;
                    };
                    Triangle.prototype.getNeighbor = function (index) {
                        return this.neighbors_[index];
                    };
                    Triangle.prototype.containsPoint = function (point) {
                        var points = this.points_;
                        return (point === points[0] || point === points[1] || point === points[2]);
                    };
                    Triangle.prototype.containsEdge = function (edge) {
                        return this.containsPoint(edge.p) && this.containsPoint(edge.q);
                    };
                    Triangle.prototype.containsPoints = function (p1, p2) {
                        return this.containsPoint(p1) && this.containsPoint(p2);
                    };
                    Triangle.prototype.isInterior = function () {
                        return this.interior_;
                    };
                    Triangle.prototype.setInterior = function (interior) {
                        this.interior_ = interior;
                        return this;
                    };
                    Triangle.prototype.markNeighborPointers = function (p1, p2, t) {
                        var points = this.points_;
                        if ((p1 === points[2] && p2 === points[1]) || (p1 === points[1] && p2 === points[2])) {
                            this.neighbors_[0] = t;
                        } else if ((p1 === points[0] && p2 === points[2]) || (p1 === points[2] && p2 === points[0])) {
                            this.neighbors_[1] = t;
                        } else if ((p1 === points[0] && p2 === points[1]) || (p1 === points[1] && p2 === points[0])) {
                            this.neighbors_[2] = t;
                        } else {
                            throw new Error('poly2tri Invalid Triangle.markNeighborPointers() call');
                        }
                    };
                    Triangle.prototype.markNeighbor = function (t) {
                        var points = this.points_;
                        if (t.containsPoints(points[1], points[2])) {
                            this.neighbors_[0] = t;
                            t.markNeighborPointers(points[1], points[2], this);
                        } else if (t.containsPoints(points[0], points[2])) {
                            this.neighbors_[1] = t;
                            t.markNeighborPointers(points[0], points[2], this);
                        } else if (t.containsPoints(points[0], points[1])) {
                            this.neighbors_[2] = t;
                            t.markNeighborPointers(points[0], points[1], this);
                        }
                    };
                    Triangle.prototype.clearNeigbors = function () {
                        this.neighbors_[0] = null;
                        this.neighbors_[1] = null;
                        this.neighbors_[2] = null;
                    };
                    Triangle.prototype.clearDelunayEdges = function () {
                        this.delaunay_edge[0] = false;
                        this.delaunay_edge[1] = false;
                        this.delaunay_edge[2] = false;
                    };
                    Triangle.prototype.pointCW = function (p) {
                        var points = this.points_;
                        if (p === points[0]) {
                            return points[2];
                        } else if (p === points[1]) {
                            return points[0];
                        } else if (p === points[2]) {
                            return points[1];
                        } else {
                            return null;
                        }
                    };
                    Triangle.prototype.pointCCW = function (p) {
                        var points = this.points_;
                        if (p === points[0]) {
                            return points[1];
                        } else if (p === points[1]) {
                            return points[2];
                        } else if (p === points[2]) {
                            return points[0];
                        } else {
                            return null;
                        }
                    };
                    Triangle.prototype.neighborCW = function (p) {
                        if (p === this.points_[0]) {
                            return this.neighbors_[1];
                        } else if (p === this.points_[1]) {
                            return this.neighbors_[2];
                        } else {
                            return this.neighbors_[0];
                        }
                    };
                    Triangle.prototype.neighborCCW = function (p) {
                        if (p === this.points_[0]) {
                            return this.neighbors_[2];
                        } else if (p === this.points_[1]) {
                            return this.neighbors_[0];
                        } else {
                            return this.neighbors_[1];
                        }
                    };
                    Triangle.prototype.getConstrainedEdgeCW = function (p) {
                        if (p === this.points_[0]) {
                            return this.constrained_edge[1];
                        } else if (p === this.points_[1]) {
                            return this.constrained_edge[2];
                        } else {
                            return this.constrained_edge[0];
                        }
                    };
                    Triangle.prototype.getConstrainedEdgeCCW = function (p) {
                        if (p === this.points_[0]) {
                            return this.constrained_edge[2];
                        } else if (p === this.points_[1]) {
                            return this.constrained_edge[0];
                        } else {
                            return this.constrained_edge[1];
                        }
                    };
                    Triangle.prototype.getConstrainedEdgeAcross = function (p) {
                        if (p === this.points_[0]) {
                            return this.constrained_edge[0];
                        } else if (p === this.points_[1]) {
                            return this.constrained_edge[1];
                        } else {
                            return this.constrained_edge[2];
                        }
                    };
                    Triangle.prototype.setConstrainedEdgeCW = function (p, ce) {
                        if (p === this.points_[0]) {
                            this.constrained_edge[1] = ce;
                        } else if (p === this.points_[1]) {
                            this.constrained_edge[2] = ce;
                        } else {
                            this.constrained_edge[0] = ce;
                        }
                    };
                    Triangle.prototype.setConstrainedEdgeCCW = function (p, ce) {
                        if (p === this.points_[0]) {
                            this.constrained_edge[2] = ce;
                        } else if (p === this.points_[1]) {
                            this.constrained_edge[0] = ce;
                        } else {
                            this.constrained_edge[1] = ce;
                        }
                    };
                    Triangle.prototype.getDelaunayEdgeCW = function (p) {
                        if (p === this.points_[0]) {
                            return this.delaunay_edge[1];
                        } else if (p === this.points_[1]) {
                            return this.delaunay_edge[2];
                        } else {
                            return this.delaunay_edge[0];
                        }
                    };
                    Triangle.prototype.getDelaunayEdgeCCW = function (p) {
                        if (p === this.points_[0]) {
                            return this.delaunay_edge[2];
                        } else if (p === this.points_[1]) {
                            return this.delaunay_edge[0];
                        } else {
                            return this.delaunay_edge[1];
                        }
                    };
                    Triangle.prototype.setDelaunayEdgeCW = function (p, e) {
                        if (p === this.points_[0]) {
                            this.delaunay_edge[1] = e;
                        } else if (p === this.points_[1]) {
                            this.delaunay_edge[2] = e;
                        } else {
                            this.delaunay_edge[0] = e;
                        }
                    };
                    Triangle.prototype.setDelaunayEdgeCCW = function (p, e) {
                        if (p === this.points_[0]) {
                            this.delaunay_edge[2] = e;
                        } else if (p === this.points_[1]) {
                            this.delaunay_edge[0] = e;
                        } else {
                            this.delaunay_edge[1] = e;
                        }
                    };
                    Triangle.prototype.neighborAcross = function (p) {
                        if (p === this.points_[0]) {
                            return this.neighbors_[0];
                        } else if (p === this.points_[1]) {
                            return this.neighbors_[1];
                        } else {
                            return this.neighbors_[2];
                        }
                    };
                    Triangle.prototype.oppositePoint = function (t, p) {
                        var cw = t.pointCW(p);
                        return this.pointCW(cw);
                    };
                    Triangle.prototype.legalize = function (opoint, npoint) {
                        var points = this.points_;
                        if (opoint === points[0]) {
                            points[1] = points[0];
                            points[0] = points[2];
                            points[2] = npoint;
                        } else if (opoint === points[1]) {
                            points[2] = points[1];
                            points[1] = points[0];
                            points[0] = npoint;
                        } else if (opoint === points[2]) {
                            points[0] = points[2];
                            points[2] = points[1];
                            points[1] = npoint;
                        } else {
                            throw new Error('poly2tri Invalid Triangle.legalize() call');
                        }
                    };
                    Triangle.prototype.index = function (p) {
                        var points = this.points_;
                        if (p === points[0]) {
                            return 0;
                        } else if (p === points[1]) {
                            return 1;
                        } else if (p === points[2]) {
                            return 2;
                        } else {
                            throw new Error('poly2tri Invalid Triangle.index() call');
                        }
                    };
                    Triangle.prototype.edgeIndex = function (p1, p2) {
                        var points = this.points_;
                        if (p1 === points[0]) {
                            if (p2 === points[1]) {
                                return 2;
                            } else if (p2 === points[2]) {
                                return 1;
                            }
                        } else if (p1 === points[1]) {
                            if (p2 === points[2]) {
                                return 0;
                            } else if (p2 === points[0]) {
                                return 2;
                            }
                        } else if (p1 === points[2]) {
                            if (p2 === points[0]) {
                                return 1;
                            } else if (p2 === points[1]) {
                                return 0;
                            }
                        }
                        return -1;
                    };
                    Triangle.prototype.markConstrainedEdgeByIndex = function (index) {
                        this.constrained_edge[index] = true;
                    };
                    Triangle.prototype.markConstrainedEdgeByEdge = function (edge) {
                        this.markConstrainedEdgeByPoints(edge.p, edge.q);
                    };
                    Triangle.prototype.markConstrainedEdgeByPoints = function (p, q) {
                        var points = this.points_;
                        if ((q === points[0] && p === points[1]) || (q === points[1] && p === points[0])) {
                            this.constrained_edge[2] = true;
                        } else if ((q === points[0] && p === points[2]) || (q === points[2] && p === points[0])) {
                            this.constrained_edge[1] = true;
                        } else if ((q === points[1] && p === points[2]) || (q === points[2] && p === points[1])) {
                            this.constrained_edge[0] = true;
                        }
                    };
                    module.exports = Triangle;
                }, {
                    "./xy": 80
                }
            ],
            79: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var EPSILON = 1e-12;
                    var Orientation = {
                        "CW": 1,
                        "CCW": -1,
                        "COLLINEAR": 0
                    };

                    function orient2d(pa, pb, pc) {
                        var detleft = (pa.x - pc.x) * (pb.y - pc.y);
                        var detright = (pa.y - pc.y) * (pb.x - pc.x);
                        var val = detleft - detright;
                        if (val > -(EPSILON) && val < (EPSILON)) {
                            return Orientation.COLLINEAR;
                        } else if (val > 0) {
                            return Orientation.CCW;
                        } else {
                            return Orientation.CW;
                        }
                    }

                    function inScanArea(pa, pb, pc, pd) {
                        var oadb = (pa.x - pb.x) * (pd.y - pb.y) - (pd.x - pb.x) * (pa.y - pb.y);
                        if (oadb >= -EPSILON) {
                            return false;
                        }
                        var oadc = (pa.x - pc.x) * (pd.y - pc.y) - (pd.x - pc.x) * (pa.y - pc.y);
                        if (oadc <= EPSILON) {
                            return false;
                        }
                        return true;
                    }
                    module.exports = {
                        EPSILON: EPSILON,
                        Orientation: Orientation,
                        orient2d: orient2d,
                        inScanArea: inScanArea
                    };
                }, {}
            ],
            80: [
                function (_dereq_, module, exports) {
                    "use strict";

                    function toStringBase(p) {
                        return ("(" + p.x + ";" + p.y + ")");
                    }

                    function toString(p) {
                        var s = p.toString();
                        return (s === '[object Object]' ? toStringBase(p) : s);
                    }

                    function compare(a, b) {
                        if (a.y === b.y) {
                            return a.x - b.x;
                        } else {
                            return a.y - b.y;
                        }
                    }

                    function equals(a, b) {
                        return a.x === b.x && a.y === b.y;
                    }
                    module.exports = {
                        toString: toString,
                        toStringBase: toStringBase,
                        compare: compare,
                        equals: equals
                    };
                }, {}
            ],
            81: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = triangulatePolyline
                    var poly2tri = _dereq_("poly2tri")

                    function PointWrapper(x, y, idx) {
                        this.x = x
                        this.y = y
                        this.idx = idx
                    }

                    function triangulatePolyline(loops, positions) {
                        function convertLoop(loop) {
                            return loop.map(function (v) {
                                var p = positions[v]
                                return new PointWrapper(p[0], p[1], v)
                            })
                        }
                        var numLoops = loops.length
                        var outerLoop = 0
                        var outerPoint = positions[loops[0][0]]
                        for (var i = 0; i < numLoops; ++i) {
                            var loop = loops[i]
                            var n = loop.length
                            for (var j = 0; j < n; ++j) {
                                var p = positions[loop[j]]
                                var d = p[1] - outerPoint[1]
                                if (d === 0) {
                                    d = p[0] - outerPoint[0]
                                }
                                if (d < 0) {
                                    outerPoint = p
                                    outerLoop = i
                                }
                            }
                        }
                        var ctx = new poly2tri.SweepContext(convertLoop(loops[outerLoop]))
                        for (var i = 0; i < numLoops; ++i) {
                            if (i === outerLoop) {
                                continue
                            }
                            ctx.addHole(convertLoop(loops[i]))
                        }
                        ctx.triangulate()
                        var triangles = ctx.getTriangles()
                        return triangles.map(function (tri) {
                            return [tri.getPoint(0).idx, tri.getPoint(1).idx, tri.getPoint(2).idx]
                        })
                    }
                }, {
                    "poly2tri": 75
                }
            ],
            82: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = axesProperties
                    var glm = _dereq_("gl-matrix")
                    var getPlanes = _dereq_("extract-frustum-planes")
                    var splitPoly = _dereq_("split-polygon")
                    var cubeParams = _dereq_("./lib/cube.js")
                    var mat4 = glm.mat4
                    var vec4 = glm.vec4
                    var identity = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])
                    var mvp = new Float32Array(16)

                    function AxesRange3D(lo, hi, pixelsPerDataUnit) {
                        this.lo = lo
                        this.hi = hi
                        this.pixelsPerDataUnit = pixelsPerDataUnit
                    }

                    function gradient(M, v, width, height) {
                        var result = [0, 0, 0]
                        for (var i = 0; i < 3; ++i) {
                            var q = [v[0], v[1], v[2], 1]
                            q[i] += 1
                            vec4.transformMat4(q, q, M)
                            if (q[3] < 0) {
                                result[i] = Infinity
                            }
                            var p = [v[0], v[1], v[2], 1]
                            p[i] -= 1
                            vec4.transformMat4(p, p, M)
                            if (p[3] < 0) {
                                result[i] = Infinity
                            }
                            var dx = (p[0] / p[3] - q[0] / q[3]) * width
                            var dy = (p[1] / p[3] - q[1] / q[3]) * height
                            result[i] = 0.25 * Math.sqrt(dx * dx + dy * dy)
                        }
                        return result
                    }

                    function axesProperties(axes, camera, width, height) {
                        var model = camera.model || identity
                        var view = camera.view || identity
                        var projection = camera.projection || identity
                        var bounds = axes.bounds
                        var params = cubeParams(model, view, projection, bounds)
                        var axis = params.axis
                        var edges = params.edges
                        mat4.mul(mvp, view, model)
                        mat4.mul(mvp, projection, mvp)
                        var ranges = new Array(3)
                        for (var i = 0; i < 3; ++i) {
                            ranges[i] = new AxesRange3D(Infinity, -Infinity, Infinity)
                        }
                        var frustum = getPlanes(mat4.transpose(mvp, mvp))
                        mat4.transpose(mvp, mvp)
                        for (var d = 0; d < 3; ++d) {
                            var u = (d + 1) % 3
                            var v = (d + 2) % 3
                            var x = [0, 0, 0]
                            i_loop: for (var i = 0; i < 2; ++i) {
                                var poly = []
                                if ((axis[d] < 0) === !!i) {
                                    continue
                                }
                                x[d] = bounds[i][d]
                                for (var j = 0; j < 2; ++j) {
                                    x[u] = bounds[j ^ i][u]
                                    for (var k = 0; k < 2; ++k) {
                                        x[v] = bounds[k ^ j ^ i][v]
                                        poly.push(x.slice())
                                    }
                                }
                                for (var j = 0; j < frustum.length; ++j) {
                                    if (poly.length === 0) {
                                        continue i_loop
                                    }
                                    poly = splitPoly.positive(poly, frustum[j])
                                }
                                for (var j = 0; j < poly.length; ++j) {
                                    var v = poly[j]
                                    var grad = gradient(mvp, v, width, height)
                                    for (var k = 0; k < 3; ++k) {
                                        ranges[k].lo = Math.min(ranges[k].lo, v[k])
                                        ranges[k].hi = Math.max(ranges[k].hi, v[k])
                                        if (k !== d) {
                                            ranges[k].pixelsPerDataUnit = Math.min(ranges[k].pixelsPerDataUnit, Math.abs(grad[k]))
                                        }
                                    }
                                }
                            }
                        }
                        return ranges
                    }
                }, {
                    "./lib/cube.js": 7,
                    "extract-frustum-planes": 11,
                    "gl-matrix": 89,
                    "split-polygon": 14
                }
            ],
            83: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var pool = _dereq_("typedarray-pool")
                    var ops = _dereq_("ndarray-ops")
                    var ndarray = _dereq_("ndarray")
                    var webglew = _dereq_("webglew")
                    var SUPPORTED_TYPES = ["uint8", "uint8_clamped", "uint16", "uint32", "int8", "int16", "int32", "float32"]

                    function GLBuffer(gl, type, handle, length, usage) {
                        this.gl = gl
                        this.type = type
                        this.handle = handle
                        this.length = length
                        this.usage = usage
                    }
                    var proto = GLBuffer.prototype
                    proto.bind = function () {
                        this.gl.bindBuffer(this.type, this.handle)
                    }
                    proto.dispose = function () {
                        this.gl.deleteBuffer(this.handle)
                    }

                    function updateTypeArray(gl, type, len, usage, data, offset) {
                        var dataLen = data.length * data.BYTES_PER_ELEMENT
                        if (offset < 0) {
                            gl.bufferData(type, data, usage)
                            return dataLen
                        }
                        if (dataLen + offset > len) {
                            throw new Error("gl-buffer: If resizing buffer, must not specify offset")
                        }
                        gl.bufferSubData(type, offset, data)
                        return len
                    }

                    function makeScratchTypeArray(array, dtype) {
                        var res = pool.malloc(array.length, dtype)
                        var n = array.length
                        for (var i = 0; i < n; ++i) {
                            res[i] = array[i]
                        }
                        return res
                    }

                    function isPacked(shape, stride) {
                        var n = 1
                        for (var i = stride.length - 1; i >= 0; --i) {
                            if (stride[i] !== n) {
                                return false
                            }
                            n *= shape[i]
                        }
                        return true
                    }
                    proto.update = function (array, offset) {
                        if (typeof offset !== "number") {
                            offset = -1
                        }
                        this.bind()
                        if (typeof array === "object" && typeof array.shape !== "undefined") {
                            var dtype = array.dtype
                            if (SUPPORTED_TYPES.indexOf(dtype) < 0) {
                                dtype = "float32"
                            }
                            if (this.type === this.gl.ELEMENT_ARRAY_BUFFER) {
                                var wgl = webglew(gl)
                                var ext = wgl.OES_element_index_uint
                                if (ext && dtype !== "uint16") {
                                    dtype = "uint32"
                                } else {
                                    dtype = "uint16"
                                }
                            }
                            if (dtype === array.dtype && isPacked(array.shape, array.stride)) {
                                if (array.offset === 0 && array.data.length === array.shape[0]) {
                                    this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data, offset)
                                } else {
                                    this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data.subarray(array.offset, array.shape[0]), offset)
                                }
                            } else {
                                var tmp = pool.malloc(array.size, dtype)
                                var ndt = ndarray(tmp, array.shape)
                                ops.assign(ndt, array)
                                if (offset < 0) {
                                    this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp, offset)
                                } else {
                                    this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp.subarray(0, array.size), offset)
                                }
                                pool.free(tmp)
                            }
                        } else if (Array.isArray(array)) {
                            var t
                            if (this.type === this.gl.ELEMENT_ARRAY_BUFFER) {
                                t = makeScratchTypeArray(array, "uint16")
                            } else {
                                t = makeScratchTypeArray(array, "float32")
                            }
                            if (offset < 0) {
                                this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t, offset)
                            } else {
                                this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t.subarray(0, array.length), offset)
                            }
                            pool.free(t)
                        } else if (typeof array === "object" && typeof array.length === "number") {
                            this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array, offset)
                        } else if (typeof array === "number" || array === undefined) {
                            if (offset >= 0) {
                                throw new Error("gl-buffer: Cannot specify offset when resizing buffer")
                            }
                            array = array | 0
                            if (array <= 0) {
                                array = 1
                            }
                            this.gl.bufferData(this.type, array | 0, this.usage)
                            this.length = array
                        } else {
                            throw new Error("gl-buffer: Invalid data type")
                        }
                    }

                    function createBuffer(gl, data, type, usage) {
                        webglew(gl)
                        type = type || gl.ARRAY_BUFFER
                        usage = usage || gl.DYNAMIC_DRAW
                        if (type !== gl.ARRAY_BUFFER && type !== gl.ELEMENT_ARRAY_BUFFER) {
                            throw new Error("gl-buffer: Invalid type for webgl buffer, must be either gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER")
                        }
                        if (usage !== gl.DYNAMIC_DRAW && usage !== gl.STATIC_DRAW && usage !== gl.STREAM_DRAW) {
                            throw new Error("gl-buffer: Invalid usage for buffer, must be either gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW")
                        }
                        var handle = gl.createBuffer()
                        var result = new GLBuffer(gl, type, handle, 0, usage)
                        result.update(data)
                        return result
                    }
                    module.exports = createBuffer
                }, {
                    "ndarray": 199,
                    "ndarray-ops": 188,
                    "typedarray-pool": 86,
                    "webglew": 88
                }
            ],
            84: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(10)
                }, {}
            ],
            85: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            86: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(54)
                }, {
                    "bit-twiddle": 84,
                    "buffer": 205,
                    "dup": 85
                }
            ],
            87: [
                function (_dereq_, module, exports) {
                    void
                    function (global, undefined_, undefined) {
                        var getProps = Object.getOwnPropertyNames,
                            defProp = Object.defineProperty,
                            toSource = Function.prototype.toString,
                            create = Object.create,
                            hasOwn = Object.prototype.hasOwnProperty,
                            funcName = /^\n?function\s?(\w*)?_?\(/;

                        function define(object, key, value) {
                            if (typeof key === 'function') {
                                value = key;
                                key = nameOf(value).replace(/_$/, '');
                            }
                            return defProp(object, key, {
                                configurable: true,
                                writable: true,
                                value: value
                            });
                        }

                        function nameOf(func) {
                            return typeof func !== 'function' ? '' : 'name' in func ? func.name : toSource.call(func).match(funcName)[1];
                        }
                        var Data = (function () {
                            var dataDesc = {
                                    value: {
                                        writable: true,
                                        value: undefined
                                    }
                                },
                                datalock = 'return function(k){if(k===s)return l}',
                                uids = create(null),
                                createUID = function () {
                                    var key = Math.random().toString(36).slice(2);
                                    return key in uids ? createUID() : uids[key] = key;
                                },
                                globalID = createUID(),
                                storage = function (obj) {
                                    if (hasOwn.call(obj, globalID))
                                        return obj[globalID];
                                    if (!Object.isExtensible(obj))
                                        throw new TypeError("Object must be extensible");
                                    var store = create(null);
                                    defProp(obj, globalID, {
                                        value: store
                                    });
                                    return store;
                                };
                            define(Object, function getOwnPropertyNames(obj) {
                                var props = getProps(obj);
                                if (hasOwn.call(obj, globalID))
                                    props.splice(props.indexOf(globalID), 1);
                                return props;
                            });

                            function Data() {
                                var puid = createUID(),
                                    secret = {};
                                this.unlock = function (obj) {
                                    var store = storage(obj);
                                    if (hasOwn.call(store, puid))
                                        return store[puid](secret);
                                    var data = create(null, dataDesc);
                                    defProp(store, puid, {
                                        value: new Function('s', 'l', datalock)(secret, data)
                                    });
                                    return data;
                                }
                            }
                            define(Data.prototype, function get(o) {
                                return this.unlock(o).value
                            });
                            define(Data.prototype, function set(o, v) {
                                this.unlock(o).value = v
                            });
                            return Data;
                        }());
                        var WM = (function (data) {
                            var validate = function (key) {
                                if (key == null || typeof key !== 'object' && typeof key !== 'function')
                                    throw new TypeError("Invalid WeakMap key");
                            }
                            var wrap = function (collection, value) {
                                var store = data.unlock(collection);
                                if (store.value)
                                    throw new TypeError("Object is already a WeakMap");
                                store.value = value;
                            }
                            var unwrap = function (collection) {
                                var storage = data.unlock(collection).value;
                                if (!storage)
                                    throw new TypeError("WeakMap is not generic");
                                return storage;
                            }
                            var initialize = function (weakmap, iterable) {
                                if (iterable !== null && typeof iterable === 'object' && typeof iterable.forEach === 'function') {
                                    iterable.forEach(function (item, i) {
                                        if (item instanceof Array && item.length === 2)
                                            set.call(weakmap, iterable[i][0], iterable[i][1]);
                                    });
                                }
                            }

                            function WeakMap(iterable) {
                                if (this === global || this == null || this === WeakMap.prototype)
                                    return new WeakMap(iterable);
                                wrap(this, new Data);
                                initialize(this, iterable);
                            }

                            function get(key) {
                                validate(key);
                                var value = unwrap(this).get(key);
                                return value === undefined_ ? undefined : value;
                            }

                            function set(key, value) {
                                validate(key);
                                unwrap(this).set(key, value === undefined ? undefined_ : value);
                            }

                            function has(key) {
                                validate(key);
                                return unwrap(this).get(key) !== undefined;
                            }

                            function delete_(key) {
                                validate(key);
                                var data = unwrap(this),
                                    had = data.get(key) !== undefined;
                                data.set(key, undefined);
                                return had;
                            }

                            function toString() {
                                unwrap(this);
                                return '[object WeakMap]';
                            }
                            try {
                                var src = ('return ' + delete_).replace('e_', '\\u0065'),
                                    del = new Function('unwrap', 'validate', src)(unwrap, validate);
                            } catch (e) {
                                var del = delete_;
                            }
                            var src = ('' + Object).split('Object');
                            var stringifier = function toString() {
                                return src[0] + nameOf(this) + src[1];
                            };
                            define(stringifier, stringifier);
                            var prep = {
                                __proto__: []
                            }
                            instanceof Array ? function (f) {
                                f.__proto__ = stringifier
                            } : function (f) {
                                define(f, stringifier)
                            };
                            prep(WeakMap);
                            [toString, get, set, has, del].forEach(function (method) {
                                define(WeakMap.prototype, method);
                                prep(method);
                            });
                            return WeakMap;
                        }(new Data));
                        var defaultCreator = Object.create ? function () {
                            return Object.create(null)
                        } : function () {
                            return {}
                        };

                        function createStorage(creator) {
                            var weakmap = new WM;
                            creator || (creator = defaultCreator);

                            function storage(object, value) {
                                if (value || arguments.length === 2) {
                                    weakmap.set(object, value);
                                } else {
                                    value = weakmap.get(object);
                                    if (value === undefined) {
                                        value = creator(object);
                                        weakmap.set(object, value);
                                    }
                                }
                                return value;
                            }
                            return storage;
                        }
                        if (typeof module !== 'undefined') {
                            module.exports = WM;
                        } else if (typeof exports !== 'undefined') {
                            exports.WeakMap = WM;
                        } else if (!('WeakMap' in global)) {
                            global.WeakMap = WM;
                        }
                        WM.createStorage = createStorage;
                        if (global.WeakMap)
                            global.WeakMap.createStorage = createStorage;
                    }((0, eval)('this'));
                }, {}
            ],
            88: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var weakMap = typeof WeakMap === "undefined" ? _dereq_("weakmap") : WeakMap
                    var WebGLEWStruct = new weakMap()

                    function baseName(ext_name) {
                        return ext_name.replace(/^[A-Z]+_/, "")
                    }

                    function initWebGLEW(gl) {
                        var struct = WebGLEWStruct.get(gl)
                        if (struct) {
                            return struct
                        }
                        var extensions = {}
                        var supported = gl.getSupportedExtensions()
                        for (var i = 0; i < supported.length; ++i) {
                            var extName = supported[i]
                            var ext = gl.getExtension(supported[i])
                            if (!ext) {
                                continue
                            }
                            while (true) {
                                extensions[extName] = ext
                                var base = baseName(extName)
                                if (base === extName) {
                                    break
                                }
                                extName = base
                            }
                        }
                        WebGLEWStruct.set(gl, extensions)
                        return extensions
                    }
                    module.exports = initWebGLEW
                }, {
                    "weakmap": 87
                }
            ],
            89: [
                function (_dereq_, module, exports) {
                    (function (_global) {
                        "use strict";
                        var shim = {};
                        if (typeof (exports) === 'undefined') {
                            if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
                                shim.exports = {};
                                define(function () {
                                    return shim.exports;
                                });
                            } else {
                                shim.exports = typeof (window) !== 'undefined' ? window : _global;
                            }
                        } else {
                            shim.exports = exports;
                        }
                        (function (exports) {
                            if (!GLMAT_EPSILON) {
                                var GLMAT_EPSILON = 0.000001;
                            }
                            if (!GLMAT_ARRAY_TYPE) {
                                var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
                            }
                            if (!GLMAT_RANDOM) {
                                var GLMAT_RANDOM = Math.random;
                            }
                            var glMatrix = {};
                            glMatrix.setMatrixArrayType = function (type) {
                                GLMAT_ARRAY_TYPE = type;
                            }
                            if (typeof (exports) !== 'undefined') {
                                exports.glMatrix = glMatrix;
                            }
                            var degree = Math.PI / 180;
                            glMatrix.toRadian = function (a) {
                                return a * degree;
                            };
                            var vec2 = {};
                            vec2.create = function () {
                                var out = new GLMAT_ARRAY_TYPE(2);
                                out[0] = 0;
                                out[1] = 0;
                                return out;
                            };
                            vec2.clone = function (a) {
                                var out = new GLMAT_ARRAY_TYPE(2);
                                out[0] = a[0];
                                out[1] = a[1];
                                return out;
                            };
                            vec2.fromValues = function (x, y) {
                                var out = new GLMAT_ARRAY_TYPE(2);
                                out[0] = x;
                                out[1] = y;
                                return out;
                            };
                            vec2.copy = function (out, a) {
                                out[0] = a[0];
                                out[1] = a[1];
                                return out;
                            };
                            vec2.set = function (out, x, y) {
                                out[0] = x;
                                out[1] = y;
                                return out;
                            };
                            vec2.add = function (out, a, b) {
                                out[0] = a[0] + b[0];
                                out[1] = a[1] + b[1];
                                return out;
                            };
                            vec2.subtract = function (out, a, b) {
                                out[0] = a[0] - b[0];
                                out[1] = a[1] - b[1];
                                return out;
                            };
                            vec2.sub = vec2.subtract;
                            vec2.multiply = function (out, a, b) {
                                out[0] = a[0] * b[0];
                                out[1] = a[1] * b[1];
                                return out;
                            };
                            vec2.mul = vec2.multiply;
                            vec2.divide = function (out, a, b) {
                                out[0] = a[0] / b[0];
                                out[1] = a[1] / b[1];
                                return out;
                            };
                            vec2.div = vec2.divide;
                            vec2.min = function (out, a, b) {
                                out[0] = Math.min(a[0], b[0]);
                                out[1] = Math.min(a[1], b[1]);
                                return out;
                            };
                            vec2.max = function (out, a, b) {
                                out[0] = Math.max(a[0], b[0]);
                                out[1] = Math.max(a[1], b[1]);
                                return out;
                            };
                            vec2.scale = function (out, a, b) {
                                out[0] = a[0] * b;
                                out[1] = a[1] * b;
                                return out;
                            };
                            vec2.scaleAndAdd = function (out, a, b, scale) {
                                out[0] = a[0] + (b[0] * scale);
                                out[1] = a[1] + (b[1] * scale);
                                return out;
                            };
                            vec2.distance = function (a, b) {
                                var x = b[0] - a[0],
                                    y = b[1] - a[1];
                                return Math.sqrt(x * x + y * y);
                            };
                            vec2.dist = vec2.distance;
                            vec2.squaredDistance = function (a, b) {
                                var x = b[0] - a[0],
                                    y = b[1] - a[1];
                                return x * x + y * y;
                            };
                            vec2.sqrDist = vec2.squaredDistance;
                            vec2.length = function (a) {
                                var x = a[0],
                                    y = a[1];
                                return Math.sqrt(x * x + y * y);
                            };
                            vec2.len = vec2.length;
                            vec2.squaredLength = function (a) {
                                var x = a[0],
                                    y = a[1];
                                return x * x + y * y;
                            };
                            vec2.sqrLen = vec2.squaredLength;
                            vec2.negate = function (out, a) {
                                out[0] = -a[0];
                                out[1] = -a[1];
                                return out;
                            };
                            vec2.normalize = function (out, a) {
                                var x = a[0],
                                    y = a[1];
                                var len = x * x + y * y;
                                if (len > 0) {
                                    len = 1 / Math.sqrt(len);
                                    out[0] = a[0] * len;
                                    out[1] = a[1] * len;
                                }
                                return out;
                            };
                            vec2.dot = function (a, b) {
                                return a[0] * b[0] + a[1] * b[1];
                            };
                            vec2.cross = function (out, a, b) {
                                var z = a[0] * b[1] - a[1] * b[0];
                                out[0] = out[1] = 0;
                                out[2] = z;
                                return out;
                            };
                            vec2.lerp = function (out, a, b, t) {
                                var ax = a[0],
                                    ay = a[1];
                                out[0] = ax + t * (b[0] - ax);
                                out[1] = ay + t * (b[1] - ay);
                                return out;
                            };
                            vec2.random = function (out, scale) {
                                scale = scale || 1.0;
                                var r = GLMAT_RANDOM() * 2.0 * Math.PI;
                                out[0] = Math.cos(r) * scale;
                                out[1] = Math.sin(r) * scale;
                                return out;
                            };
                            vec2.transformMat2 = function (out, a, m) {
                                var x = a[0],
                                    y = a[1];
                                out[0] = m[0] * x + m[2] * y;
                                out[1] = m[1] * x + m[3] * y;
                                return out;
                            };
                            vec2.transformMat2d = function (out, a, m) {
                                var x = a[0],
                                    y = a[1];
                                out[0] = m[0] * x + m[2] * y + m[4];
                                out[1] = m[1] * x + m[3] * y + m[5];
                                return out;
                            };
                            vec2.transformMat3 = function (out, a, m) {
                                var x = a[0],
                                    y = a[1];
                                out[0] = m[0] * x + m[3] * y + m[6];
                                out[1] = m[1] * x + m[4] * y + m[7];
                                return out;
                            };
                            vec2.transformMat4 = function (out, a, m) {
                                var x = a[0],
                                    y = a[1];
                                out[0] = m[0] * x + m[4] * y + m[12];
                                out[1] = m[1] * x + m[5] * y + m[13];
                                return out;
                            };
                            vec2.forEach = (function () {
                                var vec = vec2.create();
                                return function (a, stride, offset, count, fn, arg) {
                                    var i, l;
                                    if (!stride) {
                                        stride = 2;
                                    }
                                    if (!offset) {
                                        offset = 0;
                                    }
                                    if (count) {
                                        l = Math.min((count * stride) + offset, a.length);
                                    } else {
                                        l = a.length;
                                    }
                                    for (i = offset; i < l; i += stride) {
                                        vec[0] = a[i];
                                        vec[1] = a[i + 1];
                                        fn(vec, vec, arg);
                                        a[i] = vec[0];
                                        a[i + 1] = vec[1];
                                    }
                                    return a;
                                };
                            })();
                            vec2.str = function (a) {
                                return 'vec2(' + a[0] + ', ' + a[1] + ')';
                            };
                            if (typeof (exports) !== 'undefined') {
                                exports.vec2 = vec2;
                            };
                            var vec3 = {};
                            vec3.create = function () {
                                var out = new GLMAT_ARRAY_TYPE(3);
                                out[0] = 0;
                                out[1] = 0;
                                out[2] = 0;
                                return out;
                            };
                            vec3.clone = function (a) {
                                var out = new GLMAT_ARRAY_TYPE(3);
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                return out;
                            };
                            vec3.fromValues = function (x, y, z) {
                                var out = new GLMAT_ARRAY_TYPE(3);
                                out[0] = x;
                                out[1] = y;
                                out[2] = z;
                                return out;
                            };
                            vec3.copy = function (out, a) {
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                return out;
                            };
                            vec3.set = function (out, x, y, z) {
                                out[0] = x;
                                out[1] = y;
                                out[2] = z;
                                return out;
                            };
                            vec3.add = function (out, a, b) {
                                out[0] = a[0] + b[0];
                                out[1] = a[1] + b[1];
                                out[2] = a[2] + b[2];
                                return out;
                            };
                            vec3.subtract = function (out, a, b) {
                                out[0] = a[0] - b[0];
                                out[1] = a[1] - b[1];
                                out[2] = a[2] - b[2];
                                return out;
                            };
                            vec3.sub = vec3.subtract;
                            vec3.multiply = function (out, a, b) {
                                out[0] = a[0] * b[0];
                                out[1] = a[1] * b[1];
                                out[2] = a[2] * b[2];
                                return out;
                            };
                            vec3.mul = vec3.multiply;
                            vec3.divide = function (out, a, b) {
                                out[0] = a[0] / b[0];
                                out[1] = a[1] / b[1];
                                out[2] = a[2] / b[2];
                                return out;
                            };
                            vec3.div = vec3.divide;
                            vec3.min = function (out, a, b) {
                                out[0] = Math.min(a[0], b[0]);
                                out[1] = Math.min(a[1], b[1]);
                                out[2] = Math.min(a[2], b[2]);
                                return out;
                            };
                            vec3.max = function (out, a, b) {
                                out[0] = Math.max(a[0], b[0]);
                                out[1] = Math.max(a[1], b[1]);
                                out[2] = Math.max(a[2], b[2]);
                                return out;
                            };
                            vec3.scale = function (out, a, b) {
                                out[0] = a[0] * b;
                                out[1] = a[1] * b;
                                out[2] = a[2] * b;
                                return out;
                            };
                            vec3.scaleAndAdd = function (out, a, b, scale) {
                                out[0] = a[0] + (b[0] * scale);
                                out[1] = a[1] + (b[1] * scale);
                                out[2] = a[2] + (b[2] * scale);
                                return out;
                            };
                            vec3.distance = function (a, b) {
                                var x = b[0] - a[0],
                                    y = b[1] - a[1],
                                    z = b[2] - a[2];
                                return Math.sqrt(x * x + y * y + z * z);
                            };
                            vec3.dist = vec3.distance;
                            vec3.squaredDistance = function (a, b) {
                                var x = b[0] - a[0],
                                    y = b[1] - a[1],
                                    z = b[2] - a[2];
                                return x * x + y * y + z * z;
                            };
                            vec3.sqrDist = vec3.squaredDistance;
                            vec3.length = function (a) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2];
                                return Math.sqrt(x * x + y * y + z * z);
                            };
                            vec3.len = vec3.length;
                            vec3.squaredLength = function (a) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2];
                                return x * x + y * y + z * z;
                            };
                            vec3.sqrLen = vec3.squaredLength;
                            vec3.negate = function (out, a) {
                                out[0] = -a[0];
                                out[1] = -a[1];
                                out[2] = -a[2];
                                return out;
                            };
                            vec3.normalize = function (out, a) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2];
                                var len = x * x + y * y + z * z;
                                if (len > 0) {
                                    len = 1 / Math.sqrt(len);
                                    out[0] = a[0] * len;
                                    out[1] = a[1] * len;
                                    out[2] = a[2] * len;
                                }
                                return out;
                            };
                            vec3.dot = function (a, b) {
                                return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
                            };
                            vec3.cross = function (out, a, b) {
                                var ax = a[0],
                                    ay = a[1],
                                    az = a[2],
                                    bx = b[0],
                                    by = b[1],
                                    bz = b[2];
                                out[0] = ay * bz - az * by;
                                out[1] = az * bx - ax * bz;
                                out[2] = ax * by - ay * bx;
                                return out;
                            };
                            vec3.lerp = function (out, a, b, t) {
                                var ax = a[0],
                                    ay = a[1],
                                    az = a[2];
                                out[0] = ax + t * (b[0] - ax);
                                out[1] = ay + t * (b[1] - ay);
                                out[2] = az + t * (b[2] - az);
                                return out;
                            };
                            vec3.random = function (out, scale) {
                                scale = scale || 1.0;
                                var r = GLMAT_RANDOM() * 2.0 * Math.PI;
                                var z = (GLMAT_RANDOM() * 2.0) - 1.0;
                                var zScale = Math.sqrt(1.0 - z * z) * scale;
                                out[0] = Math.cos(r) * zScale;
                                out[1] = Math.sin(r) * zScale;
                                out[2] = z * scale;
                                return out;
                            };
                            vec3.transformMat4 = function (out, a, m) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2];
                                out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];
                                out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];
                                out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];
                                return out;
                            };
                            vec3.transformMat3 = function (out, a, m) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2];
                                out[0] = x * m[0] + y * m[3] + z * m[6];
                                out[1] = x * m[1] + y * m[4] + z * m[7];
                                out[2] = x * m[2] + y * m[5] + z * m[8];
                                return out;
                            };
                            vec3.transformQuat = function (out, a, q) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2],
                                    qx = q[0],
                                    qy = q[1],
                                    qz = q[2],
                                    qw = q[3],
                                    ix = qw * x + qy * z - qz * y,
                                    iy = qw * y + qz * x - qx * z,
                                    iz = qw * z + qx * y - qy * x,
                                    iw = -qx * x - qy * y - qz * z;
                                out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                                out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                                out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                                return out;
                            };
                            vec3.rotateX = function (out, a, b, c) {
                                var p = [],
                                    r = [];
                                p[0] = a[0] - b[0];
                                p[1] = a[1] - b[1];
                                p[2] = a[2] - b[2];
                                r[0] = p[0];
                                r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
                                r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);
                                out[0] = r[0] + b[0];
                                out[1] = r[1] + b[1];
                                out[2] = r[2] + b[2];
                                return out;
                            };
                            vec3.rotateY = function (out, a, b, c) {
                                var p = [],
                                    r = [];
                                p[0] = a[0] - b[0];
                                p[1] = a[1] - b[1];
                                p[2] = a[2] - b[2];
                                r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
                                r[1] = p[1];
                                r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);
                                out[0] = r[0] + b[0];
                                out[1] = r[1] + b[1];
                                out[2] = r[2] + b[2];
                                return out;
                            };
                            vec3.rotateZ = function (out, a, b, c) {
                                var p = [],
                                    r = [];
                                p[0] = a[0] - b[0];
                                p[1] = a[1] - b[1];
                                p[2] = a[2] - b[2];
                                r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
                                r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
                                r[2] = p[2];
                                out[0] = r[0] + b[0];
                                out[1] = r[1] + b[1];
                                out[2] = r[2] + b[2];
                                return out;
                            };
                            vec3.forEach = (function () {
                                var vec = vec3.create();
                                return function (a, stride, offset, count, fn, arg) {
                                    var i, l;
                                    if (!stride) {
                                        stride = 3;
                                    }
                                    if (!offset) {
                                        offset = 0;
                                    }
                                    if (count) {
                                        l = Math.min((count * stride) + offset, a.length);
                                    } else {
                                        l = a.length;
                                    }
                                    for (i = offset; i < l; i += stride) {
                                        vec[0] = a[i];
                                        vec[1] = a[i + 1];
                                        vec[2] = a[i + 2];
                                        fn(vec, vec, arg);
                                        a[i] = vec[0];
                                        a[i + 1] = vec[1];
                                        a[i + 2] = vec[2];
                                    }
                                    return a;
                                };
                            })();
                            vec3.str = function (a) {
                                return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
                            };
                            if (typeof (exports) !== 'undefined') {
                                exports.vec3 = vec3;
                            };
                            var vec4 = {};
                            vec4.create = function () {
                                var out = new GLMAT_ARRAY_TYPE(4);
                                out[0] = 0;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 0;
                                return out;
                            };
                            vec4.clone = function (a) {
                                var out = new GLMAT_ARRAY_TYPE(4);
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                return out;
                            };
                            vec4.fromValues = function (x, y, z, w) {
                                var out = new GLMAT_ARRAY_TYPE(4);
                                out[0] = x;
                                out[1] = y;
                                out[2] = z;
                                out[3] = w;
                                return out;
                            };
                            vec4.copy = function (out, a) {
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                return out;
                            };
                            vec4.set = function (out, x, y, z, w) {
                                out[0] = x;
                                out[1] = y;
                                out[2] = z;
                                out[3] = w;
                                return out;
                            };
                            vec4.add = function (out, a, b) {
                                out[0] = a[0] + b[0];
                                out[1] = a[1] + b[1];
                                out[2] = a[2] + b[2];
                                out[3] = a[3] + b[3];
                                return out;
                            };
                            vec4.subtract = function (out, a, b) {
                                out[0] = a[0] - b[0];
                                out[1] = a[1] - b[1];
                                out[2] = a[2] - b[2];
                                out[3] = a[3] - b[3];
                                return out;
                            };
                            vec4.sub = vec4.subtract;
                            vec4.multiply = function (out, a, b) {
                                out[0] = a[0] * b[0];
                                out[1] = a[1] * b[1];
                                out[2] = a[2] * b[2];
                                out[3] = a[3] * b[3];
                                return out;
                            };
                            vec4.mul = vec4.multiply;
                            vec4.divide = function (out, a, b) {
                                out[0] = a[0] / b[0];
                                out[1] = a[1] / b[1];
                                out[2] = a[2] / b[2];
                                out[3] = a[3] / b[3];
                                return out;
                            };
                            vec4.div = vec4.divide;
                            vec4.min = function (out, a, b) {
                                out[0] = Math.min(a[0], b[0]);
                                out[1] = Math.min(a[1], b[1]);
                                out[2] = Math.min(a[2], b[2]);
                                out[3] = Math.min(a[3], b[3]);
                                return out;
                            };
                            vec4.max = function (out, a, b) {
                                out[0] = Math.max(a[0], b[0]);
                                out[1] = Math.max(a[1], b[1]);
                                out[2] = Math.max(a[2], b[2]);
                                out[3] = Math.max(a[3], b[3]);
                                return out;
                            };
                            vec4.scale = function (out, a, b) {
                                out[0] = a[0] * b;
                                out[1] = a[1] * b;
                                out[2] = a[2] * b;
                                out[3] = a[3] * b;
                                return out;
                            };
                            vec4.scaleAndAdd = function (out, a, b, scale) {
                                out[0] = a[0] + (b[0] * scale);
                                out[1] = a[1] + (b[1] * scale);
                                out[2] = a[2] + (b[2] * scale);
                                out[3] = a[3] + (b[3] * scale);
                                return out;
                            };
                            vec4.distance = function (a, b) {
                                var x = b[0] - a[0],
                                    y = b[1] - a[1],
                                    z = b[2] - a[2],
                                    w = b[3] - a[3];
                                return Math.sqrt(x * x + y * y + z * z + w * w);
                            };
                            vec4.dist = vec4.distance;
                            vec4.squaredDistance = function (a, b) {
                                var x = b[0] - a[0],
                                    y = b[1] - a[1],
                                    z = b[2] - a[2],
                                    w = b[3] - a[3];
                                return x * x + y * y + z * z + w * w;
                            };
                            vec4.sqrDist = vec4.squaredDistance;
                            vec4.length = function (a) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2],
                                    w = a[3];
                                return Math.sqrt(x * x + y * y + z * z + w * w);
                            };
                            vec4.len = vec4.length;
                            vec4.squaredLength = function (a) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2],
                                    w = a[3];
                                return x * x + y * y + z * z + w * w;
                            };
                            vec4.sqrLen = vec4.squaredLength;
                            vec4.negate = function (out, a) {
                                out[0] = -a[0];
                                out[1] = -a[1];
                                out[2] = -a[2];
                                out[3] = -a[3];
                                return out;
                            };
                            vec4.normalize = function (out, a) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2],
                                    w = a[3];
                                var len = x * x + y * y + z * z + w * w;
                                if (len > 0) {
                                    len = 1 / Math.sqrt(len);
                                    out[0] = a[0] * len;
                                    out[1] = a[1] * len;
                                    out[2] = a[2] * len;
                                    out[3] = a[3] * len;
                                }
                                return out;
                            };
                            vec4.dot = function (a, b) {
                                return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
                            };
                            vec4.lerp = function (out, a, b, t) {
                                var ax = a[0],
                                    ay = a[1],
                                    az = a[2],
                                    aw = a[3];
                                out[0] = ax + t * (b[0] - ax);
                                out[1] = ay + t * (b[1] - ay);
                                out[2] = az + t * (b[2] - az);
                                out[3] = aw + t * (b[3] - aw);
                                return out;
                            };
                            vec4.random = function (out, scale) {
                                scale = scale || 1.0;
                                out[0] = GLMAT_RANDOM();
                                out[1] = GLMAT_RANDOM();
                                out[2] = GLMAT_RANDOM();
                                out[3] = GLMAT_RANDOM();
                                vec4.normalize(out, out);
                                vec4.scale(out, out, scale);
                                return out;
                            };
                            vec4.transformMat4 = function (out, a, m) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2],
                                    w = a[3];
                                out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
                                out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
                                out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
                                out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
                                return out;
                            };
                            vec4.transformQuat = function (out, a, q) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2],
                                    qx = q[0],
                                    qy = q[1],
                                    qz = q[2],
                                    qw = q[3],
                                    ix = qw * x + qy * z - qz * y,
                                    iy = qw * y + qz * x - qx * z,
                                    iz = qw * z + qx * y - qy * x,
                                    iw = -qx * x - qy * y - qz * z;
                                out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                                out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                                out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                                return out;
                            };
                            vec4.forEach = (function () {
                                var vec = vec4.create();
                                return function (a, stride, offset, count, fn, arg) {
                                    var i, l;
                                    if (!stride) {
                                        stride = 4;
                                    }
                                    if (!offset) {
                                        offset = 0;
                                    }
                                    if (count) {
                                        l = Math.min((count * stride) + offset, a.length);
                                    } else {
                                        l = a.length;
                                    }
                                    for (i = offset; i < l; i += stride) {
                                        vec[0] = a[i];
                                        vec[1] = a[i + 1];
                                        vec[2] = a[i + 2];
                                        vec[3] = a[i + 3];
                                        fn(vec, vec, arg);
                                        a[i] = vec[0];
                                        a[i + 1] = vec[1];
                                        a[i + 2] = vec[2];
                                        a[i + 3] = vec[3];
                                    }
                                    return a;
                                };
                            })();
                            vec4.str = function (a) {
                                return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
                            };
                            if (typeof (exports) !== 'undefined') {
                                exports.vec4 = vec4;
                            };
                            var mat2 = {};
                            mat2.create = function () {
                                var out = new GLMAT_ARRAY_TYPE(4);
                                out[0] = 1;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 1;
                                return out;
                            };
                            mat2.clone = function (a) {
                                var out = new GLMAT_ARRAY_TYPE(4);
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                return out;
                            };
                            mat2.copy = function (out, a) {
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                return out;
                            };
                            mat2.identity = function (out) {
                                out[0] = 1;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 1;
                                return out;
                            };
                            mat2.transpose = function (out, a) {
                                if (out === a) {
                                    var a1 = a[1];
                                    out[1] = a[2];
                                    out[2] = a1;
                                } else {
                                    out[0] = a[0];
                                    out[1] = a[2];
                                    out[2] = a[1];
                                    out[3] = a[3];
                                }
                                return out;
                            };
                            mat2.invert = function (out, a) {
                                var a0 = a[0],
                                    a1 = a[1],
                                    a2 = a[2],
                                    a3 = a[3],
                                    det = a0 * a3 - a2 * a1;
                                if (!det) {
                                    return null;
                                }
                                det = 1.0 / det;
                                out[0] = a3 * det;
                                out[1] = -a1 * det;
                                out[2] = -a2 * det;
                                out[3] = a0 * det;
                                return out;
                            };
                            mat2.adjoint = function (out, a) {
                                var a0 = a[0];
                                out[0] = a[3];
                                out[1] = -a[1];
                                out[2] = -a[2];
                                out[3] = a0;
                                return out;
                            };
                            mat2.determinant = function (a) {
                                return a[0] * a[3] - a[2] * a[1];
                            };
                            mat2.multiply = function (out, a, b) {
                                var a0 = a[0],
                                    a1 = a[1],
                                    a2 = a[2],
                                    a3 = a[3];
                                var b0 = b[0],
                                    b1 = b[1],
                                    b2 = b[2],
                                    b3 = b[3];
                                out[0] = a0 * b0 + a2 * b1;
                                out[1] = a1 * b0 + a3 * b1;
                                out[2] = a0 * b2 + a2 * b3;
                                out[3] = a1 * b2 + a3 * b3;
                                return out;
                            };
                            mat2.mul = mat2.multiply;
                            mat2.rotate = function (out, a, rad) {
                                var a0 = a[0],
                                    a1 = a[1],
                                    a2 = a[2],
                                    a3 = a[3],
                                    s = Math.sin(rad),
                                    c = Math.cos(rad);
                                out[0] = a0 * c + a2 * s;
                                out[1] = a1 * c + a3 * s;
                                out[2] = a0 * -s + a2 * c;
                                out[3] = a1 * -s + a3 * c;
                                return out;
                            };
                            mat2.scale = function (out, a, v) {
                                var a0 = a[0],
                                    a1 = a[1],
                                    a2 = a[2],
                                    a3 = a[3],
                                    v0 = v[0],
                                    v1 = v[1];
                                out[0] = a0 * v0;
                                out[1] = a1 * v0;
                                out[2] = a2 * v1;
                                out[3] = a3 * v1;
                                return out;
                            };
                            mat2.str = function (a) {
                                return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
                            };
                            mat2.frob = function (a) {
                                return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
                            };
                            mat2.LDU = function (L, D, U, a) {
                                L[2] = a[2] / a[0];
                                U[0] = a[0];
                                U[1] = a[1];
                                U[3] = a[3] - L[2] * U[1];
                                return [L, D, U];
                            };
                            if (typeof (exports) !== 'undefined') {
                                exports.mat2 = mat2;
                            };
                            var mat2d = {};
                            mat2d.create = function () {
                                var out = new GLMAT_ARRAY_TYPE(6);
                                out[0] = 1;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 1;
                                out[4] = 0;
                                out[5] = 0;
                                return out;
                            };
                            mat2d.clone = function (a) {
                                var out = new GLMAT_ARRAY_TYPE(6);
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                out[4] = a[4];
                                out[5] = a[5];
                                return out;
                            };
                            mat2d.copy = function (out, a) {
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                out[4] = a[4];
                                out[5] = a[5];
                                return out;
                            };
                            mat2d.identity = function (out) {
                                out[0] = 1;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 1;
                                out[4] = 0;
                                out[5] = 0;
                                return out;
                            };
                            mat2d.invert = function (out, a) {
                                var aa = a[0],
                                    ab = a[1],
                                    ac = a[2],
                                    ad = a[3],
                                    atx = a[4],
                                    aty = a[5];
                                var det = aa * ad - ab * ac;
                                if (!det) {
                                    return null;
                                }
                                det = 1.0 / det;
                                out[0] = ad * det;
                                out[1] = -ab * det;
                                out[2] = -ac * det;
                                out[3] = aa * det;
                                out[4] = (ac * aty - ad * atx) * det;
                                out[5] = (ab * atx - aa * aty) * det;
                                return out;
                            };
                            mat2d.determinant = function (a) {
                                return a[0] * a[3] - a[1] * a[2];
                            };
                            mat2d.multiply = function (out, a, b) {
                                var a0 = a[0],
                                    a1 = a[1],
                                    a2 = a[2],
                                    a3 = a[3],
                                    a4 = a[4],
                                    a5 = a[5],
                                    b0 = b[0],
                                    b1 = b[1],
                                    b2 = b[2],
                                    b3 = b[3],
                                    b4 = b[4],
                                    b5 = b[5];
                                out[0] = a0 * b0 + a2 * b1;
                                out[1] = a1 * b0 + a3 * b1;
                                out[2] = a0 * b2 + a2 * b3;
                                out[3] = a1 * b2 + a3 * b3;
                                out[4] = a0 * b4 + a2 * b5 + a4;
                                out[5] = a1 * b4 + a3 * b5 + a5;
                                return out;
                            };
                            mat2d.mul = mat2d.multiply;
                            mat2d.rotate = function (out, a, rad) {
                                var a0 = a[0],
                                    a1 = a[1],
                                    a2 = a[2],
                                    a3 = a[3],
                                    a4 = a[4],
                                    a5 = a[5],
                                    s = Math.sin(rad),
                                    c = Math.cos(rad);
                                out[0] = a0 * c + a2 * s;
                                out[1] = a1 * c + a3 * s;
                                out[2] = a0 * -s + a2 * c;
                                out[3] = a1 * -s + a3 * c;
                                out[4] = a4;
                                out[5] = a5;
                                return out;
                            };
                            mat2d.scale = function (out, a, v) {
                                var a0 = a[0],
                                    a1 = a[1],
                                    a2 = a[2],
                                    a3 = a[3],
                                    a4 = a[4],
                                    a5 = a[5],
                                    v0 = v[0],
                                    v1 = v[1];
                                out[0] = a0 * v0;
                                out[1] = a1 * v0;
                                out[2] = a2 * v1;
                                out[3] = a3 * v1;
                                out[4] = a4;
                                out[5] = a5;
                                return out;
                            };
                            mat2d.translate = function (out, a, v) {
                                var a0 = a[0],
                                    a1 = a[1],
                                    a2 = a[2],
                                    a3 = a[3],
                                    a4 = a[4],
                                    a5 = a[5],
                                    v0 = v[0],
                                    v1 = v[1];
                                out[0] = a0;
                                out[1] = a1;
                                out[2] = a2;
                                out[3] = a3;
                                out[4] = a0 * v0 + a2 * v1 + a4;
                                out[5] = a1 * v0 + a3 * v1 + a5;
                                return out;
                            };
                            mat2d.str = function (a) {
                                return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
                            };
                            mat2d.frob = function (a) {
                                return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
                            };
                            if (typeof (exports) !== 'undefined') {
                                exports.mat2d = mat2d;
                            };
                            var mat3 = {};
                            mat3.create = function () {
                                var out = new GLMAT_ARRAY_TYPE(9);
                                out[0] = 1;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 0;
                                out[4] = 1;
                                out[5] = 0;
                                out[6] = 0;
                                out[7] = 0;
                                out[8] = 1;
                                return out;
                            };
                            mat3.fromMat4 = function (out, a) {
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[4];
                                out[4] = a[5];
                                out[5] = a[6];
                                out[6] = a[8];
                                out[7] = a[9];
                                out[8] = a[10];
                                return out;
                            };
                            mat3.clone = function (a) {
                                var out = new GLMAT_ARRAY_TYPE(9);
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                out[4] = a[4];
                                out[5] = a[5];
                                out[6] = a[6];
                                out[7] = a[7];
                                out[8] = a[8];
                                return out;
                            };
                            mat3.copy = function (out, a) {
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                out[4] = a[4];
                                out[5] = a[5];
                                out[6] = a[6];
                                out[7] = a[7];
                                out[8] = a[8];
                                return out;
                            };
                            mat3.identity = function (out) {
                                out[0] = 1;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 0;
                                out[4] = 1;
                                out[5] = 0;
                                out[6] = 0;
                                out[7] = 0;
                                out[8] = 1;
                                return out;
                            };
                            mat3.transpose = function (out, a) {
                                if (out === a) {
                                    var a01 = a[1],
                                        a02 = a[2],
                                        a12 = a[5];
                                    out[1] = a[3];
                                    out[2] = a[6];
                                    out[3] = a01;
                                    out[5] = a[7];
                                    out[6] = a02;
                                    out[7] = a12;
                                } else {
                                    out[0] = a[0];
                                    out[1] = a[3];
                                    out[2] = a[6];
                                    out[3] = a[1];
                                    out[4] = a[4];
                                    out[5] = a[7];
                                    out[6] = a[2];
                                    out[7] = a[5];
                                    out[8] = a[8];
                                }
                                return out;
                            };
                            mat3.invert = function (out, a) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a10 = a[3],
                                    a11 = a[4],
                                    a12 = a[5],
                                    a20 = a[6],
                                    a21 = a[7],
                                    a22 = a[8],
                                    b01 = a22 * a11 - a12 * a21,
                                    b11 = -a22 * a10 + a12 * a20,
                                    b21 = a21 * a10 - a11 * a20,
                                    det = a00 * b01 + a01 * b11 + a02 * b21;
                                if (!det) {
                                    return null;
                                }
                                det = 1.0 / det;
                                out[0] = b01 * det;
                                out[1] = (-a22 * a01 + a02 * a21) * det;
                                out[2] = (a12 * a01 - a02 * a11) * det;
                                out[3] = b11 * det;
                                out[4] = (a22 * a00 - a02 * a20) * det;
                                out[5] = (-a12 * a00 + a02 * a10) * det;
                                out[6] = b21 * det;
                                out[7] = (-a21 * a00 + a01 * a20) * det;
                                out[8] = (a11 * a00 - a01 * a10) * det;
                                return out;
                            };
                            mat3.adjoint = function (out, a) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a10 = a[3],
                                    a11 = a[4],
                                    a12 = a[5],
                                    a20 = a[6],
                                    a21 = a[7],
                                    a22 = a[8];
                                out[0] = (a11 * a22 - a12 * a21);
                                out[1] = (a02 * a21 - a01 * a22);
                                out[2] = (a01 * a12 - a02 * a11);
                                out[3] = (a12 * a20 - a10 * a22);
                                out[4] = (a00 * a22 - a02 * a20);
                                out[5] = (a02 * a10 - a00 * a12);
                                out[6] = (a10 * a21 - a11 * a20);
                                out[7] = (a01 * a20 - a00 * a21);
                                out[8] = (a00 * a11 - a01 * a10);
                                return out;
                            };
                            mat3.determinant = function (a) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a10 = a[3],
                                    a11 = a[4],
                                    a12 = a[5],
                                    a20 = a[6],
                                    a21 = a[7],
                                    a22 = a[8];
                                return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
                            };
                            mat3.multiply = function (out, a, b) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a10 = a[3],
                                    a11 = a[4],
                                    a12 = a[5],
                                    a20 = a[6],
                                    a21 = a[7],
                                    a22 = a[8],
                                    b00 = b[0],
                                    b01 = b[1],
                                    b02 = b[2],
                                    b10 = b[3],
                                    b11 = b[4],
                                    b12 = b[5],
                                    b20 = b[6],
                                    b21 = b[7],
                                    b22 = b[8];
                                out[0] = b00 * a00 + b01 * a10 + b02 * a20;
                                out[1] = b00 * a01 + b01 * a11 + b02 * a21;
                                out[2] = b00 * a02 + b01 * a12 + b02 * a22;
                                out[3] = b10 * a00 + b11 * a10 + b12 * a20;
                                out[4] = b10 * a01 + b11 * a11 + b12 * a21;
                                out[5] = b10 * a02 + b11 * a12 + b12 * a22;
                                out[6] = b20 * a00 + b21 * a10 + b22 * a20;
                                out[7] = b20 * a01 + b21 * a11 + b22 * a21;
                                out[8] = b20 * a02 + b21 * a12 + b22 * a22;
                                return out;
                            };
                            mat3.mul = mat3.multiply;
                            mat3.translate = function (out, a, v) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a10 = a[3],
                                    a11 = a[4],
                                    a12 = a[5],
                                    a20 = a[6],
                                    a21 = a[7],
                                    a22 = a[8],
                                    x = v[0],
                                    y = v[1];
                                out[0] = a00;
                                out[1] = a01;
                                out[2] = a02;
                                out[3] = a10;
                                out[4] = a11;
                                out[5] = a12;
                                out[6] = x * a00 + y * a10 + a20;
                                out[7] = x * a01 + y * a11 + a21;
                                out[8] = x * a02 + y * a12 + a22;
                                return out;
                            };
                            mat3.rotate = function (out, a, rad) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a10 = a[3],
                                    a11 = a[4],
                                    a12 = a[5],
                                    a20 = a[6],
                                    a21 = a[7],
                                    a22 = a[8],
                                    s = Math.sin(rad),
                                    c = Math.cos(rad);
                                out[0] = c * a00 + s * a10;
                                out[1] = c * a01 + s * a11;
                                out[2] = c * a02 + s * a12;
                                out[3] = c * a10 - s * a00;
                                out[4] = c * a11 - s * a01;
                                out[5] = c * a12 - s * a02;
                                out[6] = a20;
                                out[7] = a21;
                                out[8] = a22;
                                return out;
                            };
                            mat3.scale = function (out, a, v) {
                                var x = v[0],
                                    y = v[1];
                                out[0] = x * a[0];
                                out[1] = x * a[1];
                                out[2] = x * a[2];
                                out[3] = y * a[3];
                                out[4] = y * a[4];
                                out[5] = y * a[5];
                                out[6] = a[6];
                                out[7] = a[7];
                                out[8] = a[8];
                                return out;
                            };
                            mat3.fromMat2d = function (out, a) {
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = 0;
                                out[3] = a[2];
                                out[4] = a[3];
                                out[5] = 0;
                                out[6] = a[4];
                                out[7] = a[5];
                                out[8] = 1;
                                return out;
                            };
                            mat3.fromQuat = function (out, q) {
                                var x = q[0],
                                    y = q[1],
                                    z = q[2],
                                    w = q[3],
                                    x2 = x + x,
                                    y2 = y + y,
                                    z2 = z + z,
                                    xx = x * x2,
                                    yx = y * x2,
                                    yy = y * y2,
                                    zx = z * x2,
                                    zy = z * y2,
                                    zz = z * z2,
                                    wx = w * x2,
                                    wy = w * y2,
                                    wz = w * z2;
                                out[0] = 1 - yy - zz;
                                out[3] = yx - wz;
                                out[6] = zx + wy;
                                out[1] = yx + wz;
                                out[4] = 1 - xx - zz;
                                out[7] = zy - wx;
                                out[2] = zx - wy;
                                out[5] = zy + wx;
                                out[8] = 1 - xx - yy;
                                return out;
                            };
                            mat3.normalFromMat4 = function (out, a) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a03 = a[3],
                                    a10 = a[4],
                                    a11 = a[5],
                                    a12 = a[6],
                                    a13 = a[7],
                                    a20 = a[8],
                                    a21 = a[9],
                                    a22 = a[10],
                                    a23 = a[11],
                                    a30 = a[12],
                                    a31 = a[13],
                                    a32 = a[14],
                                    a33 = a[15],
                                    b00 = a00 * a11 - a01 * a10,
                                    b01 = a00 * a12 - a02 * a10,
                                    b02 = a00 * a13 - a03 * a10,
                                    b03 = a01 * a12 - a02 * a11,
                                    b04 = a01 * a13 - a03 * a11,
                                    b05 = a02 * a13 - a03 * a12,
                                    b06 = a20 * a31 - a21 * a30,
                                    b07 = a20 * a32 - a22 * a30,
                                    b08 = a20 * a33 - a23 * a30,
                                    b09 = a21 * a32 - a22 * a31,
                                    b10 = a21 * a33 - a23 * a31,
                                    b11 = a22 * a33 - a23 * a32,
                                    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                                if (!det) {
                                    return null;
                                }
                                det = 1.0 / det;
                                out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                                out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                                out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                                out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                                out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                                out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                                out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                                out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                                out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                                return out;
                            };
                            mat3.str = function (a) {
                                return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
                                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
                            };
                            mat3.frob = function (a) {
                                return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
                            };
                            if (typeof (exports) !== 'undefined') {
                                exports.mat3 = mat3;
                            };
                            var mat4 = {};
                            mat4.create = function () {
                                var out = new GLMAT_ARRAY_TYPE(16);
                                out[0] = 1;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 0;
                                out[4] = 0;
                                out[5] = 1;
                                out[6] = 0;
                                out[7] = 0;
                                out[8] = 0;
                                out[9] = 0;
                                out[10] = 1;
                                out[11] = 0;
                                out[12] = 0;
                                out[13] = 0;
                                out[14] = 0;
                                out[15] = 1;
                                return out;
                            };
                            mat4.clone = function (a) {
                                var out = new GLMAT_ARRAY_TYPE(16);
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                out[4] = a[4];
                                out[5] = a[5];
                                out[6] = a[6];
                                out[7] = a[7];
                                out[8] = a[8];
                                out[9] = a[9];
                                out[10] = a[10];
                                out[11] = a[11];
                                out[12] = a[12];
                                out[13] = a[13];
                                out[14] = a[14];
                                out[15] = a[15];
                                return out;
                            };
                            mat4.copy = function (out, a) {
                                out[0] = a[0];
                                out[1] = a[1];
                                out[2] = a[2];
                                out[3] = a[3];
                                out[4] = a[4];
                                out[5] = a[5];
                                out[6] = a[6];
                                out[7] = a[7];
                                out[8] = a[8];
                                out[9] = a[9];
                                out[10] = a[10];
                                out[11] = a[11];
                                out[12] = a[12];
                                out[13] = a[13];
                                out[14] = a[14];
                                out[15] = a[15];
                                return out;
                            };
                            mat4.identity = function (out) {
                                out[0] = 1;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 0;
                                out[4] = 0;
                                out[5] = 1;
                                out[6] = 0;
                                out[7] = 0;
                                out[8] = 0;
                                out[9] = 0;
                                out[10] = 1;
                                out[11] = 0;
                                out[12] = 0;
                                out[13] = 0;
                                out[14] = 0;
                                out[15] = 1;
                                return out;
                            };
                            mat4.transpose = function (out, a) {
                                if (out === a) {
                                    var a01 = a[1],
                                        a02 = a[2],
                                        a03 = a[3],
                                        a12 = a[6],
                                        a13 = a[7],
                                        a23 = a[11];
                                    out[1] = a[4];
                                    out[2] = a[8];
                                    out[3] = a[12];
                                    out[4] = a01;
                                    out[6] = a[9];
                                    out[7] = a[13];
                                    out[8] = a02;
                                    out[9] = a12;
                                    out[11] = a[14];
                                    out[12] = a03;
                                    out[13] = a13;
                                    out[14] = a23;
                                } else {
                                    out[0] = a[0];
                                    out[1] = a[4];
                                    out[2] = a[8];
                                    out[3] = a[12];
                                    out[4] = a[1];
                                    out[5] = a[5];
                                    out[6] = a[9];
                                    out[7] = a[13];
                                    out[8] = a[2];
                                    out[9] = a[6];
                                    out[10] = a[10];
                                    out[11] = a[14];
                                    out[12] = a[3];
                                    out[13] = a[7];
                                    out[14] = a[11];
                                    out[15] = a[15];
                                }
                                return out;
                            };
                            mat4.invert = function (out, a) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a03 = a[3],
                                    a10 = a[4],
                                    a11 = a[5],
                                    a12 = a[6],
                                    a13 = a[7],
                                    a20 = a[8],
                                    a21 = a[9],
                                    a22 = a[10],
                                    a23 = a[11],
                                    a30 = a[12],
                                    a31 = a[13],
                                    a32 = a[14],
                                    a33 = a[15],
                                    b00 = a00 * a11 - a01 * a10,
                                    b01 = a00 * a12 - a02 * a10,
                                    b02 = a00 * a13 - a03 * a10,
                                    b03 = a01 * a12 - a02 * a11,
                                    b04 = a01 * a13 - a03 * a11,
                                    b05 = a02 * a13 - a03 * a12,
                                    b06 = a20 * a31 - a21 * a30,
                                    b07 = a20 * a32 - a22 * a30,
                                    b08 = a20 * a33 - a23 * a30,
                                    b09 = a21 * a32 - a22 * a31,
                                    b10 = a21 * a33 - a23 * a31,
                                    b11 = a22 * a33 - a23 * a32,
                                    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                                if (!det) {
                                    return null;
                                }
                                det = 1.0 / det;
                                out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                                out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                                out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                                out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                                out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                                out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                                out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                                out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                                out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                                out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                                out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                                out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                                out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                                out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                                out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                                out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                                return out;
                            };
                            mat4.adjoint = function (out, a) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a03 = a[3],
                                    a10 = a[4],
                                    a11 = a[5],
                                    a12 = a[6],
                                    a13 = a[7],
                                    a20 = a[8],
                                    a21 = a[9],
                                    a22 = a[10],
                                    a23 = a[11],
                                    a30 = a[12],
                                    a31 = a[13],
                                    a32 = a[14],
                                    a33 = a[15];
                                out[0] = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
                                out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
                                out[2] = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
                                out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
                                out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
                                out[5] = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
                                out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
                                out[7] = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
                                out[8] = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
                                out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
                                out[10] = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
                                out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
                                out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
                                out[13] = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
                                out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
                                out[15] = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
                                return out;
                            };
                            mat4.determinant = function (a) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a03 = a[3],
                                    a10 = a[4],
                                    a11 = a[5],
                                    a12 = a[6],
                                    a13 = a[7],
                                    a20 = a[8],
                                    a21 = a[9],
                                    a22 = a[10],
                                    a23 = a[11],
                                    a30 = a[12],
                                    a31 = a[13],
                                    a32 = a[14],
                                    a33 = a[15],
                                    b00 = a00 * a11 - a01 * a10,
                                    b01 = a00 * a12 - a02 * a10,
                                    b02 = a00 * a13 - a03 * a10,
                                    b03 = a01 * a12 - a02 * a11,
                                    b04 = a01 * a13 - a03 * a11,
                                    b05 = a02 * a13 - a03 * a12,
                                    b06 = a20 * a31 - a21 * a30,
                                    b07 = a20 * a32 - a22 * a30,
                                    b08 = a20 * a33 - a23 * a30,
                                    b09 = a21 * a32 - a22 * a31,
                                    b10 = a21 * a33 - a23 * a31,
                                    b11 = a22 * a33 - a23 * a32;
                                return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                            };
                            mat4.multiply = function (out, a, b) {
                                var a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a03 = a[3],
                                    a10 = a[4],
                                    a11 = a[5],
                                    a12 = a[6],
                                    a13 = a[7],
                                    a20 = a[8],
                                    a21 = a[9],
                                    a22 = a[10],
                                    a23 = a[11],
                                    a30 = a[12],
                                    a31 = a[13],
                                    a32 = a[14],
                                    a33 = a[15];
                                var b0 = b[0],
                                    b1 = b[1],
                                    b2 = b[2],
                                    b3 = b[3];
                                out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                                out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                                out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                                out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                                b0 = b[4];
                                b1 = b[5];
                                b2 = b[6];
                                b3 = b[7];
                                out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                                out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                                out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                                out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                                b0 = b[8];
                                b1 = b[9];
                                b2 = b[10];
                                b3 = b[11];
                                out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                                out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                                out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                                out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                                b0 = b[12];
                                b1 = b[13];
                                b2 = b[14];
                                b3 = b[15];
                                out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                                out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                                out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                                out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                                return out;
                            };
                            mat4.mul = mat4.multiply;
                            mat4.translate = function (out, a, v) {
                                var x = v[0],
                                    y = v[1],
                                    z = v[2],
                                    a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;
                                if (a === out) {
                                    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                                    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                                    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                                    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
                                } else {
                                    a00 = a[0];
                                    a01 = a[1];
                                    a02 = a[2];
                                    a03 = a[3];
                                    a10 = a[4];
                                    a11 = a[5];
                                    a12 = a[6];
                                    a13 = a[7];
                                    a20 = a[8];
                                    a21 = a[9];
                                    a22 = a[10];
                                    a23 = a[11];
                                    out[0] = a00;
                                    out[1] = a01;
                                    out[2] = a02;
                                    out[3] = a03;
                                    out[4] = a10;
                                    out[5] = a11;
                                    out[6] = a12;
                                    out[7] = a13;
                                    out[8] = a20;
                                    out[9] = a21;
                                    out[10] = a22;
                                    out[11] = a23;
                                    out[12] = a00 * x + a10 * y + a20 * z + a[12];
                                    out[13] = a01 * x + a11 * y + a21 * z + a[13];
                                    out[14] = a02 * x + a12 * y + a22 * z + a[14];
                                    out[15] = a03 * x + a13 * y + a23 * z + a[15];
                                }
                                return out;
                            };
                            mat4.scale = function (out, a, v) {
                                var x = v[0],
                                    y = v[1],
                                    z = v[2];
                                out[0] = a[0] * x;
                                out[1] = a[1] * x;
                                out[2] = a[2] * x;
                                out[3] = a[3] * x;
                                out[4] = a[4] * y;
                                out[5] = a[5] * y;
                                out[6] = a[6] * y;
                                out[7] = a[7] * y;
                                out[8] = a[8] * z;
                                out[9] = a[9] * z;
                                out[10] = a[10] * z;
                                out[11] = a[11] * z;
                                out[12] = a[12];
                                out[13] = a[13];
                                out[14] = a[14];
                                out[15] = a[15];
                                return out;
                            };
                            mat4.rotate = function (out, a, rad, axis) {
                                var x = axis[0],
                                    y = axis[1],
                                    z = axis[2],
                                    len = Math.sqrt(x * x + y * y + z * z),
                                    s, c, t, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, b00, b01, b02, b10, b11, b12, b20, b21, b22;
                                if (Math.abs(len) < GLMAT_EPSILON) {
                                    return null;
                                }
                                len = 1 / len;
                                x *= len;
                                y *= len;
                                z *= len;
                                s = Math.sin(rad);
                                c = Math.cos(rad);
                                t = 1 - c;
                                a00 = a[0];
                                a01 = a[1];
                                a02 = a[2];
                                a03 = a[3];
                                a10 = a[4];
                                a11 = a[5];
                                a12 = a[6];
                                a13 = a[7];
                                a20 = a[8];
                                a21 = a[9];
                                a22 = a[10];
                                a23 = a[11];
                                b00 = x * x * t + c;
                                b01 = y * x * t + z * s;
                                b02 = z * x * t - y * s;
                                b10 = x * y * t - z * s;
                                b11 = y * y * t + c;
                                b12 = z * y * t + x * s;
                                b20 = x * z * t + y * s;
                                b21 = y * z * t - x * s;
                                b22 = z * z * t + c;
                                out[0] = a00 * b00 + a10 * b01 + a20 * b02;
                                out[1] = a01 * b00 + a11 * b01 + a21 * b02;
                                out[2] = a02 * b00 + a12 * b01 + a22 * b02;
                                out[3] = a03 * b00 + a13 * b01 + a23 * b02;
                                out[4] = a00 * b10 + a10 * b11 + a20 * b12;
                                out[5] = a01 * b10 + a11 * b11 + a21 * b12;
                                out[6] = a02 * b10 + a12 * b11 + a22 * b12;
                                out[7] = a03 * b10 + a13 * b11 + a23 * b12;
                                out[8] = a00 * b20 + a10 * b21 + a20 * b22;
                                out[9] = a01 * b20 + a11 * b21 + a21 * b22;
                                out[10] = a02 * b20 + a12 * b21 + a22 * b22;
                                out[11] = a03 * b20 + a13 * b21 + a23 * b22;
                                if (a !== out) {
                                    out[12] = a[12];
                                    out[13] = a[13];
                                    out[14] = a[14];
                                    out[15] = a[15];
                                }
                                return out;
                            };
                            mat4.rotateX = function (out, a, rad) {
                                var s = Math.sin(rad),
                                    c = Math.cos(rad),
                                    a10 = a[4],
                                    a11 = a[5],
                                    a12 = a[6],
                                    a13 = a[7],
                                    a20 = a[8],
                                    a21 = a[9],
                                    a22 = a[10],
                                    a23 = a[11];
                                if (a !== out) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    out[12] = a[12];
                                    out[13] = a[13];
                                    out[14] = a[14];
                                    out[15] = a[15];
                                }
                                out[4] = a10 * c + a20 * s;
                                out[5] = a11 * c + a21 * s;
                                out[6] = a12 * c + a22 * s;
                                out[7] = a13 * c + a23 * s;
                                out[8] = a20 * c - a10 * s;
                                out[9] = a21 * c - a11 * s;
                                out[10] = a22 * c - a12 * s;
                                out[11] = a23 * c - a13 * s;
                                return out;
                            };
                            mat4.rotateY = function (out, a, rad) {
                                var s = Math.sin(rad),
                                    c = Math.cos(rad),
                                    a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a03 = a[3],
                                    a20 = a[8],
                                    a21 = a[9],
                                    a22 = a[10],
                                    a23 = a[11];
                                if (a !== out) {
                                    out[4] = a[4];
                                    out[5] = a[5];
                                    out[6] = a[6];
                                    out[7] = a[7];
                                    out[12] = a[12];
                                    out[13] = a[13];
                                    out[14] = a[14];
                                    out[15] = a[15];
                                }
                                out[0] = a00 * c - a20 * s;
                                out[1] = a01 * c - a21 * s;
                                out[2] = a02 * c - a22 * s;
                                out[3] = a03 * c - a23 * s;
                                out[8] = a00 * s + a20 * c;
                                out[9] = a01 * s + a21 * c;
                                out[10] = a02 * s + a22 * c;
                                out[11] = a03 * s + a23 * c;
                                return out;
                            };
                            mat4.rotateZ = function (out, a, rad) {
                                var s = Math.sin(rad),
                                    c = Math.cos(rad),
                                    a00 = a[0],
                                    a01 = a[1],
                                    a02 = a[2],
                                    a03 = a[3],
                                    a10 = a[4],
                                    a11 = a[5],
                                    a12 = a[6],
                                    a13 = a[7];
                                if (a !== out) {
                                    out[8] = a[8];
                                    out[9] = a[9];
                                    out[10] = a[10];
                                    out[11] = a[11];
                                    out[12] = a[12];
                                    out[13] = a[13];
                                    out[14] = a[14];
                                    out[15] = a[15];
                                }
                                out[0] = a00 * c + a10 * s;
                                out[1] = a01 * c + a11 * s;
                                out[2] = a02 * c + a12 * s;
                                out[3] = a03 * c + a13 * s;
                                out[4] = a10 * c - a00 * s;
                                out[5] = a11 * c - a01 * s;
                                out[6] = a12 * c - a02 * s;
                                out[7] = a13 * c - a03 * s;
                                return out;
                            };
                            mat4.fromRotationTranslation = function (out, q, v) {
                                var x = q[0],
                                    y = q[1],
                                    z = q[2],
                                    w = q[3],
                                    x2 = x + x,
                                    y2 = y + y,
                                    z2 = z + z,
                                    xx = x * x2,
                                    xy = x * y2,
                                    xz = x * z2,
                                    yy = y * y2,
                                    yz = y * z2,
                                    zz = z * z2,
                                    wx = w * x2,
                                    wy = w * y2,
                                    wz = w * z2;
                                out[0] = 1 - (yy + zz);
                                out[1] = xy + wz;
                                out[2] = xz - wy;
                                out[3] = 0;
                                out[4] = xy - wz;
                                out[5] = 1 - (xx + zz);
                                out[6] = yz + wx;
                                out[7] = 0;
                                out[8] = xz + wy;
                                out[9] = yz - wx;
                                out[10] = 1 - (xx + yy);
                                out[11] = 0;
                                out[12] = v[0];
                                out[13] = v[1];
                                out[14] = v[2];
                                out[15] = 1;
                                return out;
                            };
                            mat4.fromQuat = function (out, q) {
                                var x = q[0],
                                    y = q[1],
                                    z = q[2],
                                    w = q[3],
                                    x2 = x + x,
                                    y2 = y + y,
                                    z2 = z + z,
                                    xx = x * x2,
                                    yx = y * x2,
                                    yy = y * y2,
                                    zx = z * x2,
                                    zy = z * y2,
                                    zz = z * z2,
                                    wx = w * x2,
                                    wy = w * y2,
                                    wz = w * z2;
                                out[0] = 1 - yy - zz;
                                out[1] = yx + wz;
                                out[2] = zx - wy;
                                out[3] = 0;
                                out[4] = yx - wz;
                                out[5] = 1 - xx - zz;
                                out[6] = zy + wx;
                                out[7] = 0;
                                out[8] = zx + wy;
                                out[9] = zy - wx;
                                out[10] = 1 - xx - yy;
                                out[11] = 0;
                                out[12] = 0;
                                out[13] = 0;
                                out[14] = 0;
                                out[15] = 1;
                                return out;
                            };
                            mat4.frustum = function (out, left, right, bottom, top, near, far) {
                                var rl = 1 / (right - left),
                                    tb = 1 / (top - bottom),
                                    nf = 1 / (near - far);
                                out[0] = (near * 2) * rl;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 0;
                                out[4] = 0;
                                out[5] = (near * 2) * tb;
                                out[6] = 0;
                                out[7] = 0;
                                out[8] = (right + left) * rl;
                                out[9] = (top + bottom) * tb;
                                out[10] = (far + near) * nf;
                                out[11] = -1;
                                out[12] = 0;
                                out[13] = 0;
                                out[14] = (far * near * 2) * nf;
                                out[15] = 0;
                                return out;
                            };
                            mat4.perspective = function (out, fovy, aspect, near, far) {
                                var f = 1.0 / Math.tan(fovy / 2),
                                    nf = 1 / (near - far);
                                out[0] = f / aspect;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 0;
                                out[4] = 0;
                                out[5] = f;
                                out[6] = 0;
                                out[7] = 0;
                                out[8] = 0;
                                out[9] = 0;
                                out[10] = (far + near) * nf;
                                out[11] = -1;
                                out[12] = 0;
                                out[13] = 0;
                                out[14] = (2 * far * near) * nf;
                                out[15] = 0;
                                return out;
                            };
                            mat4.ortho = function (out, left, right, bottom, top, near, far) {
                                var lr = 1 / (left - right),
                                    bt = 1 / (bottom - top),
                                    nf = 1 / (near - far);
                                out[0] = -2 * lr;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 0;
                                out[4] = 0;
                                out[5] = -2 * bt;
                                out[6] = 0;
                                out[7] = 0;
                                out[8] = 0;
                                out[9] = 0;
                                out[10] = 2 * nf;
                                out[11] = 0;
                                out[12] = (left + right) * lr;
                                out[13] = (top + bottom) * bt;
                                out[14] = (far + near) * nf;
                                out[15] = 1;
                                return out;
                            };
                            mat4.lookAt = function (out, eye, center, up) {
                                var x0, x1, x2, y0, y1, y2, z0, z1, z2, len, eyex = eye[0],
                                    eyey = eye[1],
                                    eyez = eye[2],
                                    upx = up[0],
                                    upy = up[1],
                                    upz = up[2],
                                    centerx = center[0],
                                    centery = center[1],
                                    centerz = center[2];
                                if (Math.abs(eyex - centerx) < GLMAT_EPSILON && Math.abs(eyey - centery) < GLMAT_EPSILON && Math.abs(eyez - centerz) < GLMAT_EPSILON) {
                                    return mat4.identity(out);
                                }
                                z0 = eyex - centerx;
                                z1 = eyey - centery;
                                z2 = eyez - centerz;
                                len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
                                z0 *= len;
                                z1 *= len;
                                z2 *= len;
                                x0 = upy * z2 - upz * z1;
                                x1 = upz * z0 - upx * z2;
                                x2 = upx * z1 - upy * z0;
                                len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
                                if (!len) {
                                    x0 = 0;
                                    x1 = 0;
                                    x2 = 0;
                                } else {
                                    len = 1 / len;
                                    x0 *= len;
                                    x1 *= len;
                                    x2 *= len;
                                }
                                y0 = z1 * x2 - z2 * x1;
                                y1 = z2 * x0 - z0 * x2;
                                y2 = z0 * x1 - z1 * x0;
                                len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
                                if (!len) {
                                    y0 = 0;
                                    y1 = 0;
                                    y2 = 0;
                                } else {
                                    len = 1 / len;
                                    y0 *= len;
                                    y1 *= len;
                                    y2 *= len;
                                }
                                out[0] = x0;
                                out[1] = y0;
                                out[2] = z0;
                                out[3] = 0;
                                out[4] = x1;
                                out[5] = y1;
                                out[6] = z1;
                                out[7] = 0;
                                out[8] = x2;
                                out[9] = y2;
                                out[10] = z2;
                                out[11] = 0;
                                out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
                                out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
                                out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
                                out[15] = 1;
                                return out;
                            };
                            mat4.str = function (a) {
                                return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
                                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
                            };
                            mat4.frob = function (a) {
                                return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2)))
                            };
                            if (typeof (exports) !== 'undefined') {
                                exports.mat4 = mat4;
                            };
                            var quat = {};
                            quat.create = function () {
                                var out = new GLMAT_ARRAY_TYPE(4);
                                out[0] = 0;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 1;
                                return out;
                            };
                            quat.rotationTo = (function () {
                                var tmpvec3 = vec3.create();
                                var xUnitVec3 = vec3.fromValues(1, 0, 0);
                                var yUnitVec3 = vec3.fromValues(0, 1, 0);
                                return function (out, a, b) {
                                    var dot = vec3.dot(a, b);
                                    if (dot < -0.999999) {
                                        vec3.cross(tmpvec3, xUnitVec3, a);
                                        if (vec3.length(tmpvec3) < 0.000001)
                                            vec3.cross(tmpvec3, yUnitVec3, a);
                                        vec3.normalize(tmpvec3, tmpvec3);
                                        quat.setAxisAngle(out, tmpvec3, Math.PI);
                                        return out;
                                    } else if (dot > 0.999999) {
                                        out[0] = 0;
                                        out[1] = 0;
                                        out[2] = 0;
                                        out[3] = 1;
                                        return out;
                                    } else {
                                        vec3.cross(tmpvec3, a, b);
                                        out[0] = tmpvec3[0];
                                        out[1] = tmpvec3[1];
                                        out[2] = tmpvec3[2];
                                        out[3] = 1 + dot;
                                        return quat.normalize(out, out);
                                    }
                                };
                            })();
                            quat.setAxes = (function () {
                                var matr = mat3.create();
                                return function (out, view, right, up) {
                                    matr[0] = right[0];
                                    matr[3] = right[1];
                                    matr[6] = right[2];
                                    matr[1] = up[0];
                                    matr[4] = up[1];
                                    matr[7] = up[2];
                                    matr[2] = -view[0];
                                    matr[5] = -view[1];
                                    matr[8] = -view[2];
                                    return quat.normalize(out, quat.fromMat3(out, matr));
                                };
                            })();
                            quat.clone = vec4.clone;
                            quat.fromValues = vec4.fromValues;
                            quat.copy = vec4.copy;
                            quat.set = vec4.set;
                            quat.identity = function (out) {
                                out[0] = 0;
                                out[1] = 0;
                                out[2] = 0;
                                out[3] = 1;
                                return out;
                            };
                            quat.setAxisAngle = function (out, axis, rad) {
                                rad = rad * 0.5;
                                var s = Math.sin(rad);
                                out[0] = s * axis[0];
                                out[1] = s * axis[1];
                                out[2] = s * axis[2];
                                out[3] = Math.cos(rad);
                                return out;
                            };
                            quat.add = vec4.add;
                            quat.multiply = function (out, a, b) {
                                var ax = a[0],
                                    ay = a[1],
                                    az = a[2],
                                    aw = a[3],
                                    bx = b[0],
                                    by = b[1],
                                    bz = b[2],
                                    bw = b[3];
                                out[0] = ax * bw + aw * bx + ay * bz - az * by;
                                out[1] = ay * bw + aw * by + az * bx - ax * bz;
                                out[2] = az * bw + aw * bz + ax * by - ay * bx;
                                out[3] = aw * bw - ax * bx - ay * by - az * bz;
                                return out;
                            };
                            quat.mul = quat.multiply;
                            quat.scale = vec4.scale;
                            quat.rotateX = function (out, a, rad) {
                                rad *= 0.5;
                                var ax = a[0],
                                    ay = a[1],
                                    az = a[2],
                                    aw = a[3],
                                    bx = Math.sin(rad),
                                    bw = Math.cos(rad);
                                out[0] = ax * bw + aw * bx;
                                out[1] = ay * bw + az * bx;
                                out[2] = az * bw - ay * bx;
                                out[3] = aw * bw - ax * bx;
                                return out;
                            };
                            quat.rotateY = function (out, a, rad) {
                                rad *= 0.5;
                                var ax = a[0],
                                    ay = a[1],
                                    az = a[2],
                                    aw = a[3],
                                    by = Math.sin(rad),
                                    bw = Math.cos(rad);
                                out[0] = ax * bw - az * by;
                                out[1] = ay * bw + aw * by;
                                out[2] = az * bw + ax * by;
                                out[3] = aw * bw - ay * by;
                                return out;
                            };
                            quat.rotateZ = function (out, a, rad) {
                                rad *= 0.5;
                                var ax = a[0],
                                    ay = a[1],
                                    az = a[2],
                                    aw = a[3],
                                    bz = Math.sin(rad),
                                    bw = Math.cos(rad);
                                out[0] = ax * bw + ay * bz;
                                out[1] = ay * bw - ax * bz;
                                out[2] = az * bw + aw * bz;
                                out[3] = aw * bw - az * bz;
                                return out;
                            };
                            quat.calculateW = function (out, a) {
                                var x = a[0],
                                    y = a[1],
                                    z = a[2];
                                out[0] = x;
                                out[1] = y;
                                out[2] = z;
                                out[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
                                return out;
                            };
                            quat.dot = vec4.dot;
                            quat.lerp = vec4.lerp;
                            quat.slerp = function (out, a, b, t) {
                                var ax = a[0],
                                    ay = a[1],
                                    az = a[2],
                                    aw = a[3],
                                    bx = b[0],
                                    by = b[1],
                                    bz = b[2],
                                    bw = b[3];
                                var omega, cosom, sinom, scale0, scale1;
                                cosom = ax * bx + ay * by + az * bz + aw * bw;
                                if (cosom < 0.0) {
                                    cosom = -cosom;
                                    bx = -bx;
                                    by = -by;
                                    bz = -bz;
                                    bw = -bw;
                                }
                                if ((1.0 - cosom) > 0.000001) {
                                    omega = Math.acos(cosom);
                                    sinom = Math.sin(omega);
                                    scale0 = Math.sin((1.0 - t) * omega) / sinom;
                                    scale1 = Math.sin(t * omega) / sinom;
                                } else {
                                    scale0 = 1.0 - t;
                                    scale1 = t;
                                }
                                out[0] = scale0 * ax + scale1 * bx;
                                out[1] = scale0 * ay + scale1 * by;
                                out[2] = scale0 * az + scale1 * bz;
                                out[3] = scale0 * aw + scale1 * bw;
                                return out;
                            };
                            quat.invert = function (out, a) {
                                var a0 = a[0],
                                    a1 = a[1],
                                    a2 = a[2],
                                    a3 = a[3],
                                    dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,
                                    invDot = dot ? 1.0 / dot : 0;
                                out[0] = -a0 * invDot;
                                out[1] = -a1 * invDot;
                                out[2] = -a2 * invDot;
                                out[3] = a3 * invDot;
                                return out;
                            };
                            quat.conjugate = function (out, a) {
                                out[0] = -a[0];
                                out[1] = -a[1];
                                out[2] = -a[2];
                                out[3] = a[3];
                                return out;
                            };
                            quat.length = vec4.length;
                            quat.len = quat.length;
                            quat.squaredLength = vec4.squaredLength;
                            quat.sqrLen = quat.squaredLength;
                            quat.normalize = vec4.normalize;
                            quat.fromMat3 = function (out, m) {
                                var fTrace = m[0] + m[4] + m[8];
                                var fRoot;
                                if (fTrace > 0.0) {
                                    fRoot = Math.sqrt(fTrace + 1.0);
                                    out[3] = 0.5 * fRoot;
                                    fRoot = 0.5 / fRoot;
                                    out[0] = (m[7] - m[5]) * fRoot;
                                    out[1] = (m[2] - m[6]) * fRoot;
                                    out[2] = (m[3] - m[1]) * fRoot;
                                } else {
                                    var i = 0;
                                    if (m[4] > m[0])
                                        i = 1;
                                    if (m[8] > m[i * 3 + i])
                                        i = 2;
                                    var j = (i + 1) % 3;
                                    var k = (i + 2) % 3;
                                    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
                                    out[i] = 0.5 * fRoot;
                                    fRoot = 0.5 / fRoot;
                                    out[3] = (m[k * 3 + j] - m[j * 3 + k]) * fRoot;
                                    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
                                    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
                                }
                                return out;
                            };
                            quat.str = function (a) {
                                return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
                            };
                            if (typeof (exports) !== 'undefined') {
                                exports.quat = quat;
                            };
                        })(shim.exports);
                    })(this);
                }, {}
            ],
            90: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var vectorizeText = _dereq_("vectorize-text")
                    module.exports = getGlyph
                    var GLYPH_CACHE = {}

                    function getGlyph(symbol) {
                        if (symbol in GLYPH_CACHE) {
                            return GLYPH_CACHE[symbol]
                        }
                        return GLYPH_CACHE[symbol] = vectorizeText(symbol, {
                            triangles: true,
                            textAlign: "center",
                            textBaseline: "middle",
                            lineHeight: 1.0
                        })
                    }
                }, {
                    "vectorize-text": 91
                }
            ],
            91: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(18)
                }, {
                    "./lib/vtext": 92,
                    "canvas-browserify": 93
                }
            ],
            92: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(19)
                }, {
                    "ndarray": 199,
                    "planar-graph-to-polyline": 114,
                    "simplify-planar-graph": 124,
                    "surface-nets": 146,
                    "triangulate-polyline": 157
                }
            ],
            93: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(20)
                }, {}
            ],
            94: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            95: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(22)
                }, {
                    "uniq": 113
                }
            ],
            96: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(23)
                }, {
                    "compare-angle": 97
                }
            ],
            97: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(24)
                }, {
                    "robust-orientation": 110,
                    "robust-product": 99,
                    "robust-sum": 111,
                    "signum": 100,
                    "two-sum": 101
                }
            ],
            98: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(25)
                }, {
                    "two-product": 112,
                    "two-sum": 101
                }
            ],
            99: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(26)
                }, {
                    "robust-scale": 98,
                    "robust-sum": 111
                }
            ],
            100: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(27)
                }, {}
            ],
            101: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(28)
                }, {}
            ],
            102: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(29)
                }, {
                    "robust-orientation": 110
                }
            ],
            103: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(30)
                }, {}
            ],
            104: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(31)
                }, {}
            ],
            105: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(32)
                }, {
                    "./lib/order-segments": 102,
                    "binary-search-bounds": 103,
                    "functional-red-black-tree": 104,
                    "robust-orientation": 110
                }
            ],
            106: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(33)
                }, {
                    "robust-orientation": 110,
                    "slab-decomposition": 105
                }
            ],
            107: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(28)
                }, {}
            ],
            108: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(25)
                }, {
                    "two-product": 112,
                    "two-sum": 107
                }
            ],
            109: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(36)
                }, {}
            ],
            110: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(37)
                }, {
                    "robust-scale": 108,
                    "robust-subtract": 109,
                    "robust-sum": 111,
                    "two-product": 112
                }
            ],
            111: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(17)
                }, {}
            ],
            112: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(16)
                }, {}
            ],
            113: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(12)
                }, {}
            ],
            114: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(41)
                }, {
                    "dup": 94,
                    "edges-to-adjacency-list": 95,
                    "planar-dual": 96,
                    "point-in-big-polygon": 106,
                    "robust-sum": 111,
                    "two-product": 112,
                    "uniq": 113
                }
            ],
            115: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(28)
                }, {}
            ],
            116: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(25)
                }, {
                    "two-product": 119,
                    "two-sum": 115
                }
            ],
            117: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(36)
                }, {}
            ],
            118: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(17)
                }, {}
            ],
            119: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(16)
                }, {}
            ],
            120: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(37)
                }, {
                    "robust-scale": 116,
                    "robust-subtract": 117,
                    "robust-sum": 118,
                    "two-product": 119
                }
            ],
            121: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(10)
                }, {}
            ],
            122: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(49)
                }, {}
            ],
            123: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(50)
                }, {
                    "bit-twiddle": 121,
                    "union-find": 122
                }
            ],
            124: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(51)
                }, {
                    "robust-orientation": 120,
                    "simplicial-complex": 123
                }
            ],
            125: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(52)
                }, {
                    "typedarray-pool": 128
                }
            ],
            126: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(10)
                }, {}
            ],
            127: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            128: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(54)
                }, {
                    "bit-twiddle": 126,
                    "buffer": 205,
                    "dup": 127
                }
            ],
            129: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(55)
                }, {}
            ],
            130: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(10)
                }, {}
            ],
            131: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            132: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(54)
                }, {
                    "bit-twiddle": 130,
                    "buffer": 205,
                    "dup": 131
                }
            ],
            133: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(58)
                }, {
                    "typedarray-pool": 132
                }
            ],
            134: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(59)
                }, {
                    "invert-permutation": 135,
                    "typedarray-pool": 138
                }
            ],
            135: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(60)
                }, {}
            ],
            136: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(10)
                }, {}
            ],
            137: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            138: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(54)
                }, {
                    "bit-twiddle": 136,
                    "buffer": 205,
                    "dup": 137
                }
            ],
            139: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(63)
                }, {
                    "gamma": 129,
                    "permutation-parity": 133,
                    "permutation-rank": 134
                }
            ],
            140: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(64)
                }, {
                    "cwise-compiler": 141
                }
            ],
            141: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(65)
                }, {
                    "./lib/thunk.js": 143
                }
            ],
            142: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(66)
                }, {
                    "uniq": 144
                }
            ],
            143: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(67)
                }, {
                    "./compile.js": 142
                }
            ],
            144: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(12)
                }, {}
            ],
            145: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(69)
                }, {
                    "./lib/zc-core": 140
                }
            ],
            146: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(70)
                }, {
                    "ndarray-extract-contour": 125,
                    "triangulate-hypercube": 139,
                    "zero-crossings": 145
                }
            ],
            147: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(71)
                }, {}
            ],
            148: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(72)
                }, {}
            ],
            149: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(73)
                }, {
                    "./xy": 156
                }
            ],
            150: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(74)
                }, {
                    "./xy": 156
                }
            ],
            151: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(75)
                }, {
                    "../dist/version.json": 147,
                    "./point": 149,
                    "./pointerror": 150,
                    "./sweep": 152,
                    "./sweepcontext": 153,
                    "./triangle": 154
                }
            ],
            152: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(76)
                }, {
                    "./advancingfront": 148,
                    "./pointerror": 150,
                    "./triangle": 154,
                    "./utils": 155
                }
            ],
            153: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(77)
                }, {
                    "./advancingfront": 148,
                    "./point": 149,
                    "./pointerror": 150,
                    "./sweep": 152,
                    "./triangle": 154
                }
            ],
            154: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(78)
                }, {
                    "./xy": 156
                }
            ],
            155: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(79)
                }, {}
            ],
            156: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(80)
                }, {}
            ],
            157: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(81)
                }, {
                    "poly2tri": 151
                }
            ],
            158: [
                function (_dereq_, module, exports) {
                    "use strict";
                    var createBuffer = _dereq_("gl-buffer");
                    var createVAO = _dereq_("gl-vao");
                    var getGlyph = _dereq_("./lib/glyphs");
                    var glslify = _dereq_("glslify");
                    var createShader = _dereq_("glslify/adapter.js")("\n#define GLSLIFY 1\n\nattribute vec3 position;\nattribute vec3 color;\nattribute vec2 glyph;\nattribute vec4 id;\nuniform mat4 model, view, projection;\nvarying vec3 interpColor;\nvarying vec4 pickId;\nvarying vec3 worldCoordinate;\nvoid main() {\n  vec4 worldPosition = model * vec4(position, 1);\n  vec4 viewPosition = view * worldPosition;\n  viewPosition = viewPosition / viewPosition.w;\n  vec4 clipPosition = projection * (viewPosition + vec4(glyph.x, -glyph.y, 0, 0));\n  gl_Position = clipPosition;\n  interpColor = color;\n  pickId = id;\n  worldCoordinate = worldPosition.xyz / worldPosition.w;\n}", "\n#define GLSLIFY 1\n\nprecision highp float;\nuniform vec4 highlightId;\nuniform vec3 highlightColor;\nuniform vec3 clipBounds[2];\nvarying vec3 interpColor;\nvarying vec4 pickId;\nvarying vec3 worldCoordinate;\nvoid main() {\n  if(any(lessThan(worldCoordinate, clipBounds[0])) || any(greaterThan(worldCoordinate, clipBounds[1]))) {\n    discard;\n  }\n  if(distance(pickId, highlightId) < 0.001) {\n    gl_FragColor = vec4(highlightColor, 1);\n  } else {\n    gl_FragColor = vec4(interpColor, 1);\n  }\n}", [{
                            "name": "model",
                            "type": "mat4"
                        }, {
                            "name": "view",
                            "type": "mat4"
                        }, {
                            "name": "projection",
                            "type": "mat4"
                        }, {
                            "name": "highlightId",
                            "type": "vec4"
                        }, {
                            "name": "highlightColor",
                            "type": "vec3"
                        }, {
                            "name": "clipBounds[0]",
                            "type": "vec3"
                        }, {
                            "name": "clipBounds[1]",
                            "type": "vec3"
                        }], [{
                            "name": "position",
                            "type": "vec3"
                        }, {
                            "name": "color",
                            "type": "vec3"
                        }, {
                            "name": "glyph",
                            "type": "vec2"
                        }, {
                            "name": "id",
                            "type": "vec4"
                        }]),
                        createOrthoShader = _dereq_("glslify/adapter.js")("\n#define GLSLIFY 1\n\nprecision mediump float;\nattribute vec3 position;\nattribute vec3 color;\nattribute vec2 glyph;\nattribute vec4 id;\nuniform mat4 model, view, projection;\nuniform vec2 screenSize;\nvarying vec3 interpColor;\nvarying vec4 pickId;\nvarying vec3 worldCoordinate;\nvoid main() {\n  vec4 worldPosition = model * vec4(position, 1.0);\n  vec4 viewPosition = view * worldPosition;\n  vec4 clipPosition = projection * viewPosition;\n  clipPosition /= clipPosition.w;\n  gl_Position = clipPosition + vec4(screenSize * vec2(glyph.x, -glyph.y), 0.0, 0.0);\n  interpColor = color;\n  pickId = id;\n  worldCoordinate = worldPosition.xyz / worldPosition.w;\n}", "\n#define GLSLIFY 1\n\nprecision highp float;\nuniform vec4 highlightId;\nuniform vec3 highlightColor;\nuniform vec3 clipBounds[2];\nvarying vec3 interpColor;\nvarying vec4 pickId;\nvarying vec3 worldCoordinate;\nvoid main() {\n  if(any(lessThan(worldCoordinate, clipBounds[0])) || any(greaterThan(worldCoordinate, clipBounds[1]))) {\n    discard;\n  }\n  if(distance(pickId, highlightId) < 0.001) {\n    gl_FragColor = vec4(highlightColor, 1);\n  } else {\n    gl_FragColor = vec4(interpColor, 1);\n  }\n}", [{
                            "name": "model",
                            "type": "mat4"
                        }, {
                            "name": "view",
                            "type": "mat4"
                        }, {
                            "name": "projection",
                            "type": "mat4"
                        }, {
                            "name": "screenSize",
                            "type": "vec2"
                        }, {
                            "name": "highlightId",
                            "type": "vec4"
                        }, {
                            "name": "highlightColor",
                            "type": "vec3"
                        }, {
                            "name": "clipBounds[0]",
                            "type": "vec3"
                        }, {
                            "name": "clipBounds[1]",
                            "type": "vec3"
                        }], [{
                            "name": "position",
                            "type": "vec3"
                        }, {
                            "name": "color",
                            "type": "vec3"
                        }, {
                            "name": "glyph",
                            "type": "vec2"
                        }, {
                            "name": "id",
                            "type": "vec4"
                        }]),
                        createPickPerspectiveShader = _dereq_("glslify/adapter.js")("\n#define GLSLIFY 1\n\nattribute vec3 position;\nattribute vec3 color;\nattribute vec2 glyph;\nattribute vec4 id;\nuniform mat4 model, view, projection;\nvarying vec3 interpColor;\nvarying vec4 pickId;\nvarying vec3 worldCoordinate;\nvoid main() {\n  vec4 worldPosition = model * vec4(position, 1);\n  vec4 viewPosition = view * worldPosition;\n  viewPosition = viewPosition / viewPosition.w;\n  vec4 clipPosition = projection * (viewPosition + vec4(glyph.x, -glyph.y, 0, 0));\n  gl_Position = clipPosition;\n  interpColor = color;\n  pickId = id;\n  worldCoordinate = worldPosition.xyz / worldPosition.w;\n}", "\n#define GLSLIFY 1\n\nprecision highp float;\nuniform vec3 clipBounds[2];\nvarying vec4 pickId;\nvarying vec3 worldCoordinate;\nvoid main() {\n  if(any(lessThan(worldCoordinate, clipBounds[0])) || any(greaterThan(worldCoordinate, clipBounds[1]))) {\n    discard;\n  }\n  gl_FragColor = pickId;\n}", [{
                            "name": "model",
                            "type": "mat4"
                        }, {
                            "name": "view",
                            "type": "mat4"
                        }, {
                            "name": "projection",
                            "type": "mat4"
                        }, {
                            "name": "clipBounds[0]",
                            "type": "vec3"
                        }, {
                            "name": "clipBounds[1]",
                            "type": "vec3"
                        }], [{
                            "name": "position",
                            "type": "vec3"
                        }, {
                            "name": "color",
                            "type": "vec3"
                        }, {
                            "name": "glyph",
                            "type": "vec2"
                        }, {
                            "name": "id",
                            "type": "vec4"
                        }]),
                        createPickOrthoShader = _dereq_("glslify/adapter.js")("\n#define GLSLIFY 1\n\nprecision mediump float;\nattribute vec3 position;\nattribute vec3 color;\nattribute vec2 glyph;\nattribute vec4 id;\nuniform mat4 model, view, projection;\nuniform vec2 screenSize;\nvarying vec3 interpColor;\nvarying vec4 pickId;\nvarying vec3 worldCoordinate;\nvoid main() {\n  vec4 worldPosition = model * vec4(position, 1.0);\n  vec4 viewPosition = view * worldPosition;\n  vec4 clipPosition = projection * viewPosition;\n  clipPosition /= clipPosition.w;\n  gl_Position = clipPosition + vec4(screenSize * vec2(glyph.x, -glyph.y), 0.0, 0.0);\n  interpColor = color;\n  pickId = id;\n  worldCoordinate = worldPosition.xyz / worldPosition.w;\n}", "\n#define GLSLIFY 1\n\nprecision highp float;\nuniform vec3 clipBounds[2];\nvarying vec4 pickId;\nvarying vec3 worldCoordinate;\nvoid main() {\n  if(any(lessThan(worldCoordinate, clipBounds[0])) || any(greaterThan(worldCoordinate, clipBounds[1]))) {\n    discard;\n  }\n  gl_FragColor = pickId;\n}", [{
                            "name": "model",
                            "type": "mat4"
                        }, {
                            "name": "view",
                            "type": "mat4"
                        }, {
                            "name": "projection",
                            "type": "mat4"
                        }, {
                            "name": "screenSize",
                            "type": "vec2"
                        }, {
                            "name": "clipBounds[0]",
                            "type": "vec3"
                        }, {
                            "name": "clipBounds[1]",
                            "type": "vec3"
                        }], [{
                            "name": "position",
                            "type": "vec3"
                        }, {
                            "name": "color",
                            "type": "vec3"
                        }, {
                            "name": "glyph",
                            "type": "vec2"
                        }, {
                            "name": "id",
                            "type": "vec4"
                        }]);
                    module.exports = createPointCloud;

                    function clampVec(v) {
                        var result = new Array(3);
                        for (var i = 0; i < 3; ++i) {
                            result[i] = Math.min(Math.max(v[i], -100000000), 100000000);
                        }
                        return result;
                    }

                    function PointCloud(gl, shader, orthoShader, pointBuffer, colorBuffer, glyphBuffer, idBuffer, vao, pickPerspectiveShader, pickOrthoShader) {
                        this.gl = gl;
                        this.shader = shader;
                        this.orthoShader = orthoShader;
                        this.pointBuffer = pointBuffer;
                        this.colorBuffer = colorBuffer;
                        this.glyphBuffer = glyphBuffer;
                        this.idBuffer = idBuffer;
                        this.vao = vao;
                        this.vertexCount = 0;
                        this.pickId = 0;
                        this.pickPerspectiveShader = pickPerspectiveShader;
                        this.pickOrthoShader = pickOrthoShader;
                        this.useOrtho = false;
                        this.bounds = [
                            [0, 0, 0],
                            [0, 0, 0]
                        ];
                        this.highlightColor = [0, 0, 0];
                        this.highlightId = [1, 1, 1, 1];
                        this.clipBounds = [
                            [-Infinity, -Infinity, -Infinity],
                            [Infinity, Infinity, Infinity]
                        ];
                    }
                    var proto = PointCloud.prototype;
                    proto.draw = function (camera) {
                        var gl = this.gl;
                        var shader = (this.useOrtho ? this.orthoShader : this.shader);
                        shader.bind();
                        shader.uniforms = {
                            model: camera.model || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                            view: camera.view || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                            projection: camera.projection || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                            screenSize: [2 / gl.drawingBufferWidth, 2 / gl.drawingBufferHeight],
                            highlightId: this.highlightId,
                            highlightColor: this.highlightColor,
                            clipBounds: this.clipBounds.map(clampVec)
                        };
                        this.vao.bind();
                        this.vao.draw(gl.TRIANGLES, this.vertexCount);
                        this.vao.unbind();
                    };
                    proto.drawPick = function (camera) {
                        var gl = this.gl;
                        var shader = (this.useOrtho ? this.pickOrthoShader : this.pickPerspectiveShader);
                        shader.bind();
                        shader.uniforms = {
                            model: camera.model || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                            view: camera.view || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                            projection: camera.projection || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                            screenSize: [2 / gl.drawingBufferWidth, 2 / gl.drawingBufferHeight],
                            clipBounds: this.clipBounds.map(clampVec)
                        };
                        this.vao.bind();
                        this.vao.draw(gl.TRIANGLES, this.vertexCount);
                        this.vao.unbind();
                    };
                    proto.pick = function (selected) {
                        if (!selected) {
                            return -1;
                        }
                        var id = selected.id;
                        if (id >>> 24 !== this.pickId) {
                            return -1;
                        }
                        var mask = (1 << 24) - 1;
                        var x = id & mask;
                        if (x >= this.pointCount) {
                            return -1;
                        }
                        return x;
                    };
                    proto.highlight = function (pointId, color) {
                        if (typeof pointId !== "number") {
                            this.highlightId = [1, 1, 1, 1];
                            this.highlightColor = [0, 0, 0];
                        } else {
                            var a0 = pointId & 255;
                            var a1 = pointId >> 8 & 255;
                            var a2 = pointId >> 16 & 255;
                            this.highlightId = [a0 / 255, a1 / 255, a2 / 255, this.pickId / 255];
                            if (color) {
                                this.highlightColor = color;
                            } else {
                                this.highlightColor = [0, 0, 0];
                            }
                        }
                    };
                    proto.update = function (options) {
                        var points = options.position;
                        if (!points) {
                            throw new Error("Must specify points");
                        }
                        if ("orthographic" in options) {
                            this.useOrtho = !!options.orthographic;
                        }
                        if ("pickId" in options) {
                            this.pickId = options.pickId >>> 0;
                        }
                        if ("clipBounds" in options) {
                            this.clipBounds = options.clipBounds;
                        }
                        var pointArray = [];
                        var colorArray = [];
                        var glyphArray = [];
                        var idArray = [];
                        var lowerBound = [Infinity, Infinity, Infinity];
                        var upperBound = [-Infinity, -Infinity, -Infinity];
                        var pickCounter = this.pickId << 24;
                        var glyphs = options.glyph;
                        var colors = options.color;
                        var sizes = options.size;
                        for (var i = 0; i < points.length; ++i) {
                            var glyphMesh;
                            if (Array.isArray(glyphs)) {
                                glyphMesh = getGlyph(glyphs[i]);
                            } else if (glyphs) {
                                glyphMesh = getGlyph(glyphs);
                            } else {
                                glyphMesh = getGlyph("●");
                            }
                            var color;
                            if (Array.isArray(colors)) {
                                if (Array.isArray(colors[0])) {
                                    color = colors[i];
                                } else {
                                    color = colors;
                                }
                            } else {
                                color = [0, 0, 0];
                            }
                            var size;
                            if (Array.isArray(sizes)) {
                                size = sizes[i];
                            } else if (sizes) {
                                size = sizes;
                            } else {
                                size = 0.1;
                            }
                            var x = points[i];
                            for (var j = 0; j < 3; ++j) {
                                upperBound[j] = Math.max(upperBound[j], x[j]);
                                lowerBound[j] = Math.min(lowerBound[j], x[j]);
                            }
                            var cells = glyphMesh.cells;
                            var positions = glyphMesh.positions;
                            for (var j = 0; j < cells.length; ++j) {
                                var c = cells[j];
                                for (var k = 0; k < 3; ++k) {
                                    pointArray.push.apply(pointArray, x);
                                    colorArray.push.apply(colorArray, color);
                                    idArray.push(pickCounter);
                                    if (size === 1) {
                                        glyphArray.push.apply(glyphArray, positions[c[k]]);
                                    } else {
                                        var gp = positions[c[k]];
                                        for (var l = 0; l < 2; ++l) {
                                            glyphArray.push(size * gp[l]);
                                        }
                                    }
                                }
                            }
                            pickCounter += 1;
                        }
                        this.vertexCount = pointArray.length / 3 | 0;
                        this.pointBuffer.update(pointArray);
                        this.colorBuffer.update(colorArray);
                        this.glyphBuffer.update(glyphArray);
                        this.idBuffer.update(new Uint32Array(idArray));
                        this.bounds = [lowerBound, upperBound];
                        this.pointCount = points.length;
                    };
                    proto.dispose = function () {
                        this.shader.dispose();
                        this.orthoShader.dispose();
                        this.pickPerspectiveShader.dispose();
                        this.pickOrthoShader.dispose();
                        this.vao.dispose();
                        this.pointBuffer.dispose();
                        this.colorBuffer.dispose();
                        this.glyphBuffer.dispose();
                        this.idBuffer.dispose();
                    };

                    function createPointCloud(gl, options) {
                        options = options || {};
                        var shader = createShader(gl);
                        shader.attributes.position.location = 0;
                        shader.attributes.color.location = 1;
                        shader.attributes.glyph.location = 2;
                        shader.attributes.id.location = 3;
                        var orthoShader = createOrthoShader(gl);
                        orthoShader.attributes.position.location = 0;
                        orthoShader.attributes.color.location = 1;
                        orthoShader.attributes.glyph.location = 2;
                        orthoShader.attributes.id.location = 3;
                        var pickPerspectiveShader = createPickPerspectiveShader(gl);
                        pickPerspectiveShader.attributes.position.location = 0;
                        pickPerspectiveShader.attributes.glyph.location = 2;
                        pickPerspectiveShader.attributes.id.location = 3;
                        var pickOrthoShader = createPickOrthoShader(gl);
                        pickOrthoShader.attributes.position.location = 0;
                        pickOrthoShader.attributes.glyph.location = 2;
                        pickOrthoShader.attributes.id.location = 3;
                        var pointBuffer = createBuffer(gl);
                        var colorBuffer = createBuffer(gl);
                        var glyphBuffer = createBuffer(gl);
                        var idBuffer = createBuffer(gl);
                        var vao = createVAO(gl, [{
                            buffer: pointBuffer,
                            size: 3,
                            type: gl.FLOAT
                        }, {
                            buffer: colorBuffer,
                            size: 3,
                            type: gl.FLOAT
                        }, {
                            buffer: glyphBuffer,
                            size: 2,
                            type: gl.FLOAT
                        }, {
                            buffer: idBuffer,
                            size: 4,
                            type: gl.UNSIGNED_BYTE,
                            normalized: true
                        }]);
                        var pointCloud = new PointCloud(gl, shader, orthoShader, pointBuffer, colorBuffer, glyphBuffer, idBuffer, vao, pickPerspectiveShader, pickOrthoShader);
                        pointCloud.update(options);
                        return pointCloud;
                    }
                }, {
                    "./lib/glyphs": 90,
                    "gl-buffer": 83,
                    "gl-vao": 171,
                    "glslify": 173,
                    "glslify/adapter.js": 172
                }
            ],
            159: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(87)
                }, {}
            ],
            160: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(88)
                }, {
                    "weakmap": 159
                }
            ],
            161: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var ndarray = _dereq_("ndarray")
                    var ops = _dereq_("ndarray-ops")
                    var pool = _dereq_("typedarray-pool")
                    var webglew = _dereq_("webglew")
                    var linearTypes = null
                    var filterTypes = null
                    var wrapTypes = null

                    function lazyInitLinearTypes(gl) {
                        linearTypes = [gl.LINEAR, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_NEAREST]
                        filterTypes = [gl.NEAREST, gl.LINEAR, gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_LINEAR]
                        wrapTypes = [gl.REPEAT, gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT]
                    }
                    var convertFloatToUint8 = function (out, inp) {
                        ops.muls(out, inp, 255.0)
                    }

                    function Texture2D(gl, handle, width, height, format, type) {
                        this.gl = gl
                        this.handle = handle
                        this.format = format
                        this.type = type
                        this._shape = [height, width]
                        this._mipLevels = [0]
                        this._magFilter = gl.NEAREST
                        this._minFilter = gl.NEAREST
                        this._wrapS = gl.CLAMP_TO_EDGE
                        this._wrapT = gl.CLAMP_TO_EDGE
                        this._anisoSamples = 1
                    }
                    Object.defineProperty(Texture2D.prototype, "minFilter", {
                        get: function () {
                            return this._minFilter
                        },
                        set: function (v) {
                            this.bind()
                            var gl = this.gl
                            if (this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {
                                if (!webglew(gl).OES_texture_float_linear) {
                                    v = gl.NEAREST
                                }
                            }
                            if (filterTypes.indexOf(v) < 0) {
                                throw new Error("gl-texture2d: Unknown filter mode " + v)
                            }
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, v)
                            return this._minFilter = v
                        }
                    })
                    var proto = Texture2D.prototype
                    Object.defineProperty(proto, "magFilter", {
                        get: function () {
                            return this._magFilter
                        },
                        set: function (v) {
                            this.bind()
                            var gl = this.gl
                            if (this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {
                                if (!webglew(gl).OES_texture_float_linear) {
                                    v = gl.NEAREST
                                }
                            }
                            if (filterTypes.indexOf(v) < 0) {
                                throw new Error("gl-texture2d: Unknown filter mode " + v)
                            }
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, v)
                            return this._magFilter = v
                        }
                    })
                    Object.defineProperty(proto, "wrapS", {
                        get: function () {
                            return this._wrapS
                        },
                        set: function (v) {
                            this.bind()
                            if (wrapTypes.indexOf(v) < 0) {
                                throw new Error("gl-texture2d: Unknown wrap mode " + v)
                            }
                            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, v)
                            return this._wrapS = v
                        }
                    })
                    Object.defineProperty(proto, "wrapT", {
                        get: function () {
                            return this._wrapT
                        },
                        set: function (v) {
                            this.bind()
                            if (wrapTypes.indexOf(v) < 0) {
                                throw new Error("gl-texture2d: Unknown wrap mode " + v)
                            }
                            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, v)
                            return this._wrapT = v
                        }
                    })
                    Object.defineProperty(proto, "wrap", {
                        get: function () {
                            return [this._wrapT, this._wrapS]
                        },
                        set: function (v) {
                            if (!Array.isArray(v)) {
                                v = [v, v]
                            }
                            if (v.length !== 2) {
                                throw new Error("gl-texture2d: Must specify wrap mode for rows and columns")
                            }
                            for (var i = 0; i < 2; ++i) {
                                if (wrapTypes.indexOf(v[i]) < 0) {
                                    throw new Error("gl-texture2d: Unknown wrap mode " + v)
                                }
                            }
                            this._wrapT = v[0]
                            this._wrapS = v[1]
                            var gl = this.gl
                            this.bind()
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT)
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS)
                            return v
                        }
                    })
                    Object.defineProperty(proto, "mipSamples", {
                        get: function () {
                            return this._anisoSamples
                        },
                        set: function (i) {
                            var psamples = this._anisoSamples
                            this._anisoSamples = Math.max(i, 1) | 0
                            if (psamples !== this._anisoSamples) {
                                var ext = webglew(this.gl).EXT_texture_filter_anisotropic
                                if (ext) {
                                    this.gl.texParameterf(this.gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisoSamples)
                                }
                            }
                            return this._anisoSamples
                        }
                    })
                    Object.defineProperty(proto, "shape", {
                        get: function () {
                            return this._shape
                        },
                        set: function (x) {
                            if (!Array.isArray(x)) {
                                x = [x | 0, x | 0]
                            } else {
                                if (x.length !== 2) {
                                    throw new Error("gl-texture2d: Invalid texture shape")
                                }
                            }
                            var r = x[0] | 0
                            var c = x[1] | 0
                            if (this.height === r && this.width === c) {
                                return x
                            }
                            var gl = this.gl
                            var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
                            if (c < 0 || c > maxSize || r < 0 || r > maxSize) {
                                throw new Error("gl-texture2d: Invalid texture size")
                            }
                            this._shape = [r, c]
                            this.bind()
                            gl.texImage2D(gl.TEXTURE_2D, 0, this.format, c, r, 0, this.format, this.type, null)
                            this._mipLevels = [0]
                            return x
                        }
                    })
                    proto.bind = function bindTexture2D(unit) {
                        var gl = this.gl
                        if (unit !== undefined) {
                            gl.activeTexture(gl.TEXTURE0 + (unit | 0))
                        }
                        gl.bindTexture(gl.TEXTURE_2D, this.handle)
                        if (unit !== undefined) {
                            return unit
                        }
                        return gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0
                    }
                    proto.dispose = function disposeTexture2D() {
                        this.gl.deleteTexture(this.handle)
                    }
                    proto.generateMipmap = function () {
                        this.bind()
                        this.gl.generateMipmap(this.gl.TEXTURE_2D)
                        var l = Math.min(this._shape[0], this._shape[1])
                        for (var i = 0; l > 0; ++i, l >>>= 1) {
                            if (this._mipLevels.indexOf(i) < 0) {
                                this._mipLevels.push(i)
                            }
                        }
                    }
                    proto.setPixels = function (data, x_off, y_off, mip_level) {
                        var gl = this.gl
                        this.bind()
                        if (Array.isArray(x_off)) {
                            mip_level = y_off
                            y_off = x_off[0] | 0
                            x_off = x_off[1] | 0
                        } else {
                            x_off = x_off || 0
                            y_off = y_off || 0
                        }
                        mip_level = mip_level || 0
                        if (data instanceof HTMLCanvasElement || data instanceof ImageData || data instanceof HTMLImageElement || data instanceof HTMLVideoElement) {
                            var needsMip = this._mipLevels.indexOf(mip_level) < 0
                            if (needsMip) {
                                gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, data)
                                this._mipLevels.push(mip_level)
                            } else {
                                gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, this.format, this.type, data)
                            }
                        } else if (data.shape && data.stride && data.data) {
                            if (data.shape.length < 2 || x_off + data.shape[1] > this._shape[1] >>> mip_level || y_off + data.shape[0] > this._shape[0] >>> mip_level || x_off < 0 || y_off < 0) {
                                throw new Error("gl-texture2d: Texture dimensions are out of bounds")
                            }
                            texSubImageArray(gl, x_off, y_off, mip_level, this.format, this.type, this._mipLevels, data)
                        } else {
                            throw new Error("gl-texture2d: Unsupported data type")
                        }
                    }

                    function texSubImageArray(gl, x_off, y_off, mip_level, cformat, ctype, mipLevels, array) {
                        var dtype = array.dtype
                        var shape = array.shape
                        var packed = isPacked(array)
                        var type = 0,
                            format = 0
                        if (dtype === "float32") {
                            type = gl.FLOAT
                        } else if (dtype === "float64") {
                            type = gl.FLOAT
                            packed = false
                            dtype = "float32"
                        } else if (dtype === "uint8") {
                            type = gl.UNSIGNED_BYTE
                        } else {
                            type = gl.UNSIGNED_BYTE
                            packed = false
                            dtype = "uint8"
                        }
                        if (shape.length === 2) {
                            format = gl.LUMINANCE
                        } else if (shape.length === 3) {
                            if (shape[2] === 1) {
                                format = gl.ALPHA
                            } else if (shape[2] === 2) {
                                format = gl.LUMINANCE_ALPHA
                            } else if (shape[2] === 3) {
                                format = gl.RGB
                            } else if (shape[2] === 4) {
                                format = gl.RGBA
                            } else {
                                throw new Error("gl-texture2d: Invalid shape for pixel coords")
                            }
                        } else {
                            throw new Error("gl-texture2d: Invalid shape for texture")
                        }
                        if ((format === gl.LUMINANCE || format === gl.ALPHA) && (cformat === gl.LUMINANCE || cformat === gl.ALPHA)) {
                            format = cformat
                        }
                        if (format !== cformat) {
                            throw new Error("gl-texture2d: Incompatible texture format for setPixels")
                        }
                        var size = array.size
                        var needsMip = mipLevels.indexOf(mip_level) < 0
                        if (needsMip) {
                            mipLevels.push(mip_level)
                        }
                        if (type === ctype && packed) {
                            if (array.offset === 0 && array.data.length === size) {
                                if (needsMip) {
                                    gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[1], shape[0], 0, cformat, ctype, array.data)
                                } else {
                                    gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[1], shape[0], cformat, ctype, array.data)
                                }
                            } else {
                                if (needsMip) {
                                    gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[1], shape[0], 0, cformat, ctype, array.data.subarray(array.offset, array.offset + size))
                                } else {
                                    gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[1], shape[0], cformat, ctype, array.data.subarray(array.offset, array.offset + size))
                                }
                            }
                        } else {
                            var pack_buffer
                            if (ctype === gl.FLOAT) {
                                pack_buffer = pool.mallocFloat32(size)
                            } else {
                                pack_buffer = pool.mallocUint8(size)
                            }
                            var pack_view = ndarray(pack_buffer, shape)
                            if (type === gl.FLOAT && ctype === gl.UNSIGNED_BYTE) {
                                convertFloatToUint8(pack_view, array)
                            } else {
                                ops.assign(pack_view, array)
                            }
                            if (needsMip) {
                                gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[1], shape[0], 0, cformat, ctype, pack_buffer.subarray(0, size))
                            } else {
                                gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[1], shape[0], cformat, ctype, pack_buffer.subarray(0, size))
                            }
                            if (ctype === gl.FLOAT) {
                                pool.freeFloat32(pack_buffer)
                            } else {
                                pool.freeUint8(pack_buffer)
                            }
                        }
                    }

                    function initTexture(gl) {
                        var tex = gl.createTexture()
                        gl.bindTexture(gl.TEXTURE_2D, tex)
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)
                        return tex
                    }

                    function createTextureShape(gl, width, height, format, type) {
                        var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
                        if (width < 0 || width > maxTextureSize || height < 0 || height > maxTextureSize) {
                            throw new Error("gl-texture2d: Invalid texture shape")
                        }
                        var tex = initTexture(gl)
                        gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null)
                        return new Texture2D(gl, tex, width, height, format, type)
                    }

                    function createTextureDOM(gl, element, format, type) {
                        var tex = initTexture(gl)
                        gl.texImage2D(gl.TEXTURE_2D, 0, format, format, type, element)
                        return new Texture2D(gl, tex, element.width | 0, element.height | 0, format, type)
                    }

                    function isPacked(array) {
                        var shape = array.shape
                        var stride = array.stride
                        var s = 1
                        for (var i = shape.length - 1; i >= 0; --i) {
                            if (stride[i] !== s) {
                                return false
                            }
                            s *= shape[i]
                        }
                        return true
                    }

                    function createTextureArray(gl, array) {
                        var dtype = array.dtype
                        var shape = array.shape.slice()
                        var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
                        if (shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {
                            throw new Error("gl-texture2d: Invalid texture size")
                        }
                        var packed = isPacked(array)
                        var type = 0
                        if (dtype === "float32") {
                            type = gl.FLOAT
                        } else if (dtype === "float64") {
                            type = gl.FLOAT
                            packed = false
                            dtype = "float32"
                        } else if (dtype === "uint8") {
                            type = gl.UNSIGNED_BYTE
                        } else {
                            type = gl.UNSIGNED_BYTE
                            packed = false
                            dtype = "uint8"
                        }
                        var format = 0
                        if (shape.length === 2) {
                            format = gl.LUMINANCE
                        } else if (shape.length === 3) {
                            if (shape[2] === 1) {
                                format = gl.ALPHA
                            } else if (shape[2] === 2) {
                                format = gl.LUMINANCE_ALPHA
                            } else if (shape[2] === 3) {
                                format = gl.RGB
                            } else if (shape[2] === 4) {
                                format = gl.RGBA
                            } else {
                                throw new Error("Invalid shape for pixel coords")
                            }
                        } else {
                            throw new Error("Invalid shape for texture")
                        }
                        if (type === gl.FLOAT && !!webglew(gl).texture_float) {
                            type = gl.UNSIGNED_BYTE
                            packed = false
                        }
                        var buffer, buf_store
                        if (!packed) {
                            var sz = 1
                            var stride = new Array(shape.length)
                            for (var i = shape.length - 1; i >= 0; --i) {
                                stride[i] = sz
                                sz *= shape[i]
                            }
                            buf_store = pool.malloc(sz, dtype)
                            var buf_array = ndarray(buf_store, array.shape, stride, 0)
                            if ((dtype === "float32" || dtype === "float64") && type === gl.UNSIGNED_BYTE) {
                                convertFloatToUint8(buf_array, array)
                            } else {
                                ops.assign(buf_array, array)
                            }
                            buffer = buf_store.subarray(0, sz)
                        } else {
                            var array_size = array.size
                            buffer = array.data.subarray(array.offset, array.offset + array_size)
                        }
                        var tex = initTexture(gl)
                        gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[1], shape[0], 0, format, type, buffer)
                        if (!packed) {
                            pool.free(buf_store)
                        }
                        return new Texture2D(gl, tex, shape[1], shape[0], format, type)
                    }

                    function createTexture2D(gl) {
                        if (arguments.length <= 1) {
                            throw new Error("Missing arguments for texture2d constructor")
                        }
                        if (!linearTypes) {
                            lazyInitLinearTypes(gl)
                        }
                        if (typeof arguments[1] === "number") {
                            return createTextureShape(gl, arguments[1], arguments[2], arguments[3] || gl.RGBA, arguments[4] || gl.UNSIGNED_BYTE)
                        }
                        if (Array.isArray(arguments[1])) {
                            return createTextureShape(gl, arguments[1][1] | 0, arguments[1][0] | 0, arguments[2] || gl.RGBA, arguments[4] || gl.UNSIGNED_BYTE)
                        }
                        if (typeof arguments[1] === "object") {
                            var obj = arguments[1]
                            if (obj instanceof HTMLCanvasElement || obj instanceof HTMLImageElement || obj instanceof HTMLVideoElement || obj instanceof ImageData) {
                                return createTextureDOM(gl, obj, arguments[2] || gl.RGBA, arguments[3] || gl.UNSIGNED_BYTE)
                            } else if (obj.shape && obj.data && obj.stride) {
                                return createTextureArray(gl, obj)
                            }
                        }
                        throw new Error("Invalid arguments for texture2d constructor")
                    }
                    module.exports = createTexture2D
                }, {
                    "ndarray": 199,
                    "ndarray-ops": 188,
                    "typedarray-pool": 164,
                    "webglew": 160
                }
            ],
            162: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(10)
                }, {}
            ],
            163: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            164: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(54)
                }, {
                    "bit-twiddle": 162,
                    "buffer": 205,
                    "dup": 163
                }
            ],
            165: [
                function (_dereq_, module, exports) {
                    "use strict";
                    module.exports = createSurfacePlot;
                    var glslify = _dereq_("glslify");
                    var createBuffer = _dereq_("gl-buffer");
                    var createVAO = _dereq_("gl-vao");
                    var createTexture = _dereq_("gl-texture2d");
                    var pool = _dereq_("typedarray-pool");
                    var colormap = _dereq_("colormap");
                    var ops = _dereq_("ndarray-ops");
                    var pack = _dereq_("ndarray-pack");
                    var createShader = _dereq_("glslify/adapter.js")("\n#define GLSLIFY 1\n\nattribute vec2 uv;\nattribute float f;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\nvarying float value;\nvarying vec3 worldCoordinate;\nvoid main() {\n  vec4 worldPosition = model * vec4(uv, f, 1.0);\n  gl_Position = projection * view * worldPosition;\n  value = f;\n  worldCoordinate = worldPosition.xyz / worldPosition.w;\n}", "\n#define GLSLIFY 1\n\nprecision highp float;\nuniform vec3 lowerBound;\nuniform vec3 upperBound;\nuniform sampler2D colormap;\nuniform vec3 clipBounds[2];\nvarying float value;\nvarying vec3 worldCoordinate;\nvoid main() {\n  if(any(lessThan(worldCoordinate, clipBounds[0])) || any(greaterThan(worldCoordinate, clipBounds[1]))) {\n    discard;\n  }\n  float interpValue = (value - lowerBound.z) / (upperBound.z - lowerBound.z);\n  gl_FragColor = texture2D(colormap, vec2(interpValue, interpValue));\n}", [{
                        "name": "model",
                        "type": "mat4"
                    }, {
                        "name": "view",
                        "type": "mat4"
                    }, {
                        "name": "projection",
                        "type": "mat4"
                    }, {
                        "name": "lowerBound",
                        "type": "vec3"
                    }, {
                        "name": "upperBound",
                        "type": "vec3"
                    }, {
                        "name": "colormap",
                        "type": "sampler2D"
                    }, {
                        "name": "clipBounds[0]",
                        "type": "vec3"
                    }, {
                        "name": "clipBounds[1]",
                        "type": "vec3"
                    }], [{
                        "name": "uv",
                        "type": "vec2"
                    }, {
                        "name": "f",
                        "type": "float"
                    }]);
                    var IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
                    var QUAD = [
                        [0, 0],
                        [0, 1],
                        [1, 0],
                        [1, 1],
                        [1, 0],
                        [0, 1]
                    ];

                    function genColormap(name) {
                        var x = pack([colormap({
                            colormap: name,
                            nshades: 256,
                            format: "rgb"
                        }).map(function (c) {
                            return [c[0], c[1], c[2], 255];
                        })]);
                        ops.divseq(x, 255);
                        return x;
                    }

                    function clampVec(v) {
                        var result = new Array(3);
                        for (var i = 0; i < 3; ++i) {
                            result[i] = Math.min(Math.max(v[i], -100000000), 100000000);
                        }
                        return result;
                    }

                    function SurfacePlot(gl, shape, bounds, shader, coordinates, values, vao, colorMap) {
                        this.gl = gl;
                        this.shape = shape;
                        this.bounds = bounds;
                        this._shader = shader;
                        this._coordinateBuffer = coordinates;
                        this._valueBuffer = values;
                        this._vao = vao;
                        this._colorMap = colorMap;
                        this.clipBounds = [
                            [-Infinity, -Infinity, -Infinity],
                            [Infinity, Infinity, Infinity]
                        ];
                    }
                    var proto = SurfacePlot.prototype;
                    proto.draw = function (params) {
                        params = params || {};
                        var gl = this.gl;
                        this._shader.bind();
                        this._shader.uniforms.model = params.model || IDENTITY;
                        this._shader.uniforms.view = params.view || IDENTITY;
                        this._shader.uniforms.projection = params.projection || IDENTITY;
                        this._shader.uniforms.lowerBound = this.bounds[0];
                        this._shader.uniforms.upperBound = this.bounds[1];
                        this._shader.uniforms.colormap = this._colorMap.bind(0);
                        this._shader.uniforms.clipBounds = this.clipBounds.map(clampVec);
                        this._vao.bind();
                        this._vao.draw(gl.TRIANGLES, (this.shape[0] - 1) * (this.shape[1] - 1) * 6);
                        this._vao.unbind();
                    };
                    proto.update = function (params) {
                        params = params || {};
                        if (params.field) {
                            var field = params.field;
                            var nshape = field.shape.slice();
                            if (nshape[0] !== this.shape[0] || nshape[1] !== this.shape[1]) {
                                this.shape = nshape;
                                var count = (nshape[0] - 1) * (nshape[1] - 1) * 6 * 2;
                                var verts = pool.mallocFloat(count);
                                var ptr = 0;
                                for (var i = 0; i < nshape[0] - 1; ++i) {
                                    for (var j = 0; j < nshape[1] - 1; ++j) {
                                        for (var k = 0; k < 6; ++k) {
                                            verts[ptr++] = i + QUAD[k][0];
                                            verts[ptr++] = j + QUAD[k][1];
                                        }
                                    }
                                }
                                this._coordinateBuffer.update(verts);
                                pool.freeFloat(verts);
                            }
                            var minZ = Infinity;
                            var maxZ = -Infinity;
                            var count = (nshape[0] - 1) * (nshape[1] - 1) * 6;
                            var verts = pool.mallocFloat(count);
                            var ptr = 0;
                            for (var i = 0; i < nshape[0] - 1; ++i) {
                                for (var j = 0; j < nshape[1] - 1; ++j) {
                                    for (var k = 0; k < 6; ++k) {
                                        var v = field.get(i + QUAD[k][0], j + QUAD[k][1]);
                                        verts[ptr++] = v;
                                        minZ = Math.min(minZ, v);
                                        maxZ = Math.max(maxZ, v);
                                    }
                                }
                            }
                            this._valueBuffer.update(verts);
                            this.bounds = [
                                [0, 0, minZ],
                                [nshape[0], nshape[1], maxZ]
                            ];
                        }
                        if (typeof params.colormap === "string") {
                            this._colorMap.setPixels(genColormap(params.colormap));
                        }
                    };
                    proto.dispose = function () {
                        this._shader.dispose();
                        this._vao.dispose();
                        this._coordinateBuffer.dispose();
                        this._valueBuffer.dispose();
                        this._colorMap.dispose();
                    };

                    function createSurfacePlot(gl, field, params) {
                        var shader = createShader(gl);
                        shader.attributes.uv.location = 0;
                        shader.attributes.f.location = 1;
                        var estimatedSize = (field.shape[0] - 1) * (field.shape[1] - 1) * 6 * 4;
                        var coordinateBuffer = createBuffer(gl, estimatedSize * 2);
                        var valueBuffer = createBuffer(gl, estimatedSize);
                        var vao = createVAO(gl, [{
                            buffer: coordinateBuffer,
                            size: 2
                        }, {
                            buffer: valueBuffer,
                            size: 1
                        }]);
                        var cmap = createTexture(gl, 256, 1, gl.RGBA, gl.UNSIGNED_BYTE);
                        cmap.minFilter = gl.LINEAR;
                        cmap.magFilter = gl.LINEAR;
                        var surface = new SurfacePlot(gl, [0, 0], [
                            [0, 0, 0],
                            [0, 0, 0]
                        ], shader, coordinateBuffer, valueBuffer, vao, cmap);
                        var nparams = {};
                        for (var id in params) {
                            nparams[id] = params[id];
                        }
                        nparams.field = field;
                        nparams.colormap = nparams.colormap || "jet";
                        surface.update(nparams);
                        return surface;
                    }
                }, {
                    "colormap": 1,
                    "gl-buffer": 83,
                    "gl-texture2d": 161,
                    "gl-vao": 171,
                    "glslify": 173,
                    "glslify/adapter.js": 172,
                    "ndarray-ops": 188,
                    "ndarray-pack": 193,
                    "typedarray-pool": 164
                }
            ],
            166: [
                function (_dereq_, module, exports) {
                    "use strict"

                    function doBind(gl, elements, attributes) {
                        if (elements) {
                            elements.bind()
                        } else {
                            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)
                        }
                        var nattribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS) | 0
                        if (attributes) {
                            if (attributes.length > nattribs) {
                                throw new Error("gl-vao: Too many vertex attributes")
                            }
                            for (var i = 0; i < attributes.length; ++i) {
                                var attrib = attributes[i]
                                if (attrib.buffer) {
                                    var buffer = attrib.buffer
                                    var size = attrib.size || 4
                                    var type = attrib.type || gl.FLOAT
                                    var normalized = !!attrib.normalized
                                    var stride = attrib.stride || 0
                                    var offset = attrib.offset || 0
                                    buffer.bind()
                                    gl.enableVertexAttribArray(i)
                                    gl.vertexAttribPointer(i, size, type, normalized, stride, offset)
                                } else {
                                    if (typeof attrib === "number") {
                                        gl.vertexAttrib1f(i, attrib)
                                    } else if (attrib.length === 1) {
                                        gl.vertexAttrib1f(i, attrib[0])
                                    } else if (attrib.length === 2) {
                                        gl.vertexAttrib2f(i, attrib[0], attrib[1])
                                    } else if (attrib.length === 3) {
                                        gl.vertexAttrib3f(i, attrib[0], attrib[1], attrib[2])
                                    } else if (attrib.length === 4) {
                                        gl.vertexAttrib4f(i, attrib[0], attrib[1], attrib[2], attrib[3])
                                    } else {
                                        throw new Error("gl-vao: Invalid vertex attribute")
                                    }
                                    gl.disableVertexAttribArray(i)
                                }
                            }
                            for (; i < nattribs; ++i) {
                                gl.disableVertexAttribArray(i)
                            }
                        } else {
                            gl.bindBuffer(gl.ARRAY_BUFFER, null)
                            for (var i = 0; i < nattribs; ++i) {
                                gl.disableVertexAttribArray(i)
                            }
                        }
                    }
                    module.exports = doBind
                }, {}
            ],
            167: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var bindAttribs = _dereq_("./do-bind.js")

                    function VAOEmulated(gl) {
                        this.gl = gl
                        this._elements = null
                        this._attributes = null
                    }
                    VAOEmulated.prototype.bind = function () {
                        bindAttribs(this.gl, this._elements, this._attributes)
                    }
                    VAOEmulated.prototype.update = function (attributes, elements) {
                        this._elements = elements
                        this._attributes = attributes
                    }
                    VAOEmulated.prototype.dispose = function () {}
                    VAOEmulated.prototype.unbind = function () {}
                    VAOEmulated.prototype.draw = function (mode, count, offset) {
                        offset = offset || 0
                        var gl = this.gl
                        if (this._elements) {
                            gl.drawElements(mode, count, gl.UNSIGNED_SHORT, offset)
                        } else {
                            gl.drawArrays(mode, offset, count)
                        }
                    }

                    function createVAOEmulated(gl) {
                        return new VAOEmulated(gl)
                    }
                    module.exports = createVAOEmulated
                }, {
                    "./do-bind.js": 166
                }
            ],
            168: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var bindAttribs = _dereq_("./do-bind.js")

                    function VertexAttribute(location, dimension, a, b, c, d) {
                        this.location = location
                        this.dimension = dimension
                        this.a = a
                        this.b = b
                        this.c = c
                        this.d = d
                    }
                    VertexAttribute.prototype.bind = function (gl) {
                        switch (this.dimension) {
                        case 1:
                            gl.vertexAttrib1f(this.location, this.a)
                            break
                        case 2:
                            gl.vertexAttrib2f(this.location, this.a, this.b)
                            break
                        case 3:
                            gl.vertexAttrib3f(this.location, this.a, this.b, this.c)
                            break
                        case 4:
                            gl.vertexAttrib4f(this.location, this.a, this.b, this.c, this.d)
                            break
                        }
                    }

                    function VAONative(gl, ext, handle) {
                        this.gl = gl
                        this._ext = ext
                        this.handle = handle
                        this._attribs = []
                        this._useElements = false
                    }
                    VAONative.prototype.bind = function () {
                        this._ext.bindVertexArrayOES(this.handle)
                        for (var i = 0; i < this._attribs.length; ++i) {
                            this._attribs[i].bind(this.gl)
                        }
                    }
                    VAONative.prototype.unbind = function () {
                        this._ext.bindVertexArrayOES(null)
                    }
                    VAONative.prototype.dispose = function () {
                        this._ext.deleteVertexArrayOES(this.handle)
                    }
                    VAONative.prototype.update = function (attributes, elements) {
                        this.bind()
                        bindAttribs(this.gl, elements, attributes)
                        this.unbind()
                        this._attribs.length = 0
                        if (attributes)
                            for (var i = 0; i < attributes.length; ++i) {
                                var a = attributes[i]
                                if (typeof a === "number") {
                                    this._attribs.push(new VertexAttribute(i, 1, a))
                                } else if (Array.isArray(a)) {
                                    this._attribs.push(new VertexAttribute(i, a.length, a[0], a[1], a[2], a[3]))
                                }
                            }
                        this._useElements = !!elements
                    }
                    VAONative.prototype.draw = function (mode, count, offset) {
                        offset = offset || 0
                        var gl = this.gl
                        if (this._useElements) {
                            gl.drawElements(mode, count, gl.UNSIGNED_SHORT, offset)
                        } else {
                            gl.drawArrays(mode, offset, count)
                        }
                    }

                    function createVAONative(gl, ext) {
                        return new VAONative(gl, ext, ext.createVertexArrayOES())
                    }
                    module.exports = createVAONative
                }, {
                    "./do-bind.js": 166
                }
            ],
            169: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(87)
                }, {}
            ],
            170: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(88)
                }, {
                    "weakmap": 169
                }
            ],
            171: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var webglew = _dereq_("webglew")
                    var createVAONative = _dereq_("./lib/vao-native.js")
                    var createVAOEmulated = _dereq_("./lib/vao-emulated.js")

                    function createVAO(gl, attributes, elements) {
                        var ext = webglew(gl).OES_vertex_array_object
                        var vao
                        if (ext) {
                            vao = createVAONative(gl, ext)
                        } else {
                            vao = createVAOEmulated(gl)
                        }
                        vao.update(attributes, elements)
                        return vao
                    }
                    module.exports = createVAO
                }, {
                    "./lib/vao-emulated.js": 167,
                    "./lib/vao-native.js": 168,
                    "webglew": 170
                }
            ],
            172: [
                function (_dereq_, module, exports) {
                    module.exports = programify
                    var shader = _dereq_('gl-shader-core')

                    function programify(vertex, fragment, uniforms, attributes) {
                        return function (gl) {
                            return shader(gl, vertex, fragment, uniforms, attributes)
                        }
                    }
                }, {
                    "gl-shader-core": 178
                }
            ],
            173: [
                function (_dereq_, module, exports) {
                    module.exports = noop

                    function noop() {
                        throw new Error('You should bundle your code ' + 'using `glslify` as a transform.')
                    }
                }, {}
            ],
            174: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = createAttributeWrapper

                    function ShaderAttribute(gl, program, location, dimension, name, constFunc, relink) {
                        this._gl = gl
                        this._program = program
                        this._location = location
                        this._dimension = dimension
                        this._name = name
                        this._constFunc = constFunc
                        this._relink = relink
                    }
                    var proto = ShaderAttribute.prototype
                    proto.pointer = function setAttribPointer(type, normalized, stride, offset) {
                        var gl = this._gl
                        gl.vertexAttribPointer(this._location, this._dimension, type || gl.FLOAT, normalized ? gl.TRUE : gl.FALSE, stride || 0, offset || 0)
                        this._gl.enableVertexAttribArray(this._location)
                    }
                    Object.defineProperty(proto, "location", {
                        get: function () {
                            return this._location
                        },
                        set: function (v) {
                            if (v !== this._location) {
                                this._location = v
                                this._gl.bindAttribLocation(this._program, v, this._name)
                                this._gl.linkProgram(this._program)
                                this._relink()
                            }
                        }
                    })

                    function addVectorAttribute(gl, program, location, dimension, obj, name, doLink) {
                        var constFuncArgs = ["gl", "v"]
                        var varNames = []
                        for (var i = 0; i < dimension; ++i) {
                            constFuncArgs.push("x" + i)
                            varNames.push("x" + i)
                        }
                        constFuncArgs.push(["if(x0.length===undefined){return gl.vertexAttrib", dimension, "f(v,", varNames.join(","), ")}else{return gl.vertexAttrib", dimension, "fv(v,x0)}"].join(""))
                        var constFunc = Function.apply(undefined, constFuncArgs)
                        var attr = new ShaderAttribute(gl, program, location, dimension, name, constFunc, doLink)
                        Object.defineProperty(obj, name, {
                            set: function (x) {
                                gl.disableVertexAttribArray(attr._location)
                                constFunc(gl, attr._location, x)
                                return x
                            },
                            get: function () {
                                return attr
                            },
                            enumerable: true
                        })
                    }

                    function createAttributeWrapper(gl, program, attributes, doLink) {
                        var obj = {}
                        for (var i = 0, n = attributes.length; i < n; ++i) {
                            var a = attributes[i]
                            var name = a.name
                            var type = a.type
                            var location = gl.getAttribLocation(program, name)
                            switch (type) {
                            case "bool":
                            case "int":
                            case "float":
                                addVectorAttribute(gl, program, location, 1, obj, name, doLink)
                                break
                            default:
                                if (type.indexOf("vec") >= 0) {
                                    var d = type.charCodeAt(type.length - 1) - 48
                                    if (d < 2 || d > 4) {
                                        throw new Error("Invalid data type for attribute " + name + ": " + type)
                                    }
                                    addVectorAttribute(gl, program, location, d, obj, name, doLink)
                                } else {
                                    throw new Error("Unknown data type for attribute " + name + ": " + type)
                                }
                                break
                            }
                        }
                        return obj
                    }
                }, {}
            ],
            175: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var dup = _dereq_("dup")
                    var coallesceUniforms = _dereq_("./reflect.js")
                    module.exports = createUniformWrapper

                    function identity(x) {
                        var c = new Function("y", "return function(){return y}")
                        return c(x)
                    }

                    function createUniformWrapper(gl, program, uniforms, locations) {
                        function makeGetter(index) {
                            var proc = new Function("gl", "prog", "locations", "return function(){return gl.getUniform(prog,locations[" + index + "])}")
                            return proc(gl, program, locations)
                        }

                        function makePropSetter(path, index, type) {
                            switch (type) {
                            case "bool":
                            case "int":
                            case "sampler2D":
                            case "samplerCube":
                                return "gl.uniform1i(locations[" + index + "],obj" + path + ")"
                            case "float":
                                return "gl.uniform1f(locations[" + index + "],obj" + path + ")"
                            default:
                                var vidx = type.indexOf("vec")
                                if (0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {
                                    var d = type.charCodeAt(type.length - 1) - 48
                                    if (d < 2 || d > 4) {
                                        throw new Error("Invalid data type")
                                    }
                                    switch (type.charAt(0)) {
                                    case "b":
                                    case "i":
                                        return "gl.uniform" + d + "iv(locations[" + index + "],obj" + path + ")"
                                    case "v":
                                        return "gl.uniform" + d + "fv(locations[" + index + "],obj" + path + ")"
                                    default:
                                        throw new Error("Unrecognized data type for vector " + name + ": " + type)
                                    }
                                } else if (type.indexOf("mat") === 0 && type.length === 4) {
                                    var d = type.charCodeAt(type.length - 1) - 48
                                    if (d < 2 || d > 4) {
                                        throw new Error("Invalid uniform dimension type for matrix " + name + ": " + type)
                                    }
                                    return "gl.uniformMatrix" + d + "fv(locations[" + index + "],false,obj" + path + ")"
                                } else {
                                    throw new Error("Unknown uniform data type for " + name + ": " + type)
                                }
                                break
                            }
                        }

                        function enumerateIndices(prefix, type) {
                            if (typeof type !== "object") {
                                return [
                                    [prefix, type]
                                ]
                            }
                            var indices = []
                            for (var id in type) {
                                var prop = type[id]
                                var tprefix = prefix
                                if (parseInt(id) + "" === id) {
                                    tprefix += "[" + id + "]"
                                } else {
                                    tprefix += "." + id
                                }
                                if (typeof prop === "object") {
                                    indices.push.apply(indices, enumerateIndices(tprefix, prop))
                                } else {
                                    indices.push([tprefix, prop])
                                }
                            }
                            return indices
                        }

                        function makeSetter(type) {
                            var code = ["return function updateProperty(obj){"]
                            var indices = enumerateIndices("", type)
                            for (var i = 0; i < indices.length; ++i) {
                                var item = indices[i]
                                var path = item[0]
                                var idx = item[1]
                                if (locations[idx]) {
                                    code.push(makePropSetter(path, idx, uniforms[idx].type))
                                }
                            }
                            code.push("return obj}")
                            var proc = new Function("gl", "prog", "locations", code.join("\n"))
                            return proc(gl, program, locations)
                        }

                        function defaultValue(type) {
                            switch (type) {
                            case "bool":
                                return false
                            case "int":
                            case "sampler2D":
                            case "samplerCube":
                                return 0
                            case "float":
                                return 0.0
                            default:
                                var vidx = type.indexOf("vec")
                                if (0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {
                                    var d = type.charCodeAt(type.length - 1) - 48
                                    if (d < 2 || d > 4) {
                                        throw new Error("Invalid data type")
                                    }
                                    if (type.charAt(0) === "b") {
                                        return dup(d, false)
                                    }
                                    return dup(d)
                                } else if (type.indexOf("mat") === 0 && type.length === 4) {
                                    var d = type.charCodeAt(type.length - 1) - 48
                                    if (d < 2 || d > 4) {
                                        throw new Error("Invalid uniform dimension type for matrix " + name + ": " + type)
                                    }
                                    return dup([d, d])
                                } else {
                                    throw new Error("Unknown uniform data type for " + name + ": " + type)
                                }
                                break
                            }
                        }

                        function storeProperty(obj, prop, type) {
                            if (typeof type === "object") {
                                var child = processObject(type)
                                Object.defineProperty(obj, prop, {
                                    get: identity(child),
                                    set: makeSetter(type),
                                    enumerable: true,
                                    configurable: false
                                })
                            } else {
                                if (locations[type]) {
                                    Object.defineProperty(obj, prop, {
                                        get: makeGetter(type),
                                        set: makeSetter(type),
                                        enumerable: true,
                                        configurable: false
                                    })
                                } else {
                                    obj[prop] = defaultValue(uniforms[type].type)
                                }
                            }
                        }

                        function processObject(obj) {
                            var result
                            if (Array.isArray(obj)) {
                                result = new Array(obj.length)
                                for (var i = 0; i < obj.length; ++i) {
                                    storeProperty(result, i, obj[i])
                                }
                            } else {
                                result = {}
                                for (var id in obj) {
                                    storeProperty(result, id, obj[id])
                                }
                            }
                            return result
                        }
                        var coallesced = coallesceUniforms(uniforms, true)
                        return {
                            get: identity(processObject(coallesced)),
                            set: makeSetter(coallesced),
                            enumerable: true,
                            configurable: true
                        }
                    }
                }, {
                    "./reflect.js": 176,
                    "dup": 177
                }
            ],
            176: [
                function (_dereq_, module, exports) {
                    "use strict"
                    module.exports = makeReflectTypes

                    function makeReflectTypes(uniforms, useIndex) {
                        var obj = {}
                        for (var i = 0; i < uniforms.length; ++i) {
                            var n = uniforms[i].name
                            var parts = n.split(".")
                            var o = obj
                            for (var j = 0; j < parts.length; ++j) {
                                var x = parts[j].split("[")
                                if (x.length > 1) {
                                    if (!(x[0] in o)) {
                                        o[x[0]] = []
                                    }
                                    o = o[x[0]]
                                    for (var k = 1; k < x.length; ++k) {
                                        var y = parseInt(x[k])
                                        if (k < x.length - 1 || j < parts.length - 1) {
                                            if (!(y in o)) {
                                                if (k < x.length - 1) {
                                                    o[y] = []
                                                } else {
                                                    o[y] = {}
                                                }
                                            }
                                            o = o[y]
                                        } else {
                                            if (useIndex) {
                                                o[y] = i
                                            } else {
                                                o[y] = uniforms[i].type
                                            }
                                        }
                                    }
                                } else if (j < parts.length - 1) {
                                    if (!(x[0] in o)) {
                                        o[x[0]] = {}
                                    }
                                    o = o[x[0]]
                                } else {
                                    if (useIndex) {
                                        o[x[0]] = i
                                    } else {
                                        o[x[0]] = uniforms[i].type
                                    }
                                }
                            }
                        }
                        return obj
                    }
                }, {}
            ],
            177: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(5)
                }, {}
            ],
            178: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var createUniformWrapper = _dereq_("./lib/create-uniforms.js")
                    var createAttributeWrapper = _dereq_("./lib/create-attributes.js")
                    var makeReflect = _dereq_("./lib/reflect.js")

                    function Shader(gl, prog, vertShader, fragShader) {
                        this.gl = gl
                        this.handle = prog
                        this.attributes = null
                        this.uniforms = null
                        this.types = null
                        this.vertexShader = vertShader
                        this.fragmentShader = fragShader
                    }
                    Shader.prototype.bind = function () {
                        this.gl.useProgram(this.handle)
                    }
                    Shader.prototype.dispose = function () {
                        var gl = this.gl
                        gl.deleteShader(this.vertexShader)
                        gl.deleteShader(this.fragmentShader)
                        gl.deleteProgram(this.handle)
                    }
                    Shader.prototype.updateExports = function (uniforms, attributes) {
                        var locations = new Array(uniforms.length)
                        var program = this.handle
                        var gl = this.gl
                        var doLink = relinkUniforms.bind(void 0, gl, program, locations, uniforms)
                        doLink()
                        this.types = {
                            uniforms: makeReflect(uniforms),
                            attributes: makeReflect(attributes)
                        }
                        this.attributes = createAttributeWrapper(gl, program, attributes, doLink)
                        Object.defineProperty(this, "uniforms", createUniformWrapper(gl, program, uniforms, locations))
                    }

                    function relinkUniforms(gl, program, locations, uniforms) {
                        for (var i = 0; i < uniforms.length; ++i) {
                            locations[i] = gl.getUniformLocation(program, uniforms[i].name)
                        }
                    }

                    function createShader(gl, vertSource, fragSource, uniforms, attributes) {
                        var vertShader = gl.createShader(gl.VERTEX_SHADER)
                        gl.shaderSource(vertShader, vertSource)
                        gl.compileShader(vertShader)
                        if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
                            throw new Error("Error compiling vertex shader: " + gl.getShaderInfoLog(vertShader))
                        }
                        var fragShader = gl.createShader(gl.FRAGMENT_SHADER)
                        gl.shaderSource(fragShader, fragSource)
                        gl.compileShader(fragShader)
                        if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
                            throw new Error("Error compiling fragment shader: " + gl.getShaderInfoLog(fragShader))
                        }
                        var program = gl.createProgram()
                        gl.attachShader(program, fragShader)
                        gl.attachShader(program, vertShader)
                        gl.linkProgram(program)
                        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                            throw new Error("Error linking shader program: " + gl.getProgramInfoLog(program))
                        }
                        var shader = new Shader(gl, program, vertShader, fragShader)
                        shader.updateExports(uniforms, attributes)
                        return shader
                    }
                    module.exports = createShader
                }, {
                    "./lib/create-attributes.js": 174,
                    "./lib/create-uniforms.js": 175,
                    "./lib/reflect.js": 176
                }
            ],
            179: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var fill = _dereq_("cwise")({
                        args: ["index", "array", "scalar"],
                        body: function (idx, out, f) {
                            out = f.apply(undefined, idx)
                        }
                    })
                    module.exports = function (array, f) {
                        fill(array, f)
                        return array
                    }
                }, {
                    "cwise": 180
                }
            ],
            180: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var parse = _dereq_("cwise-parser")
                    var compile = _dereq_("cwise-compiler")
                    var REQUIRED_FIELDS = ["args", "body"]
                    var OPTIONAL_FIELDS = ["pre", "post", "printCode", "funcName", "blockSize"]

                    function createCWise(user_args) {
                        for (var id in user_args) {
                            if (REQUIRED_FIELDS.indexOf(id) < 0 && OPTIONAL_FIELDS.indexOf(id) < 0) {
                                console.warn("cwise: Unknown argument '" + id + "' passed to expression compiler")
                            }
                        }
                        for (var i = 0; i < REQUIRED_FIELDS.length; ++i) {
                            if (!user_args[REQUIRED_FIELDS[i]]) {
                                throw new Error("cwise: Missing argument: " + REQUIRED_FIELDS[i])
                            }
                        }
                        return compile({
                            args: user_args.args,
                            pre: parse(user_args.pre || function () {}),
                            body: parse(user_args.body),
                            post: parse(user_args.post || function () {}),
                            debug: !!user_args.printCode,
                            funcName: user_args.funcName || user_args.body.name || "cwise",
                            blockSize: user_args.blockSize || 64
                        })
                    }
                    module.exports = createCWise
                }, {
                    "cwise-compiler": 181,
                    "cwise-parser": 185
                }
            ],
            181: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var createThunk = _dereq_("./lib/thunk.js")

                    function Procedure() {
                        this.argTypes = []
                        this.shimArgs = []
                        this.arrayArgs = []
                        this.scalarArgs = []
                        this.indexArgs = []
                        this.shapeArgs = []
                        this.funcName = ""
                        this.pre = null
                        this.body = null
                        this.post = null
                        this.debug = false
                    }

                    function compileCwise(user_args) {
                        var proc = new Procedure()
                        proc.pre = user_args.pre
                        proc.body = user_args.body
                        proc.post = user_args.post
                        var proc_args = user_args.args.slice(0)
                        proc.argTypes = proc_args
                        for (var i = 0; i < proc_args.length; ++i) {
                            switch (proc_args[i]) {
                            case "array":
                                proc.arrayArgs.push(i)
                                proc.shimArgs.push("array" + i)
                                if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
                                    throw new Error("cwise: pre() block may not reference array args")
                                }
                                if (i < proc.post.args.length && proc.post.args[i].count > 0) {
                                    throw new Error("cwise: post() block may not reference array args")
                                }
                                break
                            case "scalar":
                                proc.scalarArgs.push(i)
                                proc.shimArgs.push("scalar" + i)
                                break
                            case "index":
                                proc.indexArgs.push(i)
                                if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
                                    throw new Error("cwise: pre() block may not reference array index")
                                }
                                if (i < proc.body.args.length && proc.body.args[i].lvalue) {
                                    throw new Error("cwise: body() block may not write to array index")
                                }
                                if (i < proc.post.args.length && proc.post.args[i].count > 0) {
                                    throw new Error("cwise: post() block may not reference array index")
                                }
                                break
                            case "shape":
                                proc.shapeArgs.push(i)
                                if (i < proc.pre.args.length && proc.pre.args[i].lvalue) {
                                    throw new Error("cwise: pre() block may not write to array shape")
                                }
                                if (i < proc.body.args.length && proc.body.args[i].lvalue) {
                                    throw new Error("cwise: body() block may not write to array shape")
                                }
                                if (i < proc.post.args.length && proc.post.args[i].lvalue) {
                                    throw new Error("cwise: post() block may not write to array shape")
                                }
                                break
                            default:
                                throw new Error("cwise: Unknown argument type " + proc_args[i])
                            }
                        }
                        if (proc.arrayArgs.length <= 0) {
                            throw new Error("cwise: No array arguments specified")
                        }
                        if (proc.pre.args.length > proc_args.length) {
                            throw new Error("cwise: Too many arguments in pre() block")
                        }
                        if (proc.body.args.length > proc_args.length) {
                            throw new Error("cwise: Too many arguments in body() block")
                        }
                        if (proc.post.args.length > proc_args.length) {
                            throw new Error("cwise: Too many arguments in post() block")
                        }
                        proc.debug = !!user_args.printCode || !!user_args.debug
                        proc.funcName = user_args.funcName || "cwise"
                        proc.blockSize = user_args.blockSize || 64
                        return createThunk(proc)
                    }
                    module.exports = compileCwise
                }, {
                    "./lib/thunk.js": 183
                }
            ],
            182: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var uniq = _dereq_("uniq")

                    function innerFill(order, proc, body) {
                        var dimension = order.length,
                            nargs = proc.arrayArgs.length,
                            has_index = proc.indexArgs.length > 0,
                            code = [],
                            vars = [],
                            idx = 0,
                            pidx = 0,
                            i, j
                        for (i = 0; i < dimension; ++i) {
                            vars.push(["i", i, "=0"].join(""))
                        }
                        for (j = 0; j < nargs; ++j) {
                            for (i = 0; i < dimension; ++i) {
                                pidx = idx
                                idx = order[i]
                                if (i === 0) {
                                    vars.push(["d", j, "s", i, "=t", j, "[", idx, "]"].join(""))
                                } else {
                                    vars.push(["d", j, "s", i, "=(t", j, "[", idx, "]-s", pidx, "*t", j, "[", pidx, "])"].join(""))
                                }
                            }
                        }
                        code.push("var " + vars.join(","))
                        for (i = dimension - 1; i >= 0; --i) {
                            idx = order[i]
                            code.push(["for(i", i, "=0;i", i, "<s", idx, ";++i", i, "){"].join(""))
                        }
                        code.push(body)
                        for (i = 0; i < dimension; ++i) {
                            pidx = idx
                            idx = order[i]
                            for (j = 0; j < nargs; ++j) {
                                code.push(["p", j, "+=d", j, "s", i].join(""))
                            }
                            if (has_index) {
                                if (i > 0) {
                                    code.push(["index[", pidx, "]-=s", pidx].join(""))
                                }
                                code.push(["++index[", idx, "]"].join(""))
                            }
                            code.push("}")
                        }
                        return code.join("\n")
                    }

                    function outerFill(matched, order, proc, body) {
                        var dimension = order.length,
                            nargs = proc.arrayArgs.length,
                            blockSize = proc.blockSize,
                            has_index = proc.indexArgs.length > 0,
                            code = []
                        for (var i = 0; i < nargs; ++i) {
                            code.push(["var offset", i, "=p", i].join(""))
                        }
                        for (var i = matched; i < dimension; ++i) {
                            code.push(["for(var j" + i + "=SS[", order[i], "]|0;j", i, ">0;){"].join(""))
                            code.push(["if(j", i, "<", blockSize, "){"].join(""))
                            code.push(["s", order[i], "=j", i].join(""))
                            code.push(["j", i, "=0"].join(""))
                            code.push(["}else{s", order[i], "=", blockSize].join(""))
                            code.push(["j", i, "-=", blockSize, "}"].join(""))
                            if (has_index) {
                                code.push(["index[", order[i], "]=j", i].join(""))
                            }
                        }
                        for (var i = 0; i < nargs; ++i) {
                            var indexStr = ["offset" + i]
                            for (var j = matched; j < dimension; ++j) {
                                indexStr.push(["j", j, "*t", i, "[", order[j], "]"].join(""))
                            }
                            code.push(["p", i, "=(", indexStr.join("+"), ")"].join(""))
                        }
                        code.push(innerFill(order, proc, body))
                        for (var i = matched; i < dimension; ++i) {
                            code.push("}")
                        }
                        return code.join("\n")
                    }

                    function countMatches(orders) {
                        var matched = 0,
                            dimension = orders[0].length
                        while (matched < dimension) {
                            for (var j = 1; j < orders.length; ++j) {
                                if (orders[j][matched] !== orders[0][matched]) {
                                    return matched
                                }
                            }
                            ++matched
                        }
                        return matched
                    }

                    function processBlock(block, proc, dtypes) {
                        var code = block.body
                        var pre = []
                        var post = []
                        for (var i = 0; i < block.args.length; ++i) {
                            var carg = block.args[i]
                            if (carg.count <= 0) {
                                continue
                            }
                            var re = new RegExp(carg.name, "g")
                            switch (proc.argTypes[i]) {
                            case "array":
                                var arrNum = proc.arrayArgs.indexOf(i)
                                if (carg.count === 1) {
                                    if (dtypes[arrNum] === "generic") {
                                        if (carg.lvalue) {
                                            pre.push(["var l", arrNum, "=a", arrNum, ".get(p", arrNum, ")"].join(""))
                                            code = code.replace(re, "l" + arrNum)
                                            post.push(["a", arrNum, ".set(p", arrNum, ",l", arrNum, ")"].join(""))
                                        } else {
                                            code = code.replace(re, ["a", arrNum, ".get(p", arrNum, ")"].join(""))
                                        }
                                    } else {
                                        code = code.replace(re, ["a", arrNum, "[p", arrNum, "]"].join(""))
                                    }
                                } else if (dtypes[arrNum] === "generic") {
                                    pre.push(["var l", arrNum, "=a", arrNum, ".get(p", arrNum, ")"].join(""))
                                    code = code.replace(re, "l" + arrNum)
                                    if (carg.lvalue) {
                                        post.push(["a", arrNum, ".set(p", arrNum, ",l", arrNum, ")"].join(""))
                                    }
                                } else {
                                    pre.push(["var l", arrNum, "=a", arrNum, "[p", arrNum, "]"].join(""))
                                    code = code.replace(re, "l" + arrNum)
                                    if (carg.lvalue) {
                                        post.push(["a", arrNum, "[p", arrNum, "]=l", arrNum].join(""))
                                    }
                                }
                                break
                            case "scalar":
                                code = code.replace(re, "Y" + proc.scalarArgs.indexOf(i))
                                break
                            case "index":
                                code = code.replace(re, "index")
                                break
                            case "shape":
                                code = code.replace(re, "shape")
                                break
                            }
                        }
                        return [pre.join("\n"), code, post.join("\n")].join("\n").trim()
                    }

                    function typeSummary(dtypes) {
                        var summary = new Array(dtypes.length)
                        var allEqual = true
                        for (var i = 0; i < dtypes.length; ++i) {
                            var t = dtypes[i]
                            var digits = t.match(/\d+/)
                            if (!digits) {
                                digits = ""
                            } else {
                                digits = digits[0]
                            }
                            if (t.charAt(0) === 0) {
                                summary[i] = "u" + t.charAt(1) + digits
                            } else {
                                summary[i] = t.charAt(0) + digits
                            }
                            if (i > 0) {
                                allEqual = allEqual && summary[i] === summary[i - 1]
                            }
                        }
                        if (allEqual) {
                            return summary[0]
                        }
                        return summary.join("")
                    }

                    function generateCWiseOp(proc, typesig) {
                        var dimension = typesig[1].length | 0
                        var orders = new Array(proc.arrayArgs.length)
                        var dtypes = new Array(proc.arrayArgs.length)
                        var arglist = ["SS"]
                        var code = ["'use strict'"]
                        var vars = []
                        for (var j = 0; j < dimension; ++j) {
                            vars.push(["s", j, "=SS[", j, "]"].join(""))
                        }
                        for (var i = 0; i < proc.arrayArgs.length; ++i) {
                            arglist.push("a" + i)
                            arglist.push("t" + i)
                            arglist.push("p" + i)
                            dtypes[i] = typesig[2 * i]
                            orders[i] = typesig[2 * i + 1]
                        }
                        for (var i = 0; i < proc.scalarArgs.length; ++i) {
                            arglist.push("Y" + i)
                        }
                        if (proc.shapeArgs.length > 0) {
                            vars.push("shape=SS.slice(0)")
                        }
                        if (proc.indexArgs.length > 0) {
                            var zeros = new Array(dimension)
                            for (var i = 0; i < dimension; ++i) {
                                zeros[i] = "0"
                            }
                            vars.push(["index=[", zeros.join(","), "]"].join(""))
                        }
                        var thisVars = uniq([].concat(proc.pre.thisVars).concat(proc.body.thisVars).concat(proc.post.thisVars))
                        vars = vars.concat(thisVars)
                        code.push("var " + vars.join(","))
                        for (var i = 0; i < proc.arrayArgs.length; ++i) {
                            code.push("p" + i + "|=0")
                        }
                        if (proc.pre.body.length > 3) {
                            code.push(processBlock(proc.pre, proc, dtypes))
                        }
                        var body = processBlock(proc.body, proc, dtypes)
                        var matched = countMatches(orders)
                        if (matched < dimension) {
                            code.push(outerFill(matched, orders[0], proc, body))
                        } else {
                            code.push(innerFill(orders[0], proc, body))
                        }
                        if (proc.post.body.length > 3) {
                            code.push(processBlock(proc.post, proc, dtypes))
                        }
                        if (proc.debug) {
                            console.log("Generated cwise routine for ", typesig, ":\n\n", code.join("\n"))
                        }
                        var loopName = [(proc.funcName || "unnamed"), "_cwise_loop_", orders[0].join("s"), "m", matched, typeSummary(dtypes)].join("")
                        var f = new Function(["function ", loopName, "(", arglist.join(","), "){", code.join("\n"), "} return ", loopName].join(""))
                        return f()
                    }
                    module.exports = generateCWiseOp
                }, {
                    "uniq": 184
                }
            ],
            183: [
                function (_dereq_, module, exports) {
                    arguments[4][67][0].apply(exports, arguments)
                }, {
                    "./compile.js": 182
                }
            ],
            184: [
                function (_dereq_, module, exports) {
                    "use strict"

                    function unique_pred(list, compare) {
                        var ptr = 1,
                            len = list.length,
                            a = list[0],
                            b = list[0]
                        for (var i = 1; i < len; ++i) {
                            b = a
                            a = list[i]
                            if (compare(a, b)) {
                                if (i === ptr) {
                                    ptr++
                                    continue
                                }
                                list[ptr++] = a
                            }
                        }
                        list.length = ptr
                        return list
                    }

                    function unique_eq(list) {
                        var ptr = 1,
                            len = list.length,
                            a = list[0],
                            b = list[0]
                        for (var i = 1; i < len; ++i, b = a) {
                            b = a
                            a = list[i]
                            if (a !== b) {
                                if (i === ptr) {
                                    ptr++
                                    continue
                                }
                                list[ptr++] = a
                            }
                        }
                        list.length = ptr
                        return list
                    }

                    function unique(list, compare, sorted) {
                        if (list.length === 0) {
                            return []
                        }
                        if (compare) {
                            if (!sorted) {
                                list.sort(compare)
                            }
                            return unique_pred(list, compare)
                        }
                        if (!sorted) {
                            list.sort()
                        }
                        return unique_eq(list)
                    }
                    module.exports = unique
                }, {}
            ],
            185: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var esprima = _dereq_("esprima")
                    var uniq = _dereq_("uniq")
                    var PREFIX_COUNTER = 0

                    function CompiledArgument(name, lvalue, rvalue) {
                        this.name = name
                        this.lvalue = lvalue
                        this.rvalue = rvalue
                        this.count = 0
                    }

                    function CompiledRoutine(body, args, thisVars, localVars) {
                        this.body = body
                        this.args = args
                        this.thisVars = thisVars
                        this.localVars = localVars
                    }

                    function isGlobal(identifier) {
                        if (identifier === "eval") {
                            throw new Error("cwise-parser: eval() not allowed")
                        }
                        if (typeof window !== "undefined") {
                            return identifier in window
                        } else if (typeof GLOBAL !== "undefined") {
                            return identifier in GLOBAL
                        } else if (typeof self !== "undefined") {
                            return identifier in self
                        } else {
                            return false
                        }
                    }

                    function getArgNames(ast) {
                        var params = ast.body[0].expression.callee.params
                        var names = new Array(params.length)
                        for (var i = 0; i < params.length; ++i) {
                            names[i] = params[i].name
                        }
                        return names
                    }

                    function preprocess(func) {
                        var src = ["(", func, ")()"].join("")
                        var ast = esprima.parse(src, {
                            range: true
                        })
                        var prefix = "_inline_" + (PREFIX_COUNTER++) + "_"
                        var argNames = getArgNames(ast)
                        var compiledArgs = new Array(argNames.length)
                        for (var i = 0; i < argNames.length; ++i) {
                            compiledArgs[i] = new CompiledArgument([prefix, "arg", i, "_"].join(""), false, false)
                        }
                        var exploded = new Array(src.length)
                        for (var i = 0, n = src.length; i < n; ++i) {
                            exploded[i] = src.charAt(i)
                        }
                        var localVars = []
                        var thisVars = []
                        var computedThis = false

                        function createLocal(id) {
                            var nstr = prefix + id.replace(/\_/g, "__")
                            localVars.push(nstr)
                            return nstr
                        }

                        function createThisVar(id) {
                            var nstr = "this_" + id.replace(/\_/g, "__")
                            thisVars.push(nstr)
                            return nstr
                        }

                        function rewrite(node, nstr) {
                            var lo = node.range[0],
                                hi = node.range[1]
                            for (var i = lo + 1; i < hi; ++i) {
                                exploded[i] = ""
                            }
                            exploded[lo] = nstr
                        }

                        function escapeString(str) {
                            return "'" + (str.replace(/\_/g, "\\_").replace(/\'/g, "\'")) + "'"
                        }

                        function source(node) {
                            return exploded.slice(node.range[0], node.range[1]).join("")
                        }
                        var LVALUE = 1
                        var RVALUE = 2

                        function getUsage(node) {
                                if (node.parent.type === "AssignmentExpression") {
                                    if (node.parent.left === node) {
                                        if (node.parent.operator === "=") {
                                            return LVALUE
                                        }
                                        return LVALUE | RVALUE
                                    }
                                }
                                if (node.parent.type === "UpdateExpression") {
                                    return LVALUE | RVALUE
                                }
                                return RVALUE
                            }
                            (function visit(node, parent) {
                                node.parent = parent
                                if (node.type === "MemberExpression") {
                                    if (node.computed) {
                                        visit(node.object, node)
                                        visit(node.property, node)
                                    } else if (node.object.type === "ThisExpression") {
                                        rewrite(node, createThisVar(node.property.name))
                                    } else {
                                        visit(node.object, node)
                                    }
                                } else if (node.type === "ThisExpression") {
                                    throw new Error("cwise-parser: Computed this is not allowed")
                                } else if (node.type === "Identifier") {
                                    var name = node.name
                                    var argNo = argNames.indexOf(name)
                                    if (argNo >= 0) {
                                        var carg = compiledArgs[argNo]
                                        var usage = getUsage(node)
                                        if (usage & LVALUE) {
                                            carg.lvalue = true
                                        }
                                        if (usage & RVALUE) {
                                            carg.rvalue = true
                                        }
                                        ++carg.count
                                        rewrite(node, carg.name)
                                    } else if (isGlobal(name)) {} else {
                                        rewrite(node, createLocal(name))
                                    }
                                } else if (node.type === "Literal") {
                                    if (typeof node.value === "string") {
                                        rewrite(node, escapeString(node.value))
                                    }
                                } else if (node.type === "WithStatement") {
                                    throw new Error("cwise-parser: with() statements not allowed")
                                } else {
                                    var keys = Object.keys(node)
                                    for (var i = 0, n = keys.length; i < n; ++i) {
                                        if (keys[i] === "parent") {
                                            continue
                                        }
                                        var value = node[keys[i]]
                                        if (value) {
                                            if (value instanceof Array) {
                                                for (var j = 0; j < value.length; ++j) {
                                                    if (value[j] && typeof value[j].type === "string") {
                                                        visit(value[j], node)
                                                    }
                                                }
                                            } else if (typeof value.type === "string") {
                                                visit(value, node)
                                            }
                                        }
                                    }
                                }
                            })(ast.body[0].expression.callee.body, undefined)
                        uniq(localVars)
                        uniq(thisVars)
                        var routine = new CompiledRoutine(source(ast.body[0].expression.callee.body), compiledArgs, thisVars, localVars)
                        return routine
                    }
                    module.exports = preprocess
                }, {
                    "esprima": 186,
                    "uniq": 187
                }
            ],
            186: [
                function (_dereq_, module, exports) {
                    (function (root, factory) {
                        'use strict';
                        if (typeof define === 'function' && define.amd) {
                            define(['exports'], factory);
                        } else if (typeof exports !== 'undefined') {
                            factory(exports);
                        } else {
                            factory((root.esprima = {}));
                        }
                    }(this, function (exports) {
                        'use strict';
                        var Token, TokenName, Syntax, PropertyKind, Messages, Regex, source, strict, index, lineNumber, lineStart, length, buffer, state, extra;
                        Token = {
                            BooleanLiteral: 1,
                            EOF: 2,
                            Identifier: 3,
                            Keyword: 4,
                            NullLiteral: 5,
                            NumericLiteral: 6,
                            Punctuator: 7,
                            StringLiteral: 8
                        };
                        TokenName = {};
                        TokenName[Token.BooleanLiteral] = 'Boolean';
                        TokenName[Token.EOF] = '<end>';
                        TokenName[Token.Identifier] = 'Identifier';
                        TokenName[Token.Keyword] = 'Keyword';
                        TokenName[Token.NullLiteral] = 'Null';
                        TokenName[Token.NumericLiteral] = 'Numeric';
                        TokenName[Token.Punctuator] = 'Punctuator';
                        TokenName[Token.StringLiteral] = 'String';
                        Syntax = {
                            AssignmentExpression: 'AssignmentExpression',
                            ArrayExpression: 'ArrayExpression',
                            BlockStatement: 'BlockStatement',
                            BinaryExpression: 'BinaryExpression',
                            BreakStatement: 'BreakStatement',
                            CallExpression: 'CallExpression',
                            CatchClause: 'CatchClause',
                            ConditionalExpression: 'ConditionalExpression',
                            ContinueStatement: 'ContinueStatement',
                            DoWhileStatement: 'DoWhileStatement',
                            DebuggerStatement: 'DebuggerStatement',
                            EmptyStatement: 'EmptyStatement',
                            ExpressionStatement: 'ExpressionStatement',
                            ForStatement: 'ForStatement',
                            ForInStatement: 'ForInStatement',
                            FunctionDeclaration: 'FunctionDeclaration',
                            FunctionExpression: 'FunctionExpression',
                            Identifier: 'Identifier',
                            IfStatement: 'IfStatement',
                            Literal: 'Literal',
                            LabeledStatement: 'LabeledStatement',
                            LogicalExpression: 'LogicalExpression',
                            MemberExpression: 'MemberExpression',
                            NewExpression: 'NewExpression',
                            ObjectExpression: 'ObjectExpression',
                            Program: 'Program',
                            Property: 'Property',
                            ReturnStatement: 'ReturnStatement',
                            SequenceExpression: 'SequenceExpression',
                            SwitchStatement: 'SwitchStatement',
                            SwitchCase: 'SwitchCase',
                            ThisExpression: 'ThisExpression',
                            ThrowStatement: 'ThrowStatement',
                            TryStatement: 'TryStatement',
                            UnaryExpression: 'UnaryExpression',
                            UpdateExpression: 'UpdateExpression',
                            VariableDeclaration: 'VariableDeclaration',
                            VariableDeclarator: 'VariableDeclarator',
                            WhileStatement: 'WhileStatement',
                            WithStatement: 'WithStatement'
                        };
                        PropertyKind = {
                            Data: 1,
                            Get: 2,
                            Set: 4
                        };
                        Messages = {
                            UnexpectedToken: 'Unexpected token %0',
                            UnexpectedNumber: 'Unexpected number',
                            UnexpectedString: 'Unexpected string',
                            UnexpectedIdentifier: 'Unexpected identifier',
                            UnexpectedReserved: 'Unexpected reserved word',
                            UnexpectedEOS: 'Unexpected end of input',
                            NewlineAfterThrow: 'Illegal newline after throw',
                            InvalidRegExp: 'Invalid regular expression',
                            UnterminatedRegExp: 'Invalid regular expression: missing /',
                            InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
                            InvalidLHSInForIn: 'Invalid left-hand side in for-in',
                            MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
                            NoCatchOrFinally: 'Missing catch or finally after try',
                            UnknownLabel: 'Undefined label \'%0\'',
                            Redeclaration: '%0 \'%1\' has already been declared',
                            IllegalContinue: 'Illegal continue statement',
                            IllegalBreak: 'Illegal break statement',
                            IllegalReturn: 'Illegal return statement',
                            StrictModeWith: 'Strict mode code may not include a with statement',
                            StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
                            StrictVarName: 'Variable name may not be eval or arguments in strict mode',
                            StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
                            StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
                            StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
                            StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
                            StrictDelete: 'Delete of an unqualified identifier in strict mode.',
                            StrictDuplicateProperty: 'Duplicate data property in object literal not allowed in strict mode',
                            AccessorDataProperty: 'Object literal may not have data and accessor property with the same name',
                            AccessorGetSet: 'Object literal may not have multiple get/set accessors with the same name',
                            StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
                            StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
                            StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
                            StrictReservedWord: 'Use of future reserved word in strict mode'
                        };
                        Regex = {
                            NonAsciiIdentifierStart: new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]'),
                            NonAsciiIdentifierPart: new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]')
                        };

                        function assert(condition, message) {
                            if (!condition) {
                                throw new Error('ASSERT: ' + message);
                            }
                        }

                        function sliceSource(from, to) {
                            return source.slice(from, to);
                        }
                        if (typeof 'esprima' [0] === 'undefined') {
                            sliceSource = function sliceArraySource(from, to) {
                                return source.slice(from, to).join('');
                            };
                        }

                        function isDecimalDigit(ch) {
                            return '0123456789'.indexOf(ch) >= 0;
                        }

                        function isHexDigit(ch) {
                            return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
                        }

                        function isOctalDigit(ch) {
                            return '01234567'.indexOf(ch) >= 0;
                        }

                        function isWhiteSpace(ch) {
                            return (ch === ' ') || (ch === '\u0009') || (ch === '\u000B') || (ch === '\u000C') || (ch === '\u00A0') || (ch.charCodeAt(0) >= 0x1680 && '\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF'.indexOf(ch) >= 0);
                        }

                        function isLineTerminator(ch) {
                            return (ch === '\n' || ch === '\r' || ch === '\u2028' || ch === '\u2029');
                        }

                        function isIdentifierStart(ch) {
                            return (ch === '$') || (ch === '_') || (ch === '\\') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));
                        }

                        function isIdentifierPart(ch) {
                            return (ch === '$') || (ch === '_') || (ch === '\\') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || ((ch >= '0') && (ch <= '9')) || ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));
                        }

                        function isFutureReservedWord(id) {
                            switch (id) {
                            case 'class':
                            case 'enum':
                            case 'export':
                            case 'extends':
                            case 'import':
                            case 'super':
                                return true;
                            }
                            return false;
                        }

                        function isStrictModeReservedWord(id) {
                            switch (id) {
                            case 'implements':
                            case 'interface':
                            case 'package':
                            case 'private':
                            case 'protected':
                            case 'public':
                            case 'static':
                            case 'yield':
                            case 'let':
                                return true;
                            }
                            return false;
                        }

                        function isRestrictedWord(id) {
                            return id === 'eval' || id === 'arguments';
                        }

                        function isKeyword(id) {
                            var keyword = false;
                            switch (id.length) {
                            case 2:
                                keyword = (id === 'if') || (id === 'in') || (id === 'do');
                                break;
                            case 3:
                                keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
                                break;
                            case 4:
                                keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');
                                break;
                            case 5:
                                keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');
                                break;
                            case 6:
                                keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');
                                break;
                            case 7:
                                keyword = (id === 'default') || (id === 'finally');
                                break;
                            case 8:
                                keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');
                                break;
                            case 10:
                                keyword = (id === 'instanceof');
                                break;
                            }
                            if (keyword) {
                                return true;
                            }
                            switch (id) {
                            case 'const':
                                return true;
                            case 'yield':
                            case 'let':
                                return true;
                            }
                            if (strict && isStrictModeReservedWord(id)) {
                                return true;
                            }
                            return isFutureReservedWord(id);
                        }

                        function skipComment() {
                            var ch, blockComment, lineComment;
                            blockComment = false;
                            lineComment = false;
                            while (index < length) {
                                ch = source[index];
                                if (lineComment) {
                                    ch = source[index++];
                                    if (isLineTerminator(ch)) {
                                        lineComment = false;
                                        if (ch === '\r' && source[index] === '\n') {
                                            ++index;
                                        }
                                        ++lineNumber;
                                        lineStart = index;
                                    }
                                } else if (blockComment) {
                                    if (isLineTerminator(ch)) {
                                        if (ch === '\r' && source[index + 1] === '\n') {
                                            ++index;
                                        }
                                        ++lineNumber;
                                        ++index;
                                        lineStart = index;
                                        if (index >= length) {
                                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                        }
                                    } else {
                                        ch = source[index++];
                                        if (index >= length) {
                                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                        }
                                        if (ch === '*') {
                                            ch = source[index];
                                            if (ch === '/') {
                                                ++index;
                                                blockComment = false;
                                            }
                                        }
                                    }
                                } else if (ch === '/') {
                                    ch = source[index + 1];
                                    if (ch === '/') {
                                        index += 2;
                                        lineComment = true;
                                    } else if (ch === '*') {
                                        index += 2;
                                        blockComment = true;
                                        if (index >= length) {
                                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                        }
                                    } else {
                                        break;
                                    }
                                } else if (isWhiteSpace(ch)) {
                                    ++index;
                                } else if (isLineTerminator(ch)) {
                                    ++index;
                                    if (ch === '\r' && source[index] === '\n') {
                                        ++index;
                                    }
                                    ++lineNumber;
                                    lineStart = index;
                                } else {
                                    break;
                                }
                            }
                        }

                        function scanHexEscape(prefix) {
                            var i, len, ch, code = 0;
                            len = (prefix === 'u') ? 4 : 2;
                            for (i = 0; i < len; ++i) {
                                if (index < length && isHexDigit(source[index])) {
                                    ch = source[index++];
                                    code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
                                } else {
                                    return '';
                                }
                            }
                            return String.fromCharCode(code);
                        }

                        function scanIdentifier() {
                            var ch, start, id, restore;
                            ch = source[index];
                            if (!isIdentifierStart(ch)) {
                                return;
                            }
                            start = index;
                            if (ch === '\\') {
                                ++index;
                                if (source[index] !== 'u') {
                                    return;
                                }
                                ++index;
                                restore = index;
                                ch = scanHexEscape('u');
                                if (ch) {
                                    if (ch === '\\' || !isIdentifierStart(ch)) {
                                        return;
                                    }
                                    id = ch;
                                } else {
                                    index = restore;
                                    id = 'u';
                                }
                            } else {
                                id = source[index++];
                            }
                            while (index < length) {
                                ch = source[index];
                                if (!isIdentifierPart(ch)) {
                                    break;
                                }
                                if (ch === '\\') {
                                    ++index;
                                    if (source[index] !== 'u') {
                                        return;
                                    }
                                    ++index;
                                    restore = index;
                                    ch = scanHexEscape('u');
                                    if (ch) {
                                        if (ch === '\\' || !isIdentifierPart(ch)) {
                                            return;
                                        }
                                        id += ch;
                                    } else {
                                        index = restore;
                                        id += 'u';
                                    }
                                } else {
                                    id += source[index++];
                                }
                            }
                            if (id.length === 1) {
                                return {
                                    type: Token.Identifier,
                                    value: id,
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            if (isKeyword(id)) {
                                return {
                                    type: Token.Keyword,
                                    value: id,
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            if (id === 'null') {
                                return {
                                    type: Token.NullLiteral,
                                    value: id,
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            if (id === 'true' || id === 'false') {
                                return {
                                    type: Token.BooleanLiteral,
                                    value: id,
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            return {
                                type: Token.Identifier,
                                value: id,
                                lineNumber: lineNumber,
                                lineStart: lineStart,
                                range: [start, index]
                            };
                        }

                        function scanPunctuator() {
                            var start = index,
                                ch1 = source[index],
                                ch2, ch3, ch4;
                            if (ch1 === ';' || ch1 === '{' || ch1 === '}') {
                                ++index;
                                return {
                                    type: Token.Punctuator,
                                    value: ch1,
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            if (ch1 === ',' || ch1 === '(' || ch1 === ')') {
                                ++index;
                                return {
                                    type: Token.Punctuator,
                                    value: ch1,
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            ch2 = source[index + 1];
                            if (ch1 === '.' && !isDecimalDigit(ch2)) {
                                return {
                                    type: Token.Punctuator,
                                    value: source[index++],
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            ch3 = source[index + 2];
                            ch4 = source[index + 3];
                            if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
                                if (ch4 === '=') {
                                    index += 4;
                                    return {
                                        type: Token.Punctuator,
                                        value: '>>>=',
                                        lineNumber: lineNumber,
                                        lineStart: lineStart,
                                        range: [start, index]
                                    };
                                }
                            }
                            if (ch1 === '=' && ch2 === '=' && ch3 === '=') {
                                index += 3;
                                return {
                                    type: Token.Punctuator,
                                    value: '===',
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            if (ch1 === '!' && ch2 === '=' && ch3 === '=') {
                                index += 3;
                                return {
                                    type: Token.Punctuator,
                                    value: '!==',
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
                                index += 3;
                                return {
                                    type: Token.Punctuator,
                                    value: '>>>',
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            if (ch1 === '<' && ch2 === '<' && ch3 === '=') {
                                index += 3;
                                return {
                                    type: Token.Punctuator,
                                    value: '<<=',
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            if (ch1 === '>' && ch2 === '>' && ch3 === '=') {
                                index += 3;
                                return {
                                    type: Token.Punctuator,
                                    value: '>>=',
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                            if (ch2 === '=') {
                                if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
                                    index += 2;
                                    return {
                                        type: Token.Punctuator,
                                        value: ch1 + ch2,
                                        lineNumber: lineNumber,
                                        lineStart: lineStart,
                                        range: [start, index]
                                    };
                                }
                            }
                            if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {
                                if ('+-<>&|'.indexOf(ch2) >= 0) {
                                    index += 2;
                                    return {
                                        type: Token.Punctuator,
                                        value: ch1 + ch2,
                                        lineNumber: lineNumber,
                                        lineStart: lineStart,
                                        range: [start, index]
                                    };
                                }
                            }
                            if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {
                                return {
                                    type: Token.Punctuator,
                                    value: source[index++],
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [start, index]
                                };
                            }
                        }

                        function scanNumericLiteral() {
                            var number, start, ch;
                            ch = source[index];
                            assert(isDecimalDigit(ch) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
                            start = index;
                            number = '';
                            if (ch !== '.') {
                                number = source[index++];
                                ch = source[index];
                                if (number === '0') {
                                    if (ch === 'x' || ch === 'X') {
                                        number += source[index++];
                                        while (index < length) {
                                            ch = source[index];
                                            if (!isHexDigit(ch)) {
                                                break;
                                            }
                                            number += source[index++];
                                        }
                                        if (number.length <= 2) {
                                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                        }
                                        if (index < length) {
                                            ch = source[index];
                                            if (isIdentifierStart(ch)) {
                                                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                            }
                                        }
                                        return {
                                            type: Token.NumericLiteral,
                                            value: parseInt(number, 16),
                                            lineNumber: lineNumber,
                                            lineStart: lineStart,
                                            range: [start, index]
                                        };
                                    } else if (isOctalDigit(ch)) {
                                        number += source[index++];
                                        while (index < length) {
                                            ch = source[index];
                                            if (!isOctalDigit(ch)) {
                                                break;
                                            }
                                            number += source[index++];
                                        }
                                        if (index < length) {
                                            ch = source[index];
                                            if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
                                                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                            }
                                        }
                                        return {
                                            type: Token.NumericLiteral,
                                            value: parseInt(number, 8),
                                            octal: true,
                                            lineNumber: lineNumber,
                                            lineStart: lineStart,
                                            range: [start, index]
                                        };
                                    }
                                    if (isDecimalDigit(ch)) {
                                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                    }
                                }
                                while (index < length) {
                                    ch = source[index];
                                    if (!isDecimalDigit(ch)) {
                                        break;
                                    }
                                    number += source[index++];
                                }
                            }
                            if (ch === '.') {
                                number += source[index++];
                                while (index < length) {
                                    ch = source[index];
                                    if (!isDecimalDigit(ch)) {
                                        break;
                                    }
                                    number += source[index++];
                                }
                            }
                            if (ch === 'e' || ch === 'E') {
                                number += source[index++];
                                ch = source[index];
                                if (ch === '+' || ch === '-') {
                                    number += source[index++];
                                }
                                ch = source[index];
                                if (isDecimalDigit(ch)) {
                                    number += source[index++];
                                    while (index < length) {
                                        ch = source[index];
                                        if (!isDecimalDigit(ch)) {
                                            break;
                                        }
                                        number += source[index++];
                                    }
                                } else {
                                    ch = 'character ' + ch;
                                    if (index >= length) {
                                        ch = '<end>';
                                    }
                                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                }
                            }
                            if (index < length) {
                                ch = source[index];
                                if (isIdentifierStart(ch)) {
                                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                }
                            }
                            return {
                                type: Token.NumericLiteral,
                                value: parseFloat(number),
                                lineNumber: lineNumber,
                                lineStart: lineStart,
                                range: [start, index]
                            };
                        }

                        function scanStringLiteral() {
                            var str = '',
                                quote, start, ch, code, unescaped, restore, octal = false;
                            quote = source[index];
                            assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
                            start = index;
                            ++index;
                            while (index < length) {
                                ch = source[index++];
                                if (ch === quote) {
                                    quote = '';
                                    break;
                                } else if (ch === '\\') {
                                    ch = source[index++];
                                    if (!isLineTerminator(ch)) {
                                        switch (ch) {
                                        case 'n':
                                            str += '\n';
                                            break;
                                        case 'r':
                                            str += '\r';
                                            break;
                                        case 't':
                                            str += '\t';
                                            break;
                                        case 'u':
                                        case 'x':
                                            restore = index;
                                            unescaped = scanHexEscape(ch);
                                            if (unescaped) {
                                                str += unescaped;
                                            } else {
                                                index = restore;
                                                str += ch;
                                            }
                                            break;
                                        case 'b':
                                            str += '\b';
                                            break;
                                        case 'f':
                                            str += '\f';
                                            break;
                                        case 'v':
                                            str += '\x0B';
                                            break;
                                        default:
                                            if (isOctalDigit(ch)) {
                                                code = '01234567'.indexOf(ch);
                                                if (code !== 0) {
                                                    octal = true;
                                                }
                                                if (index < length && isOctalDigit(source[index])) {
                                                    octal = true;
                                                    code = code * 8 + '01234567'.indexOf(source[index++]);
                                                    if ('0123'.indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {
                                                        code = code * 8 + '01234567'.indexOf(source[index++]);
                                                    }
                                                }
                                                str += String.fromCharCode(code);
                                            } else {
                                                str += ch;
                                            }
                                            break;
                                        }
                                    } else {
                                        ++lineNumber;
                                        if (ch === '\r' && source[index] === '\n') {
                                            ++index;
                                        }
                                    }
                                } else if (isLineTerminator(ch)) {
                                    break;
                                } else {
                                    str += ch;
                                }
                            }
                            if (quote !== '') {
                                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                            }
                            return {
                                type: Token.StringLiteral,
                                value: str,
                                octal: octal,
                                lineNumber: lineNumber,
                                lineStart: lineStart,
                                range: [start, index]
                            };
                        }

                        function scanRegExp() {
                            var str, ch, start, pattern, flags, value, classMarker = false,
                                restore, terminated = false;
                            buffer = null;
                            skipComment();
                            start = index;
                            ch = source[index];
                            assert(ch === '/', 'Regular expression literal must start with a slash');
                            str = source[index++];
                            while (index < length) {
                                ch = source[index++];
                                str += ch;
                                if (ch === '\\') {
                                    ch = source[index++];
                                    if (isLineTerminator(ch)) {
                                        throwError({}, Messages.UnterminatedRegExp);
                                    }
                                    str += ch;
                                } else if (classMarker) {
                                    if (ch === ']') {
                                        classMarker = false;
                                    }
                                } else {
                                    if (ch === '/') {
                                        terminated = true;
                                        break;
                                    } else if (ch === '[') {
                                        classMarker = true;
                                    } else if (isLineTerminator(ch)) {
                                        throwError({}, Messages.UnterminatedRegExp);
                                    }
                                }
                            }
                            if (!terminated) {
                                throwError({}, Messages.UnterminatedRegExp);
                            }
                            pattern = str.substr(1, str.length - 2);
                            flags = '';
                            while (index < length) {
                                ch = source[index];
                                if (!isIdentifierPart(ch)) {
                                    break;
                                }
                                ++index;
                                if (ch === '\\' && index < length) {
                                    ch = source[index];
                                    if (ch === 'u') {
                                        ++index;
                                        restore = index;
                                        ch = scanHexEscape('u');
                                        if (ch) {
                                            flags += ch;
                                            str += '\\u';
                                            for (; restore < index; ++restore) {
                                                str += source[restore];
                                            }
                                        } else {
                                            index = restore;
                                            flags += 'u';
                                            str += '\\u';
                                        }
                                    } else {
                                        str += '\\';
                                    }
                                } else {
                                    flags += ch;
                                    str += ch;
                                }
                            }
                            try {
                                value = new RegExp(pattern, flags);
                            } catch (e) {
                                throwError({}, Messages.InvalidRegExp);
                            }
                            return {
                                literal: str,
                                value: value,
                                range: [start, index]
                            };
                        }

                        function isIdentifierName(token) {
                            return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
                        }

                        function advance() {
                            var ch, token;
                            skipComment();
                            if (index >= length) {
                                return {
                                    type: Token.EOF,
                                    lineNumber: lineNumber,
                                    lineStart: lineStart,
                                    range: [index, index]
                                };
                            }
                            token = scanPunctuator();
                            if (typeof token !== 'undefined') {
                                return token;
                            }
                            ch = source[index];
                            if (ch === '\'' || ch === '"') {
                                return scanStringLiteral();
                            }
                            if (ch === '.' || isDecimalDigit(ch)) {
                                return scanNumericLiteral();
                            }
                            token = scanIdentifier();
                            if (typeof token !== 'undefined') {
                                return token;
                            }
                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                        }

                        function lex() {
                            var token;
                            if (buffer) {
                                index = buffer.range[1];
                                lineNumber = buffer.lineNumber;
                                lineStart = buffer.lineStart;
                                token = buffer;
                                buffer = null;
                                return token;
                            }
                            buffer = null;
                            return advance();
                        }

                        function lookahead() {
                            var pos, line, start;
                            if (buffer !== null) {
                                return buffer;
                            }
                            pos = index;
                            line = lineNumber;
                            start = lineStart;
                            buffer = advance();
                            index = pos;
                            lineNumber = line;
                            lineStart = start;
                            return buffer;
                        }

                        function peekLineTerminator() {
                            var pos, line, start, found;
                            pos = index;
                            line = lineNumber;
                            start = lineStart;
                            skipComment();
                            found = lineNumber !== line;
                            index = pos;
                            lineNumber = line;
                            lineStart = start;
                            return found;
                        }

                        function throwError(token, messageFormat) {
                            var error, args = Array.prototype.slice.call(arguments, 2),
                                msg = messageFormat.replace(/%(\d)/g, function (whole, index) {
                                    return args[index] || '';
                                });
                            if (typeof token.lineNumber === 'number') {
                                error = new Error('Line ' + token.lineNumber + ': ' + msg);
                                error.index = token.range[0];
                                error.lineNumber = token.lineNumber;
                                error.column = token.range[0] - lineStart + 1;
                            } else {
                                error = new Error('Line ' + lineNumber + ': ' + msg);
                                error.index = index;
                                error.lineNumber = lineNumber;
                                error.column = index - lineStart + 1;
                            }
                            throw error;
                        }

                        function throwErrorTolerant() {
                            try {
                                throwError.apply(null, arguments);
                            } catch (e) {
                                if (extra.errors) {
                                    extra.errors.push(e);
                                } else {
                                    throw e;
                                }
                            }
                        }

                        function throwUnexpected(token) {
                            if (token.type === Token.EOF) {
                                throwError(token, Messages.UnexpectedEOS);
                            }
                            if (token.type === Token.NumericLiteral) {
                                throwError(token, Messages.UnexpectedNumber);
                            }
                            if (token.type === Token.StringLiteral) {
                                throwError(token, Messages.UnexpectedString);
                            }
                            if (token.type === Token.Identifier) {
                                throwError(token, Messages.UnexpectedIdentifier);
                            }
                            if (token.type === Token.Keyword) {
                                if (isFutureReservedWord(token.value)) {
                                    throwError(token, Messages.UnexpectedReserved);
                                } else if (strict && isStrictModeReservedWord(token.value)) {
                                    throwErrorTolerant(token, Messages.StrictReservedWord);
                                    return;
                                }
                                throwError(token, Messages.UnexpectedToken, token.value);
                            }
                            throwError(token, Messages.UnexpectedToken, token.value);
                        }

                        function expect(value) {
                            var token = lex();
                            if (token.type !== Token.Punctuator || token.value !== value) {
                                throwUnexpected(token);
                            }
                        }

                        function expectKeyword(keyword) {
                            var token = lex();
                            if (token.type !== Token.Keyword || token.value !== keyword) {
                                throwUnexpected(token);
                            }
                        }

                        function match(value) {
                            var token = lookahead();
                            return token.type === Token.Punctuator && token.value === value;
                        }

                        function matchKeyword(keyword) {
                            var token = lookahead();
                            return token.type === Token.Keyword && token.value === keyword;
                        }

                        function matchAssign() {
                            var token = lookahead(),
                                op = token.value;
                            if (token.type !== Token.Punctuator) {
                                return false;
                            }
                            return op === '=' || op === '*=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';
                        }

                        function consumeSemicolon() {
                            var token, line;
                            if (source[index] === ';') {
                                lex();
                                return;
                            }
                            line = lineNumber;
                            skipComment();
                            if (lineNumber !== line) {
                                return;
                            }
                            if (match(';')) {
                                lex();
                                return;
                            }
                            token = lookahead();
                            if (token.type !== Token.EOF && !match('}')) {
                                throwUnexpected(token);
                            }
                        }

                        function isLeftHandSide(expr) {
                            return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
                        }

                        function parseArrayInitialiser() {
                            var elements = [];
                            expect('[');
                            while (!match(']')) {
                                if (match(',')) {
                                    lex();
                                    elements.push(null);
                                } else {
                                    elements.push(parseAssignmentExpression());
                                    if (!match(']')) {
                                        expect(',');
                                    }
                                }
                            }
                            expect(']');
                            return {
                                type: Syntax.ArrayExpression,
                                elements: elements
                            };
                        }

                        function parsePropertyFunction(param, first) {
                            var previousStrict, body;
                            previousStrict = strict;
                            body = parseFunctionSourceElements();
                            if (first && strict && isRestrictedWord(param[0].name)) {
                                throwErrorTolerant(first, Messages.StrictParamName);
                            }
                            strict = previousStrict;
                            return {
                                type: Syntax.FunctionExpression,
                                id: null,
                                params: param,
                                defaults: [],
                                body: body,
                                rest: null,
                                generator: false,
                                expression: false
                            };
                        }

                        function parseObjectPropertyKey() {
                            var token = lex();
                            if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
                                if (strict && token.octal) {
                                    throwErrorTolerant(token, Messages.StrictOctalLiteral);
                                }
                                return createLiteral(token);
                            }
                            return {
                                type: Syntax.Identifier,
                                name: token.value
                            };
                        }

                        function parseObjectProperty() {
                            var token, key, id, param;
                            token = lookahead();
                            if (token.type === Token.Identifier) {
                                id = parseObjectPropertyKey();
                                if (token.value === 'get' && !match(':')) {
                                    key = parseObjectPropertyKey();
                                    expect('(');
                                    expect(')');
                                    return {
                                        type: Syntax.Property,
                                        key: key,
                                        value: parsePropertyFunction([]),
                                        kind: 'get'
                                    };
                                } else if (token.value === 'set' && !match(':')) {
                                    key = parseObjectPropertyKey();
                                    expect('(');
                                    token = lookahead();
                                    if (token.type !== Token.Identifier) {
                                        expect(')');
                                        throwErrorTolerant(token, Messages.UnexpectedToken, token.value);
                                        return {
                                            type: Syntax.Property,
                                            key: key,
                                            value: parsePropertyFunction([]),
                                            kind: 'set'
                                        };
                                    } else {
                                        param = [parseVariableIdentifier()];
                                        expect(')');
                                        return {
                                            type: Syntax.Property,
                                            key: key,
                                            value: parsePropertyFunction(param, token),
                                            kind: 'set'
                                        };
                                    }
                                } else {
                                    expect(':');
                                    return {
                                        type: Syntax.Property,
                                        key: id,
                                        value: parseAssignmentExpression(),
                                        kind: 'init'
                                    };
                                }
                            } else if (token.type === Token.EOF || token.type === Token.Punctuator) {
                                throwUnexpected(token);
                            } else {
                                key = parseObjectPropertyKey();
                                expect(':');
                                return {
                                    type: Syntax.Property,
                                    key: key,
                                    value: parseAssignmentExpression(),
                                    kind: 'init'
                                };
                            }
                        }

                        function parseObjectInitialiser() {
                            var properties = [],
                                property, name, kind, map = {},
                                toString = String;
                            expect('{');
                            while (!match('}')) {
                                property = parseObjectProperty();
                                if (property.key.type === Syntax.Identifier) {
                                    name = property.key.name;
                                } else {
                                    name = toString(property.key.value);
                                }
                                kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;
                                if (Object.prototype.hasOwnProperty.call(map, name)) {
                                    if (map[name] === PropertyKind.Data) {
                                        if (strict && kind === PropertyKind.Data) {
                                            throwErrorTolerant({}, Messages.StrictDuplicateProperty);
                                        } else if (kind !== PropertyKind.Data) {
                                            throwErrorTolerant({}, Messages.AccessorDataProperty);
                                        }
                                    } else {
                                        if (kind === PropertyKind.Data) {
                                            throwErrorTolerant({}, Messages.AccessorDataProperty);
                                        } else if (map[name] & kind) {
                                            throwErrorTolerant({}, Messages.AccessorGetSet);
                                        }
                                    }
                                    map[name] |= kind;
                                } else {
                                    map[name] = kind;
                                }
                                properties.push(property);
                                if (!match('}')) {
                                    expect(',');
                                }
                            }
                            expect('}');
                            return {
                                type: Syntax.ObjectExpression,
                                properties: properties
                            };
                        }

                        function parseGroupExpression() {
                            var expr;
                            expect('(');
                            expr = parseExpression();
                            expect(')');
                            return expr;
                        }

                        function parsePrimaryExpression() {
                            var token = lookahead(),
                                type = token.type;
                            if (type === Token.Identifier) {
                                return {
                                    type: Syntax.Identifier,
                                    name: lex().value
                                };
                            }
                            if (type === Token.StringLiteral || type === Token.NumericLiteral) {
                                if (strict && token.octal) {
                                    throwErrorTolerant(token, Messages.StrictOctalLiteral);
                                }
                                return createLiteral(lex());
                            }
                            if (type === Token.Keyword) {
                                if (matchKeyword('this')) {
                                    lex();
                                    return {
                                        type: Syntax.ThisExpression
                                    };
                                }
                                if (matchKeyword('function')) {
                                    return parseFunctionExpression();
                                }
                            }
                            if (type === Token.BooleanLiteral) {
                                lex();
                                token.value = (token.value === 'true');
                                return createLiteral(token);
                            }
                            if (type === Token.NullLiteral) {
                                lex();
                                token.value = null;
                                return createLiteral(token);
                            }
                            if (match('[')) {
                                return parseArrayInitialiser();
                            }
                            if (match('{')) {
                                return parseObjectInitialiser();
                            }
                            if (match('(')) {
                                return parseGroupExpression();
                            }
                            if (match('/') || match('/=')) {
                                return createLiteral(scanRegExp());
                            }
                            return throwUnexpected(lex());
                        }

                        function parseArguments() {
                            var args = [];
                            expect('(');
                            if (!match(')')) {
                                while (index < length) {
                                    args.push(parseAssignmentExpression());
                                    if (match(')')) {
                                        break;
                                    }
                                    expect(',');
                                }
                            }
                            expect(')');
                            return args;
                        }

                        function parseNonComputedProperty() {
                            var token = lex();
                            if (!isIdentifierName(token)) {
                                throwUnexpected(token);
                            }
                            return {
                                type: Syntax.Identifier,
                                name: token.value
                            };
                        }

                        function parseNonComputedMember() {
                            expect('.');
                            return parseNonComputedProperty();
                        }

                        function parseComputedMember() {
                            var expr;
                            expect('[');
                            expr = parseExpression();
                            expect(']');
                            return expr;
                        }

                        function parseNewExpression() {
                            var expr;
                            expectKeyword('new');
                            expr = {
                                type: Syntax.NewExpression,
                                callee: parseLeftHandSideExpression(),
                                'arguments': []
                            };
                            if (match('(')) {
                                expr['arguments'] = parseArguments();
                            }
                            return expr;
                        }

                        function parseLeftHandSideExpressionAllowCall() {
                            var expr;
                            expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
                            while (match('.') || match('[') || match('(')) {
                                if (match('(')) {
                                    expr = {
                                        type: Syntax.CallExpression,
                                        callee: expr,
                                        'arguments': parseArguments()
                                    };
                                } else if (match('[')) {
                                    expr = {
                                        type: Syntax.MemberExpression,
                                        computed: true,
                                        object: expr,
                                        property: parseComputedMember()
                                    };
                                } else {
                                    expr = {
                                        type: Syntax.MemberExpression,
                                        computed: false,
                                        object: expr,
                                        property: parseNonComputedMember()
                                    };
                                }
                            }
                            return expr;
                        }

                        function parseLeftHandSideExpression() {
                            var expr;
                            expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
                            while (match('.') || match('[')) {
                                if (match('[')) {
                                    expr = {
                                        type: Syntax.MemberExpression,
                                        computed: true,
                                        object: expr,
                                        property: parseComputedMember()
                                    };
                                } else {
                                    expr = {
                                        type: Syntax.MemberExpression,
                                        computed: false,
                                        object: expr,
                                        property: parseNonComputedMember()
                                    };
                                }
                            }
                            return expr;
                        }

                        function parsePostfixExpression() {
                            var expr = parseLeftHandSideExpressionAllowCall(),
                                token;
                            token = lookahead();
                            if (token.type !== Token.Punctuator) {
                                return expr;
                            }
                            if ((match('++') || match('--')) && !peekLineTerminator()) {
                                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                                    throwErrorTolerant({}, Messages.StrictLHSPostfix);
                                }
                                if (!isLeftHandSide(expr)) {
                                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
                                }
                                expr = {
                                    type: Syntax.UpdateExpression,
                                    operator: lex().value,
                                    argument: expr,
                                    prefix: false
                                };
                            }
                            return expr;
                        }

                        function parseUnaryExpression() {
                            var token, expr;
                            token = lookahead();
                            if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
                                return parsePostfixExpression();
                            }
                            if (match('++') || match('--')) {
                                token = lex();
                                expr = parseUnaryExpression();
                                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                                    throwErrorTolerant({}, Messages.StrictLHSPrefix);
                                }
                                if (!isLeftHandSide(expr)) {
                                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
                                }
                                expr = {
                                    type: Syntax.UpdateExpression,
                                    operator: token.value,
                                    argument: expr,
                                    prefix: true
                                };
                                return expr;
                            }
                            if (match('+') || match('-') || match('~') || match('!')) {
                                expr = {
                                    type: Syntax.UnaryExpression,
                                    operator: lex().value,
                                    argument: parseUnaryExpression(),
                                    prefix: true
                                };
                                return expr;
                            }
                            if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
                                expr = {
                                    type: Syntax.UnaryExpression,
                                    operator: lex().value,
                                    argument: parseUnaryExpression(),
                                    prefix: true
                                };
                                if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                                    throwErrorTolerant({}, Messages.StrictDelete);
                                }
                                return expr;
                            }
                            return parsePostfixExpression();
                        }

                        function parseMultiplicativeExpression() {
                            var expr = parseUnaryExpression();
                            while (match('*') || match('/') || match('%')) {
                                expr = {
                                    type: Syntax.BinaryExpression,
                                    operator: lex().value,
                                    left: expr,
                                    right: parseUnaryExpression()
                                };
                            }
                            return expr;
                        }

                        function parseAdditiveExpression() {
                            var expr = parseMultiplicativeExpression();
                            while (match('+') || match('-')) {
                                expr = {
                                    type: Syntax.BinaryExpression,
                                    operator: lex().value,
                                    left: expr,
                                    right: parseMultiplicativeExpression()
                                };
                            }
                            return expr;
                        }

                        function parseShiftExpression() {
                            var expr = parseAdditiveExpression();
                            while (match('<<') || match('>>') || match('>>>')) {
                                expr = {
                                    type: Syntax.BinaryExpression,
                                    operator: lex().value,
                                    left: expr,
                                    right: parseAdditiveExpression()
                                };
                            }
                            return expr;
                        }

                        function parseRelationalExpression() {
                            var expr, previousAllowIn;
                            previousAllowIn = state.allowIn;
                            state.allowIn = true;
                            expr = parseShiftExpression();
                            while (match('<') || match('>') || match('<=') || match('>=') || (previousAllowIn && matchKeyword('in')) || matchKeyword('instanceof')) {
                                expr = {
                                    type: Syntax.BinaryExpression,
                                    operator: lex().value,
                                    left: expr,
                                    right: parseShiftExpression()
                                };
                            }
                            state.allowIn = previousAllowIn;
                            return expr;
                        }

                        function parseEqualityExpression() {
                            var expr = parseRelationalExpression();
                            while (match('==') || match('!=') || match('===') || match('!==')) {
                                expr = {
                                    type: Syntax.BinaryExpression,
                                    operator: lex().value,
                                    left: expr,
                                    right: parseRelationalExpression()
                                };
                            }
                            return expr;
                        }

                        function parseBitwiseANDExpression() {
                            var expr = parseEqualityExpression();
                            while (match('&')) {
                                lex();
                                expr = {
                                    type: Syntax.BinaryExpression,
                                    operator: '&',
                                    left: expr,
                                    right: parseEqualityExpression()
                                };
                            }
                            return expr;
                        }

                        function parseBitwiseXORExpression() {
                            var expr = parseBitwiseANDExpression();
                            while (match('^')) {
                                lex();
                                expr = {
                                    type: Syntax.BinaryExpression,
                                    operator: '^',
                                    left: expr,
                                    right: parseBitwiseANDExpression()
                                };
                            }
                            return expr;
                        }

                        function parseBitwiseORExpression() {
                            var expr = parseBitwiseXORExpression();
                            while (match('|')) {
                                lex();
                                expr = {
                                    type: Syntax.BinaryExpression,
                                    operator: '|',
                                    left: expr,
                                    right: parseBitwiseXORExpression()
                                };
                            }
                            return expr;
                        }

                        function parseLogicalANDExpression() {
                            var expr = parseBitwiseORExpression();
                            while (match('&&')) {
                                lex();
                                expr = {
                                    type: Syntax.LogicalExpression,
                                    operator: '&&',
                                    left: expr,
                                    right: parseBitwiseORExpression()
                                };
                            }
                            return expr;
                        }

                        function parseLogicalORExpression() {
                            var expr = parseLogicalANDExpression();
                            while (match('||')) {
                                lex();
                                expr = {
                                    type: Syntax.LogicalExpression,
                                    operator: '||',
                                    left: expr,
                                    right: parseLogicalANDExpression()
                                };
                            }
                            return expr;
                        }

                        function parseConditionalExpression() {
                            var expr, previousAllowIn, consequent;
                            expr = parseLogicalORExpression();
                            if (match('?')) {
                                lex();
                                previousAllowIn = state.allowIn;
                                state.allowIn = true;
                                consequent = parseAssignmentExpression();
                                state.allowIn = previousAllowIn;
                                expect(':');
                                expr = {
                                    type: Syntax.ConditionalExpression,
                                    test: expr,
                                    consequent: consequent,
                                    alternate: parseAssignmentExpression()
                                };
                            }
                            return expr;
                        }

                        function parseAssignmentExpression() {
                            var token, expr;
                            token = lookahead();
                            expr = parseConditionalExpression();
                            if (matchAssign()) {
                                if (!isLeftHandSide(expr)) {
                                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
                                }
                                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                                    throwErrorTolerant(token, Messages.StrictLHSAssignment);
                                }
                                expr = {
                                    type: Syntax.AssignmentExpression,
                                    operator: lex().value,
                                    left: expr,
                                    right: parseAssignmentExpression()
                                };
                            }
                            return expr;
                        }

                        function parseExpression() {
                            var expr = parseAssignmentExpression();
                            if (match(',')) {
                                expr = {
                                    type: Syntax.SequenceExpression,
                                    expressions: [expr]
                                };
                                while (index < length) {
                                    if (!match(',')) {
                                        break;
                                    }
                                    lex();
                                    expr.expressions.push(parseAssignmentExpression());
                                }
                            }
                            return expr;
                        }

                        function parseStatementList() {
                            var list = [],
                                statement;
                            while (index < length) {
                                if (match('}')) {
                                    break;
                                }
                                statement = parseSourceElement();
                                if (typeof statement === 'undefined') {
                                    break;
                                }
                                list.push(statement);
                            }
                            return list;
                        }

                        function parseBlock() {
                            var block;
                            expect('{');
                            block = parseStatementList();
                            expect('}');
                            return {
                                type: Syntax.BlockStatement,
                                body: block
                            };
                        }

                        function parseVariableIdentifier() {
                            var token = lex();
                            if (token.type !== Token.Identifier) {
                                throwUnexpected(token);
                            }
                            return {
                                type: Syntax.Identifier,
                                name: token.value
                            };
                        }

                        function parseVariableDeclaration(kind) {
                            var id = parseVariableIdentifier(),
                                init = null;
                            if (strict && isRestrictedWord(id.name)) {
                                throwErrorTolerant({}, Messages.StrictVarName);
                            }
                            if (kind === 'const') {
                                expect('=');
                                init = parseAssignmentExpression();
                            } else if (match('=')) {
                                lex();
                                init = parseAssignmentExpression();
                            }
                            return {
                                type: Syntax.VariableDeclarator,
                                id: id,
                                init: init
                            };
                        }

                        function parseVariableDeclarationList(kind) {
                            var list = [];
                            do {
                                list.push(parseVariableDeclaration(kind));
                                if (!match(',')) {
                                    break;
                                }
                                lex();
                            } while (index < length);
                            return list;
                        }

                        function parseVariableStatement() {
                            var declarations;
                            expectKeyword('var');
                            declarations = parseVariableDeclarationList();
                            consumeSemicolon();
                            return {
                                type: Syntax.VariableDeclaration,
                                declarations: declarations,
                                kind: 'var'
                            };
                        }

                        function parseConstLetDeclaration(kind) {
                            var declarations;
                            expectKeyword(kind);
                            declarations = parseVariableDeclarationList(kind);
                            consumeSemicolon();
                            return {
                                type: Syntax.VariableDeclaration,
                                declarations: declarations,
                                kind: kind
                            };
                        }

                        function parseEmptyStatement() {
                            expect(';');
                            return {
                                type: Syntax.EmptyStatement
                            };
                        }

                        function parseExpressionStatement() {
                            var expr = parseExpression();
                            consumeSemicolon();
                            return {
                                type: Syntax.ExpressionStatement,
                                expression: expr
                            };
                        }

                        function parseIfStatement() {
                            var test, consequent, alternate;
                            expectKeyword('if');
                            expect('(');
                            test = parseExpression();
                            expect(')');
                            consequent = parseStatement();
                            if (matchKeyword('else')) {
                                lex();
                                alternate = parseStatement();
                            } else {
                                alternate = null;
                            }
                            return {
                                type: Syntax.IfStatement,
                                test: test,
                                consequent: consequent,
                                alternate: alternate
                            };
                        }

                        function parseDoWhileStatement() {
                            var body, test, oldInIteration;
                            expectKeyword('do');
                            oldInIteration = state.inIteration;
                            state.inIteration = true;
                            body = parseStatement();
                            state.inIteration = oldInIteration;
                            expectKeyword('while');
                            expect('(');
                            test = parseExpression();
                            expect(')');
                            if (match(';')) {
                                lex();
                            }
                            return {
                                type: Syntax.DoWhileStatement,
                                body: body,
                                test: test
                            };
                        }

                        function parseWhileStatement() {
                            var test, body, oldInIteration;
                            expectKeyword('while');
                            expect('(');
                            test = parseExpression();
                            expect(')');
                            oldInIteration = state.inIteration;
                            state.inIteration = true;
                            body = parseStatement();
                            state.inIteration = oldInIteration;
                            return {
                                type: Syntax.WhileStatement,
                                test: test,
                                body: body
                            };
                        }

                        function parseForVariableDeclaration() {
                            var token = lex();
                            return {
                                type: Syntax.VariableDeclaration,
                                declarations: parseVariableDeclarationList(),
                                kind: token.value
                            };
                        }

                        function parseForStatement() {
                            var init, test, update, left, right, body, oldInIteration;
                            init = test = update = null;
                            expectKeyword('for');
                            expect('(');
                            if (match(';')) {
                                lex();
                            } else {
                                if (matchKeyword('var') || matchKeyword('let')) {
                                    state.allowIn = false;
                                    init = parseForVariableDeclaration();
                                    state.allowIn = true;
                                    if (init.declarations.length === 1 && matchKeyword('in')) {
                                        lex();
                                        left = init;
                                        right = parseExpression();
                                        init = null;
                                    }
                                } else {
                                    state.allowIn = false;
                                    init = parseExpression();
                                    state.allowIn = true;
                                    if (matchKeyword('in')) {
                                        if (!isLeftHandSide(init)) {
                                            throwErrorTolerant({}, Messages.InvalidLHSInForIn);
                                        }
                                        lex();
                                        left = init;
                                        right = parseExpression();
                                        init = null;
                                    }
                                }
                                if (typeof left === 'undefined') {
                                    expect(';');
                                }
                            }
                            if (typeof left === 'undefined') {
                                if (!match(';')) {
                                    test = parseExpression();
                                }
                                expect(';');
                                if (!match(')')) {
                                    update = parseExpression();
                                }
                            }
                            expect(')');
                            oldInIteration = state.inIteration;
                            state.inIteration = true;
                            body = parseStatement();
                            state.inIteration = oldInIteration;
                            if (typeof left === 'undefined') {
                                return {
                                    type: Syntax.ForStatement,
                                    init: init,
                                    test: test,
                                    update: update,
                                    body: body
                                };
                            }
                            return {
                                type: Syntax.ForInStatement,
                                left: left,
                                right: right,
                                body: body,
                                each: false
                            };
                        }

                        function parseContinueStatement() {
                            var token, label = null;
                            expectKeyword('continue');
                            if (source[index] === ';') {
                                lex();
                                if (!state.inIteration) {
                                    throwError({}, Messages.IllegalContinue);
                                }
                                return {
                                    type: Syntax.ContinueStatement,
                                    label: null
                                };
                            }
                            if (peekLineTerminator()) {
                                if (!state.inIteration) {
                                    throwError({}, Messages.IllegalContinue);
                                }
                                return {
                                    type: Syntax.ContinueStatement,
                                    label: null
                                };
                            }
                            token = lookahead();
                            if (token.type === Token.Identifier) {
                                label = parseVariableIdentifier();
                                if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {
                                    throwError({}, Messages.UnknownLabel, label.name);
                                }
                            }
                            consumeSemicolon();
                            if (label === null && !state.inIteration) {
                                throwError({}, Messages.IllegalContinue);
                            }
                            return {
                                type: Syntax.ContinueStatement,
                                label: label
                            };
                        }

                        function parseBreakStatement() {
                            var token, label = null;
                            expectKeyword('break');
                            if (source[index] === ';') {
                                lex();
                                if (!(state.inIteration || state.inSwitch)) {
                                    throwError({}, Messages.IllegalBreak);
                                }
                                return {
                                    type: Syntax.BreakStatement,
                                    label: null
                                };
                            }
                            if (peekLineTerminator()) {
                                if (!(state.inIteration || state.inSwitch)) {
                                    throwError({}, Messages.IllegalBreak);
                                }
                                return {
                                    type: Syntax.BreakStatement,
                                    label: null
                                };
                            }
                            token = lookahead();
                            if (token.type === Token.Identifier) {
                                label = parseVariableIdentifier();
                                if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {
                                    throwError({}, Messages.UnknownLabel, label.name);
                                }
                            }
                            consumeSemicolon();
                            if (label === null && !(state.inIteration || state.inSwitch)) {
                                throwError({}, Messages.IllegalBreak);
                            }
                            return {
                                type: Syntax.BreakStatement,
                                label: label
                            };
                        }

                        function parseReturnStatement() {
                            var token, argument = null;
                            expectKeyword('return');
                            if (!state.inFunctionBody) {
                                throwErrorTolerant({}, Messages.IllegalReturn);
                            }
                            if (source[index] === ' ') {
                                if (isIdentifierStart(source[index + 1])) {
                                    argument = parseExpression();
                                    consumeSemicolon();
                                    return {
                                        type: Syntax.ReturnStatement,
                                        argument: argument
                                    };
                                }
                            }
                            if (peekLineTerminator()) {
                                return {
                                    type: Syntax.ReturnStatement,
                                    argument: null
                                };
                            }
                            if (!match(';')) {
                                token = lookahead();
                                if (!match('}') && token.type !== Token.EOF) {
                                    argument = parseExpression();
                                }
                            }
                            consumeSemicolon();
                            return {
                                type: Syntax.ReturnStatement,
                                argument: argument
                            };
                        }

                        function parseWithStatement() {
                            var object, body;
                            if (strict) {
                                throwErrorTolerant({}, Messages.StrictModeWith);
                            }
                            expectKeyword('with');
                            expect('(');
                            object = parseExpression();
                            expect(')');
                            body = parseStatement();
                            return {
                                type: Syntax.WithStatement,
                                object: object,
                                body: body
                            };
                        }

                        function parseSwitchCase() {
                            var test, consequent = [],
                                statement;
                            if (matchKeyword('default')) {
                                lex();
                                test = null;
                            } else {
                                expectKeyword('case');
                                test = parseExpression();
                            }
                            expect(':');
                            while (index < length) {
                                if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                                    break;
                                }
                                statement = parseStatement();
                                if (typeof statement === 'undefined') {
                                    break;
                                }
                                consequent.push(statement);
                            }
                            return {
                                type: Syntax.SwitchCase,
                                test: test,
                                consequent: consequent
                            };
                        }

                        function parseSwitchStatement() {
                            var discriminant, cases, clause, oldInSwitch, defaultFound;
                            expectKeyword('switch');
                            expect('(');
                            discriminant = parseExpression();
                            expect(')');
                            expect('{');
                            cases = [];
                            if (match('}')) {
                                lex();
                                return {
                                    type: Syntax.SwitchStatement,
                                    discriminant: discriminant,
                                    cases: cases
                                };
                            }
                            oldInSwitch = state.inSwitch;
                            state.inSwitch = true;
                            defaultFound = false;
                            while (index < length) {
                                if (match('}')) {
                                    break;
                                }
                                clause = parseSwitchCase();
                                if (clause.test === null) {
                                    if (defaultFound) {
                                        throwError({}, Messages.MultipleDefaultsInSwitch);
                                    }
                                    defaultFound = true;
                                }
                                cases.push(clause);
                            }
                            state.inSwitch = oldInSwitch;
                            expect('}');
                            return {
                                type: Syntax.SwitchStatement,
                                discriminant: discriminant,
                                cases: cases
                            };
                        }

                        function parseThrowStatement() {
                            var argument;
                            expectKeyword('throw');
                            if (peekLineTerminator()) {
                                throwError({}, Messages.NewlineAfterThrow);
                            }
                            argument = parseExpression();
                            consumeSemicolon();
                            return {
                                type: Syntax.ThrowStatement,
                                argument: argument
                            };
                        }

                        function parseCatchClause() {
                            var param;
                            expectKeyword('catch');
                            expect('(');
                            if (match(')')) {
                                throwUnexpected(lookahead());
                            }
                            param = parseVariableIdentifier();
                            if (strict && isRestrictedWord(param.name)) {
                                throwErrorTolerant({}, Messages.StrictCatchVariable);
                            }
                            expect(')');
                            return {
                                type: Syntax.CatchClause,
                                param: param,
                                body: parseBlock()
                            };
                        }

                        function parseTryStatement() {
                            var block, handlers = [],
                                finalizer = null;
                            expectKeyword('try');
                            block = parseBlock();
                            if (matchKeyword('catch')) {
                                handlers.push(parseCatchClause());
                            }
                            if (matchKeyword('finally')) {
                                lex();
                                finalizer = parseBlock();
                            }
                            if (handlers.length === 0 && !finalizer) {
                                throwError({}, Messages.NoCatchOrFinally);
                            }
                            return {
                                type: Syntax.TryStatement,
                                block: block,
                                guardedHandlers: [],
                                handlers: handlers,
                                finalizer: finalizer
                            };
                        }

                        function parseDebuggerStatement() {
                            expectKeyword('debugger');
                            consumeSemicolon();
                            return {
                                type: Syntax.DebuggerStatement
                            };
                        }

                        function parseStatement() {
                            var token = lookahead(),
                                expr, labeledBody;
                            if (token.type === Token.EOF) {
                                throwUnexpected(token);
                            }
                            if (token.type === Token.Punctuator) {
                                switch (token.value) {
                                case ';':
                                    return parseEmptyStatement();
                                case '{':
                                    return parseBlock();
                                case '(':
                                    return parseExpressionStatement();
                                default:
                                    break;
                                }
                            }
                            if (token.type === Token.Keyword) {
                                switch (token.value) {
                                case 'break':
                                    return parseBreakStatement();
                                case 'continue':
                                    return parseContinueStatement();
                                case 'debugger':
                                    return parseDebuggerStatement();
                                case 'do':
                                    return parseDoWhileStatement();
                                case 'for':
                                    return parseForStatement();
                                case 'function':
                                    return parseFunctionDeclaration();
                                case 'if':
                                    return parseIfStatement();
                                case 'return':
                                    return parseReturnStatement();
                                case 'switch':
                                    return parseSwitchStatement();
                                case 'throw':
                                    return parseThrowStatement();
                                case 'try':
                                    return parseTryStatement();
                                case 'var':
                                    return parseVariableStatement();
                                case 'while':
                                    return parseWhileStatement();
                                case 'with':
                                    return parseWithStatement();
                                default:
                                    break;
                                }
                            }
                            expr = parseExpression();
                            if ((expr.type === Syntax.Identifier) && match(':')) {
                                lex();
                                if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {
                                    throwError({}, Messages.Redeclaration, 'Label', expr.name);
                                }
                                state.labelSet[expr.name] = true;
                                labeledBody = parseStatement();
                                delete state.labelSet[expr.name];
                                return {
                                    type: Syntax.LabeledStatement,
                                    label: expr,
                                    body: labeledBody
                                };
                            }
                            consumeSemicolon();
                            return {
                                type: Syntax.ExpressionStatement,
                                expression: expr
                            };
                        }

                        function parseFunctionSourceElements() {
                            var sourceElement, sourceElements = [],
                                token, directive, firstRestricted, oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;
                            expect('{');
                            while (index < length) {
                                token = lookahead();
                                if (token.type !== Token.StringLiteral) {
                                    break;
                                }
                                sourceElement = parseSourceElement();
                                sourceElements.push(sourceElement);
                                if (sourceElement.expression.type !== Syntax.Literal) {
                                    break;
                                }
                                directive = sliceSource(token.range[0] + 1, token.range[1] - 1);
                                if (directive === 'use strict') {
                                    strict = true;
                                    if (firstRestricted) {
                                        throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                                    }
                                } else {
                                    if (!firstRestricted && token.octal) {
                                        firstRestricted = token;
                                    }
                                }
                            }
                            oldLabelSet = state.labelSet;
                            oldInIteration = state.inIteration;
                            oldInSwitch = state.inSwitch;
                            oldInFunctionBody = state.inFunctionBody;
                            state.labelSet = {};
                            state.inIteration = false;
                            state.inSwitch = false;
                            state.inFunctionBody = true;
                            while (index < length) {
                                if (match('}')) {
                                    break;
                                }
                                sourceElement = parseSourceElement();
                                if (typeof sourceElement === 'undefined') {
                                    break;
                                }
                                sourceElements.push(sourceElement);
                            }
                            expect('}');
                            state.labelSet = oldLabelSet;
                            state.inIteration = oldInIteration;
                            state.inSwitch = oldInSwitch;
                            state.inFunctionBody = oldInFunctionBody;
                            return {
                                type: Syntax.BlockStatement,
                                body: sourceElements
                            };
                        }

                        function parseFunctionDeclaration() {
                            var id, param, params = [],
                                body, token, stricted, firstRestricted, message, previousStrict, paramSet;
                            expectKeyword('function');
                            token = lookahead();
                            id = parseVariableIdentifier();
                            if (strict) {
                                if (isRestrictedWord(token.value)) {
                                    throwErrorTolerant(token, Messages.StrictFunctionName);
                                }
                            } else {
                                if (isRestrictedWord(token.value)) {
                                    firstRestricted = token;
                                    message = Messages.StrictFunctionName;
                                } else if (isStrictModeReservedWord(token.value)) {
                                    firstRestricted = token;
                                    message = Messages.StrictReservedWord;
                                }
                            }
                            expect('(');
                            if (!match(')')) {
                                paramSet = {};
                                while (index < length) {
                                    token = lookahead();
                                    param = parseVariableIdentifier();
                                    if (strict) {
                                        if (isRestrictedWord(token.value)) {
                                            stricted = token;
                                            message = Messages.StrictParamName;
                                        }
                                        if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
                                            stricted = token;
                                            message = Messages.StrictParamDupe;
                                        }
                                    } else if (!firstRestricted) {
                                        if (isRestrictedWord(token.value)) {
                                            firstRestricted = token;
                                            message = Messages.StrictParamName;
                                        } else if (isStrictModeReservedWord(token.value)) {
                                            firstRestricted = token;
                                            message = Messages.StrictReservedWord;
                                        } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
                                            firstRestricted = token;
                                            message = Messages.StrictParamDupe;
                                        }
                                    }
                                    params.push(param);
                                    paramSet[param.name] = true;
                                    if (match(')')) {
                                        break;
                                    }
                                    expect(',');
                                }
                            }
                            expect(')');
                            previousStrict = strict;
                            body = parseFunctionSourceElements();
                            if (strict && firstRestricted) {
                                throwError(firstRestricted, message);
                            }
                            if (strict && stricted) {
                                throwErrorTolerant(stricted, message);
                            }
                            strict = previousStrict;
                            return {
                                type: Syntax.FunctionDeclaration,
                                id: id,
                                params: params,
                                defaults: [],
                                body: body,
                                rest: null,
                                generator: false,
                                expression: false
                            };
                        }

                        function parseFunctionExpression() {
                            var token, id = null,
                                stricted, firstRestricted, message, param, params = [],
                                body, previousStrict, paramSet;
                            expectKeyword('function');
                            if (!match('(')) {
                                token = lookahead();
                                id = parseVariableIdentifier();
                                if (strict) {
                                    if (isRestrictedWord(token.value)) {
                                        throwErrorTolerant(token, Messages.StrictFunctionName);
                                    }
                                } else {
                                    if (isRestrictedWord(token.value)) {
                                        firstRestricted = token;
                                        message = Messages.StrictFunctionName;
                                    } else if (isStrictModeReservedWord(token.value)) {
                                        firstRestricted = token;
                                        message = Messages.StrictReservedWord;
                                    }
                                }
                            }
                            expect('(');
                            if (!match(')')) {
                                paramSet = {};
                                while (index < length) {
                                    token = lookahead();
                                    param = parseVariableIdentifier();
                                    if (strict) {
                                        if (isRestrictedWord(token.value)) {
                                            stricted = token;
                                            message = Messages.StrictParamName;
                                        }
                                        if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
                                            stricted = token;
                                            message = Messages.StrictParamDupe;
                                        }
                                    } else if (!firstRestricted) {
                                        if (isRestrictedWord(token.value)) {
                                            firstRestricted = token;
                                            message = Messages.StrictParamName;
                                        } else if (isStrictModeReservedWord(token.value)) {
                                            firstRestricted = token;
                                            message = Messages.StrictReservedWord;
                                        } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
                                            firstRestricted = token;
                                            message = Messages.StrictParamDupe;
                                        }
                                    }
                                    params.push(param);
                                    paramSet[param.name] = true;
                                    if (match(')')) {
                                        break;
                                    }
                                    expect(',');
                                }
                            }
                            expect(')');
                            previousStrict = strict;
                            body = parseFunctionSourceElements();
                            if (strict && firstRestricted) {
                                throwError(firstRestricted, message);
                            }
                            if (strict && stricted) {
                                throwErrorTolerant(stricted, message);
                            }
                            strict = previousStrict;
                            return {
                                type: Syntax.FunctionExpression,
                                id: id,
                                params: params,
                                defaults: [],
                                body: body,
                                rest: null,
                                generator: false,
                                expression: false
                            };
                        }

                        function parseSourceElement() {
                            var token = lookahead();
                            if (token.type === Token.Keyword) {
                                switch (token.value) {
                                case 'const':
                                case 'let':
                                    return parseConstLetDeclaration(token.value);
                                case 'function':
                                    return parseFunctionDeclaration();
                                default:
                                    return parseStatement();
                                }
                            }
                            if (token.type !== Token.EOF) {
                                return parseStatement();
                            }
                        }

                        function parseSourceElements() {
                            var sourceElement, sourceElements = [],
                                token, directive, firstRestricted;
                            while (index < length) {
                                token = lookahead();
                                if (token.type !== Token.StringLiteral) {
                                    break;
                                }
                                sourceElement = parseSourceElement();
                                sourceElements.push(sourceElement);
                                if (sourceElement.expression.type !== Syntax.Literal) {
                                    break;
                                }
                                directive = sliceSource(token.range[0] + 1, token.range[1] - 1);
                                if (directive === 'use strict') {
                                    strict = true;
                                    if (firstRestricted) {
                                        throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                                    }
                                } else {
                                    if (!firstRestricted && token.octal) {
                                        firstRestricted = token;
                                    }
                                }
                            }
                            while (index < length) {
                                sourceElement = parseSourceElement();
                                if (typeof sourceElement === 'undefined') {
                                    break;
                                }
                                sourceElements.push(sourceElement);
                            }
                            return sourceElements;
                        }

                        function parseProgram() {
                            var program;
                            strict = false;
                            program = {
                                type: Syntax.Program,
                                body: parseSourceElements()
                            };
                            return program;
                        }

                        function addComment(type, value, start, end, loc) {
                            assert(typeof start === 'number', 'Comment must have valid position');
                            if (extra.comments.length > 0) {
                                if (extra.comments[extra.comments.length - 1].range[1] > start) {
                                    return;
                                }
                            }
                            extra.comments.push({
                                type: type,
                                value: value,
                                range: [start, end],
                                loc: loc
                            });
                        }

                        function scanComment() {
                            var comment, ch, loc, start, blockComment, lineComment;
                            comment = '';
                            blockComment = false;
                            lineComment = false;
                            while (index < length) {
                                ch = source[index];
                                if (lineComment) {
                                    ch = source[index++];
                                    if (isLineTerminator(ch)) {
                                        loc.end = {
                                            line: lineNumber,
                                            column: index - lineStart - 1
                                        };
                                        lineComment = false;
                                        addComment('Line', comment, start, index - 1, loc);
                                        if (ch === '\r' && source[index] === '\n') {
                                            ++index;
                                        }
                                        ++lineNumber;
                                        lineStart = index;
                                        comment = '';
                                    } else if (index >= length) {
                                        lineComment = false;
                                        comment += ch;
                                        loc.end = {
                                            line: lineNumber,
                                            column: length - lineStart
                                        };
                                        addComment('Line', comment, start, length, loc);
                                    } else {
                                        comment += ch;
                                    }
                                } else if (blockComment) {
                                    if (isLineTerminator(ch)) {
                                        if (ch === '\r' && source[index + 1] === '\n') {
                                            ++index;
                                            comment += '\r\n';
                                        } else {
                                            comment += ch;
                                        }
                                        ++lineNumber;
                                        ++index;
                                        lineStart = index;
                                        if (index >= length) {
                                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                        }
                                    } else {
                                        ch = source[index++];
                                        if (index >= length) {
                                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                        }
                                        comment += ch;
                                        if (ch === '*') {
                                            ch = source[index];
                                            if (ch === '/') {
                                                comment = comment.substr(0, comment.length - 1);
                                                blockComment = false;
                                                ++index;
                                                loc.end = {
                                                    line: lineNumber,
                                                    column: index - lineStart
                                                };
                                                addComment('Block', comment, start, index, loc);
                                                comment = '';
                                            }
                                        }
                                    }
                                } else if (ch === '/') {
                                    ch = source[index + 1];
                                    if (ch === '/') {
                                        loc = {
                                            start: {
                                                line: lineNumber,
                                                column: index - lineStart
                                            }
                                        };
                                        start = index;
                                        index += 2;
                                        lineComment = true;
                                        if (index >= length) {
                                            loc.end = {
                                                line: lineNumber,
                                                column: index - lineStart
                                            };
                                            lineComment = false;
                                            addComment('Line', comment, start, index, loc);
                                        }
                                    } else if (ch === '*') {
                                        start = index;
                                        index += 2;
                                        blockComment = true;
                                        loc = {
                                            start: {
                                                line: lineNumber,
                                                column: index - lineStart - 2
                                            }
                                        };
                                        if (index >= length) {
                                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                                        }
                                    } else {
                                        break;
                                    }
                                } else if (isWhiteSpace(ch)) {
                                    ++index;
                                } else if (isLineTerminator(ch)) {
                                    ++index;
                                    if (ch === '\r' && source[index] === '\n') {
                                        ++index;
                                    }
                                    ++lineNumber;
                                    lineStart = index;
                                } else {
                                    break;
                                }
                            }
                        }

                        function filterCommentLocation() {
                            var i, entry, comment, comments = [];
                            for (i = 0; i < extra.comments.length; ++i) {
                                entry = extra.comments[i];
                                comment = {
                                    type: entry.type,
                                    value: entry.value
                                };
                                if (extra.range) {
                                    comment.range = entry.range;
                                }
                                if (extra.loc) {
                                    comment.loc = entry.loc;
                                }
                                comments.push(comment);
                            }
                            extra.comments = comments;
                        }

                        function collectToken() {
                            var start, loc, token, range, value;
                            skipComment();
                            start = index;
                            loc = {
                                start: {
                                    line: lineNumber,
                                    column: index - lineStart
                                }
                            };
                            token = extra.advance();
                            loc.end = {
                                line: lineNumber,
                                column: index - lineStart
                            };
                            if (token.type !== Token.EOF) {
                                range = [token.range[0], token.range[1]];
                                value = sliceSource(token.range[0], token.range[1]);
                                extra.tokens.push({
                                    type: TokenName[token.type],
                                    value: value,
                                    range: range,
                                    loc: loc
                                });
                            }
                            return token;
                        }

                        function collectRegex() {
                            var pos, loc, regex, token;
                            skipComment();
                            pos = index;
                            loc = {
                                start: {
                                    line: lineNumber,
                                    column: index - lineStart
                                }
                            };
                            regex = extra.scanRegExp();
                            loc.end = {
                                line: lineNumber,
                                column: index - lineStart
                            };
                            if (extra.tokens.length > 0) {
                                token = extra.tokens[extra.tokens.length - 1];
                                if (token.range[0] === pos && token.type === 'Punctuator') {
                                    if (token.value === '/' || token.value === '/=') {
                                        extra.tokens.pop();
                                    }
                                }
                            }
                            extra.tokens.push({
                                type: 'RegularExpression',
                                value: regex.literal,
                                range: [pos, index],
                                loc: loc
                            });
                            return regex;
                        }

                        function filterTokenLocation() {
                            var i, entry, token, tokens = [];
                            for (i = 0; i < extra.tokens.length; ++i) {
                                entry = extra.tokens[i];
                                token = {
                                    type: entry.type,
                                    value: entry.value
                                };
                                if (extra.range) {
                                    token.range = entry.range;
                                }
                                if (extra.loc) {
                                    token.loc = entry.loc;
                                }
                                tokens.push(token);
                            }
                            extra.tokens = tokens;
                        }

                        function createLiteral(token) {
                            return {
                                type: Syntax.Literal,
                                value: token.value
                            };
                        }

                        function createRawLiteral(token) {
                            return {
                                type: Syntax.Literal,
                                value: token.value,
                                raw: sliceSource(token.range[0], token.range[1])
                            };
                        }

                        function createLocationMarker() {
                            var marker = {};
                            marker.range = [index, index];
                            marker.loc = {
                                start: {
                                    line: lineNumber,
                                    column: index - lineStart
                                },
                                end: {
                                    line: lineNumber,
                                    column: index - lineStart
                                }
                            };
                            marker.end = function () {
                                this.range[1] = index;
                                this.loc.end.line = lineNumber;
                                this.loc.end.column = index - lineStart;
                            };
                            marker.applyGroup = function (node) {
                                if (extra.range) {
                                    node.groupRange = [this.range[0], this.range[1]];
                                }
                                if (extra.loc) {
                                    node.groupLoc = {
                                        start: {
                                            line: this.loc.start.line,
                                            column: this.loc.start.column
                                        },
                                        end: {
                                            line: this.loc.end.line,
                                            column: this.loc.end.column
                                        }
                                    };
                                }
                            };
                            marker.apply = function (node) {
                                if (extra.range) {
                                    node.range = [this.range[0], this.range[1]];
                                }
                                if (extra.loc) {
                                    node.loc = {
                                        start: {
                                            line: this.loc.start.line,
                                            column: this.loc.start.column
                                        },
                                        end: {
                                            line: this.loc.end.line,
                                            column: this.loc.end.column
                                        }
                                    };
                                }
                            };
                            return marker;
                        }

                        function trackGroupExpression() {
                            var marker, expr;
                            skipComment();
                            marker = createLocationMarker();
                            expect('(');
                            expr = parseExpression();
                            expect(')');
                            marker.end();
                            marker.applyGroup(expr);
                            return expr;
                        }

                        function trackLeftHandSideExpression() {
                            var marker, expr;
                            skipComment();
                            marker = createLocationMarker();
                            expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
                            while (match('.') || match('[')) {
                                if (match('[')) {
                                    expr = {
                                        type: Syntax.MemberExpression,
                                        computed: true,
                                        object: expr,
                                        property: parseComputedMember()
                                    };
                                    marker.end();
                                    marker.apply(expr);
                                } else {
                                    expr = {
                                        type: Syntax.MemberExpression,
                                        computed: false,
                                        object: expr,
                                        property: parseNonComputedMember()
                                    };
                                    marker.end();
                                    marker.apply(expr);
                                }
                            }
                            return expr;
                        }

                        function trackLeftHandSideExpressionAllowCall() {
                            var marker, expr;
                            skipComment();
                            marker = createLocationMarker();
                            expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
                            while (match('.') || match('[') || match('(')) {
                                if (match('(')) {
                                    expr = {
                                        type: Syntax.CallExpression,
                                        callee: expr,
                                        'arguments': parseArguments()
                                    };
                                    marker.end();
                                    marker.apply(expr);
                                } else if (match('[')) {
                                    expr = {
                                        type: Syntax.MemberExpression,
                                        computed: true,
                                        object: expr,
                                        property: parseComputedMember()
                                    };
                                    marker.end();
                                    marker.apply(expr);
                                } else {
                                    expr = {
                                        type: Syntax.MemberExpression,
                                        computed: false,
                                        object: expr,
                                        property: parseNonComputedMember()
                                    };
                                    marker.end();
                                    marker.apply(expr);
                                }
                            }
                            return expr;
                        }

                        function filterGroup(node) {
                            var n, i, entry;
                            n = (Object.prototype.toString.apply(node) === '[object Array]') ? [] : {};
                            for (i in node) {
                                if (node.hasOwnProperty(i) && i !== 'groupRange' && i !== 'groupLoc') {
                                    entry = node[i];
                                    if (entry === null || typeof entry !== 'object' || entry instanceof RegExp) {
                                        n[i] = entry;
                                    } else {
                                        n[i] = filterGroup(entry);
                                    }
                                }
                            }
                            return n;
                        }

                        function wrapTrackingFunction(range, loc) {
                            return function (parseFunction) {
                                function isBinary(node) {
                                    return node.type === Syntax.LogicalExpression || node.type === Syntax.BinaryExpression;
                                }

                                function visit(node) {
                                    var start, end;
                                    if (isBinary(node.left)) {
                                        visit(node.left);
                                    }
                                    if (isBinary(node.right)) {
                                        visit(node.right);
                                    }
                                    if (range) {
                                        if (node.left.groupRange || node.right.groupRange) {
                                            start = node.left.groupRange ? node.left.groupRange[0] : node.left.range[0];
                                            end = node.right.groupRange ? node.right.groupRange[1] : node.right.range[1];
                                            node.range = [start, end];
                                        } else if (typeof node.range === 'undefined') {
                                            start = node.left.range[0];
                                            end = node.right.range[1];
                                            node.range = [start, end];
                                        }
                                    }
                                    if (loc) {
                                        if (node.left.groupLoc || node.right.groupLoc) {
                                            start = node.left.groupLoc ? node.left.groupLoc.start : node.left.loc.start;
                                            end = node.right.groupLoc ? node.right.groupLoc.end : node.right.loc.end;
                                            node.loc = {
                                                start: start,
                                                end: end
                                            };
                                        } else if (typeof node.loc === 'undefined') {
                                            node.loc = {
                                                start: node.left.loc.start,
                                                end: node.right.loc.end
                                            };
                                        }
                                    }
                                }
                                return function () {
                                    var marker, node;
                                    skipComment();
                                    marker = createLocationMarker();
                                    node = parseFunction.apply(null, arguments);
                                    marker.end();
                                    if (range && typeof node.range === 'undefined') {
                                        marker.apply(node);
                                    }
                                    if (loc && typeof node.loc === 'undefined') {
                                        marker.apply(node);
                                    }
                                    if (isBinary(node)) {
                                        visit(node);
                                    }
                                    return node;
                                };
                            };
                        }

                        function patch() {
                            var wrapTracking;
                            if (extra.comments) {
                                extra.skipComment = skipComment;
                                skipComment = scanComment;
                            }
                            if (extra.raw) {
                                extra.createLiteral = createLiteral;
                                createLiteral = createRawLiteral;
                            }
                            if (extra.range || extra.loc) {
                                extra.parseGroupExpression = parseGroupExpression;
                                extra.parseLeftHandSideExpression = parseLeftHandSideExpression;
                                extra.parseLeftHandSideExpressionAllowCall = parseLeftHandSideExpressionAllowCall;
                                parseGroupExpression = trackGroupExpression;
                                parseLeftHandSideExpression = trackLeftHandSideExpression;
                                parseLeftHandSideExpressionAllowCall = trackLeftHandSideExpressionAllowCall;
                                wrapTracking = wrapTrackingFunction(extra.range, extra.loc);
                                extra.parseAdditiveExpression = parseAdditiveExpression;
                                extra.parseAssignmentExpression = parseAssignmentExpression;
                                extra.parseBitwiseANDExpression = parseBitwiseANDExpression;
                                extra.parseBitwiseORExpression = parseBitwiseORExpression;
                                extra.parseBitwiseXORExpression = parseBitwiseXORExpression;
                                extra.parseBlock = parseBlock;
                                extra.parseFunctionSourceElements = parseFunctionSourceElements;
                                extra.parseCatchClause = parseCatchClause;
                                extra.parseComputedMember = parseComputedMember;
                                extra.parseConditionalExpression = parseConditionalExpression;
                                extra.parseConstLetDeclaration = parseConstLetDeclaration;
                                extra.parseEqualityExpression = parseEqualityExpression;
                                extra.parseExpression = parseExpression;
                                extra.parseForVariableDeclaration = parseForVariableDeclaration;
                                extra.parseFunctionDeclaration = parseFunctionDeclaration;
                                extra.parseFunctionExpression = parseFunctionExpression;
                                extra.parseLogicalANDExpression = parseLogicalANDExpression;
                                extra.parseLogicalORExpression = parseLogicalORExpression;
                                extra.parseMultiplicativeExpression = parseMultiplicativeExpression;
                                extra.parseNewExpression = parseNewExpression;
                                extra.parseNonComputedProperty = parseNonComputedProperty;
                                extra.parseObjectProperty = parseObjectProperty;
                                extra.parseObjectPropertyKey = parseObjectPropertyKey;
                                extra.parsePostfixExpression = parsePostfixExpression;
                                extra.parsePrimaryExpression = parsePrimaryExpression;
                                extra.parseProgram = parseProgram;
                                extra.parsePropertyFunction = parsePropertyFunction;
                                extra.parseRelationalExpression = parseRelationalExpression;
                                extra.parseStatement = parseStatement;
                                extra.parseShiftExpression = parseShiftExpression;
                                extra.parseSwitchCase = parseSwitchCase;
                                extra.parseUnaryExpression = parseUnaryExpression;
                                extra.parseVariableDeclaration = parseVariableDeclaration;
                                extra.parseVariableIdentifier = parseVariableIdentifier;
                                parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);
                                parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);
                                parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);
                                parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);
                                parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);
                                parseBlock = wrapTracking(extra.parseBlock);
                                parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);
                                parseCatchClause = wrapTracking(extra.parseCatchClause);
                                parseComputedMember = wrapTracking(extra.parseComputedMember);
                                parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);
                                parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);
                                parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);
                                parseExpression = wrapTracking(extra.parseExpression);
                                parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);
                                parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);
                                parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);
                                parseLeftHandSideExpression = wrapTracking(parseLeftHandSideExpression);
                                parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);
                                parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);
                                parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);
                                parseNewExpression = wrapTracking(extra.parseNewExpression);
                                parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);
                                parseObjectProperty = wrapTracking(extra.parseObjectProperty);
                                parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);
                                parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);
                                parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);
                                parseProgram = wrapTracking(extra.parseProgram);
                                parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);
                                parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);
                                parseStatement = wrapTracking(extra.parseStatement);
                                parseShiftExpression = wrapTracking(extra.parseShiftExpression);
                                parseSwitchCase = wrapTracking(extra.parseSwitchCase);
                                parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);
                                parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);
                                parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);
                            }
                            if (typeof extra.tokens !== 'undefined') {
                                extra.advance = advance;
                                extra.scanRegExp = scanRegExp;
                                advance = collectToken;
                                scanRegExp = collectRegex;
                            }
                        }

                        function unpatch() {
                            if (typeof extra.skipComment === 'function') {
                                skipComment = extra.skipComment;
                            }
                            if (extra.raw) {
                                createLiteral = extra.createLiteral;
                            }
                            if (extra.range || extra.loc) {
                                parseAdditiveExpression = extra.parseAdditiveExpression;
                                parseAssignmentExpression = extra.parseAssignmentExpression;
                                parseBitwiseANDExpression = extra.parseBitwiseANDExpression;
                                parseBitwiseORExpression = extra.parseBitwiseORExpression;
                                parseBitwiseXORExpression = extra.parseBitwiseXORExpression;
                                parseBlock = extra.parseBlock;
                                parseFunctionSourceElements = extra.parseFunctionSourceElements;
                                parseCatchClause = extra.parseCatchClause;
                                parseComputedMember = extra.parseComputedMember;
                                parseConditionalExpression = extra.parseConditionalExpression;
                                parseConstLetDeclaration = extra.parseConstLetDeclaration;
                                parseEqualityExpression = extra.parseEqualityExpression;
                                parseExpression = extra.parseExpression;
                                parseForVariableDeclaration = extra.parseForVariableDeclaration;
                                parseFunctionDeclaration = extra.parseFunctionDeclaration;
                                parseFunctionExpression = extra.parseFunctionExpression;
                                parseGroupExpression = extra.parseGroupExpression;
                                parseLeftHandSideExpression = extra.parseLeftHandSideExpression;
                                parseLeftHandSideExpressionAllowCall = extra.parseLeftHandSideExpressionAllowCall;
                                parseLogicalANDExpression = extra.parseLogicalANDExpression;
                                parseLogicalORExpression = extra.parseLogicalORExpression;
                                parseMultiplicativeExpression = extra.parseMultiplicativeExpression;
                                parseNewExpression = extra.parseNewExpression;
                                parseNonComputedProperty = extra.parseNonComputedProperty;
                                parseObjectProperty = extra.parseObjectProperty;
                                parseObjectPropertyKey = extra.parseObjectPropertyKey;
                                parsePrimaryExpression = extra.parsePrimaryExpression;
                                parsePostfixExpression = extra.parsePostfixExpression;
                                parseProgram = extra.parseProgram;
                                parsePropertyFunction = extra.parsePropertyFunction;
                                parseRelationalExpression = extra.parseRelationalExpression;
                                parseStatement = extra.parseStatement;
                                parseShiftExpression = extra.parseShiftExpression;
                                parseSwitchCase = extra.parseSwitchCase;
                                parseUnaryExpression = extra.parseUnaryExpression;
                                parseVariableDeclaration = extra.parseVariableDeclaration;
                                parseVariableIdentifier = extra.parseVariableIdentifier;
                            }
                            if (typeof extra.scanRegExp === 'function') {
                                advance = extra.advance;
                                scanRegExp = extra.scanRegExp;
                            }
                        }

                        function stringToArray(str) {
                            var length = str.length,
                                result = [],
                                i;
                            for (i = 0; i < length; ++i) {
                                result[i] = str.charAt(i);
                            }
                            return result;
                        }

                        function parse(code, options) {
                            var program, toString;
                            toString = String;
                            if (typeof code !== 'string' && !(code instanceof String)) {
                                code = toString(code);
                            }
                            source = code;
                            index = 0;
                            lineNumber = (source.length > 0) ? 1 : 0;
                            lineStart = 0;
                            length = source.length;
                            buffer = null;
                            state = {
                                allowIn: true,
                                labelSet: {},
                                inFunctionBody: false,
                                inIteration: false,
                                inSwitch: false
                            };
                            extra = {};
                            if (typeof options !== 'undefined') {
                                extra.range = (typeof options.range === 'boolean') && options.range;
                                extra.loc = (typeof options.loc === 'boolean') && options.loc;
                                extra.raw = (typeof options.raw === 'boolean') && options.raw;
                                if (typeof options.tokens === 'boolean' && options.tokens) {
                                    extra.tokens = [];
                                }
                                if (typeof options.comment === 'boolean' && options.comment) {
                                    extra.comments = [];
                                }
                                if (typeof options.tolerant === 'boolean' && options.tolerant) {
                                    extra.errors = [];
                                }
                            }
                            if (length > 0) {
                                if (typeof source[0] === 'undefined') {
                                    if (code instanceof String) {
                                        source = code.valueOf();
                                    }
                                    if (typeof source[0] === 'undefined') {
                                        source = stringToArray(code);
                                    }
                                }
                            }
                            patch();
                            try {
                                program = parseProgram();
                                if (typeof extra.comments !== 'undefined') {
                                    filterCommentLocation();
                                    program.comments = extra.comments;
                                }
                                if (typeof extra.tokens !== 'undefined') {
                                    filterTokenLocation();
                                    program.tokens = extra.tokens;
                                }
                                if (typeof extra.errors !== 'undefined') {
                                    program.errors = extra.errors;
                                }
                                if (extra.range || extra.loc) {
                                    program.body = filterGroup(program.body);
                                }
                            } catch (e) {
                                throw e;
                            } finally {
                                unpatch();
                                extra = {};
                            }
                            return program;
                        }
                        exports.version = '1.0.4';
                        exports.parse = parse;
                        exports.Syntax = (function () {
                            var name, types = {};
                            if (typeof Object.create === 'function') {
                                types = Object.create(null);
                            }
                            for (name in Syntax) {
                                if (Syntax.hasOwnProperty(name)) {
                                    types[name] = Syntax[name];
                                }
                            }
                            if (typeof Object.freeze === 'function') {
                                Object.freeze(types);
                            }
                            return types;
                        }());
                    }));
                }, {}
            ],
            187: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(184)
                }, {}
            ],
            188: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var compile = _dereq_("cwise-compiler")
                    var EmptyProc = {
                        body: "",
                        args: [],
                        thisVars: [],
                        localVars: []
                    }

                    function fixup(x) {
                        if (!x) {
                            return EmptyProc
                        }
                        for (var i = 0; i < x.args.length; ++i) {
                            var a = x.args[i]
                            if (i === 0) {
                                x.args[i] = {
                                    name: a,
                                    lvalue: true,
                                    rvalue: !!x.rvalue,
                                    count: x.count || 1
                                }
                            } else {
                                x.args[i] = {
                                    name: a,
                                    lvalue: false,
                                    rvalue: true,
                                    count: 1
                                }
                            }
                        }
                        if (!x.thisVars) {
                            x.thisVars = []
                        }
                        if (!x.localVars) {
                            x.localVars = []
                        }
                        return x
                    }

                    function pcompile(user_args) {
                        return compile({
                            args: user_args.args,
                            pre: fixup(user_args.pre),
                            body: fixup(user_args.body),
                            post: fixup(user_args.proc),
                            funcName: user_args.funcName
                        })
                    }

                    function makeOp(user_args) {
                        var args = []
                        for (var i = 0; i < user_args.args.length; ++i) {
                            args.push("a" + i)
                        }
                        var wrapper = new Function("P", ["return function ", user_args.funcName, "_ndarrayops(", args.join(","), ") {P(", args.join(","), ");return a0}"].join(""))
                        return wrapper(pcompile(user_args))
                    }
                    var assign_ops = {
                        add: "+",
                        sub: "-",
                        mul: "*",
                        div: "/",
                        mod: "%",
                        band: "&",
                        bor: "|",
                        bxor: "^",
                        lshift: "<<",
                        rshift: ">>",
                        rrshift: ">>>"
                    };
                    (function () {
                        for (var id in assign_ops) {
                            var op = assign_ops[id]
                            exports[id] = makeOp({
                                args: ["array", "array", "array"],
                                body: {
                                    args: ["a", "b", "c"],
                                    body: "a=b" + op + "c"
                                },
                                funcName: id
                            })
                            exports[id + "eq"] = makeOp({
                                args: ["array", "array"],
                                body: {
                                    args: ["a", "b"],
                                    body: "a" + op + "=b"
                                },
                                rvalue: true,
                                funcName: id + "eq"
                            })
                            exports[id + "s"] = makeOp({
                                args: ["array", "array", "scalar"],
                                body: {
                                    args: ["a", "b", "s"],
                                    body: "a=b" + op + "s"
                                },
                                funcName: id + "s"
                            })
                            exports[id + "seq"] = makeOp({
                                args: ["array", "scalar"],
                                body: {
                                    args: ["a", "s"],
                                    body: "a" + op + "=s"
                                },
                                rvalue: true,
                                funcName: id + "seq"
                            })
                        }
                    })();
                    var unary_ops = {
                        not: "!",
                        bnot: "~",
                        neg: "-",
                        recip: "1.0/"
                    };
                    (function () {
                        for (var id in unary_ops) {
                            var op = unary_ops[id]
                            exports[id] = makeOp({
                                args: ["array", "array"],
                                body: {
                                    args: ["a", "b"],
                                    body: "a=" + op + "b"
                                },
                                funcName: id
                            })
                            exports[id + "eq"] = makeOp({
                                args: ["array"],
                                body: {
                                    args: ["a"],
                                    body: "a=" + op + "a"
                                },
                                rvalue: true,
                                count: 2,
                                funcName: id + "eq"
                            })
                        }
                    })();
                    var binary_ops = {
                        and: "&&",
                        or: "||",
                        eq: "===",
                        neq: "!==",
                        lt: "<",
                        gt: ">",
                        leq: "<=",
                        geq: ">="
                    };
                    (function () {
                        for (var id in binary_ops) {
                            var op = binary_ops[id]
                            exports[id] = makeOp({
                                args: ["array", "array", "array"],
                                body: {
                                    args: ["a", "b", "c"],
                                    body: "a=b" + op + "c"
                                },
                                funcName: id
                            })
                            exports[id + "s"] = makeOp({
                                args: ["array", "array", "scalar"],
                                body: {
                                    args: ["a", "b", "s"],
                                    body: "a=b" + op + "s"
                                },
                                funcName: id + "s"
                            })
                            exports[id + "eq"] = makeOp({
                                args: ["array", "array"],
                                body: {
                                    args: ["a", "b"],
                                    body: "a=a" + op + "b"
                                },
                                rvalue: true,
                                count: 2,
                                funcName: id + "eq"
                            })
                            exports[id + "seq"] = makeOp({
                                args: ["array", "scalar"],
                                body: {
                                    args: ["a", "s"],
                                    body: "a=a" + op + "s"
                                },
                                rvalue: true,
                                count: 2,
                                funcName: id + "seq"
                            })
                        }
                    })();
                    var math_unary = ["abs", "acos", "asin", "atan", "ceil", "cos", "exp", "floor", "log", "round", "sin", "sqrt", "tan"];
                    (function () {
                        for (var i = 0; i < math_unary.length; ++i) {
                            var f = math_unary[i]
                            exports[f] = makeOp({
                                args: ["array", "array"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a", "b"],
                                    body: "a=this_f(b)",
                                    thisVars: ["this_f"]
                                },
                                funcName: f
                            })
                            exports[f + "eq"] = makeOp({
                                args: ["array"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a"],
                                    body: "a=this_f(a)",
                                    thisVars: ["this_f"]
                                },
                                rvalue: true,
                                count: 2,
                                funcName: f + "eq"
                            })
                        }
                    })();
                    var math_comm = ["max", "min", "atan2", "pow"];
                    (function () {
                        for (var i = 0; i < math_comm.length; ++i) {
                            var f = math_comm[i]
                            exports[f] = makeOp({
                                args: ["array", "array", "array"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a", "b", "c"],
                                    body: "a=this_f(b,c)",
                                    thisVars: ["this_f"]
                                },
                                funcName: f
                            })
                            exports[f + "s"] = makeOp({
                                args: ["array", "array", "scalar"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a", "b", "c"],
                                    body: "a=this_f(b,c)",
                                    thisVars: ["this_f"]
                                },
                                funcName: f + "s"
                            })
                            exports[f + "eq"] = makeOp({
                                args: ["array", "array"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a", "b"],
                                    body: "a=this_f(a,b)",
                                    thisVars: ["this_f"]
                                },
                                rvalue: true,
                                count: 2,
                                funcName: f + "eq"
                            })
                            exports[f + "seq"] = makeOp({
                                args: ["array", "scalar"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a", "b"],
                                    body: "a=this_f(a,b)",
                                    thisVars: ["this_f"]
                                },
                                rvalue: true,
                                count: 2,
                                funcName: f + "seq"
                            })
                        }
                    })();
                    var math_noncomm = ["atan2", "pow"];
                    (function () {
                        for (var i = 0; i < math_noncomm.length; ++i) {
                            var f = math_noncomm[i]
                            exports[f + "op"] = makeOp({
                                args: ["array", "array", "array"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a", "b", "c"],
                                    body: "a=this_f(c,b)",
                                    thisVars: ["this_f"]
                                },
                                funcName: f + "op"
                            })
                            exports[f + "ops"] = makeOp({
                                args: ["array", "array", "scalar"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a", "b", "c"],
                                    body: "a=this_f(c,b)",
                                    thisVars: ["this_f"]
                                },
                                funcName: f + "ops"
                            })
                            exports[f + "opeq"] = makeOp({
                                args: ["array", "array"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a", "b"],
                                    body: "a=this_f(b,a)",
                                    thisVars: ["this_f"]
                                },
                                rvalue: true,
                                count: 2,
                                funcName: f + "opeq"
                            })
                            exports[f + "opseq"] = makeOp({
                                args: ["array", "scalar"],
                                pre: {
                                    args: [],
                                    body: "this_f=Math." + f,
                                    thisVars: ["this_f"]
                                },
                                body: {
                                    args: ["a", "b"],
                                    body: "a=this_f(b,a)",
                                    thisVars: ["this_f"]
                                },
                                rvalue: true,
                                count: 2,
                                funcName: f + "opseq"
                            })
                        }
                    })();
                    exports.any = compile({
                        args: ["array"],
                        pre: EmptyProc,
                        body: {
                            args: [{
                                name: "a",
                                lvalue: false,
                                rvalue: true,
                                count: 1
                            }],
                            body: "if(a){return true}",
                            localVars: [],
                            thisVars: []
                        },
                        post: {
                            args: [],
                            localVars: [],
                            thisVars: [],
                            body: "return false"
                        },
                        funcName: "any"
                    })
                    exports.all = compile({
                        args: ["array"],
                        pre: EmptyProc,
                        body: {
                            args: [{
                                name: "x",
                                lvalue: false,
                                rvalue: true,
                                count: 1
                            }],
                            body: "if(!x){return false}",
                            localVars: [],
                            thisVars: []
                        },
                        post: {
                            args: [],
                            localVars: [],
                            thisVars: [],
                            body: "return true"
                        },
                        funcName: "all"
                    })
                    exports.sum = compile({
                        args: ["array"],
                        pre: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "this_s=0"
                        },
                        body: {
                            args: [{
                                name: "a",
                                lvalue: false,
                                rvalue: true,
                                count: 1
                            }],
                            body: "this_s+=a",
                            localVars: [],
                            thisVars: ["this_s"]
                        },
                        post: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "return this_s"
                        },
                        funcName: "sum"
                    })
                    exports.prod = compile({
                        args: ["array"],
                        pre: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "this_s=1"
                        },
                        body: {
                            args: [{
                                name: "a",
                                lvalue: false,
                                rvalue: true,
                                count: 1
                            }],
                            body: "this_s*=a",
                            localVars: [],
                            thisVars: ["this_s"]
                        },
                        post: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "return this_s"
                        },
                        funcName: "prod"
                    })
                    exports.norm2squared = compile({
                        args: ["array"],
                        pre: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "this_s=0"
                        },
                        body: {
                            args: [{
                                name: "a",
                                lvalue: false,
                                rvalue: true,
                                count: 2
                            }],
                            body: "this_s+=a*a",
                            localVars: [],
                            thisVars: ["this_s"]
                        },
                        post: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "return this_s"
                        },
                        funcName: "norm2squared"
                    })
                    exports.norm2 = compile({
                        args: ["array"],
                        pre: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "this_s=0"
                        },
                        body: {
                            args: [{
                                name: "a",
                                lvalue: false,
                                rvalue: true,
                                count: 2
                            }],
                            body: "this_s+=a*a",
                            localVars: [],
                            thisVars: ["this_s"]
                        },
                        post: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "return Math.sqrt(this_s)"
                        },
                        funcName: "norm2"
                    })
                    exports.norminf = compile({
                        args: ["array"],
                        pre: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "this_s=0"
                        },
                        body: {
                            args: [{
                                name: "a",
                                lvalue: false,
                                rvalue: true,
                                count: 4
                            }],
                            body: "if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}",
                            localVars: [],
                            thisVars: ["this_s"]
                        },
                        post: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "return this_s"
                        },
                        funcName: "norminf"
                    })
                    exports.norm1 = compile({
                        args: ["array"],
                        pre: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "this_s=0"
                        },
                        body: {
                            args: [{
                                name: "a",
                                lvalue: false,
                                rvalue: true,
                                count: 3
                            }],
                            body: "this_s+=a<0?-a:a",
                            localVars: [],
                            thisVars: ["this_s"]
                        },
                        post: {
                            args: [],
                            localVars: [],
                            thisVars: ["this_s"],
                            body: "return this_s"
                        },
                        funcName: "norm1"
                    })
                    exports.sup = compile({
                        args: ["array"],
                        pre: {
                            body: "this_h=-Infinity",
                            args: [],
                            thisVars: ["this_h"],
                            localVars: []
                        },
                        body: {
                            body: "if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_",
                            args: [{
                                "name": "_inline_1_arg0_",
                                "lvalue": false,
                                "rvalue": true,
                                "count": 2
                            }],
                            thisVars: ["this_h"],
                            localVars: []
                        },
                        post: {
                            body: "return this_h",
                            args: [],
                            thisVars: ["this_h"],
                            localVars: []
                        }
                    })
                    exports.inf = compile({
                        args: ["array"],
                        pre: {
                            body: "this_h=Infinity",
                            args: [],
                            thisVars: ["this_h"],
                            localVars: []
                        },
                        body: {
                            body: "if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_",
                            args: [{
                                "name": "_inline_1_arg0_",
                                "lvalue": false,
                                "rvalue": true,
                                "count": 2
                            }],
                            thisVars: ["this_h"],
                            localVars: []
                        },
                        post: {
                            body: "return this_h",
                            args: [],
                            thisVars: ["this_h"],
                            localVars: []
                        }
                    })
                    exports.argmin = compile({
                        args: ["index", "array", "shape"],
                        pre: {
                            body: "{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}",
                            args: [{
                                name: "_inline_0_arg0_",
                                lvalue: false,
                                rvalue: false,
                                count: 0
                            }, {
                                name: "_inline_0_arg1_",
                                lvalue: false,
                                rvalue: false,
                                count: 0
                            }, {
                                name: "_inline_0_arg2_",
                                lvalue: false,
                                rvalue: true,
                                count: 1
                            }],
                            thisVars: ["this_i", "this_v"],
                            localVars: []
                        },
                        body: {
                            body: "{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
                            args: [{
                                name: "_inline_1_arg0_",
                                lvalue: false,
                                rvalue: true,
                                count: 2
                            }, {
                                name: "_inline_1_arg1_",
                                lvalue: false,
                                rvalue: true,
                                count: 2
                            }],
                            thisVars: ["this_i", "this_v"],
                            localVars: ["_inline_1_k"]
                        },
                        post: {
                            body: "{return this_i}",
                            args: [],
                            thisVars: ["this_i"],
                            localVars: []
                        }
                    })
                    exports.argmax = compile({
                        args: ["index", "array", "shape"],
                        pre: {
                            body: "{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}",
                            args: [{
                                name: "_inline_0_arg0_",
                                lvalue: false,
                                rvalue: false,
                                count: 0
                            }, {
                                name: "_inline_0_arg1_",
                                lvalue: false,
                                rvalue: false,
                                count: 0
                            }, {
                                name: "_inline_0_arg2_",
                                lvalue: false,
                                rvalue: true,
                                count: 1
                            }],
                            thisVars: ["this_i", "this_v"],
                            localVars: []
                        },
                        body: {
                            body: "{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
                            args: [{
                                name: "_inline_1_arg0_",
                                lvalue: false,
                                rvalue: true,
                                count: 2
                            }, {
                                name: "_inline_1_arg1_",
                                lvalue: false,
                                rvalue: true,
                                count: 2
                            }],
                            thisVars: ["this_i", "this_v"],
                            localVars: ["_inline_1_k"]
                        },
                        post: {
                            body: "{return this_i}",
                            args: [],
                            thisVars: ["this_i"],
                            localVars: []
                        }
                    })
                    exports.random = makeOp({
                        args: ["array"],
                        pre: {
                            args: [],
                            body: "this_f=Math.random",
                            thisVars: ["this_f"]
                        },
                        body: {
                            args: ["a"],
                            body: "a=this_f()",
                            thisVars: ["this_f"]
                        },
                        funcName: "random"
                    })
                    exports.assign = makeOp({
                        args: ["array", "array"],
                        body: {
                            args: ["a", "b"],
                            body: "a=b"
                        },
                        funcName: "assign"
                    })
                    exports.assigns = makeOp({
                        args: ["array", "scalar"],
                        body: {
                            args: ["a", "b"],
                            body: "a=b"
                        },
                        funcName: "assigns"
                    })
                    exports.equals = compile({
                        args: ["array", "array"],
                        pre: EmptyProc,
                        body: {
                            args: [{
                                name: "x",
                                lvalue: false,
                                rvalue: true,
                                count: 1
                            }, {
                                name: "y",
                                lvalue: false,
                                rvalue: true,
                                count: 1
                            }],
                            body: "if(x!==y){return false}",
                            localVars: [],
                            thisVars: []
                        },
                        post: {
                            args: [],
                            localVars: [],
                            thisVars: [],
                            body: "return true"
                        },
                        funcName: "equals"
                    })
                }, {
                    "cwise-compiler": 189
                }
            ],
            189: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(65)
                }, {
                    "./lib/thunk.js": 191
                }
            ],
            190: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(66)
                }, {
                    "uniq": 192
                }
            ],
            191: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(67)
                }, {
                    "./compile.js": 190
                }
            ],
            192: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(12)
                }, {}
            ],
            193: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var ndarray = _dereq_("ndarray")
                    var do_convert = _dereq_("./doConvert.js")
                    module.exports = function convert(arr, result) {
                        var shape = [],
                            c = arr,
                            sz = 1
                        while (c instanceof Array) {
                            shape.push(c.length)
                            sz *= c.length
                            c = c[0]
                        }
                        if (shape.length === 0) {
                            return ndarray()
                        }
                        if (!result) {
                            result = ndarray(new Float64Array(sz), shape)
                        }
                        do_convert(result, arr)
                        return result
                    }
                }, {
                    "./doConvert.js": 194,
                    "ndarray": 199
                }
            ],
            194: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_('cwise-compiler')({
                        "args": ["array", "scalar", "index"],
                        "pre": {
                            "body": "{}",
                            "args": [],
                            "thisVars": [],
                            "localVars": []
                        },
                        "body": {
                            "body": "{\nvar _inline_1_v=_inline_1_arg1_,_inline_1_i\nfor(_inline_1_i=0;_inline_1_i<_inline_1_arg2_.length-1;++_inline_1_i) {\n_inline_1_v=_inline_1_v[_inline_1_arg2_[_inline_1_i]]\n}\n_inline_1_arg0_=_inline_1_v[_inline_1_arg2_[_inline_1_arg2_.length-1]]\n}",
                            "args": [{
                                "name": "_inline_1_arg0_",
                                "lvalue": true,
                                "rvalue": false,
                                "count": 1
                            }, {
                                "name": "_inline_1_arg1_",
                                "lvalue": false,
                                "rvalue": true,
                                "count": 1
                            }, {
                                "name": "_inline_1_arg2_",
                                "lvalue": false,
                                "rvalue": true,
                                "count": 4
                            }],
                            "thisVars": [],
                            "localVars": ["_inline_1_i", "_inline_1_v"]
                        },
                        "post": {
                            "body": "{}",
                            "args": [],
                            "thisVars": [],
                            "localVars": []
                        },
                        "funcName": "convert",
                        "blockSize": 64
                    })
                }, {
                    "cwise-compiler": 195
                }
            ],
            195: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var createThunk = _dereq_("./lib/thunk.js")

                    function Procedure() {
                        this.argTypes = []
                        this.shimArgs = []
                        this.arrayArgs = []
                        this.scalarArgs = []
                        this.offsetArgs = []
                        this.offsetArgIndex = []
                        this.indexArgs = []
                        this.shapeArgs = []
                        this.funcName = ""
                        this.pre = null
                        this.body = null
                        this.post = null
                        this.debug = false
                    }

                    function compileCwise(user_args) {
                        var proc = new Procedure()
                        proc.pre = user_args.pre
                        proc.body = user_args.body
                        proc.post = user_args.post
                        var proc_args = user_args.args.slice(0)
                        proc.argTypes = proc_args.slice(0)
                        for (var i = 0; i < proc_args.length; ++i) {
                            var arg_type = proc_args[i]
                            if (arg_type === "array") {
                                proc.arrayArgs.push(i)
                                proc.shimArgs.push("array" + i)
                                if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
                                    throw new Error("cwise: pre() block may not reference array args")
                                }
                                if (i < proc.post.args.length && proc.post.args[i].count > 0) {
                                    throw new Error("cwise: post() block may not reference array args")
                                }
                            } else if (arg_type === "scalar") {
                                proc.scalarArgs.push(i)
                                proc.shimArgs.push("scalar" + i)
                            } else if (arg_type === "index") {
                                proc.indexArgs.push(i)
                                if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
                                    throw new Error("cwise: pre() block may not reference array index")
                                }
                                if (i < proc.body.args.length && proc.body.args[i].lvalue) {
                                    throw new Error("cwise: body() block may not write to array index")
                                }
                                if (i < proc.post.args.length && proc.post.args[i].count > 0) {
                                    throw new Error("cwise: post() block may not reference array index")
                                }
                            } else if (arg_type === "shape") {
                                proc.shapeArgs.push(i)
                                if (i < proc.pre.args.length && proc.pre.args[i].lvalue) {
                                    throw new Error("cwise: pre() block may not write to array shape")
                                }
                                if (i < proc.body.args.length && proc.body.args[i].lvalue) {
                                    throw new Error("cwise: body() block may not write to array shape")
                                }
                                if (i < proc.post.args.length && proc.post.args[i].lvalue) {
                                    throw new Error("cwise: post() block may not write to array shape")
                                }
                            } else if (typeof arg_type === "object" && arg_type.offset) {
                                proc.argTypes[i] = "offset"
                                proc.offsetArgs.push({
                                    array: arg_type.array,
                                    offset: arg_type.offset
                                })
                                proc.offsetArgIndex.push(i)
                            } else {
                                throw new Error("cwise: Unknown argument type " + proc_args[i])
                            }
                        }
                        if (proc.arrayArgs.length <= 0) {
                            throw new Error("cwise: No array arguments specified")
                        }
                        if (proc.pre.args.length > proc_args.length) {
                            throw new Error("cwise: Too many arguments in pre() block")
                        }
                        if (proc.body.args.length > proc_args.length) {
                            throw new Error("cwise: Too many arguments in body() block")
                        }
                        if (proc.post.args.length > proc_args.length) {
                            throw new Error("cwise: Too many arguments in post() block")
                        }
                        proc.debug = !!user_args.printCode || !!user_args.debug
                        proc.funcName = user_args.funcName || "cwise"
                        proc.blockSize = user_args.blockSize || 64
                        return createThunk(proc)
                    }
                    module.exports = compileCwise
                }, {
                    "./lib/thunk.js": 197
                }
            ],
            196: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var uniq = _dereq_("uniq")

                    function innerFill(order, proc, body) {
                        var dimension = order.length,
                            nargs = proc.arrayArgs.length,
                            has_index = proc.indexArgs.length > 0,
                            code = [],
                            vars = [],
                            idx = 0,
                            pidx = 0,
                            i, j
                        for (i = 0; i < dimension; ++i) {
                            vars.push(["i", i, "=0"].join(""))
                        }
                        for (j = 0; j < nargs; ++j) {
                            for (i = 0; i < dimension; ++i) {
                                pidx = idx
                                idx = order[i]
                                if (i === 0) {
                                    vars.push(["d", j, "s", i, "=t", j, "[", idx, "]"].join(""))
                                } else {
                                    vars.push(["d", j, "s", i, "=(t", j, "[", idx, "]-s", pidx, "*t", j, "[", pidx, "])"].join(""))
                                }
                            }
                        }
                        code.push("var " + vars.join(","))
                        for (i = dimension - 1; i >= 0; --i) {
                            idx = order[i]
                            code.push(["for(i", i, "=0;i", i, "<s", idx, ";++i", i, "){"].join(""))
                        }
                        code.push(body)
                        for (i = 0; i < dimension; ++i) {
                            pidx = idx
                            idx = order[i]
                            for (j = 0; j < nargs; ++j) {
                                code.push(["p", j, "+=d", j, "s", i].join(""))
                            }
                            if (has_index) {
                                if (i > 0) {
                                    code.push(["index[", pidx, "]-=s", pidx].join(""))
                                }
                                code.push(["++index[", idx, "]"].join(""))
                            }
                            code.push("}")
                        }
                        return code.join("\n")
                    }

                    function outerFill(matched, order, proc, body) {
                        var dimension = order.length,
                            nargs = proc.arrayArgs.length,
                            blockSize = proc.blockSize,
                            has_index = proc.indexArgs.length > 0,
                            code = []
                        for (var i = 0; i < nargs; ++i) {
                            code.push(["var offset", i, "=p", i].join(""))
                        }
                        for (var i = matched; i < dimension; ++i) {
                            code.push(["for(var j" + i + "=SS[", order[i], "]|0;j", i, ">0;){"].join(""))
                            code.push(["if(j", i, "<", blockSize, "){"].join(""))
                            code.push(["s", order[i], "=j", i].join(""))
                            code.push(["j", i, "=0"].join(""))
                            code.push(["}else{s", order[i], "=", blockSize].join(""))
                            code.push(["j", i, "-=", blockSize, "}"].join(""))
                            if (has_index) {
                                code.push(["index[", order[i], "]=j", i].join(""))
                            }
                        }
                        for (var i = 0; i < nargs; ++i) {
                            var indexStr = ["offset" + i]
                            for (var j = matched; j < dimension; ++j) {
                                indexStr.push(["j", j, "*t", i, "[", order[j], "]"].join(""))
                            }
                            code.push(["p", i, "=(", indexStr.join("+"), ")"].join(""))
                        }
                        code.push(innerFill(order, proc, body))
                        for (var i = matched; i < dimension; ++i) {
                            code.push("}")
                        }
                        return code.join("\n")
                    }

                    function countMatches(orders) {
                        var matched = 0,
                            dimension = orders[0].length
                        while (matched < dimension) {
                            for (var j = 1; j < orders.length; ++j) {
                                if (orders[j][matched] !== orders[0][matched]) {
                                    return matched
                                }
                            }
                            ++matched
                        }
                        return matched
                    }

                    function processBlock(block, proc, dtypes) {
                        var code = block.body
                        var pre = []
                        var post = []
                        for (var i = 0; i < block.args.length; ++i) {
                            var carg = block.args[i]
                            if (carg.count <= 0) {
                                continue
                            }
                            var re = new RegExp(carg.name, "g")
                            var ptrStr = ""
                            var arrNum = proc.arrayArgs.indexOf(i)
                            switch (proc.argTypes[i]) {
                            case "offset":
                                var offArgIndex = proc.offsetArgIndex.indexOf(i)
                                var offArg = proc.offsetArgs[offArgIndex]
                                arrNum = offArg.array
                                ptrStr = "+q" + offArgIndex
                            case "array":
                                ptrStr = "p" + arrNum + ptrStr
                                var localStr = "l" + i
                                var arrStr = "a" + arrNum
                                if (carg.count === 1) {
                                    if (dtypes[arrNum] === "generic") {
                                        if (carg.lvalue) {
                                            pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join(""))
                                            code = code.replace(re, localStr)
                                            post.push([arrStr, ".set(", ptrStr, ",", localStr, ")"].join(""))
                                        } else {
                                            code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
                                        }
                                    } else {
                                        code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""))
                                    }
                                } else if (dtypes[arrNum] === "generic") {
                                    pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join(""))
                                    code = code.replace(re, localStr)
                                    if (carg.lvalue) {
                                        post.push([arrStr, ".set(", ptrStr, ",", localStr, ")"].join(""))
                                    }
                                } else {
                                    pre.push(["var ", localStr, "=", arrStr, "[", ptrStr, "]"].join(""))
                                    code = code.replace(re, localStr)
                                    if (carg.lvalue) {
                                        post.push([arrStr, "[", ptrStr, "]=", localStr].join(""))
                                    }
                                }
                                break
                            case "scalar":
                                code = code.replace(re, "Y" + proc.scalarArgs.indexOf(i))
                                break
                            case "index":
                                code = code.replace(re, "index")
                                break
                            case "shape":
                                code = code.replace(re, "shape")
                                break
                            }
                        }
                        return [pre.join("\n"), code, post.join("\n")].join("\n").trim()
                    }

                    function typeSummary(dtypes) {
                        var summary = new Array(dtypes.length)
                        var allEqual = true
                        for (var i = 0; i < dtypes.length; ++i) {
                            var t = dtypes[i]
                            var digits = t.match(/\d+/)
                            if (!digits) {
                                digits = ""
                            } else {
                                digits = digits[0]
                            }
                            if (t.charAt(0) === 0) {
                                summary[i] = "u" + t.charAt(1) + digits
                            } else {
                                summary[i] = t.charAt(0) + digits
                            }
                            if (i > 0) {
                                allEqual = allEqual && summary[i] === summary[i - 1]
                            }
                        }
                        if (allEqual) {
                            return summary[0]
                        }
                        return summary.join("")
                    }

                    function generateCWiseOp(proc, typesig) {
                        var dimension = typesig[1].length | 0
                        var orders = new Array(proc.arrayArgs.length)
                        var dtypes = new Array(proc.arrayArgs.length)
                        var arglist = ["SS"]
                        var code = ["'use strict'"]
                        var vars = []
                        for (var j = 0; j < dimension; ++j) {
                            vars.push(["s", j, "=SS[", j, "]"].join(""))
                        }
                        for (var i = 0; i < proc.arrayArgs.length; ++i) {
                            arglist.push("a" + i)
                            arglist.push("t" + i)
                            arglist.push("p" + i)
                            dtypes[i] = typesig[2 * i]
                            orders[i] = typesig[2 * i + 1]
                        }
                        for (var i = 0; i < proc.scalarArgs.length; ++i) {
                            arglist.push("Y" + i)
                        }
                        if (proc.shapeArgs.length > 0) {
                            vars.push("shape=SS.slice(0)")
                        }
                        if (proc.indexArgs.length > 0) {
                            var zeros = new Array(dimension)
                            for (var i = 0; i < dimension; ++i) {
                                zeros[i] = "0"
                            }
                            vars.push(["index=[", zeros.join(","), "]"].join(""))
                        }
                        for (var i = 0; i < proc.offsetArgs.length; ++i) {
                            var off_arg = proc.offsetArgs[i]
                            var init_string = []
                            for (var j = 0; j < off_arg.offset.length; ++j) {
                                if (off_arg.offset[j] === 0) {
                                    continue
                                } else if (off_arg.offset[j] === 1) {
                                    init_string.push(["t", off_arg.array, "[", j, "]"].join(""))
                                } else {
                                    init_string.push([off_arg.offset[j], "*t", off_arg.array, "[", j, "]"].join(""))
                                }
                            }
                            if (init_string.length === 0) {
                                vars.push("q" + i + "=0")
                            } else {
                                vars.push(["q", i, "=(", init_string.join("+"), ")|0"].join(""))
                            }
                        }
                        var thisVars = uniq([].concat(proc.pre.thisVars).concat(proc.body.thisVars).concat(proc.post.thisVars))
                        vars = vars.concat(thisVars)
                        code.push("var " + vars.join(","))
                        for (var i = 0; i < proc.arrayArgs.length; ++i) {
                            code.push("p" + i + "|=0")
                        }
                        if (proc.pre.body.length > 3) {
                            code.push(processBlock(proc.pre, proc, dtypes))
                        }
                        var body = processBlock(proc.body, proc, dtypes)
                        var matched = countMatches(orders)
                        if (matched < dimension) {
                            code.push(outerFill(matched, orders[0], proc, body))
                        } else {
                            code.push(innerFill(orders[0], proc, body))
                        }
                        if (proc.post.body.length > 3) {
                            code.push(processBlock(proc.post, proc, dtypes))
                        }
                        if (proc.debug) {
                            console.log("Generated cwise routine for ", typesig, ":\n\n", code.join("\n"))
                        }
                        var loopName = [(proc.funcName || "unnamed"), "_cwise_loop_", orders[0].join("s"), "m", matched, typeSummary(dtypes)].join("")
                        var f = new Function(["function ", loopName, "(", arglist.join(","), "){", code.join("\n"), "} return ", loopName].join(""))
                        return f()
                    }
                    module.exports = generateCWiseOp
                }, {
                    "uniq": 198
                }
            ],
            197: [
                function (_dereq_, module, exports) {
                    arguments[4][67][0].apply(exports, arguments)
                }, {
                    "./compile.js": 196
                }
            ],
            198: [
                function (_dereq_, module, exports) {
                    module.exports = _dereq_(184)
                }, {}
            ],
            199: [
                function (_dereq_, module, exports) {
                    (function (Buffer) {
                        var iota = _dereq_("iota-array")
                        var arrayMethods = ["concat", "join", "slice", "toString", "indexOf", "lastIndexOf", "forEach", "every", "some", "filter", "map", "reduce", "reduceRight"]
                        var hasTypedArrays = ((typeof Float64Array) !== "undefined")
                        var hasBuffer = ((typeof Buffer) !== "undefined")

                        function compare1st(a, b) {
                            return a[0] - b[0]
                        }

                        function order() {
                            var stride = this.stride
                            var terms = new Array(stride.length)
                            var i
                            for (i = 0; i < terms.length; ++i) {
                                terms[i] = [Math.abs(stride[i]), i]
                            }
                            terms.sort(compare1st)
                            var result = new Array(terms.length)
                            for (i = 0; i < result.length; ++i) {
                                result[i] = terms[i][1]
                            }
                            return result
                        }

                        function compileConstructor(dtype, dimension) {
                            var className = ["View", dimension, "d", dtype].join("")
                            if (dimension < 0) {
                                className = "View_Nil" + dtype
                            }
                            var useGetters = (dtype === "generic")
                            if (dimension === -1) {
                                var code = "function " + className + "(a){this.data=a;};\
var proto=" + className + ".prototype;\
proto.dtype='" + dtype + "';\
proto.index=function(){return -1};\
proto.size=0;\
proto.dimension=-1;\
proto.shape=proto.stride=proto.order=[];\
proto.lo=proto.hi=proto.transpose=proto.step=\
function(){return new " + className + "(this.data);};\
proto.get=proto.set=function(){};\
proto.pick=function(){return null};\
return function construct_" + className + "(a){return new " + className + "(a);}"
                                var procedure = new Function(code)
                                return procedure()
                            } else if (dimension === 0) {
                                var code = "function " + className + "(a,d) {\
this.data = a;\
this.offset = d\
};\
var proto=" + className + ".prototype;\
proto.dtype='" + dtype + "';\
proto.index=function(){return this.offset};\
proto.dimension=0;\
proto.size=1;\
proto.shape=\
proto.stride=\
proto.order=[];\
proto.lo=\
proto.hi=\
proto.transpose=\
proto.step=function " + className + "_copy() {\
return new " + className + "(this.data,this.offset)\
};\
proto.pick=function " + className + "_pick(){\
return TrivialArray(this.data);\
};\
proto.valueOf=proto.get=function " + className + "_get(){\
return " + (useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]") + "};\
proto.set=function " + className + "_set(v){\
return " + (useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v") + "\
};\
return function construct_" + className + "(a,b,c,d){return new " + className + "(a,d)}"
                                var procedure = new Function("TrivialArray", code)
                                return procedure(CACHED_CONSTRUCTORS[dtype][0])
                            }
                            var code = ["'use strict'"]
                            var indices = iota(dimension)
                            var args = indices.map(function (i) {
                                return "i" + i
                            })
                            var index_str = "this.offset+" + indices.map(function (i) {
                                return "this._stride" + i + "*i" + i
                            }).join("+")
                            code.push("function " + className + "(a," +
                                indices.map(function (i) {
                                    return "b" + i
                                }).join(",") + "," +
                                indices.map(function (i) {
                                    return "c" + i
                                }).join(",") + ",d){this.data=a")
                            for (var i = 0; i < dimension; ++i) {
                                code.push("this._shape" + i + "=b" + i + "|0")
                            }
                            for (var i = 0; i < dimension; ++i) {
                                code.push("this._stride" + i + "=c" + i + "|0")
                            }
                            code.push("this.offset=d|0}", "var proto=" + className + ".prototype", "proto.dtype='" + dtype + "'", "proto.dimension=" + dimension)
                            var strideClassName = "VStride" + dimension + "d" + dtype
                            var shapeClassName = "VShape" + dimension + "d" + dtype
                            var props = {
                                "stride": strideClassName,
                                "shape": shapeClassName
                            }
                            for (var prop in props) {
                                var arrayName = props[prop]
                                code.push("function " + arrayName + "(v) {this._v=v} var aproto=" + arrayName + ".prototype", "aproto.length=" + dimension)
                                var array_elements = []
                                for (var i = 0; i < dimension; ++i) {
                                    array_elements.push(["this._v._", prop, i].join(""))
                                }
                                code.push("aproto.toJSON=function " + arrayName + "_toJSON(){return [" + array_elements.join(",") + "]}", "aproto.valueOf=aproto.toString=function " + arrayName + "_toString(){return [" + array_elements.join(",") + "].join()}")
                                for (var i = 0; i < dimension; ++i) {
                                    code.push("Object.defineProperty(aproto," + i + ",{get:function(){return this._v._" + prop + i + "},set:function(v){return this._v._" + prop + i + "=v|0},enumerable:true})")
                                }
                                for (var i = 0; i < arrayMethods.length; ++i) {
                                    if (arrayMethods[i] in Array.prototype) {
                                        code.push("aproto." + arrayMethods[i] + "=Array.prototype." + arrayMethods[i])
                                    }
                                }
                                code.push(["Object.defineProperty(proto,'", prop, "',{get:function ", arrayName, "_get(){return new ", arrayName, "(this)},set: function ", arrayName, "_set(v){"].join(""))
                                for (var i = 0; i < dimension; ++i) {
                                    code.push("this._" + prop + i + "=v[" + i + "]|0")
                                }
                                code.push("return v}})")
                            }
                            code.push("Object.defineProperty(proto,'size',{get:function " + className + "_size(){\
return " + indices.map(function (i) {
                                return "this._shape" + i
                            }).join("*"), "}})")
                            if (dimension === 1) {
                                code.push("proto.order=[0]")
                            } else {
                                code.push("Object.defineProperty(proto,'order',{get:")
                                if (dimension < 4) {
                                    code.push("function " + className + "_order(){")
                                    if (dimension === 2) {
                                        code.push("return (Math.abs(this._stride0)>Math.abs(this._stride1))?[1,0]:[0,1]}})")
                                    } else if (dimension === 3) {
                                        code.push("var s0=Math.abs(this._stride0),s1=Math.abs(this._stride1),s2=Math.abs(this._stride2);\
if(s0>s1){\
if(s1>s2){\
return [2,1,0];\
}else if(s0>s2){\
return [1,2,0];\
}else{\
return [1,0,2];\
}\
}else if(s0>s2){\
return [2,0,1];\
}else if(s2>s1){\
return [0,1,2];\
}else{\
return [0,2,1];\
}}})")
                                    }
                                } else {
                                    code.push("ORDER})")
                                }
                            }
                            code.push("proto.set=function " + className + "_set(" + args.join(",") + ",v){")
                            if (useGetters) {
                                code.push("return this.data.set(" + index_str + ",v)}")
                            } else {
                                code.push("return this.data[" + index_str + "]=v}")
                            }
                            code.push("proto.get=function " + className + "_get(" + args.join(",") + "){")
                            if (useGetters) {
                                code.push("return this.data.get(" + index_str + ")}")
                            } else {
                                code.push("return this.data[" + index_str + "]}")
                            }
                            code.push("proto.index=function " + className + "_index(", args.join(), "){return " + index_str + "}")
                            code.push("proto.hi=function " + className + "_hi(" + args.join(",") + "){return new " + className + "(this.data," +
                                indices.map(function (i) {
                                    return ["(typeof i", i, "!=='number'||i", i, "<0)?this._shape", i, ":i", i, "|0"].join("")
                                }).join(",") + "," +
                                indices.map(function (i) {
                                    return "this._stride" + i
                                }).join(",") + ",this.offset)}")
                            var a_vars = indices.map(function (i) {
                                return "a" + i + "=this._shape" + i
                            })
                            var c_vars = indices.map(function (i) {
                                return "c" + i + "=this._stride" + i
                            })
                            code.push("proto.lo=function " + className + "_lo(" + args.join(",") + "){var b=this.offset,d=0," + a_vars.join(",") + "," + c_vars.join(","))
                            for (var i = 0; i < dimension; ++i) {
                                code.push("if(typeof i" + i + "==='number'&&i" + i + ">=0){\
d=i" + i + "|0;\
b+=c" + i + "*d;\
a" + i + "-=d}")
                            }
                            code.push("return new " + className + "(this.data," +
                                indices.map(function (i) {
                                    return "a" + i
                                }).join(",") + "," +
                                indices.map(function (i) {
                                    return "c" + i
                                }).join(",") + ",b)}")
                            code.push("proto.step=function " + className + "_step(" + args.join(",") + "){var " +
                                indices.map(function (i) {
                                    return "a" + i + "=this._shape" + i
                                }).join(",") + "," +
                                indices.map(function (i) {
                                    return "b" + i + "=this._stride" + i
                                }).join(",") + ",c=this.offset,d=0,ceil=Math.ceil")
                            for (var i = 0; i < dimension; ++i) {
                                code.push("if(typeof i" + i + "==='number'){\
d=i" + i + "|0;\
if(d<0){\
c+=b" + i + "*(a" + i + "-1);\
a" + i + "=ceil(-a" + i + "/d)\
}else{\
a" + i + "=ceil(a" + i + "/d)\
}\
b" + i + "*=d\
}")
                            }
                            code.push("return new " + className + "(this.data," +
                                indices.map(function (i) {
                                    return "a" + i
                                }).join(",") + "," +
                                indices.map(function (i) {
                                    return "b" + i
                                }).join(",") + ",c)}")
                            var tShape = new Array(dimension)
                            var tStride = new Array(dimension)
                            for (var i = 0; i < dimension; ++i) {
                                tShape[i] = "a[i" + i + "]"
                                tStride[i] = "b[i" + i + "]"
                            }
                            code.push("proto.transpose=function " + className + "_transpose(" + args + "){" +
                                args.map(function (n, idx) {
                                    return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)"
                                }).join(";"), "var a=this.shape,b=this.stride;return new " + className + "(this.data," + tShape.join(",") + "," + tStride.join(",") + ",this.offset)}")
                            code.push("proto.pick=function " + className + "_pick(" + args + "){var a=[],b=[],c=this.offset")
                            for (var i = 0; i < dimension; ++i) {
                                code.push("if(typeof i" + i + "==='number'&&i" + i + ">=0){c=(c+this._stride" + i + "*i" + i + ")|0}else{a.push(this._shape" + i + ");b.push(this._stride" + i + ")}")
                            }
                            code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}")
                            code.push("return function construct_" + className + "(data,shape,stride,offset){return new " + className + "(data," +
                                indices.map(function (i) {
                                    return "shape[" + i + "]"
                                }).join(",") + "," +
                                indices.map(function (i) {
                                    return "stride[" + i + "]"
                                }).join(",") + ",offset)}")
                            var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"))
                            return procedure(CACHED_CONSTRUCTORS[dtype], order)
                        }

                        function arrayDType(data) {
                            if (hasBuffer) {
                                if (Buffer.isBuffer(data)) {
                                    return "buffer"
                                }
                            }
                            if (hasTypedArrays) {
                                switch (Object.prototype.toString.call(data)) {
                                case "[object Float64Array]":
                                    return "float64"
                                case "[object Float32Array]":
                                    return "float32"
                                case "[object Int8Array]":
                                    return "int8"
                                case "[object Int16Array]":
                                    return "int16"
                                case "[object Int32Array]":
                                    return "int32"
                                case "[object Uint8Array]":
                                    return "uint8"
                                case "[object Uint16Array]":
                                    return "uint16"
                                case "[object Uint32Array]":
                                    return "uint32"
                                case "[object Uint8ClampedArray]":
                                    return "uint8_clamped"
                                }
                            }
                            if (Array.isArray(data)) {
                                return "array"
                            }
                            return "generic"
                        }
                        var CACHED_CONSTRUCTORS = {
                            "float32": [],
                            "float64": [],
                            "int8": [],
                            "int16": [],
                            "int32": [],
                            "uint8": [],
                            "uint16": [],
                            "uint32": [],
                            "array": [],
                            "uint8_clamped": [],
                            "buffer": [],
                            "generic": []
                        };
                        (function () {
                            for (var id in CACHED_CONSTRUCTORS) {
                                CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))
                            }
                        });

                        function wrappedNDArrayCtor(data, shape, stride, offset) {
                            if (data === undefined) {
                                var ctor = CACHED_CONSTRUCTORS.array[0]
                                return ctor([])
                            } else if (typeof data === "number") {
                                data = [data]
                            }
                            if (shape === undefined) {
                                shape = [data.length]
                            }
                            var d = shape.length
                            if (stride === undefined) {
                                stride = new Array(d)
                                for (var i = d - 1, sz = 1; i >= 0; --i) {
                                    stride[i] = sz
                                    sz *= shape[i]
                                }
                            }
                            if (offset === undefined) {
                                offset = 0
                                for (var i = 0; i < d; ++i) {
                                    if (stride[i] < 0) {
                                        offset -= (shape[i] - 1) * stride[i]
                                    }
                                }
                            }
                            var dtype = arrayDType(data)
                            var ctor_list = CACHED_CONSTRUCTORS[dtype]
                            while (ctor_list.length <= d + 1) {
                                ctor_list.push(compileConstructor(dtype, ctor_list.length - 1))
                            }
                            var ctor = ctor_list[d + 1]
                            return ctor(data, shape, stride, offset)
                        }
                        module.exports = wrappedNDArrayCtor
                    }).call(this, _dereq_("buffer").Buffer)
                }, {
                    "buffer": 205,
                    "iota-array": 200
                }
            ],
            200: [
                function (_dereq_, module, exports) {
                    "use strict"

                    function iota(n) {
                        var result = new Array(n)
                        for (var i = 0; i < n; ++i) {
                            result[i] = i
                        }
                        return result
                    }
                    module.exports = iota
                }, {}
            ],
            201: [
                function (_dereq_, module, exports) {
                    "use strict"
                    var glm = _dereq_("gl-matrix")
                    var vec3 = glm.vec3
                    var mat3 = glm.mat3
                    var mat4 = glm.mat4
                    var quat = glm.quat
                    var scratch0 = new Float32Array(16)
                    var scratch1 = new Float32Array(16)

                    function OrbitCamera(rotation, center, distance) {
                        this.rotation = rotation
                        this.center = center
                        this.distance = distance
                    }
                    var proto = OrbitCamera.prototype
                    proto.view = function (out) {
                        if (!out) {
                            out = mat4.create()
                        }
                        scratch1[0] = scratch1[1] = 0.0
                        scratch1[2] = -this.distance
                        mat4.fromRotationTranslation(out, quat.conjugate(scratch0, this.rotation), scratch1)
                        mat4.translate(out, out, vec3.negate(scratch0, this.center))
                        return out
                    }
                    proto.lookAt = function (eye, center, up) {
                        mat4.lookAt(scratch0, eye, center, up)
                        mat3.fromMat4(scratch0, scratch0)
                        quat.fromMat3(this.rotation, scratch0)
                        vec3.copy(this.center, center)
                        this.distance = vec3.distance(eye, center)
                    }
                    proto.pan = function (dpan) {
                        var d = this.distance
                        scratch0[0] = -d * (dpan[0] || 0)
                        scratch0[1] = d * (dpan[1] || 0)
                        scratch0[2] = d * (dpan[2] || 0)
                        vec3.transformQuat(scratch0, scratch0, this.rotation)
                        vec3.add(this.center, this.center, scratch0)
                    }
                    proto.zoom = function (d) {
                        this.distance += d
                        if (this.distance < 0.0) {
                            this.distance = 0.0
                        }
                    }

                    function quatFromVec(out, da) {
                        var x = da[0]
                        var y = da[1]
                        var z = da[2]
                        var s = x * x + y * y
                        if (s > 1.0) {
                            s = 1.0
                        }
                        out[0] = -da[0]
                        out[1] = da[1]
                        out[2] = da[2] || Math.sqrt(1.0 - s)
                        out[3] = 0.0
                    }
                    proto.rotate = function (da, db) {
                        quatFromVec(scratch0, da)
                        quatFromVec(scratch1, db)
                        quat.invert(scratch1, scratch1)
                        quat.multiply(scratch0, scratch0, scratch1)
                        if (quat.length(scratch0) < 1e-6) {
                            return
                        }
                        quat.multiply(this.rotation, this.rotation, scratch0)
                        quat.normalize(this.rotation, this.rotation)
                    }

                    function createOrbitCamera(eye, target, up) {
                        eye = eye || [0, 0, -1]
                        target = target || [0, 0, 0]
                        up = up || [0, 1, 0]
                        var camera = new OrbitCamera(quat.create(), vec3.create(), 1.0)
                        camera.lookAt(eye, target, up)
                        return camera
                    }
                    module.exports = createOrbitCamera
                }, {
                    "gl-matrix": 89
                }
            ],
            202: [
                function (_dereq_, module, exports) {
                    'use strict';
                    var createOrbitCamera = _dereq_('orbit-camera');

                    function attachCamera(shell) {
                        var camera = createOrbitCamera();
                        shell.on('tick', function () {
                            if (!camera.keyBindingMode) camera.keyBindingMode = 'rotate';
                            var rotate = camera.keyBindingMode === 'rotate';
                            var pan = camera.keyBindingMode === 'pan';
                            var zoom = camera.keyBindingMode === 'zoom';
                            var ctrl = shell.down('control');
                            var alt = shell.down('alt');
                            var shift = shell.down('shift');
                            var left = shell.down('mouse-left');
                            var right = shell.down('mouse-right');
                            var middle = shell.down('mouse-middle');
                            if ((rotate && left && !ctrl && !alt && !shift) || (left && !ctrl && !alt && shift)) {
                                camera.rotate([shell.mouseX / shell.width - 0.5, shell.mouseY / shell.height - 0.5], [shell.prevMouseX / shell.width - 0.5, shell.prevMouseY / shell.height - 0.5]);
                            }
                            if ((pan && left && !ctrl && !alt && !shift) || right || (left && ctrl && !alt && !shift)) {
                                camera.pan([(shell.mouseX - shell.prevMouseX) / shell.width, (shell.mouseY - shell.prevMouseY) / shell.height]);
                            }
                            if (shell.scroll[1]) {
                                camera.distance *= Math.exp(shell.scroll[1] / shell.height);
                            }
                            if ((zoom && left && !ctrl && !alt && !shift) || middle || (left && !ctrl && alt && !shift)) {
                                var d = shell.mouseY - shell.prevMouseY;
                                if (d) {
                                    camera.distance *= Math.exp(d / shell.height);
                                }
                            }
                        });
                        return camera;
                    }
                    module.exports = attachCamera;
                }, {
                    "orbit-camera": 201
                }
            ],
            203: [
                function (_dereq_, module, exports) {
                    'use strict';
                    var diric = _dereq_('dirichlet'),
                        Scene = _dereq_('./scene.js'),
                        dup = _dereq_('dup');
                    module.exports = {
                        ID: 0,
                        createScene: function (opts, cb) {
                            opts = opts || {};
                            var container = opts.container || document.body;
                            var newIframe = document.createElement('iframe');
                            newIframe.width = opts.width || '100%';
                            newIframe.height = opts.height || '100%';
                            newIframe.style.zIndex = '' + (opts.zIndex || '1000');
                            newIframe.frameBorder = '0';
                            newIframe.src = 'glcontext.html';
                            newIframe.id = opts.id || ('scene-' + this.ID);
                            this.ID++;
                            container.appendChild(newIframe);
                            newIframe.onload = function () {
                                var shell = newIframe.contentWindow.glnow({
                                    clearColor: [0, 0, 0, 0]
                                });
                                shell.on('gl-init', function () {
                                    var scene = new Scene(opts, shell);
                                    scene.container = newIframe;
                                    cb(scene);
                                });
                            };
                        },
                        testData: function (type, rows, cols, scale) {
                            switch (type) {
                            case 'surface':
                                return diracDelta(rows, cols);
                            case 'scatter3d':
                                return scatterData(rows, cols, scale);
                            default:
                                return diracDelta(rows, cols);
                            }
                        },
                        reconfigureModeBar: function (layout, modebar) {
                            var buttonGroup = modebar.querySelector('.btn-group'),
                                rotate = buttonGroup.querySelector('.rotate-button-3d'),
                                supportedButtonModes, nodelist, buttons;
                            if (!rotate) {
                                rotate = buttonGroup.querySelector('button').cloneNode(true);
                                rotate.setAttribute('data-val', 'rotate');
                                rotate.querySelector('i').className = 'icon-undo rotate-button-3d';
                                buttonGroup.insertBefore(rotate, buttonGroup.childNodes[0]);
                            }
                            supportedButtonModes = ['rotate', 'zoom', 'pan'];
                            nodelist = modebar.querySelectorAll('button');
                            buttons = Array.prototype.slice.call(nodelist);
                            buttons.forEach(function (origbutton) {
                                var mode = origbutton.getAttribute('data-val');
                                var button;
                                if (supportedButtonModes.indexOf(mode) === -1) {
                                    origbutton.parentNode.removeChild(origbutton);
                                    return;
                                }
                                button = origbutton.cloneNode(true);
                                origbutton.parentNode.replaceChild(button, origbutton);
                                button.addEventListener('click', function () {
                                    var sceneKeys = Object.keys(layout).filter(function (k) {
                                        return k.match(/^scene[0-9]*$/);
                                    });
                                    sceneKeys.forEach(function (sceneKey, idx) {
                                        var scene = layout[sceneKey];
                                        if ('_webgl' in scene && 'camera' in scene._webgl) {
                                            scene._webgl.camera.keyBindingMode = mode;
                                            if (idx === 0) scene._webgl.container.focus();
                                        }
                                    });
                                });
                            });
                        }
                    };

                    function diracDelta(rows, cols) {
                        var
                            colarr, hr = Math.round(rows / 2),
                            hc = Math.round(cols / 2),
                            z = [];
                        for (var i = 0; i < rows; i++) {
                            colarr = [];
                            for (var j = 0; j < cols; j++) {
                                colarr[j] = hr / 2 * diric(10, 10.0 * (i - hr) / rows) * diric(10, 10.0 * (j - hc) / cols);
                            }
                            z[i] = colarr;
                        }
                        return {
                            z: z
                        };
                    }

                    function scatterData(rows, cols, scale) {
                        if (!scale) scale = [1, 1, 1];
                        var
                            color, size, npoints = rows * cols / 10,
                            x = [],
                            y = [],
                            z = [];
                        dup(npoints).map(function (n, i) {
                            x[i] = Math.random() * scale[0];
                            y[i] = Math.random() * scale[1];
                            z[i] = Math.random() * scale[2];
                        });
                        color = dup(npoints).map(function () {
                            return [Math.random(), Math.random(), Math.random()];
                        });
                        size = dup(npoints).map(function () {
                            return Math.random() * 0.2;
                        });
                        return {
                            x: x,
                            y: y,
                            z: z,
                            marker: {
                                color: color,
                                size: size
                            }
                        };
                    }
                }, {
                    "./scene.js": 204,
                    "dirichlet": 3,
                    "dup": 5
                }
            ],
            204: [
                function (_dereq_, module, exports) {
                    'use strict';
                    var createSurface = _dereq_('gl-surface-plot'),
                        camera = _dereq_('./scene-camera'),
                        ndarray = _dereq_('ndarray'),
                        fill = _dereq_('ndarray-fill'),
                        glm = _dereq_('gl-matrix'),
                        createAxes = _dereq_('gl-axes'),
                        getAxesPixelRange = _dereq_('gl-axes/properties'),
                        createScatter = _dereq_('gl-scatter-plot'),
                        mat4 = glm.mat4,
                        proto;

                    function zip3(a, b, c) {
                        var len = Math.min.apply(null, [a.length, b.length, c.length]);
                        var result = [];
                        for (var i = 0; i < len; i++) {
                            result[i] = [a[i], b[i], c[i]];
                        }
                        return result;
                    }

                    function badSurfaceData(data) {
                        return !data || !data.z || !data.z.length || !data.z[0].length;
                    }

                    function toRgbArray(str) {
                        var rgb = [],
                            match;
                        if (typeof str !== 'string') return rgb;
                        if (str[0] === '#') {
                            match = parseInt(str, 16);
                            rgb[0] = (match >> 16) & 255;
                            rgb[1] = (match >> 8) & 255;
                            rgb[2] = match & 255;
                        } else if (/^rgb\(\s*\d{1,3}\s*,\s*\d{1,3}\s*,\s*\d{1,3}\s*(,.*)?\)$/.test(str)) {
                            match = str.match(/^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(,.*)?\)$/);
                            rgb[0] = parseInt(match[1]);
                            rgb[1] = parseInt(match[2]);
                            rgb[2] = parseInt(match[3]);
                        }
                        return rgb;
                    }

                    function Scene(options, shell) {
                        if (!(this instanceof Scene)) return new Scene(shell);
                        this.shell = shell;
                        this.camera = camera(shell);
                        this.container = null;
                        this.renderQueue = [];
                        this.range = [
                            [Infinity, Infinity, Infinity],
                            [-Infinity, -Infinity, -Infinity]
                        ];
                        this.axis = null;
                        this.axesOpts = {};
                        this.axesOpts.ticks = [
                            [],
                            [],
                            []
                        ];
                        this.axesOpts.gridColor = [0, 0, 0];
                        this.axesOpts.bounds = this.range;
                        this.axesOpts.textSize = 0.1;
                        this.Plotly = options.plotly;
                        this.id = options.id;
                        this.sceneLayout = options.layout[this.id];
                        this.layout = options.layout;
                        this.axesNames = ['xaxis', 'yaxis', 'zaxis'];
                        this.model = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
                        shell.on('gl-render', this.onRender.bind(this));
                    }
                    module.exports = Scene;
                    proto = Scene.prototype;
                    proto.onRender = function () {
                        var cameraParameters = {
                            view: this.camera.view(),
                            projection: mat4.perspective(new Array(16), Math.PI / 4.0, this.shell.width / this.shell.height, 0.1, 10000.0),
                            model: this.model
                        };
                        var i, glObject, ticks = [],
                            gl = this.shell.gl,
                            sceneLayout = this.sceneLayout,
                            nticks, autoTickCached;
                        var glRange, axes, width = this.shell.width,
                            height = this.shell.height;
                        gl.enable(gl.DEPTH_TEST);
                        gl.clear(gl.DEPTH_BUFFER_BIT);
                        if (this.axis) {
                            glRange = getAxesPixelRange(this.axis, cameraParameters, width, height);
                            for (i = 0; i < 3; ++i) {
                                axes = sceneLayout[this.axesNames[i]];
                                axes._length = (glRange[i].hi - glRange[i].lo) * glRange[i].pixelsPerDataUnit;
                                if (Math.abs(axes._length) === Infinity) {
                                    ticks[i] = [];
                                } else {
                                    axes.range[0] = glRange[i].lo;
                                    axes.range[1] = glRange[i].hi;
                                    axes._m = 1 / glRange[i].pixelsPerDataUnit;
                                    autoTickCached = axes.autotick;
                                    if (axes.autotick) {
                                        axes.autotick = false;
                                        nticks = axes.nticks || this.Plotly.Lib.constrain((axes._length / 40), 4, 9);
                                        this.Plotly.Axes.autoTicks(axes, Math.abs(axes.range[1] - axes.range[0]) / nticks);
                                    }
                                    ticks[i] = this.Plotly.Axes.calcTicks(axes);
                                    axes.autotick = autoTickCached;
                                }
                            }
                            this.axesOpts.ticks = ticks;
                            this.axis.update(this.axesOpts);
                            this.axis.draw(cameraParameters);
                        }
                        for (i = 0; i < this.renderQueue.length; ++i) {
                            glObject = this.renderQueue[i];
                            glObject.draw(cameraParameters);
                        }
                    };
                    proto.draw = function (gl, data, type) {
                        var glObject;
                        this.layout = gl;
                        this.sceneLayout = this.layout[this.id];
                        switch (type) {
                        case 'surface':
                            glObject = this.Surface(data);
                            break;
                        case 'scatter3d':
                            glObject = this.Scatter(data);
                            break;
                        }
                        if (glObject === null) return void 0;
                        glObject.uid = data.uid;
                        this.autoScaleRange(glObject);
                        this.autoScaleModel();
                        this.configureAxes();
                        this.renderQueue.push(glObject);
                        this.setCameraPosition();
                        return glObject;
                    };
                    proto.setCameraPosition = function () {
                        this.camera.lookAt([1.25, 1.25, 1.25], [0, 0, 0], [0, 0, 1]);
                    };
                    proto.setPosition = function (viewport) {
                        this.container.style.position = 'absolute';
                        this.container.style.left = viewport.left + 'px';
                        this.container.style.top = viewport.top + 'px';
                        this.container.style.width = viewport.width + 'px';
                        this.container.style.height = viewport.height + 'px';
                    };
                    proto.getCenter = function () {
                        return [(this.range[1][0] + this.range[0][0]) / 2, (this.range[1][1] + this.range[0][1]) / 2, (this.range[1][2] + this.range[0][2]) / 2];
                    };
                    proto.getDefaultPosition = function (mult) {
                        var center = this.getCenter(),
                            bounds = this.range,
                            xtarg = center[0],
                            ytarg = center[1],
                            ztarg = center[2],
                            xcam = (bounds[0][0] < 0) ? bounds[1][0] : bounds[0][0],
                            ycam = (bounds[0][1] < 0) ? bounds[1][1] : bounds[0][1],
                            zcam = bounds[1][2];
                        if (!mult) mult = 1;
                        return {
                            eye: [mult * (xcam - xtarg) + xtarg, mult * (ycam - ytarg) + ytarg, mult * (zcam - ztarg) + ztarg],
                            target: [xtarg, ytarg, ztarg]
                        };
                    };
                    proto.autoScaleRange = function (glObj) {
                        var range = this.range;
                        this.range = [
                            [Math.min(range[0][0], glObj.bounds[0][0]), Math.min(range[0][1], glObj.bounds[0][1]), Math.min(range[0][2], glObj.bounds[0][2])],
                            [Math.max(range[1][0], glObj.bounds[1][0]), Math.max(range[1][1], glObj.bounds[1][1]), Math.max(range[1][2], glObj.bounds[1][2])]
                        ];
                    };
                    proto.autoScaleModel = function () {
                        var lo = this.range[0];
                        var hi = this.range[1];
                        var r0 = hi[0] - lo[0];
                        var r1 = hi[1] - lo[1];
                        var r2 = hi[2] - lo[2];
                        var d0 = -0.5 * (hi[0] + lo[0]) / r0;
                        var d1 = -0.5 * (hi[1] + lo[1]) / r1;
                        var d2 = -0.5 * (hi[2] + lo[2]) / r2;
                        this.model = new Float32Array([1.0 / r0, 0, 0, 0, 0, 1.0 / r1, 0, 0, 0, 0, 1.0 / r2, 0, d0, d1, d2, 1]);
                    };
                    proto.configureAxes = function configureAxes() {
                        var layout = this.layout;
                        var gridColor = toRgbArray(layout.plot_bgcolor);
                        if (!gridColor.length) gridColor = [0, 0, 0];
                        this.axesOpts.bounds = this.range;
                        this.axesOpts.gridColor = gridColor;
                        if (!this.axis) {
                            this.axis = createAxes(this.shell.gl, this.axesOpts);
                        }
                    };
                    proto.Surface = function Surface(data) {
                        if (badSurfaceData(data)) return null;
                        var
                            surface, idx, zdata = data.z,
                            rows = zdata.length,
                            cols = zdata[0].length,
                            ndata = ndarray(new Float32Array(rows * cols), [rows, cols]),
                            gl = this.shell.gl;
                        fill(ndata, function (row, col) {
                            return zdata[row][col];
                        });
                        idx = this.renderQueue.map(function (g) {
                            return g.uid;
                        }).indexOf(data.uid);
                        if (idx > -1) {
                            surface = this.renderQueue[idx];
                            surface.update(ndata);
                        } else {
                            surface = createSurface(gl, ndata);
                        }
                        return surface;
                    };
                    proto.Scatter = function Scatter(data) {
                        if (!('marker' in data)) data.marker = {};
                        var
                            nscatter, params, scatter, idx, marker = data.marker,
                            size = marker.size,
                            color = marker.color,
                            points = zip3(data.x, data.y, data.z);
                        if (!points.length) return void 0;
                        if (!size) size = 0.1;
                        if (!color) {
                            nscatter = this.renderQueue.map(this.isScatter).length % this.Plotly.Plots.defaultColors.length;
                            color = toRgbArray(this.Plotly.Plots.defaultColors[nscatter]);
                        }
                        params = {
                            position: points,
                            color: color,
                            size: size
                        };
                        idx = this.renderQueue.map(function (g) {
                            return g.uid;
                        }).indexOf(data.uid);
                        if (idx > -1) {
                            scatter = this.renderQueue[idx];
                            scatter.update(params);
                        } else {
                            scatter = createScatter(this.shell.gl, params);
                        }
                        return scatter;
                    };
                    proto.isScatter = function (glObj) {
                        return 'pointCount' in glObj;
                    }, proto.disposeAll = function disposeAll() {
                        this.renderQueue.forEach(function (glo) {
                            glo.dispose();
                        });
                        this.renderQueue = [];
                        if (this.axis) {
                            this.axis.dispose();
                            this.axis = null;
                        }
                    };
                }, {
                    "./scene-camera": 202,
                    "gl-axes": 6,
                    "gl-axes/properties": 82,
                    "gl-matrix": 89,
                    "gl-scatter-plot": 158,
                    "gl-surface-plot": 165,
                    "ndarray": 199,
                    "ndarray-fill": 179
                }
            ],
            205: [
                function (_dereq_, module, exports) {
                    var base64 = _dereq_('base64-js')
                    var ieee754 = _dereq_('ieee754')
                    exports.Buffer = Buffer
                    exports.SlowBuffer = Buffer
                    exports.INSPECT_MAX_BYTES = 50
                    Buffer.poolSize = 8192
                    Buffer._useTypedArrays = (function () {
                        try {
                            var buf = new ArrayBuffer(0)
                            var arr = new Uint8Array(buf)
                            arr.foo = function () {
                                return 42
                            }
                            return 42 === arr.foo() && typeof arr.subarray === 'function'
                        } catch (e) {
                            return false
                        }
                    })()

                    function Buffer(subject, encoding, noZero) {
                        if (!(this instanceof Buffer))
                            return new Buffer(subject, encoding, noZero)
                        var type = typeof subject
                        if (encoding === 'base64' && type === 'string') {
                            subject = stringtrim(subject)
                            while (subject.length % 4 !== 0) {
                                subject = subject + '='
                            }
                        }
                        var length
                        if (type === 'number')
                            length = coerce(subject)
                        else if (type === 'string')
                            length = Buffer.byteLength(subject, encoding)
                        else if (type === 'object')
                            length = coerce(subject.length)
                        else
                            throw new Error('First argument needs to be a number, array or string.')
                        var buf
                        if (Buffer._useTypedArrays) {
                            buf = Buffer._augment(new Uint8Array(length))
                        } else {
                            buf = this
                            buf.length = length
                            buf._isBuffer = true
                        }
                        var i
                        if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
                            buf._set(subject)
                        } else if (isArrayish(subject)) {
                            for (i = 0; i < length; i++) {
                                if (Buffer.isBuffer(subject))
                                    buf[i] = subject.readUInt8(i)
                                else
                                    buf[i] = subject[i]
                            }
                        } else if (type === 'string') {
                            buf.write(subject, 0, encoding)
                        } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
                            for (i = 0; i < length; i++) {
                                buf[i] = 0
                            }
                        }
                        return buf
                    }
                    Buffer.isEncoding = function (encoding) {
                        switch (String(encoding).toLowerCase()) {
                        case 'hex':
                        case 'utf8':
                        case 'utf-8':
                        case 'ascii':
                        case 'binary':
                        case 'base64':
                        case 'raw':
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return true
                        default:
                            return false
                        }
                    }
                    Buffer.isBuffer = function (b) {
                        return !!(b !== null && b !== undefined && b._isBuffer)
                    }
                    Buffer.byteLength = function (str, encoding) {
                        var ret
                        str = str + ''
                        switch (encoding || 'utf8') {
                        case 'hex':
                            ret = str.length / 2
                            break
                        case 'utf8':
                        case 'utf-8':
                            ret = utf8ToBytes(str).length
                            break
                        case 'ascii':
                        case 'binary':
                        case 'raw':
                            ret = str.length
                            break
                        case 'base64':
                            ret = base64ToBytes(str).length
                            break
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            ret = str.length * 2
                            break
                        default:
                            throw new Error('Unknown encoding')
                        }
                        return ret
                    }
                    Buffer.concat = function (list, totalLength) {
                        assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' + 'list should be an Array.')
                        if (list.length === 0) {
                            return new Buffer(0)
                        } else if (list.length === 1) {
                            return list[0]
                        }
                        var i
                        if (typeof totalLength !== 'number') {
                            totalLength = 0
                            for (i = 0; i < list.length; i++) {
                                totalLength += list[i].length
                            }
                        }
                        var buf = new Buffer(totalLength)
                        var pos = 0
                        for (i = 0; i < list.length; i++) {
                            var item = list[i]
                            item.copy(buf, pos)
                            pos += item.length
                        }
                        return buf
                    }

                    function _hexWrite(buf, string, offset, length) {
                        offset = Number(offset) || 0
                        var remaining = buf.length - offset
                        if (!length) {
                            length = remaining
                        } else {
                            length = Number(length)
                            if (length > remaining) {
                                length = remaining
                            }
                        }
                        var strLen = string.length
                        assert(strLen % 2 === 0, 'Invalid hex string')
                        if (length > strLen / 2) {
                            length = strLen / 2
                        }
                        for (var i = 0; i < length; i++) {
                            var byte = parseInt(string.substr(i * 2, 2), 16)
                            assert(!isNaN(byte), 'Invalid hex string')
                            buf[offset + i] = byte
                        }
                        Buffer._charsWritten = i * 2
                        return i
                    }

                    function _utf8Write(buf, string, offset, length) {
                        var charsWritten = Buffer._charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
                        return charsWritten
                    }

                    function _asciiWrite(buf, string, offset, length) {
                        var charsWritten = Buffer._charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
                        return charsWritten
                    }

                    function _binaryWrite(buf, string, offset, length) {
                        return _asciiWrite(buf, string, offset, length)
                    }

                    function _base64Write(buf, string, offset, length) {
                        var charsWritten = Buffer._charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
                        return charsWritten
                    }

                    function _utf16leWrite(buf, string, offset, length) {
                        var charsWritten = Buffer._charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
                        return charsWritten
                    }
                    Buffer.prototype.write = function (string, offset, length, encoding) {
                        if (isFinite(offset)) {
                            if (!isFinite(length)) {
                                encoding = length
                                length = undefined
                            }
                        } else {
                            var swap = encoding
                            encoding = offset
                            offset = length
                            length = swap
                        }
                        offset = Number(offset) || 0
                        var remaining = this.length - offset
                        if (!length) {
                            length = remaining
                        } else {
                            length = Number(length)
                            if (length > remaining) {
                                length = remaining
                            }
                        }
                        encoding = String(encoding || 'utf8').toLowerCase()
                        var ret
                        switch (encoding) {
                        case 'hex':
                            ret = _hexWrite(this, string, offset, length)
                            break
                        case 'utf8':
                        case 'utf-8':
                            ret = _utf8Write(this, string, offset, length)
                            break
                        case 'ascii':
                            ret = _asciiWrite(this, string, offset, length)
                            break
                        case 'binary':
                            ret = _binaryWrite(this, string, offset, length)
                            break
                        case 'base64':
                            ret = _base64Write(this, string, offset, length)
                            break
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            ret = _utf16leWrite(this, string, offset, length)
                            break
                        default:
                            throw new Error('Unknown encoding')
                        }
                        return ret
                    }
                    Buffer.prototype.toString = function (encoding, start, end) {
                        var self = this
                        encoding = String(encoding || 'utf8').toLowerCase()
                        start = Number(start) || 0
                        end = (end !== undefined) ? Number(end) : end = self.length
                        if (end === start)
                            return ''
                        var ret
                        switch (encoding) {
                        case 'hex':
                            ret = _hexSlice(self, start, end)
                            break
                        case 'utf8':
                        case 'utf-8':
                            ret = _utf8Slice(self, start, end)
                            break
                        case 'ascii':
                            ret = _asciiSlice(self, start, end)
                            break
                        case 'binary':
                            ret = _binarySlice(self, start, end)
                            break
                        case 'base64':
                            ret = _base64Slice(self, start, end)
                            break
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            ret = _utf16leSlice(self, start, end)
                            break
                        default:
                            throw new Error('Unknown encoding')
                        }
                        return ret
                    }
                    Buffer.prototype.toJSON = function () {
                        return {
                            type: 'Buffer',
                            data: Array.prototype.slice.call(this._arr || this, 0)
                        }
                    }
                    Buffer.prototype.copy = function (target, target_start, start, end) {
                        var source = this
                        if (!start) start = 0
                        if (!end && end !== 0) end = this.length
                        if (!target_start) target_start = 0
                        if (end === start) return
                        if (target.length === 0 || source.length === 0) return
                        assert(end >= start, 'sourceEnd < sourceStart')
                        assert(target_start >= 0 && target_start < target.length, 'targetStart out of bounds')
                        assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
                        assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')
                        if (end > this.length)
                            end = this.length
                        if (target.length - target_start < end - start)
                            end = target.length - target_start + start
                        var len = end - start
                        if (len < 100 || !Buffer._useTypedArrays) {
                            for (var i = 0; i < len; i++)
                                target[i + target_start] = this[i + start]
                        } else {
                            target._set(this.subarray(start, start + len), target_start)
                        }
                    }

                    function _base64Slice(buf, start, end) {
                        if (start === 0 && end === buf.length) {
                            return base64.fromByteArray(buf)
                        } else {
                            return base64.fromByteArray(buf.slice(start, end))
                        }
                    }

                    function _utf8Slice(buf, start, end) {
                        var res = ''
                        var tmp = ''
                        end = Math.min(buf.length, end)
                        for (var i = start; i < end; i++) {
                            if (buf[i] <= 0x7F) {
                                res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
                                tmp = ''
                            } else {
                                tmp += '%' + buf[i].toString(16)
                            }
                        }
                        return res + decodeUtf8Char(tmp)
                    }

                    function _asciiSlice(buf, start, end) {
                        var ret = ''
                        end = Math.min(buf.length, end)
                        for (var i = start; i < end; i++)
                            ret += String.fromCharCode(buf[i])
                        return ret
                    }

                    function _binarySlice(buf, start, end) {
                        return _asciiSlice(buf, start, end)
                    }

                    function _hexSlice(buf, start, end) {
                        var len = buf.length
                        if (!start || start < 0) start = 0
                        if (!end || end < 0 || end > len) end = len
                        var out = ''
                        for (var i = start; i < end; i++) {
                            out += toHex(buf[i])
                        }
                        return out
                    }

                    function _utf16leSlice(buf, start, end) {
                        var bytes = buf.slice(start, end)
                        var res = ''
                        for (var i = 0; i < bytes.length; i += 2) {
                            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
                        }
                        return res
                    }
                    Buffer.prototype.slice = function (start, end) {
                        var len = this.length
                        start = clamp(start, len, 0)
                        end = clamp(end, len, len)
                        if (Buffer._useTypedArrays) {
                            return Buffer._augment(this.subarray(start, end))
                        } else {
                            var sliceLen = end - start
                            var newBuf = new Buffer(sliceLen, undefined, true)
                            for (var i = 0; i < sliceLen; i++) {
                                newBuf[i] = this[i + start]
                            }
                            return newBuf
                        }
                    }
                    Buffer.prototype.get = function (offset) {
                        console.log('.get() is deprecated. Access using array indexes instead.')
                        return this.readUInt8(offset)
                    }
                    Buffer.prototype.set = function (v, offset) {
                        console.log('.set() is deprecated. Access using array indexes instead.')
                        return this.writeUInt8(v, offset)
                    }
                    Buffer.prototype.readUInt8 = function (offset, noAssert) {
                        if (!noAssert) {
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset < this.length, 'Trying to read beyond buffer length')
                        }
                        if (offset >= this.length)
                            return
                        return this[offset]
                    }

                    function _readUInt16(buf, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        var val
                        if (littleEndian) {
                            val = buf[offset]
                            if (offset + 1 < len)
                                val |= buf[offset + 1] << 8
                        } else {
                            val = buf[offset] << 8
                            if (offset + 1 < len)
                                val |= buf[offset + 1]
                        }
                        return val
                    }
                    Buffer.prototype.readUInt16LE = function (offset, noAssert) {
                        return _readUInt16(this, offset, true, noAssert)
                    }
                    Buffer.prototype.readUInt16BE = function (offset, noAssert) {
                        return _readUInt16(this, offset, false, noAssert)
                    }

                    function _readUInt32(buf, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        var val
                        if (littleEndian) {
                            if (offset + 2 < len)
                                val = buf[offset + 2] << 16
                            if (offset + 1 < len)
                                val |= buf[offset + 1] << 8
                            val |= buf[offset]
                            if (offset + 3 < len)
                                val = val + (buf[offset + 3] << 24 >>> 0)
                        } else {
                            if (offset + 1 < len)
                                val = buf[offset + 1] << 16
                            if (offset + 2 < len)
                                val |= buf[offset + 2] << 8
                            if (offset + 3 < len)
                                val |= buf[offset + 3]
                            val = val + (buf[offset] << 24 >>> 0)
                        }
                        return val
                    }
                    Buffer.prototype.readUInt32LE = function (offset, noAssert) {
                        return _readUInt32(this, offset, true, noAssert)
                    }
                    Buffer.prototype.readUInt32BE = function (offset, noAssert) {
                        return _readUInt32(this, offset, false, noAssert)
                    }
                    Buffer.prototype.readInt8 = function (offset, noAssert) {
                        if (!noAssert) {
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset < this.length, 'Trying to read beyond buffer length')
                        }
                        if (offset >= this.length)
                            return
                        var neg = this[offset] & 0x80
                        if (neg)
                            return (0xff - this[offset] + 1) * -1
                        else
                            return this[offset]
                    }

                    function _readInt16(buf, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        var val = _readUInt16(buf, offset, littleEndian, true)
                        var neg = val & 0x8000
                        if (neg)
                            return (0xffff - val + 1) * -1
                        else
                            return val
                    }
                    Buffer.prototype.readInt16LE = function (offset, noAssert) {
                        return _readInt16(this, offset, true, noAssert)
                    }
                    Buffer.prototype.readInt16BE = function (offset, noAssert) {
                        return _readInt16(this, offset, false, noAssert)
                    }

                    function _readInt32(buf, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        var val = _readUInt32(buf, offset, littleEndian, true)
                        var neg = val & 0x80000000
                        if (neg)
                            return (0xffffffff - val + 1) * -1
                        else
                            return val
                    }
                    Buffer.prototype.readInt32LE = function (offset, noAssert) {
                        return _readInt32(this, offset, true, noAssert)
                    }
                    Buffer.prototype.readInt32BE = function (offset, noAssert) {
                        return _readInt32(this, offset, false, noAssert)
                    }

                    function _readFloat(buf, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
                        }
                        return ieee754.read(buf, offset, littleEndian, 23, 4)
                    }
                    Buffer.prototype.readFloatLE = function (offset, noAssert) {
                        return _readFloat(this, offset, true, noAssert)
                    }
                    Buffer.prototype.readFloatBE = function (offset, noAssert) {
                        return _readFloat(this, offset, false, noAssert)
                    }

                    function _readDouble(buf, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
                        }
                        return ieee754.read(buf, offset, littleEndian, 52, 8)
                    }
                    Buffer.prototype.readDoubleLE = function (offset, noAssert) {
                        return _readDouble(this, offset, true, noAssert)
                    }
                    Buffer.prototype.readDoubleBE = function (offset, noAssert) {
                        return _readDouble(this, offset, false, noAssert)
                    }
                    Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
                        if (!noAssert) {
                            assert(value !== undefined && value !== null, 'missing value')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset < this.length, 'trying to write beyond buffer length')
                            verifuint(value, 0xff)
                        }
                        if (offset >= this.length) return
                        this[offset] = value
                    }

                    function _writeUInt16(buf, value, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(value !== undefined && value !== null, 'missing value')
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
                            verifuint(value, 0xffff)
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
                            buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>> (littleEndian ? i : 1 - i) * 8
                        }
                    }
                    Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
                        _writeUInt16(this, value, offset, true, noAssert)
                    }
                    Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
                        _writeUInt16(this, value, offset, false, noAssert)
                    }

                    function _writeUInt32(buf, value, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(value !== undefined && value !== null, 'missing value')
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
                            verifuint(value, 0xffffffff)
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
                            buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
                        }
                    }
                    Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
                        _writeUInt32(this, value, offset, true, noAssert)
                    }
                    Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
                        _writeUInt32(this, value, offset, false, noAssert)
                    }
                    Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
                        if (!noAssert) {
                            assert(value !== undefined && value !== null, 'missing value')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset < this.length, 'Trying to write beyond buffer length')
                            verifsint(value, 0x7f, -0x80)
                        }
                        if (offset >= this.length)
                            return
                        if (value >= 0)
                            this.writeUInt8(value, offset, noAssert)
                        else
                            this.writeUInt8(0xff + value + 1, offset, noAssert)
                    }

                    function _writeInt16(buf, value, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(value !== undefined && value !== null, 'missing value')
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
                            verifsint(value, 0x7fff, -0x8000)
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        if (value >= 0)
                            _writeUInt16(buf, value, offset, littleEndian, noAssert)
                        else
                            _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
                    }
                    Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
                        _writeInt16(this, value, offset, true, noAssert)
                    }
                    Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
                        _writeInt16(this, value, offset, false, noAssert)
                    }

                    function _writeInt32(buf, value, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(value !== undefined && value !== null, 'missing value')
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
                            verifsint(value, 0x7fffffff, -0x80000000)
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        if (value >= 0)
                            _writeUInt32(buf, value, offset, littleEndian, noAssert)
                        else
                            _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
                    }
                    Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
                        _writeInt32(this, value, offset, true, noAssert)
                    }
                    Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
                        _writeInt32(this, value, offset, false, noAssert)
                    }

                    function _writeFloat(buf, value, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(value !== undefined && value !== null, 'missing value')
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
                            verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        ieee754.write(buf, value, offset, littleEndian, 23, 4)
                    }
                    Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
                        _writeFloat(this, value, offset, true, noAssert)
                    }
                    Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
                        _writeFloat(this, value, offset, false, noAssert)
                    }

                    function _writeDouble(buf, value, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            assert(value !== undefined && value !== null, 'missing value')
                            assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
                            assert(offset !== undefined && offset !== null, 'missing offset')
                            assert(offset + 7 < buf.length, 'Trying to write beyond buffer length')
                            verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
                        }
                        var len = buf.length
                        if (offset >= len)
                            return
                        ieee754.write(buf, value, offset, littleEndian, 52, 8)
                    }
                    Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
                        _writeDouble(this, value, offset, true, noAssert)
                    }
                    Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
                        _writeDouble(this, value, offset, false, noAssert)
                    }
                    Buffer.prototype.fill = function (value, start, end) {
                        if (!value) value = 0
                        if (!start) start = 0
                        if (!end) end = this.length
                        if (typeof value === 'string') {
                            value = value.charCodeAt(0)
                        }
                        assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
                        assert(end >= start, 'end < start')
                        if (end === start) return
                        if (this.length === 0) return
                        assert(start >= 0 && start < this.length, 'start out of bounds')
                        assert(end >= 0 && end <= this.length, 'end out of bounds')
                        for (var i = start; i < end; i++) {
                            this[i] = value
                        }
                    }
                    Buffer.prototype.inspect = function () {
                        var out = []
                        var len = this.length
                        for (var i = 0; i < len; i++) {
                            out[i] = toHex(this[i])
                            if (i === exports.INSPECT_MAX_BYTES) {
                                out[i + 1] = '...'
                                break
                            }
                        }
                        return '<Buffer ' + out.join(' ') + '>'
                    }
                    Buffer.prototype.toArrayBuffer = function () {
                        if (typeof Uint8Array !== 'undefined') {
                            if (Buffer._useTypedArrays) {
                                return (new Buffer(this)).buffer
                            } else {
                                var buf = new Uint8Array(this.length)
                                for (var i = 0, len = buf.length; i < len; i += 1)
                                    buf[i] = this[i]
                                return buf.buffer
                            }
                        } else {
                            throw new Error('Buffer.toArrayBuffer not supported in this browser')
                        }
                    }

                    function stringtrim(str) {
                        if (str.trim) return str.trim()
                        return str.replace(/^\s+|\s+$/g, '')
                    }
                    var BP = Buffer.prototype
                    Buffer._augment = function (arr) {
                        arr._isBuffer = true
                        arr._get = arr.get
                        arr._set = arr.set
                        arr.get = BP.get
                        arr.set = BP.set
                        arr.write = BP.write
                        arr.toString = BP.toString
                        arr.toLocaleString = BP.toString
                        arr.toJSON = BP.toJSON
                        arr.copy = BP.copy
                        arr.slice = BP.slice
                        arr.readUInt8 = BP.readUInt8
                        arr.readUInt16LE = BP.readUInt16LE
                        arr.readUInt16BE = BP.readUInt16BE
                        arr.readUInt32LE = BP.readUInt32LE
                        arr.readUInt32BE = BP.readUInt32BE
                        arr.readInt8 = BP.readInt8
                        arr.readInt16LE = BP.readInt16LE
                        arr.readInt16BE = BP.readInt16BE
                        arr.readInt32LE = BP.readInt32LE
                        arr.readInt32BE = BP.readInt32BE
                        arr.readFloatLE = BP.readFloatLE
                        arr.readFloatBE = BP.readFloatBE
                        arr.readDoubleLE = BP.readDoubleLE
                        arr.readDoubleBE = BP.readDoubleBE
                        arr.writeUInt8 = BP.writeUInt8
                        arr.writeUInt16LE = BP.writeUInt16LE
                        arr.writeUInt16BE = BP.writeUInt16BE
                        arr.writeUInt32LE = BP.writeUInt32LE
                        arr.writeUInt32BE = BP.writeUInt32BE
                        arr.writeInt8 = BP.writeInt8
                        arr.writeInt16LE = BP.writeInt16LE
                        arr.writeInt16BE = BP.writeInt16BE
                        arr.writeInt32LE = BP.writeInt32LE
                        arr.writeInt32BE = BP.writeInt32BE
                        arr.writeFloatLE = BP.writeFloatLE
                        arr.writeFloatBE = BP.writeFloatBE
                        arr.writeDoubleLE = BP.writeDoubleLE
                        arr.writeDoubleBE = BP.writeDoubleBE
                        arr.fill = BP.fill
                        arr.inspect = BP.inspect
                        arr.toArrayBuffer = BP.toArrayBuffer
                        return arr
                    }

                    function clamp(index, len, defaultValue) {
                        if (typeof index !== 'number') return defaultValue
                        index = ~~index;
                        if (index >= len) return len
                        if (index >= 0) return index
                        index += len
                        if (index >= 0) return index
                        return 0
                    }

                    function coerce(length) {
                        length = ~~Math.ceil(+length)
                        return length < 0 ? 0 : length
                    }

                    function isArray(subject) {
                        return (Array.isArray || function (subject) {
                            return Object.prototype.toString.call(subject) === '[object Array]'
                        })(subject)
                    }

                    function isArrayish(subject) {
                        return isArray(subject) || Buffer.isBuffer(subject) || subject && typeof subject === 'object' && typeof subject.length === 'number'
                    }

                    function toHex(n) {
                        if (n < 16) return '0' + n.toString(16)
                        return n.toString(16)
                    }

                    function utf8ToBytes(str) {
                        var byteArray = []
                        for (var i = 0; i < str.length; i++) {
                            var b = str.charCodeAt(i)
                            if (b <= 0x7F)
                                byteArray.push(str.charCodeAt(i))
                            else {
                                var start = i
                                if (b >= 0xD800 && b <= 0xDFFF) i++
                                    var h = encodeURIComponent(str.slice(start, i + 1)).substr(1).split('%')
                                for (var j = 0; j < h.length; j++)
                                    byteArray.push(parseInt(h[j], 16))
                            }
                        }
                        return byteArray
                    }

                    function asciiToBytes(str) {
                        var byteArray = []
                        for (var i = 0; i < str.length; i++) {
                            byteArray.push(str.charCodeAt(i) & 0xFF)
                        }
                        return byteArray
                    }

                    function utf16leToBytes(str) {
                        var c, hi, lo
                        var byteArray = []
                        for (var i = 0; i < str.length; i++) {
                            c = str.charCodeAt(i)
                            hi = c >> 8
                            lo = c % 256
                            byteArray.push(lo)
                            byteArray.push(hi)
                        }
                        return byteArray
                    }

                    function base64ToBytes(str) {
                        return base64.toByteArray(str)
                    }

                    function blitBuffer(src, dst, offset, length) {
                        var pos
                        for (var i = 0; i < length; i++) {
                            if ((i + offset >= dst.length) || (i >= src.length))
                                break
                            dst[i + offset] = src[i]
                        }
                        return i
                    }

                    function decodeUtf8Char(str) {
                        try {
                            return decodeURIComponent(str)
                        } catch (err) {
                            return String.fromCharCode(0xFFFD)
                        }
                    }

                    function verifuint(value, max) {
                        assert(typeof value === 'number', 'cannot write a non-number as a number')
                        assert(value >= 0, 'specified a negative value for writing an unsigned value')
                        assert(value <= max, 'value is larger than maximum value for type')
                        assert(Math.floor(value) === value, 'value has a fractional component')
                    }

                    function verifsint(value, max, min) {
                        assert(typeof value === 'number', 'cannot write a non-number as a number')
                        assert(value <= max, 'value larger than maximum allowed value')
                        assert(value >= min, 'value smaller than minimum allowed value')
                        assert(Math.floor(value) === value, 'value has a fractional component')
                    }

                    function verifIEEE754(value, max, min) {
                        assert(typeof value === 'number', 'cannot write a non-number as a number')
                        assert(value <= max, 'value larger than maximum allowed value')
                        assert(value >= min, 'value smaller than minimum allowed value')
                    }

                    function assert(test, message) {
                        if (!test) throw new Error(message || 'Failed assertion')
                    }
                }, {
                    "base64-js": 206,
                    "ieee754": 207
                }
            ],
            206: [
                function (_dereq_, module, exports) {
                    var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';;
                    (function (exports) {
                        'use strict';
                        var Arr = (typeof Uint8Array !== 'undefined') ? Uint8Array : Array
                        var ZERO = '0'.charCodeAt(0)
                        var PLUS = '+'.charCodeAt(0)
                        var SLASH = '/'.charCodeAt(0)
                        var NUMBER = '0'.charCodeAt(0)
                        var LOWER = 'a'.charCodeAt(0)
                        var UPPER = 'A'.charCodeAt(0)

                        function decode(elt) {
                            var code = elt.charCodeAt(0)
                            if (code === PLUS)
                                return 62
                            if (code === SLASH)
                                return 63
                            if (code < NUMBER)
                                return -1
                            if (code < NUMBER + 10)
                                return code - NUMBER + 26 + 26
                            if (code < UPPER + 26)
                                return code - UPPER
                            if (code < LOWER + 26)
                                return code - LOWER + 26
                        }

                        function b64ToByteArray(b64) {
                            var i, j, l, tmp, placeHolders, arr
                            if (b64.length % 4 > 0) {
                                throw new Error('Invalid string. Length must be a multiple of 4')
                            }
                            var len = b64.length
                            placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0
                            arr = new Arr(b64.length * 3 / 4 - placeHolders)
                            l = placeHolders > 0 ? b64.length - 4 : b64.length
                            var L = 0

                            function push(v) {
                                arr[L++] = v
                            }
                            for (i = 0, j = 0; i < l; i += 4, j += 3) {
                                tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
                                push((tmp & 0xFF0000) >> 16)
                                push((tmp & 0xFF00) >> 8)
                                push(tmp & 0xFF)
                            }
                            if (placeHolders === 2) {
                                tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
                                push(tmp & 0xFF)
                            } else if (placeHolders === 1) {
                                tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
                                push((tmp >> 8) & 0xFF)
                                push(tmp & 0xFF)
                            }
                            return arr
                        }

                        function uint8ToBase64(uint8) {
                            var i, extraBytes = uint8.length % 3,
                                output = "",
                                temp, length

                            function encode(num) {
                                return lookup.charAt(num)
                            }

                            function tripletToBase64(num) {
                                return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
                            }
                            for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
                                temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
                                output += tripletToBase64(temp)
                            }
                            switch (extraBytes) {
                            case 1:
                                temp = uint8[uint8.length - 1]
                                output += encode(temp >> 2)
                                output += encode((temp << 4) & 0x3F)
                                output += '=='
                                break
                            case 2:
                                temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
                                output += encode(temp >> 10)
                                output += encode((temp >> 4) & 0x3F)
                                output += encode((temp << 2) & 0x3F)
                                output += '='
                                break
                            }
                            return output
                        }
                        module.exports.toByteArray = b64ToByteArray
                        module.exports.fromByteArray = uint8ToBase64
                    }())
                }, {}
            ],
            207: [
                function (_dereq_, module, exports) {
                    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                        var e, m, eLen = nBytes * 8 - mLen - 1,
                            eMax = (1 << eLen) - 1,
                            eBias = eMax >> 1,
                            nBits = -7,
                            i = isLE ? (nBytes - 1) : 0,
                            d = isLE ? -1 : 1,
                            s = buffer[offset + i];
                        i += d;
                        e = s & ((1 << (-nBits)) - 1);
                        s >>= (-nBits);
                        nBits += eLen;
                        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
                        m = e & ((1 << (-nBits)) - 1);
                        e >>= (-nBits);
                        nBits += mLen;
                        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
                        if (e === 0) {
                            e = 1 - eBias;
                        } else if (e === eMax) {
                            return m ? NaN : ((s ? -1 : 1) * Infinity);
                        } else {
                            m = m + Math.pow(2, mLen);
                            e = e - eBias;
                        }
                        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
                    };
                    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                        var e, m, c, eLen = nBytes * 8 - mLen - 1,
                            eMax = (1 << eLen) - 1,
                            eBias = eMax >> 1,
                            rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
                            i = isLE ? 0 : (nBytes - 1),
                            d = isLE ? 1 : -1,
                            s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
                        value = Math.abs(value);
                        if (isNaN(value) || value === Infinity) {
                            m = isNaN(value) ? 1 : 0;
                            e = eMax;
                        } else {
                            e = Math.floor(Math.log(value) / Math.LN2);
                            if (value * (c = Math.pow(2, -e)) < 1) {
                                e--;
                                c *= 2;
                            }
                            if (e + eBias >= 1) {
                                value += rt / c;
                            } else {
                                value += rt * Math.pow(2, 1 - eBias);
                            }
                            if (value * c >= 2) {
                                e++;
                                c /= 2;
                            }
                            if (e + eBias >= eMax) {
                                m = 0;
                                e = eMax;
                            } else if (e + eBias >= 1) {
                                m = (value * c - 1) * Math.pow(2, mLen);
                                e = e + eBias;
                            } else {
                                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                                e = 0;
                            }
                        }
                        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
                        e = (e << mLen) | m;
                        eLen += mLen;
                        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
                        buffer[offset + i - d] |= s * 128;
                    };
                }, {}
            ]
        }, {}, [203])
        (203)
});
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                throw new Error("Cannot find module '" + o + "'")
            }
            var f = n[o] = {
                exports: {}
            };
            t[o][0].call(f.exports, function (e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, f, f.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [
        function (require, module, exports) {
            var process = module.exports = {};
            process.nextTick = function () {
                var canSetImmediate = typeof window !== "undefined" && window.setImmediate;
                var canPost = typeof window !== "undefined" && window.postMessage && window.addEventListener;
                if (canSetImmediate) {
                    return function (f) {
                        return window.setImmediate(f)
                    }
                }
                if (canPost) {
                    var queue = [];
                    window.addEventListener("message", function (ev) {
                        var source = ev.source;
                        if ((source === window || source === null) && ev.data === "process-tick") {
                            ev.stopPropagation();
                            if (queue.length > 0) {
                                var fn = queue.shift();
                                fn()
                            }
                        }
                    }, true);
                    return function nextTick(fn) {
                        queue.push(fn);
                        window.postMessage("process-tick", "*")
                    }
                }
                return function nextTick(fn) {
                    setTimeout(fn, 0)
                }
            }();
            process.title = "browser";
            process.browser = true;
            process.env = {};
            process.argv = [];

            function noop() {}
            process.on = noop;
            process.once = noop;
            process.off = noop;
            process.emit = noop;
            process.binding = function (name) {
                throw new Error("process.binding is not supported")
            };
            process.cwd = function () {
                return "/"
            };
            process.chdir = function (dir) {
                throw new Error("process.chdir is not supported")
            }
        }, {}
    ],
    2: [
        function (require, module, exports) {
            "use strict";
            var asap = require("asap");
            module.exports = Promise;

            function Promise(fn) {
                if (typeof this !== "object") throw new TypeError("Promises must be constructed via new");
                if (typeof fn !== "function") throw new TypeError("not a function");
                var state = null;
                var value = null;
                var deferreds = [];
                var self = this;
                this.then = function (onFulfilled, onRejected) {
                    return new Promise(function (resolve, reject) {
                        handle(new Handler(onFulfilled, onRejected, resolve, reject))
                    })
                };

                function handle(deferred) {
                    if (state === null) {
                        deferreds.push(deferred);
                        return
                    }
                    asap(function () {
                        var cb = state ? deferred.onFulfilled : deferred.onRejected;
                        if (cb === null) {
                            (state ? deferred.resolve : deferred.reject)(value);
                            return
                        }
                        var ret;
                        try {
                            ret = cb(value)
                        } catch (e) {
                            deferred.reject(e);
                            return
                        }
                        deferred.resolve(ret)
                    })
                }

                function resolve(newValue) {
                    try {
                        if (newValue === self) throw new TypeError("A promise cannot be resolved with itself.");
                        if (newValue && (typeof newValue === "object" || typeof newValue === "function")) {
                            var then = newValue.then;
                            if (typeof then === "function") {
                                doResolve(then.bind(newValue), resolve, reject);
                                return
                            }
                        }
                        state = true;
                        value = newValue;
                        finale()
                    } catch (e) {
                        reject(e)
                    }
                }

                function reject(newValue) {
                    state = false;
                    value = newValue;
                    finale()
                }

                function finale() {
                    for (var i = 0, len = deferreds.length; i < len; i++) handle(deferreds[i]);
                    deferreds = null
                }
                doResolve(fn, resolve, reject)
            }

            function Handler(onFulfilled, onRejected, resolve, reject) {
                this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
                this.onRejected = typeof onRejected === "function" ? onRejected : null;
                this.resolve = resolve;
                this.reject = reject
            }

            function doResolve(fn, onFulfilled, onRejected) {
                var done = false;
                try {
                    fn(function (value) {
                        if (done) return;
                        done = true;
                        onFulfilled(value)
                    }, function (reason) {
                        if (done) return;
                        done = true;
                        onRejected(reason)
                    })
                } catch (ex) {
                    if (done) return;
                    done = true;
                    onRejected(ex)
                }
            }
        }, {
            asap: 4
        }
    ],
    3: [
        function (require, module, exports) {
            "use strict";
            var Promise = require("./core.js");
            var asap = require("asap");
            module.exports = Promise;

            function ValuePromise(value) {
                this.then = function (onFulfilled) {
                    if (typeof onFulfilled !== "function") return this;
                    return new Promise(function (resolve, reject) {
                        asap(function () {
                            try {
                                resolve(onFulfilled(value))
                            } catch (ex) {
                                reject(ex)
                            }
                        })
                    })
                }
            }
            ValuePromise.prototype = Object.create(Promise.prototype);
            var TRUE = new ValuePromise(true);
            var FALSE = new ValuePromise(false);
            var NULL = new ValuePromise(null);
            var UNDEFINED = new ValuePromise(undefined);
            var ZERO = new ValuePromise(0);
            var EMPTYSTRING = new ValuePromise("");
            Promise.from = Promise.cast = function (value) {
                if (value instanceof Promise) return value;
                if (value === null) return NULL;
                if (value === undefined) return UNDEFINED;
                if (value === true) return TRUE;
                if (value === false) return FALSE;
                if (value === 0) return ZERO;
                if (value === "") return EMPTYSTRING;
                if (typeof value === "object" || typeof value === "function") {
                    try {
                        var then = value.then;
                        if (typeof then === "function") {
                            return new Promise(then.bind(value))
                        }
                    } catch (ex) {
                        return new Promise(function (resolve, reject) {
                            reject(ex)
                        })
                    }
                }
                return new ValuePromise(value)
            };
            Promise.denodeify = function (fn, argumentCount) {
                argumentCount = argumentCount || Infinity;
                return function () {
                    var self = this;
                    var args = Array.prototype.slice.call(arguments);
                    return new Promise(function (resolve, reject) {
                        while (args.length && args.length > argumentCount) {
                            args.pop()
                        }
                        args.push(function (err, res) {
                            if (err) reject(err);
                            else resolve(res)
                        });
                        fn.apply(self, args)
                    })
                }
            };
            Promise.nodeify = function (fn) {
                return function () {
                    var args = Array.prototype.slice.call(arguments);
                    var callback = typeof args[args.length - 1] === "function" ? args.pop() : null;
                    try {
                        return fn.apply(this, arguments).nodeify(callback)
                    } catch (ex) {
                        if (callback === null || typeof callback == "undefined") {
                            return new Promise(function (resolve, reject) {
                                reject(ex)
                            })
                        } else {
                            asap(function () {
                                callback(ex)
                            })
                        }
                    }
                }
            };
            Promise.all = function () {
                var args = Array.prototype.slice.call(arguments.length === 1 && Array.isArray(arguments[0]) ? arguments[0] : arguments);
                return new Promise(function (resolve, reject) {
                    if (args.length === 0) return resolve([]);
                    var remaining = args.length;

                    function res(i, val) {
                        try {
                            if (val && (typeof val === "object" || typeof val === "function")) {
                                var then = val.then;
                                if (typeof then === "function") {
                                    then.call(val, function (val) {
                                        res(i, val)
                                    }, reject);
                                    return
                                }
                            }
                            args[i] = val;
                            if (--remaining === 0) {
                                resolve(args)
                            }
                        } catch (ex) {
                            reject(ex)
                        }
                    }
                    for (var i = 0; i < args.length; i++) {
                        res(i, args[i])
                    }
                })
            };
            Promise.prototype.done = function (onFulfilled, onRejected) {
                var self = arguments.length ? this.then.apply(this, arguments) : this;
                self.then(null, function (err) {
                    asap(function () {
                        throw err
                    })
                })
            };
            Promise.prototype.nodeify = function (callback) {
                if (callback === null || typeof callback == "undefined") return this;
                this.then(function (value) {
                    asap(function () {
                        callback(null, value)
                    })
                }, function (err) {
                    asap(function () {
                        callback(err)
                    })
                })
            };
            Promise.prototype.catch = function (onRejected) {
                return this.then(null, onRejected)
            };
            Promise.resolve = function (value) {
                return new Promise(function (resolve) {
                    resolve(value)
                })
            };
            Promise.reject = function (value) {
                return new Promise(function (resolve, reject) {
                    reject(value)
                })
            };
            Promise.race = function (values) {
                return new Promise(function (resolve, reject) {
                    values.map(function (value) {
                        Promise.cast(value).then(resolve, reject)
                    })
                })
            }
        }, {
            "./core.js": 2,
            asap: 4
        }
    ],
    4: [
        function (require, module, exports) {
            (function (process) {
                var head = {
                    task: void 0,
                    next: null
                };
                var tail = head;
                var flushing = false;
                var requestFlush = void 0;
                var isNodeJS = false;

                function flush() {
                    while (head.next) {
                        head = head.next;
                        var task = head.task;
                        head.task = void 0;
                        var domain = head.domain;
                        if (domain) {
                            head.domain = void 0;
                            domain.enter()
                        }
                        try {
                            task()
                        } catch (e) {
                            if (isNodeJS) {
                                if (domain) {
                                    domain.exit()
                                }
                                setTimeout(flush, 0);
                                if (domain) {
                                    domain.enter()
                                }
                                throw e
                            } else {
                                setTimeout(function () {
                                    throw e
                                }, 0)
                            }
                        }
                        if (domain) {
                            domain.exit()
                        }
                    }
                    flushing = false
                }
                if (typeof process !== "undefined" && process.nextTick) {
                    isNodeJS = true;
                    requestFlush = function () {
                        process.nextTick(flush)
                    }
                } else if (typeof setImmediate === "function") {
                    if (typeof window !== "undefined") {
                        requestFlush = setImmediate.bind(window, flush)
                    } else {
                        requestFlush = function () {
                            setImmediate(flush)
                        }
                    }
                } else if (typeof MessageChannel !== "undefined") {
                    var channel = new MessageChannel;
                    channel.port1.onmessage = flush;
                    requestFlush = function () {
                        channel.port2.postMessage(0)
                    }
                } else {
                    requestFlush = function () {
                        setTimeout(flush, 0)
                    }
                }

                function asap(task) {
                    tail = tail.next = {
                        task: task,
                        domain: isNodeJS && process.domain,
                        next: null
                    };
                    if (!flushing) {
                        flushing = true;
                        requestFlush()
                    }
                }
                module.exports = asap
            }).call(this, require("C:\\Users\\forbes.lindesay\\Documents\\GitHub\\promisejs.org\\node_modules\\browserify\\node_modules\\insert-module-globals\\node_modules\\process\\browser.js"))
        }, {
            "C:\\Users\\forbes.lindesay\\Documents\\GitHub\\promisejs.org\\node_modules\\browserify\\node_modules\\insert-module-globals\\node_modules\\process\\browser.js": 1
        }
    ],
    5: [
        function (require, module, exports) {
            if (!Promise.prototype.done) {
                Promise.prototype.done = function (cb, eb) {
                    this.then(cb, eb).then(null, function (err) {
                        setTimeout(function () {
                            throw err
                        }, 0)
                    })
                }
            }
        }, {}
    ],
    6: [
        function (require, module, exports) {
            if (typeof Promise === "undefined") {
                Promise = require("promise")
            } else {
                require("./polyfill-done.js")
            }
        }, {
            "./polyfill-done.js": 5,
            promise: 3
        }
    ]
}, {}, [6]);
var micropolar = {
    version: "0.2.2"
};
var µ = micropolar;
µ.Axis = function module() {
    var c = {
            data: [],
            layout: {}
        },
        f = {},
        j = {};
    var h, a, i = d3.dispatch("hover"),
        d, g;
    var e = {};

    function b(k) {
        a = k || a;
        var l = c.data;
        var m = c.layout;
        if (typeof a == "string" || a.nodeName) {
            a = d3.select(a);
        }
        a.datum(l).each(function (ax, X) {
            var ae = ax.slice();
            j = {
                data: µ.util.cloneJson(ae),
                layout: µ.util.cloneJson(m)
            };
            var aj = 0;
            ae.forEach(function (aB, aA) {
                if (!aB.color) {
                    aB.color = m.defaultColorRange[aj];
                    aj = (aj + 1) % m.defaultColorRange.length;
                }
                if (!aB.strokeColor) {
                    aB.strokeColor = aB.geometry === "LinePlot" ? aB.color : d3.rgb(aB.color).darker().toString();
                }
                j.data[aA].color = aB.color;
                j.data[aA].strokeColor = aB.strokeColor;
                j.data[aA].strokeDash = aB.strokeDash;
                j.data[aA].strokeSize = aB.strokeSize;
            });
            var aw = ae.filter(function (aC, aA) {
                var aB = aC.visible;
                return typeof aB === "undefined" || aB === true;
            });
            var P = false;
            var Y = aw.map(function (aB, aA) {
                P = P || typeof aB.groupId !== "undefined";
                return aB;
            });
            if (P) {
                var ah = d3.nest().key(function (aB, aA) {
                    return typeof aB.groupId != "undefined" ? aB.groupId : "unstacked";
                }).entries(Y);
                var S = [];
                var an = ah.map(function (aC, aB) {
                    if (aC.key === "unstacked") {
                        return aC.values;
                    } else {
                        var aA = aC.values[0].r.map(function (aE, aD) {
                            return 0;
                        });
                        aC.values.forEach(function (aF, aE, aD) {
                            aF.yStack = [aA];
                            S.push(aA);
                            aA = µ.util.sumArrays(aF.r, aA);
                        });
                        return aC.values;
                    }
                });
                aw = d3.merge(an);
            }
            aw.forEach(function (aB, aA) {
                aB.t = Array.isArray(aB.t[0]) ? aB.t : [aB.t];
                aB.r = Array.isArray(aB.r[0]) ? aB.r : [aB.r];
            });
            var ak = Math.min(m.width - m.margin.left - m.margin.right, m.height - m.margin.top - m.margin.bottom) / 2;
            ak = Math.max(10, ak);
            var ao = [m.margin.left + ak, m.margin.top + ak];
            var x;
            if (P) {
                var T = d3.max(µ.util.sumArrays(µ.util.arrayLast(aw).r[0], µ.util.arrayLast(S)));
                x = [0, T];
            } else {
                x = d3.extent(µ.util.flattenArray(aw.map(function (aB, aA) {
                    return aB.r;
                })));
            } if (m.radialAxis.domain != µ.DATAEXTENT) {
                x[0] = 0;
            }
            d = d3.scale.linear().domain(m.radialAxis.domain != µ.DATAEXTENT && m.radialAxis.domain ? m.radialAxis.domain : x).range([0, ak]);
            j.layout.radialAxis.domain = d.domain();
            var ay = µ.util.flattenArray(aw.map(function (aB, aA) {
                return aB.t;
            }));
            var az = typeof ay[0] === "string";
            var ag;
            if (az) {
                ay = µ.util.deduplicate(ay);
                ag = ay.slice();
                ay = d3.range(ay.length);
                aw = aw.map(function (aC, aB) {
                    var aA = aC;
                    aC.t = [ay];
                    if (P) {
                        aA.yStack = aC.yStack;
                    }
                    return aA;
                });
            }
            var w = aw.filter(function (aB, aA) {
                return aB.geometry === "LinePlot" || aB.geometry === "DotPlot";
            }).length === aw.length;
            var al = m.needsEndSpacing === null ? az || !w : m.needsEndSpacing;
            var N = m.angularAxis.domain && m.angularAxis.domain != µ.DATAEXTENT && !az && m.angularAxis.domain[0] >= 0;
            var E = N ? m.angularAxis.domain : d3.extent(ay);
            var s = Math.abs(ay[1] - ay[0]);
            if (w && !az) {
                s = 0;
            }
            var av = E.slice();
            if (al && az) {
                av[1] += s;
            }
            var Z = m.angularAxis.ticksCount || 4;
            if (Z > 8) {
                Z = Z / (Z / 8) + Z % 8;
            }
            if (m.angularAxis.ticksStep) {
                Z = (av[1] - av[0]) / Z;
            }
            var I = m.angularAxis.ticksStep || (av[1] - av[0]) / (Z * (m.minorTicks + 1));
            if (ag) {
                I = Math.max(Math.round(I), 1);
            }
            if (!av[2]) {
                av[2] = I;
            }
            var Q = d3.range.apply(this, av);
            Q = Q.map(function (aB, aA) {
                return parseFloat(aB.toPrecision(12));
            });
            g = d3.scale.linear().domain(av.slice(0, 2)).range(m.direction === "clockwise" ? [0, 360] : [360, 0]);
            j.layout.angularAxis.domain = g.domain();
            j.layout.angularAxis.endPadding = al ? s : 0;
            h = d3.select(this).select("svg.chart-root");
            if (typeof h === "undefined" || h.empty()) {
                var M = '<svg xmlns="http://www.w3.org/2000/svg" class="chart-root"><g class="outer-group"><g class="chart-group"><circle class="background-circle"></circle><g class="geometry-group"></g><g class="radial axis-group"><circle class="outside-circle"></circle></g><g class="angular axis-group"></g><g class="guides-group"><line></line><circle r="0"></circle></g></g><g class="legend-group"></g><g class="tooltips-group"></g><g class="title-group"><text></text></g></g></svg>';
                var B = new DOMParser().parseFromString(M, "application/xml");
                var ai = this.appendChild(this.ownerDocument.importNode(B.documentElement, true));
                h = d3.select(ai);
            }
            h.select(".guides-group").style({
                "pointer-events": "none"
            });
            h.select(".angular.axis-group").style({
                "pointer-events": "none"
            });
            h.select(".radial.axis-group").style({
                "pointer-events": "none"
            });
            var af = h.select(".chart-group");
            var F = {
                fill: "none",
                stroke: m.tickColor
            };
            var aq = {
                "font-size": m.font.size,
                "font-family": m.font.family,
                fill: m.font.color,
                "text-shadow": ["-1px 0px", "1px -1px", "-1px 1px", "1px 1px"].map(function (aB, aA) {
                    return " " + aB + " 0 " + m.font.outlineColor;
                }).join(",")
            };
            var C;
            if (m.showLegend) {
                C = h.select(".legend-group").attr({
                    transform: "translate(" + [ak, m.margin.top] + ")"
                }).style({
                    display: "block"
                });
                var z = aw.map(function (aC, aB) {
                    var aA = µ.util.cloneJson(aC);
                    aA.symbol = aC.geometry === "DotPlot" ? aC.dotType || "circle" : aC.geometry != "LinePlot" ? "square" : "line";
                    aA.visibleInLegend = typeof aC.visibleInLegend === "undefined" || aC.visibleInLegend;
                    aA.color = aC.geometry === "LinePlot" ? aC.strokeColor : aC.color;
                    return aA;
                });
                var v = µ.util.deepExtend({}, µ.Legend.defaultConfig().legendConfig);
                var u = µ.util.deepExtend(v, {
                    container: C,
                    elements: z,
                    reverseOrder: m.legend.reverseOrder
                });
                var r = {
                    data: aw.map(function (aB, aA) {
                        return aB.name || "Element" + aA;
                    }),
                    legendConfig: u
                };
                µ.Legend().config(r)();
                var A = C.node().getBBox();
                ak = Math.min(m.width - A.width - m.margin.left - m.margin.right, m.height - m.margin.top - m.margin.bottom) / 2;
                ak = Math.max(10, ak);
                ao = [m.margin.left + ak, m.margin.top + ak];
                d.range([0, ak]);
                j.layout.radialAxis.domain = d.domain();
                C.attr("transform", "translate(" + [ao[0] + ak, ao[1] - ak] + ")");
            } else {
                C = h.select(".legend-group").style({
                    display: "none"
                });
            }
            h.attr({
                width: m.width,
                height: m.height
            }).style({
                opacity: m.opacity
            });
            af.attr("transform", "translate(" + ao + ")").style({
                cursor: "crosshair"
            });
            var K = [(m.width - (m.margin.left + m.margin.right + ak * 2 + (A ? A.width : 0))) / 2, (m.height - (m.margin.top + m.margin.bottom + ak * 2)) / 2];
            K[0] = Math.max(0, K[0]);
            K[1] = Math.max(0, K[1]);
            h.select(".outer-group").attr("transform", "translate(" + K + ")");
            if (m.title) {
                var W = h.select("g.title-group text").style(aq).text(m.title);
                var p = W.node().getBBox();
                W.attr({
                    x: ao[0] - p.width / 2,
                    y: ao[1] - ak - 20
                });
            }
            var ar = h.select(".radial.axis-group");
            if (m.radialAxis.gridLinesVisible) {
                var H = ar.selectAll("circle.grid-circle").data(d.ticks(5));
                H.enter().append("circle").attr({
                    "class": "grid-circle"
                }).style(F);
                H.attr("r", d);
                H.exit().remove();
            }
            ar.select("circle.outside-circle").attr({
                r: ak
            }).style(F);
            var V = h.select("circle.background-circle").attr({
                r: ak
            }).style({
                fill: m.backgroundColor,
                stroke: m.stroke
            });

            function am(aB, aA) {
                return g(aB) % 360 + m.orientation;
            }
            if (m.radialAxis.visible) {
                var L = d3.svg.axis().scale(d).ticks(5).tickSize(5);
                ar.call(L).attr({
                    transform: "rotate(" + m.radialAxis.orientation + ")"
                });
                ar.selectAll(".domain").style(F);
                ar.selectAll("g>text").text(function (aB, aA) {
                    return this.textContent + m.radialAxis.ticksSuffix;
                }).style(aq).style({
                    "text-anchor": "start"
                }).attr({
                    x: 0,
                    y: 0,
                    dx: 0,
                    dy: 0,
                    transform: function (aB, aA) {
                        if (m.radialAxis.tickOrientation === "horizontal") {
                            return "rotate(" + -m.radialAxis.orientation + ") translate(" + [0, aq["font-size"]] + ")";
                        } else {
                            return "translate(" + [0, aq["font-size"]] + ")";
                        }
                    }
                });
                ar.selectAll("g>line").style({
                    stroke: "black"
                });
            }
            var ad = h.select(".angular.axis-group").selectAll("g.angular-tick").data(Q);
            var D = ad.enter().append("g").classed("angular-tick", true);
            ad.attr({
                transform: function (aB, aA) {
                    return "rotate(" + am(aB, aA) + ")";
                }
            }).style({
                display: m.angularAxis.visible ? "block" : "none"
            });
            ad.exit().remove();
            D.append("line").classed("grid-line", true).classed("major", function (aB, aA) {
                return aA % (m.minorTicks + 1) == 0;
            }).classed("minor", function (aB, aA) {
                return !(aA % (m.minorTicks + 1) == 0);
            }).style(F);
            D.selectAll(".minor").style({
                stroke: m.minorTickColor
            });
            ad.select("line.grid-line").attr({
                x1: m.tickLength ? ak - m.tickLength : 0,
                x2: ak
            }).style({
                display: m.angularAxis.gridLinesVisible ? "block" : "none"
            });
            D.append("text").classed("axis-text", true).style(aq);
            var t = ad.select("text.axis-text").attr({
                x: ak + m.labelOffset,
                dy: ".35em",
                transform: function (aE, aC) {
                    var aD = am(aE, aC);
                    var aA = ak + m.labelOffset;
                    var aB = m.angularAxis.tickOrientation;
                    if (aB == "horizontal") {
                        return "rotate(" + -aD + " " + aA + " 0)";
                    } else {
                        if (aB == "radial") {
                            return aD < 270 && aD > 90 ? "rotate(180 " + aA + " 0)" : null;
                        } else {
                            return "rotate(" + (aD <= 180 && aD > 0 ? -90 : 90) + " " + aA + " 0)";
                        }
                    }
                }
            }).style({
                "text-anchor": "middle",
                display: m.angularAxis.labelsVisible ? "block" : "none"
            }).text(function (aB, aA) {
                if (aA % (m.minorTicks + 1) != 0) {
                    return "";
                }
                if (ag) {
                    return ag[aB] + m.angularAxis.ticksSuffix;
                } else {
                    return aB + m.angularAxis.ticksSuffix;
                }
            }).style(aq);
            if (m.angularAxis.rewriteTicks) {
                t.text(function (aB, aA) {
                    if (aA % (m.minorTicks + 1) != 0) {
                        return "";
                    }
                    return m.angularAxis.rewriteTicks(this.textContent, aA);
                });
            }
            var y = d3.max(af.selectAll(".angular-tick text")[0].map(function (aB, aA) {
                return aB.getCTM().e + aB.getBBox().width;
            }));
            C.attr({
                transform: "translate(" + [ak + y, m.margin.top] + ")"
            });
            var J = h.select("g.geometry-group").selectAll("g").size() > 0;
            var ap = h.select("g.geometry-group").selectAll("g.geometry").data(aw);
            ap.enter().append("g").attr({
                "class": function (aB, aA) {
                    return "geometry geometry" + aA;
                }
            });
            ap.exit().remove();
            if (aw[0] || J) {
                var ab = [];
                aw.forEach(function (aC, aA) {
                    var aB = {};
                    aB.radialScale = d;
                    aB.angularScale = g;
                    aB.container = ap.filter(function (aE, aD) {
                        return aD == aA;
                    });
                    aB.geometry = aC.geometry;
                    aB.orientation = m.orientation;
                    aB.direction = m.direction;
                    aB.index = aA;
                    ab.push({
                        data: aC,
                        geometryConfig: aB
                    });
                });
                var au = d3.nest().key(function (aB, aA) {
                    return typeof aB.data.groupId != "undefined" || "unstacked";
                }).entries(ab);
                var o = [];
                au.forEach(function (aB, aA) {
                    if (aB.key === "unstacked") {
                        o = o.concat(aB.values.map(function (aD, aC) {
                            return [aD];
                        }));
                    } else {
                        o.push(aB.values);
                    }
                });
                o.forEach(function (aD, aB) {
                    var aC;
                    if (Array.isArray(aD)) {
                        aC = aD[0].geometryConfig.geometry;
                    } else {
                        aC = aD.geometryConfig.geometry;
                    }
                    var aA = aD.map(function (aF, aE) {
                        return µ.util.deepExtend(µ[aC].defaultConfig(), aF);
                    });
                    µ[aC]().config(aA)();
                });
            }
            var O = h.select(".guides-group");
            var aa = h.select(".tooltips-group");
            var ac = µ.tooltipPanel().config({
                container: aa,
                fontSize: 8
            })();
            var n = µ.tooltipPanel().config({
                container: aa,
                fontSize: 8
            })();
            var q = µ.tooltipPanel().config({
                container: aa,
                hasTick: true
            })();
            var U, G;
            if (!az) {
                var R = O.select("line").attr({
                    x1: 0,
                    y1: 0,
                    y2: 0
                }).style({
                    stroke: "grey",
                    "pointer-events": "none"
                });
                af.on("mousemove.angular-guide", function (aD, aB) {
                    var aA = µ.util.getMousePos(V).angle;
                    R.attr({
                        x2: -ak,
                        transform: "rotate(" + aA + ")"
                    }).style({
                        opacity: 0.5
                    });
                    var aC = (aA + 180 + 360 - m.orientation) % 360;
                    U = g.invert(aC);
                    var aE = µ.util.convertToCartesian(ak + 12, aA + 180);
                    ac.text(µ.util.round(U)).move([aE[0] + ao[0], aE[1] + ao[1]]);
                }).on("mouseout.angular-guide", function (aB, aA) {
                    O.select("line").style({
                        opacity: 0
                    });
                });
            }
            var at = O.select("circle").style({
                stroke: "grey",
                fill: "none"
            });
            af.on("mousemove.radial-guide", function (aC, aA) {
                var aB = µ.util.getMousePos(V).radius;
                at.attr({
                    r: aB
                }).style({
                    opacity: 0.5
                });
                G = d.invert(µ.util.getMousePos(V).radius);
                var aD = µ.util.convertToCartesian(aB, m.radialAxis.orientation);
                n.text(µ.util.round(G)).move([aD[0] + ao[0], aD[1] + ao[1]]);
            }).on("mouseout.radial-guide", function (aB, aA) {
                at.style({
                    opacity: 0
                });
                q.hide();
                ac.hide();
                n.hide();
            });
            h.selectAll(".geometry-group .mark").on("mouseover.tooltip", function (aG, aD) {
                var aB = d3.select(this);
                var aC = aB.style("fill");
                var aH = "black";
                var aF = aB.style("opacity") || 1;
                aB.attr({
                    "data-opacity": aF
                });
                if (aC != "none") {
                    aB.attr({
                        "data-fill": aC
                    });
                    aH = d3.hsl(aC).darker().toString();
                    aB.style({
                        fill: aH,
                        opacity: 1
                    });
                    var aE = {
                        t: µ.util.round(aG[0]),
                        r: µ.util.round(aG[1])
                    };
                    if (az) {
                        aE.t = ag[aG[0]];
                    }
                    var aK = "t: " + aE.t + ", r: " + aE.r;
                    var aJ = this.getBoundingClientRect();
                    var aA = h.node().getBoundingClientRect();
                    var aI = [aJ.left + aJ.width / 2 - K[0] - aA.left, aJ.top + aJ.height / 2 - K[1] - aA.top];
                    q.config({
                        color: aH
                    }).text(aK);
                    q.move(aI);
                } else {
                    aC = aB.style("stroke");
                    aB.attr({
                        "data-stroke": aC
                    });
                    aH = d3.hsl(aC).darker().toString();
                    aB.style({
                        stroke: aH,
                        opacity: 1
                    });
                }
            }).on("mousemove.tooltip", function (aB, aA) {
                if (d3.event.which != 0) {
                    return false;
                }
                if (d3.select(this).attr("data-fill")) {
                    q.show();
                }
            }).on("mouseout.tooltip", function (aC, aA) {
                q.hide();
                var aB = d3.select(this);
                var aD = aB.attr("data-fill");
                if (aD) {
                    aB.style({
                        fill: aD,
                        opacity: aB.attr("data-opacity")
                    });
                } else {
                    aB.style({
                        stroke: aB.attr("data-stroke"),
                        opacity: aB.attr("data-opacity")
                    });
                }
            });
        });
        return e;
    }
    e.render = function (k) {
        b(k);
        return this;
    };
    e.config = function (k) {
        if (!arguments.length) {
            return c;
        }
        var l = µ.util.cloneJson(k);
        l.data.forEach(function (n, m) {
            if (!c.data[m]) {
                c.data[m] = {};
            }
            µ.util.deepExtend(c.data[m], µ.Axis.defaultConfig().data[0]);
            µ.util.deepExtend(c.data[m], n);
        });
        µ.util.deepExtend(c.layout, µ.Axis.defaultConfig().layout);
        µ.util.deepExtend(c.layout, l.layout);
        return this;
    };
    e.getLiveConfig = function () {
        return j;
    };
    e.getinputConfig = function () {
        return f;
    };
    e.radialScale = function (k) {
        return d;
    };
    e.angularScale = function (k) {
        return g;
    };
    e.svg = function () {
        return h;
    };
    d3.rebind(e, i, "on");
    return e;
};
µ.Axis.defaultConfig = function (c, b) {
    var a = {
        data: [{
            t: [1, 2, 3, 4],
            r: [10, 11, 12, 13],
            name: "Line1",
            geometry: "LinePlot",
            color: null,
            strokeDash: "solid",
            strokeColor: null,
            strokeSize: "1",
            visibleInLegend: true,
            opacity: 1
        }],
        layout: {
            defaultColorRange: d3.scale.category10().range(),
            title: null,
            height: 450,
            width: 500,
            margin: {
                top: 40,
                right: 40,
                bottom: 40,
                left: 40
            },
            font: {
                size: 12,
                color: "gray",
                outlineColor: "white",
                family: "Tahoma, sans-serif"
            },
            direction: "clockwise",
            orientation: 0,
            labelOffset: 10,
            radialAxis: {
                domain: null,
                orientation: -45,
                ticksSuffix: "",
                visible: true,
                gridLinesVisible: true,
                tickOrientation: "horizontal",
                rewriteTicks: null
            },
            angularAxis: {
                domain: [0, 360],
                ticksSuffix: "",
                visible: true,
                gridLinesVisible: true,
                labelsVisible: true,
                tickOrientation: "horizontal",
                rewriteTicks: null,
                ticksCount: null,
                ticksStep: null
            },
            minorTicks: 0,
            tickLength: null,
            tickColor: "silver",
            minorTickColor: "#eee",
            backgroundColor: "none",
            needsEndSpacing: null,
            showLegend: true,
            legend: {
                reverseOrder: false
            },
            opacity: 1
        }
    };
    return a;
};
µ.util = {};
µ.DATAEXTENT = "dataExtent";
µ.AREA = "AreaChart";
µ.LINE = "LinePlot";
µ.DOT = "DotPlot";
µ.BAR = "BarChart";
µ.util._override = function (c, b) {
    for (var a in c) {
        if (a in b) {
            b[a] = c[a];
        }
    }
};
µ.util._extend = function (c, b) {
    for (var a in c) {
        b[a] = c[a];
    }
};
µ.util._rndSnd = function () {
    return Math.random() * 2 - 1 + (Math.random() * 2 - 1) + (Math.random() * 2 - 1);
};
µ.util.dataFromEquation2 = function (b, a) {
    var c = a || 6;
    var d = d3.range(0, 360 + c, c).map(function (h, f) {
        var g = h * Math.PI / 180;
        var e = b(g);
        return [h, e];
    });
    return d;
};
µ.util.dataFromEquation = function (e, d, b) {
    var g = d || 6;
    var c = [],
        f = [];
    d3.range(0, 360 + g, g).forEach(function (k, i) {
        var j = k * Math.PI / 180;
        var h = e(j);
        c.push(k);
        f.push(h);
    });
    var a = {
        t: c,
        r: f
    };
    if (b) {
        a.name = b;
    }
    return a;
};
µ.util.ensureArray = function (c, b) {
    if (typeof c === "undefined") {
        return null;
    }
    var a = [].concat(c);
    return d3.range(b).map(function (f, e) {
        return a[e] || a[0];
    });
};
µ.util.fillArrays = function (c, b, a) {
    b.forEach(function (f, e) {
        c[f] = µ.util.ensureArray(c[f], a);
    });
    return c;
};
µ.util.cloneJson = function (a) {
    return JSON.parse(JSON.stringify(a));
};
µ.util.deepExtend = function (a, c) {
    for (var b in c) {
        if (c[b] && c[b].constructor && c[b].constructor === Object) {
            a[b] = a[b] || {};
            arguments.callee(a[b], c[b]);
        } else {
            a[b] = c[b];
        }
    }
    return a;
};
µ.util.validateKeys = function (c, b) {
    if (typeof b === "string") {
        b = b.split(".");
    }
    var a = b.shift();
    return c[a] && (!b.length || objHasKeys(c[a], b));
};
µ.util.sumArrays = function (d, c) {
    return d3.zip(d, c).map(function (b, a) {
        return d3.sum(b);
    });
};
µ.util.arrayLast = function (b) {
    return b[b.length - 1];
};
µ.util.arrayEqual = function (d, c) {
    var e = Math.max(d.length, c.length, 1);
    while (e-- >= 0 && d[e] === c[e]) {}
    return e === -2;
};
µ.util.flattenArray = function (a) {
    var b = [];
    while (!µ.util.arrayEqual(b, a)) {
        b = a;
        a = [].concat.apply([], a);
    }
    return a;
};
µ.util.deduplicate = function (a) {
    return a.filter(function (c, d, b) {
        return b.indexOf(c) == d;
    });
};
µ.util.convertToCartesian = function (b, c) {
    var d = c * Math.PI / 180;
    var a = b * Math.cos(d);
    var e = b * Math.sin(d);
    return [a, e];
};
µ.util.round = function (b, a) {
    var c = a || 2;
    var d = Math.pow(10, c);
    return Math.round(b * d) / d;
};
µ.util.getMousePos = function (e) {
    var a = d3.mouse(e.node());
    var d = a[0];
    var c = a[1];
    var b = {};
    b.x = d;
    b.y = c;
    b.pos = a;
    b.angle = (Math.atan2(c, d) + Math.PI) * 180 / Math.PI;
    b.radius = Math.sqrt(d * d + c * c);
    return b;
};
µ.util.duplicatesCount = function (c) {
    var f = {},
        e;
    var b = {};
    for (var d = 0, a = c.length; d < a; d++) {
        e = c[d];
        if (e in f) {
            f[e]++;
            b[e] = f[e];
        } else {
            f[e] = 1;
        }
    }
    return b;
};
µ.util.duplicates = function (a) {
    return Object.keys(µ.util.duplicatesCount(a));
};
µ.util.translator = function (f, b, d, c) {
    if (c) {
        var a = d.slice();
        d = b;
        b = a;
    }
    var e = b.reduce(function (g, h) {
        if (typeof g != "undefined") {
            return g[h];
        }
    }, f);
    if (typeof e === "undefined") {
        return;
    }
    b.reduce(function (g, i, h) {
        if (typeof g == "undefined") {
            return;
        }
        if (h === b.length - 1) {
            delete g[i];
        }
        return g[i];
    }, f);
    d.reduce(function (g, i, h) {
        if (typeof g[i] === "undefined") {
            g[i] = {};
        }
        if (h === d.length - 1) {
            g[i] = e;
        }
        return g[i];
    }, f);
};
µ.PolyChart = function module() {
    var d = [µ.PolyChart.defaultConfig()];
    var c = d3.dispatch("hover");
    var b = {
        solid: "none",
        dash: [5, 2],
        dot: [2, 5]
    };
    var e;

    function a() {
        var g = d[0].geometryConfig;
        var f = g.container;
        if (typeof f == "string") {
            f = d3.select(f);
        }
        f.datum(d).each(function (r, t) {
            var q = !!r[0].data.yStack;
            var m = r.map(function (y, x) {
                if (q) {
                    return d3.zip(y.data.t[0], y.data.r[0], y.data.yStack[0]);
                } else {
                    return d3.zip(y.data.t[0], y.data.r[0]);
                }
            });
            var k = g.angularScale;
            var u = g.radialScale.domain()[0];
            var p = {};
            p.bar = function (D, z, C) {
                var B = r[C].data;
                var A = g.radialScale(D[1]) - g.radialScale(0);
                var y = g.radialScale(D[2] || 0);
                var x = B.barWidth;
                d3.select(this).attr({
                    "class": "mark bar",
                    d: "M" + [
                        [A + y, -x / 2],
                        [A + y, x / 2],
                        [y, x / 2],
                        [y, -x / 2]
                    ].join("L") + "Z",
                    transform: function (F, E) {
                        return "rotate(" + (g.orientation + k(F[0])) + ")";
                    }
                });
            };
            p.dot = function (B, y, A) {
                var x = B[2] ? [B[0], B[1] + B[2]] : B;
                var z = d3.svg.symbol().size(r[A].data.dotSize).type(r[A].data.dotType)(B, y);
                d3.select(this).attr({
                    "class": "mark dot",
                    d: z,
                    transform: function (D, C) {
                        var E = i(n(x));
                        return "translate(" + [E.x, E.y] + ")";
                    }
                });
            };
            var w = d3.svg.line.radial().interpolate(r[0].data.lineInterpolation).radius(function (x) {
                return g.radialScale(x[1]);
            }).angle(function (x) {
                return g.angularScale(x[0]) * Math.PI / 180;
            });
            p.line = function (A, x, z) {
                var B = A[2] ? m[z].map(function (D, C) {
                    return [D[0], D[1] + D[2]];
                }) : m[z];
                d3.select(this).each(p.dot).style({
                    opacity: function (D, C) {
                        return +r[z].data.dotVisible;
                    },
                    fill: j.stroke(A, x, z)
                }).attr({
                    "class": "mark dot"
                });
                if (x > 0) {
                    return;
                }
                var y = d3.select(this.parentNode).selectAll("path.line").data([0]);
                y.enter().insert("path");
                y.attr({
                    "class": "line",
                    d: w(B),
                    transform: function (D, C) {
                        return "rotate(" + (g.orientation + 90) + ")";
                    },
                    "pointer-events": "none"
                }).style({
                    fill: function (D, C) {
                        return j.fill(A, x, z);
                    },
                    "fill-opacity": 0,
                    stroke: function (D, C) {
                        return j.stroke(A, x, z);
                    },
                    "stroke-width": function (D, C) {
                        return j["stroke-width"](A, x, z);
                    },
                    "stroke-dasharray": function (D, C) {
                        return j["stroke-dasharray"](A, x, z);
                    },
                    opacity: function (D, C) {
                        return j.opacity(A, x, z);
                    },
                    display: function (D, C) {
                        return j.display(A, x, z);
                    }
                });
            };
            var o = g.angularScale.range();
            var l = Math.abs(o[1] - o[0]) / m[0].length * Math.PI / 180;
            var h = d3.svg.arc().startAngle(function (x) {
                return -l / 2;
            }).endAngle(function (x) {
                return l / 2;
            }).innerRadius(function (x) {
                return g.radialScale(u + (x[2] || 0));
            }).outerRadius(function (x) {
                return g.radialScale(u + (x[2] || 0)) + g.radialScale(x[1]);
            });
            p.arc = function (z, x, y) {
                d3.select(this).attr({
                    "class": "mark arc",
                    d: h,
                    transform: function (B, A) {
                        return "rotate(" + (g.orientation + k(B[0]) + 90) + ")";
                    }
                });
            };
            var j = {
                fill: function (z, x, y) {
                    return r[y].data.color;
                },
                stroke: function (z, x, y) {
                    return r[y].data.strokeColor;
                },
                "stroke-width": function (z, x, y) {
                    return r[y].data.strokeSize + "px";
                },
                "stroke-dasharray": function (z, x, y) {
                    return b[r[y].data.strokeDash];
                },
                opacity: function (z, x, y) {
                    return r[y].data.opacity;
                },
                display: function (z, x, y) {
                    return typeof r[y].data.visible === "undefined" || r[y].data.visible ? "block" : "none";
                }
            };
            var v = d3.select(this).selectAll("g.layer").data(m);
            v.enter().append("g").attr({
                "class": "layer"
            });
            var s = v.selectAll("path.mark").data(function (y, x) {
                return y;
            });
            s.enter().append("path").attr({
                "class": "mark"
            });
            s.style(j).each(p[g.geometryType]);
            s.exit().remove();
            v.exit().remove();

            function n(A, y) {
                var z = g.radialScale(A[1]);
                var x = (g.angularScale(A[0]) + g.orientation) * Math.PI / 180;
                return {
                    r: z,
                    t: x
                };
            }

            function i(A) {
                var z = A.r * Math.cos(A.t);
                var B = A.r * Math.sin(A.t);
                return {
                    x: z,
                    y: B
                };
            }
        });
    }
    a.config = function (f) {
        if (!arguments.length) {
            return d;
        }
        f.forEach(function (h, g) {
            if (!d[g]) {
                d[g] = {};
            }
            µ.util.deepExtend(d[g], µ.PolyChart.defaultConfig());
            µ.util.deepExtend(d[g], h);
        });
        return this;
    };
    a.getColorScale = function () {
        return e;
    };
    d3.rebind(a, c, "on");
    return a;
};
µ.PolyChart.defaultConfig = function () {
    var a = {
        data: {
            name: "geom1",
            t: [
                [1, 2, 3, 4]
            ],
            r: [
                [1, 2, 3, 4]
            ],
            dotType: "circle",
            dotSize: 64,
            dotVisible: false,
            barWidth: 20,
            color: "#ffa500",
            strokeSize: 1,
            strokeColor: "silver",
            strokeDash: "solid",
            opacity: 1,
            index: 0,
            visible: true,
            visibleInLegend: true
        },
        geometryConfig: {
            geometry: "LinePlot",
            geometryType: "arc",
            direction: "clockwise",
            orientation: 0,
            container: "body",
            radialScale: null,
            angularScale: null,
            colorScale: d3.scale.category20()
        }
    };
    return a;
};
µ.BarChart = function module() {
    return µ.PolyChart();
};
µ.BarChart.defaultConfig = function () {
    var a = {
        geometryConfig: {
            geometryType: "bar"
        }
    };
    return a;
};
µ.AreaChart = function module() {
    return µ.PolyChart();
};
µ.AreaChart.defaultConfig = function () {
    var a = {
        geometryConfig: {
            geometryType: "arc"
        }
    };
    return a;
};
µ.DotPlot = function module() {
    return µ.PolyChart();
};
µ.DotPlot.defaultConfig = function () {
    var a = {
        geometryConfig: {
            geometryType: "dot",
            dotType: "circle"
        }
    };
    return a;
};
µ.LinePlot = function module() {
    return µ.PolyChart();
};
µ.LinePlot.defaultConfig = function () {
    var a = {
        geometryConfig: {
            geometryType: "line"
        }
    };
    return a;
};
µ.Legend = function module() {
    var c = µ.Legend.defaultConfig();
    var b = d3.dispatch("hover");

    function a() {
        var n = c.legendConfig;
        var k = c.data.map(function (x, w) {
            return [].concat(x).map(function (z, y) {
                var A = µ.util.deepExtend({}, n.elements[w]);
                A.name = z;
                A.color = [].concat(n.elements[w].color)[y];
                return A;
            });
        });
        var u = d3.merge(k);
        u = u.filter(function (x, w) {
            return n.elements[w] && (n.elements[w].visibleInLegend || typeof n.elements[w].visibleInLegend === "undefined");
        });
        if (n.reverseOrder) {
            u = u.reverse();
        }
        var m = n.container;
        if (typeof m == "string" || m.nodeName) {
            m = d3.select(m);
        }
        var l = u.map(function (x, w) {
            return x.color;
        });
        var g = n.fontSize;
        var r = n.isContinuous == null ? typeof u[0] === "number" : n.isContinuous;
        var o = r ? n.height : g * u.length;
        var e = m.classed("legend-group", true);
        var p = e.selectAll("svg").data([0]);
        var v = p.enter().append("svg").attr({
            width: 300,
            height: o + g,
            xmlns: "http://www.w3.org/2000/svg",
            "xmlns:xmlns:xlink": "http://www.w3.org/1999/xlink",
            version: "1.1"
        });
        v.append("g").classed("legend-axis", true);
        v.append("g").classed("legend-marks", true);
        var h = d3.range(u.length);
        var t = d3.scale[r ? "linear" : "ordinal"]().domain(h).range(l);
        var q = d3.scale[r ? "linear" : "ordinal"]().domain(h)[r ? "range" : "rangePoints"]([0, o]);
        var s = function (x, w) {
            var y = w * 3;
            if (x === "line") {
                return "M" + [
                    [-w / 2, -w / 12],
                    [w / 2, -w / 12],
                    [w / 2, w / 12],
                    [-w / 2, w / 12]
                ] + "Z";
            } else {
                if (d3.svg.symbolTypes.indexOf(x) != -1) {
                    return d3.svg.symbol().type(x).size(y)();
                } else {
                    return d3.svg.symbol().type("square").size(y)();
                }
            }
        };
        if (r) {
            var d = p.select(".legend-marks").append("defs").append("linearGradient").attr({
                id: "grad1",
                x1: "0%",
                y1: "0%",
                x2: "0%",
                y2: "100%"
            }).selectAll("stop").data(l);
            d.enter().append("stop");
            d.attr({
                offset: function (x, w) {
                    return w / (l.length - 1) * 100 + "%";
                }
            }).style({
                "stop-color": function (x, w) {
                    return x;
                }
            });
            p.append("rect").classed("legend-mark", true).attr({
                height: n.height,
                width: n.colorBandWidth,
                fill: "url(#grad1)"
            });
        } else {
            var i = p.select(".legend-marks").selectAll("path.legend-mark").data(u);
            i.enter().append("path").classed("legend-mark", true);
            i.attr({
                transform: function (x, w) {
                    return "translate(" + [g / 2, q(w) + g / 2] + ")";
                },
                d: function (y, w) {
                    var x = y.symbol;
                    return s(x, g);
                },
                fill: function (x, w) {
                    return t(w);
                }
            });
            i.exit().remove();
        }
        var j = d3.svg.axis().scale(q).orient("right");
        var f = p.select("g.legend-axis").attr({
            transform: "translate(" + [r ? n.colorBandWidth : g, g / 2] + ")"
        }).call(j);
        f.selectAll(".domain").style({
            fill: "none",
            stroke: "none"
        });
        f.selectAll("line").style({
            fill: "none",
            stroke: r ? n.textColor : "none"
        });
        f.selectAll("text").style({
            fill: n.textColor,
            "font-size": n.fontSize
        }).text(function (x, w) {
            return u[w].name;
        });
        return a;
    }
    a.config = function (d) {
        if (!arguments.length) {
            return c;
        }
        µ.util.deepExtend(c, d);
        return this;
    };
    d3.rebind(a, b, "on");
    return a;
};
µ.Legend.defaultConfig = function (c, b) {
    var a = {
        data: ["a", "b", "c"],
        legendConfig: {
            elements: [{
                symbol: "line",
                color: "red"
            }, {
                symbol: "square",
                color: "yellow"
            }, {
                symbol: "diamond",
                color: "limegreen"
            }],
            height: 150,
            colorBandWidth: 30,
            fontSize: 12,
            container: "body",
            isContinuous: null,
            textColor: "grey",
            reverseOrder: false
        }
    };
    return a;
};
µ.tooltipPanel = function () {
    var c, d, f;
    var b = {
        container: null,
        hasTick: false,
        fontSize: 12,
        color: "white",
        padding: 5
    };
    var g = "tooltip-" + µ.tooltipPanel.uid++;
    var e = 10;
    var a = function () {
        c = b.container.selectAll("g." + g).data([0]);
        var h = c.enter().append("g").classed(g, true).style({
            "pointer-events": "none",
            display: "none"
        });
        f = h.append("path").style({
            fill: "white",
            "fill-opacity": 0.9
        }).attr({
            d: "M0 0"
        });
        d = h.append("text").attr({
            dx: b.padding + e,
            dy: +b.fontSize * 0.3
        });
        return a;
    };
    a.text = function (n) {
        var j = d3.hsl(b.color).l;
        var r = j >= 0.5 ? "#aaa" : "white";
        var i = j >= 0.5 ? "black" : "white";
        var p = n || "";
        d.style({
            fill: i,
            "font-size": b.fontSize + "px"
        }).text(p);
        var o = b.padding;
        var q = d.node().getBBox();
        var k = {
            fill: b.color,
            stroke: r,
            "stroke-width": "2px"
        };
        var m = q.width + o * 2 + e;
        var h = q.height + o * 2;
        f.attr({
            d: "M" + [
                [e, -h / 2],
                [e, -h / 4],
                [b.hasTick ? 0 : e, 0],
                [e, h / 4],
                [e, h / 2],
                [m, h / 2],
                [m, -h / 2]
            ].join("L") + "Z"
        }).style(k);
        c.attr({
            transform: "translate(" + [e, -h / 2 + o * 2] + ")"
        });
        c.style({
            display: "block"
        });
        return a;
    };
    a.move = function (h) {
        if (!c) {
            return;
        }
        c.attr({
            transform: "translate(" + [h[0], h[1]] + ")"
        }).style({
            display: "block"
        });
        return a;
    };
    a.hide = function () {
        if (!c) {
            return;
        }
        c.style({
            display: "none"
        });
        return a;
    };
    a.show = function () {
        if (!c) {
            return;
        }
        c.style({
            display: "block"
        });
        return a;
    };
    a.config = function (h) {
        µ.util.deepExtend(b, h);
        return a;
    };
    return a;
};
µ.tooltipPanel.uid = 1;
µ.adapter = {};
µ.adapter.plotly = function module() {
    var a = {};
    a.convert = function (e, h) {
        var j = {};
        if (e.data) {
            j.data = e.data.map(function (n, l) {
                var m = µ.util.deepExtend({}, n);
                var k = [
                    [m, ["marker", "color"],
                        ["color"]
                    ],
                    [m, ["marker", "opacity"],
                        ["opacity"]
                    ],
                    [m, ["marker", "line", "color"],
                        ["strokeColor"]
                    ],
                    [m, ["marker", "line", "dash"],
                        ["strokeDash"]
                    ],
                    [m, ["marker", "line", "width"],
                        ["strokeSize"]
                    ],
                    [m, ["marker", "symbol"],
                        ["dotType"]
                    ],
                    [m, ["marker", "size"],
                        ["dotSize"]
                    ],
                    [m, ["marker", "barWidth"],
                        ["barWidth"]
                    ],
                    [m, ["line", "interpolation"],
                        ["lineInterpolation"]
                    ],
                    [m, ["showlegend"],
                        ["visibleInLegend"]
                    ]
                ];
                k.forEach(function (p, o) {
                    µ.util.translator.apply(null, p.concat(h));
                });
                if (!h) {
                    delete m.marker;
                }
                if (h) {
                    delete m.groupId;
                }
                if (!h) {
                    if (m.type === "scatter") {
                        if (m.mode === "lines") {
                            m.geometry = "LinePlot";
                        } else {
                            if (m.mode === "markers") {
                                m.geometry = "DotPlot";
                            } else {
                                if (m.mode === "lines+markers") {
                                    m.geometry = "LinePlot";
                                    m.dotVisible = true;
                                }
                            }
                        }
                    } else {
                        if (m.type === "area") {
                            m.geometry = "AreaChart";
                        } else {
                            if (m.type === "bar") {
                                m.geometry = "BarChart";
                            }
                        }
                    }
                    delete m.mode;
                    delete m.type;
                } else {
                    if (m.geometry === "LinePlot") {
                        m.type = "scatter";
                        if (m.dotVisible === true) {
                            delete m.dotVisible;
                            m.mode = "lines+markers";
                        } else {
                            m.mode = "lines";
                        }
                    } else {
                        if (m.geometry === "DotPlot") {
                            m.type = "scatter";
                            m.mode = "markers";
                        } else {
                            if (m.geometry === "AreaChart") {
                                m.type = "area";
                            } else {
                                if (m.geometry === "BarChart") {
                                    m.type = "bar";
                                }
                            }
                        }
                    }
                    delete m.geometry;
                }
                return m;
            });
            if (!h && e.layout && e.layout.barmode === "stack") {
                var f = µ.util.duplicates(j.data.map(function (l, k) {
                    return l.geometry;
                }));
                j.data.forEach(function (m, l) {
                    var k = f.indexOf(m.geometry);
                    if (k != -1) {
                        j.data[l].groupId = k;
                    }
                });
            }
        }
        if (e.layout) {
            var c = µ.util.deepExtend({}, e.layout);
            var i = [
                [c, ["plot_bgcolor"],
                    ["backgroundColor"]
                ],
                [c, ["showlegend"],
                    ["showLegend"]
                ],
                [c, ["radialaxis"],
                    ["radialAxis"]
                ],
                [c, ["angularaxis"],
                    ["angularAxis"]
                ],
                [c.angularaxis, ["showline"],
                    ["gridLinesVisible"]
                ],
                [c.angularaxis, ["showticklabels"],
                    ["labelsVisible"]
                ],
                [c.angularaxis, ["nticks"],
                    ["ticksCount"]
                ],
                [c.angularaxis, ["tickorientation"],
                    ["tickOrientation"]
                ],
                [c.angularaxis, ["ticksuffix"],
                    ["ticksSuffix"]
                ],
                [c.angularaxis, ["range"],
                    ["domain"]
                ],
                [c.angularaxis, ["endpadding"],
                    ["endPadding"]
                ],
                [c.radialaxis, ["showline"],
                    ["gridLinesVisible"]
                ],
                [c.radialaxis, ["tickorientation"],
                    ["tickOrientation"]
                ],
                [c.radialaxis, ["ticksuffix"],
                    ["ticksSuffix"]
                ],
                [c.radialaxis, ["range"],
                    ["domain"]
                ],
                [c.angularAxis, ["showline"],
                    ["gridLinesVisible"]
                ],
                [c.angularAxis, ["showticklabels"],
                    ["labelsVisible"]
                ],
                [c.angularAxis, ["nticks"],
                    ["ticksCount"]
                ],
                [c.angularAxis, ["tickorientation"],
                    ["tickOrientation"]
                ],
                [c.angularAxis, ["ticksuffix"],
                    ["ticksSuffix"]
                ],
                [c.angularAxis, ["range"],
                    ["domain"]
                ],
                [c.angularAxis, ["endpadding"],
                    ["endPadding"]
                ],
                [c.radialAxis, ["showline"],
                    ["gridLinesVisible"]
                ],
                [c.radialAxis, ["tickorientation"],
                    ["tickOrientation"]
                ],
                [c.radialAxis, ["ticksuffix"],
                    ["ticksSuffix"]
                ],
                [c.radialAxis, ["range"],
                    ["domain"]
                ],
                [c.font, ["outlinecolor"],
                    ["outlineColor"]
                ],
                [c.legend, ["traceorder"],
                    ["reverseOrder"]
                ],
                [c, ["labeloffset"],
                    ["labelOffset"]
                ],
                [c, ["defaultcolorrange"],
                    ["defaultColorRange"]
                ]
            ];
            i.forEach(function (l, k) {
                µ.util.translator.apply(null, l.concat(h));
            });
            if (!h) {
                if (c.angularAxis && typeof c.angularAxis.ticklen !== "undefined") {
                    c.tickLength = c.angularAxis.ticklen;
                }
                if (c.angularAxis && typeof c.angularAxis.tickcolor !== "undefined") {
                    c.tickColor = c.angularAxis.tickcolor;
                }
            } else {
                if (typeof c.tickLength !== "undefined") {
                    c.angularaxis.ticklen = c.tickLength;
                    delete c.tickLength;
                }
                if (c.tickColor) {
                    c.angularaxis.tickcolor = c.tickColor;
                    delete c.tickColor;
                }
            } if (c.legend && typeof c.legend.reverseOrder != "boolean") {
                c.legend.reverseOrder = c.legend.reverseOrder != "normal";
            }
            if (c.legend && typeof c.legend.traceorder == "boolean") {
                c.legend.traceorder = c.legend.traceorder ? "reversed" : "normal";
                delete c.legend.reverseOrder;
            }
            if (c.margin && typeof c.margin.t != "undefined") {
                var b = ["t", "r", "b", "l", "pad"];
                var g = ["top", "right", "bottom", "left", "pad"];
                var d = {};
                d3.entries(c.margin).forEach(function (l, k) {
                    d[g[b.indexOf(l.key)]] = l.value;
                });
                c.margin = d;
            }
            if (h) {
                delete c.needsEndSpacing;
                delete c.minorTickColor;
                delete c.minorTicks;
                delete c.angularaxis.ticksCount;
                delete c.angularaxis.ticksCount;
                delete c.angularaxis.ticksStep;
                delete c.angularaxis.rewriteTicks;
                delete c.angularaxis.nticks;
                delete c.radialaxis.ticksCount;
                delete c.radialaxis.ticksCount;
                delete c.radialaxis.ticksStep;
                delete c.radialaxis.rewriteTicks;
                delete c.radialaxis.nticks;
            }
            j.layout = c;
        }
        return j;
    };
    return a;
};
micropolar.manager = {};
micropolar.manager.framework = function () {
    var c, d, g, f, a;
    var e = new Plotly.util.UndoManager();

    function b(i, h) {
        if (h) {
            a = h;
        }
        d3.select(d3.select(a).node().parentNode).selectAll(".svg-container>*:not(.chart-root)").remove();
        c = (!c) ? i : micropolar.util.deepExtend(c, i);
        if (!g) {
            g = micropolar.Axis();
        }
        f = micropolar.adapter.plotly().convert(c);
        g.config(f).render(a);
        return c;
    }
    b.isPolar = true;
    b.svg = function () {
        return g.svg();
    };
    b.getConfig = function () {
        return c;
    };
    b.getLiveConfig = function () {
        return micropolar.adapter.plotly().convert(g.getLiveConfig(), true);
    };
    b.getLiveScales = function () {
        return {
            t: g.angularScale(),
            r: g.radialScale()
        };
    };
    b.setUndoPoint = function () {
        var i = this;
        var h = µ.util.cloneJson(c);
        (function (k, j) {
            e.add({
                undo: function () {
                    if (j) {
                        i(j);
                    }
                },
                redo: function () {
                    i(k);
                }
            });
        })(h, d);
        d = µ.util.cloneJson(h);
    };
    b.undo = function () {
        e.undo();
    };
    b.redo = function () {
        e.redo();
    };
    return b;
};
(function () {
    if (!window.Plotly) {
        window.Plotly = {};
    }
    var n = Plotly.Plots = {};
    n.defaultColors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"];
    Plotly.colorscales = {
        Greys: [
            [0, "rgb(0,0,0)"],
            [1, "rgb(255,255,255)"]
        ],
        YIGnBu: [
            [0, "rgb(8, 29, 88)"],
            [0.125, "rgb(37, 52, 148)"],
            [0.25, "rgb(34, 94, 168)"],
            [0.375, "rgb(29, 145, 192)"],
            [0.5, "rgb(65, 182, 196)"],
            [0.625, "rgb(127, 205, 187)"],
            [0.75, "rgb(199, 233, 180)"],
            [0.875, "rgb(237, 248, 217)"],
            [1, "rgb(255, 255, 217)"]
        ],
        Greens: [
            [0, "rgb(0, 68, 27)"],
            [0.125, "rgb(0, 109, 44)"],
            [0.25, "rgb(35, 139, 69)"],
            [0.375, "rgb(65, 171, 93)"],
            [0.5, "rgb(116, 196, 118)"],
            [0.625, "rgb(161, 217, 155)"],
            [0.75, "rgb(199, 233, 192)"],
            [0.875, "rgb(229, 245, 224)"],
            [1, "rgb(247, 252, 245)"]
        ],
        YIOrRd: [
            [0, "rgb(128, 0, 38)"],
            [0.125, "rgb(189, 0, 38)"],
            [0.25, "rgb(227, 26, 28)"],
            [0.375, "rgb(252, 78, 42)"],
            [0.5, "rgb(253, 141, 60)"],
            [0.625, "rgb(254, 178, 76)"],
            [0.75, "rgb(254, 217, 118)"],
            [0.875, "rgb(255, 237, 160)"],
            [1, "rgb(255, 255, 204)"]
        ],
        Bluered: [
            [0, "rgb(0,0,255)"],
            [1, "rgb(255,0,0)"]
        ],
        RdBu: [
            [0, "rgb(5, 10, 172)"],
            [0.35, "rgb(106, 137, 247)"],
            [0.5, "rgb(190,190,190)"],
            [0.6, "rgb(220, 170, 132)"],
            [0.7, "rgb(230, 145, 90)"],
            [1, "rgb(178, 10, 28)"]
        ],
        Picnic: [
            [0, "rgb(0,0,255)"],
            [0.1, "rgb(51,153,255)"],
            [0.2, "rgb(102,204,255)"],
            [0.3, "rgb(153,204,255)"],
            [0.4, "rgb(204,204,255)"],
            [0.5, "rgb(255,255,255)"],
            [0.6, "rgb(255,204,255)"],
            [0.7, "rgb(255,153,255)"],
            [0.8, "rgb(255,102,204)"],
            [0.9, "rgb(255,102,102)"],
            [1, "rgb(255,0,0)"]
        ],
        Rainbow: [
            [0, "rgb(150,0,90)"],
            [0.125, "rgb(0, 0, 200)"],
            [0.25, "rgb(0, 25, 255)"],
            [0.375, "rgb(0, 152, 255)"],
            [0.5, "rgb(44, 255, 150)"],
            [0.625, "rgb(151, 255, 0)"],
            [0.75, "rgb(255, 234, 0)"],
            [0.875, "rgb(255, 111, 0)"],
            [1, "rgb(255, 0, 0)"]
        ],
        Portland: [
            [0, "rgb(12,51,131)"],
            [0.25, "rgb(10,136,186)"],
            [0.5, "rgb(242,211,56)"],
            [0.75, "rgb(242,143,56)"],
            [1, "rgb(217,30,30)"]
        ],
        Jet: [
            [0, "rgb(0,0,131)"],
            [0.125, "rgb(0,60,170)"],
            [0.375, "rgb(5,255,255)"],
            [0.625, "rgb(255,255,0)"],
            [0.875, "rgb(250,0,0)"],
            [1, "rgb(128,0,0)"]
        ],
        Hot: [
            [0, "rgb(0,0,0)"],
            [0.3, "rgb(230,0,0)"],
            [0.6, "rgb(255,210,0)"],
            [1, "rgb(255,255,255)"]
        ],
        Blackbody: [
            [0, "rgb(0,0,0)"],
            [0.2, "rgb(230,0,0)"],
            [0.4, "rgb(230,210,0)"],
            [0.7, "rgb(255,255,255)"],
            [1, "rgb(160,200,255)"]
        ],
        Earth: [
            [0, "rgb(0,0,130)"],
            [0.1, "rgb(0,180,180)"],
            [0.2, "rgb(40,210,40)"],
            [0.4, "rgb(230,230,50)"],
            [0.6, "rgb(120,70,20)"],
            [1, "rgb(255,255,255)"]
        ],
        Electric: [
            [0, "rgb(0,0,0)"],
            [0.15, "rgb(30,0,100)"],
            [0.4, "rgb(120,0,100)"],
            [0.6, "rgb(160,90,0)"],
            [0.8, "rgb(230,200,0)"],
            [1, "rgb(255,250,220)"]
        ]
    };
    Plotly.defaultColorscale = Plotly.colorscales.RdBu;
    n.getScale = function (x) {
        if (!x) {
            return Plotly.defaultColorscale;
        } else {
            if (typeof x === "string") {
                try {
                    x = Plotly.colorscales[x] || JSON.parse(x);
                } catch (y) {
                    return Plotly.defaultColorscale;
                }
            }
        } if (typeof x === "string") {
            try {
                x = Plotly.colorscales[x] || JSON.parse(x);
            } catch (y) {
                return Plotly.defaultColorscale;
            }
        }
        return x;
    };
    (function () {
        if (!$("#plotlyMainMarker").length) {
            return;
        }
        var x = document.createElement("style");
        x.appendChild(document.createTextNode(""));
        document.head.appendChild(x);
        var E = x.sheet;

        function F(H, I) {
            if (E.insertRule) {
                E.insertRule(H + "{" + I + "}", 0);
            } else {
                if (E.addRule) {
                    E.addRule(H, I, 0);
                } else {
                    console.log("addStyleRule failed");
                }
            }
        }

        function G(H) {
            return String(Math.round((1 - H[0]) * 100)) + "%";
        }
        for (var A in Plotly.colorscales) {
            var y = Plotly.colorscales[A],
                D = "",
                B = "";
            for (var z = y.length - 1; z >= 0; z--) {
                D += ", " + y[z][1] + " " + G(y[z]);
                B += ", color-stop(" + G(y[z]) + "," + y[z][1] + ")";
            }
            var C = "background: " + y[y.length - 1][1] + ";background: -moz-linear-gradient(top" + D + ");background: -webkit-gradient(linear, left top, left bottom" + B + ");background: -webkit-linear-gradient(top" + D + ");background: -o-linear-gradient(top" + D + ");background: -ms-linear-gradient(top" + D + ");background: linear-gradient(to bottom" + D + ');filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="' + y[y.length - 1][1] + '",endColorstr="' + y[0][1] + '",GradientType=0);';
            F("." + A, C);
        }
    }());

    function j() {
        return {
            title: "Click to enter Plot title",
            xaxis: Plotly.Axes.defaultAxis({
                range: [-1, 6]
            }),
            yaxis: Plotly.Axes.defaultAxis({
                range: [-1, 4]
            }),
            legend: {
                bgcolor: "#fff",
                bordercolor: "#444",
                borderwidth: 0,
                font: {
                    family: "",
                    size: 0,
                    color: ""
                },
                traceorder: "normal"
            },
            width: 700,
            height: 450,
            autosize: "initial",
            margin: {
                l: 80,
                r: 80,
                t: 100,
                b: 80,
                pad: 0,
                autoexpand: true
            },
            paper_bgcolor: "#fff",
            plot_bgcolor: "#fff",
            barmode: "group",
            bargap: 0.2,
            bargroupgap: 0,
            boxmode: "overlay",
            boxgap: 0.3,
            boxgroupgap: 0.3,
            font: {
                family: '"Open sans", verdana, arial, sans-serif',
                size: 12,
                color: "#444"
            },
            titlefont: {
                family: "",
                size: 0,
                color: ""
            },
            dragmode: "zoom",
            hovermode: "x",
            separators: ".,",
            hidesources: false,
            smith: false
        };
    }

    function q(x, y) {
        y = y || {};
        x.data.forEach(function (C) {
            var D = Plotly.Axes.getFromId(x, C.xaxis || "x"),
                A = Plotly.Axes.getFromId(x, C.yaxis || "y");
            if (n.isHeatmap(C.type)) {
                if (!y[D._name] || !("ticks" in y[D._name])) {
                    D.ticks = "outside";
                }
                if (!y[A._name] || !("ticks" in y[A._name])) {
                    A.ticks = "outside";
                }
            } else {
                if (n.isBar(C.type) || C.type === "box") {
                    var z = (n.isBar(C.type) && C.orientation === "h") ? A : D,
                        B = y[z._name];
                    if (!B || !("showgrid" in B)) {
                        z.showgrid = false;
                    }
                    if (!B || !("zeroline" in B)) {
                        z.zeroline = false;
                    }
                }
            } if ((n.isBar(C.type) && x.layout.barmode === "stack") || (C.type === "scatter" && ["tonextx", "tonexty"].indexOf(C.fill) !== -1)) {
                if (!y.legend || !("traceorder" in y.legend)) {
                    x.layout.legend.traceorder = "reversed";
                }
            }
        });
    }
    n.isScatter = function (x) {
        return !x || (x === "scatter");
    };
    var p = ["bar", "histogram"];
    n.isBar = function (x) {
        return p.indexOf(x) !== -1;
    };
    var b = ["heatmap", "histogram2d", "contour", "histogram2dcontour"];
    n.isHeatmap = function (x) {
        return b.indexOf(x) !== -1;
    };
    var h = ["contour", "histogram2dcontour"];
    n.isContour = function (x) {
        return h.indexOf(x) !== -1;
    };
    var v = ["histogram2d", "histogram2dcontour"];
    n.isHist2D = function (x) {
        return v.indexOf(x) !== -1;
    };
    n.isCartesian = function (x) {
        return n.isScatter(x) || n.isBar(x) || n.isHeatmap(x) || x === "box";
    };
    var l = ["scatter3d", "surface"];
    n.isGL3D = function (x) {
        return l.indexOf(x) !== -1;
    };
    n.newTab = function (y, x) {
        a(y);
        return i(y, x);
    };
    n.redrawText = function (y) {
        var x = (typeof y === "string") ? document.getElementById(y) : y;
        if (x.layout._hasGL3D || (x.data && x.data[0] && x.data[0].r)) {
            return;
        }
        setTimeout(function () {
            Plotly.Annotations.drawAll(x);
            Plotly.Legend.draw(x, x.layout.showlegend);
            x.calcdata.forEach(function (z) {
                if (z[0] && z[0].t && z[0].t.cb) {
                    z[0].t.cb();
                }
            });
        }, 300);
    };

    function a(y) {
        var x = (typeof y === "string") ? document.getElementById(y) : y;
        x.mainsite = !!$("#plotlyMainMarker").length;
        if (x.mainsite) {
            Plotly.ToolPanel.makeMenu(x);
        }
    }
    n.addLinks = function (y) {
        var B = y.layout._paper.selectAll("text.js-plot-link-container").data([0]);
        B.enter().append("text").classed("js-plot-link-container", true).attr({
            "text-anchor": "end",
            x: y.layout._paper.attr("width") - 7,
            y: y.layout._paper.attr("height") - 9
        }).style({
            "font-family": '"Open Sans",Arial,sans-serif',
            "font-size": "12px",
            fill: "#444"
        }).each(function () {
            var C = d3.select(this);
            C.append("tspan").classed("js-link-to-tool", true);
            C.append("tspan").classed("js-link-spacer", true);
            C.append("tspan").classed("js-sourcelinks", true);
        });
        var x = B.select(".js-link-to-tool"),
            A = B.select(".js-link-spacer"),
            z = B.select(".js-sourcelinks");
        Plotly.Lib.showSources(y);
        if (y.layout && y.layout._url) {
            x.text(y.layout._url);
        } else {
            if (!y.mainsite && !y.standalone && !$("#plotlyUserProfileMarker").length) {
                c(y, x);
            }
        }
        A.text((x.text() && z.text()) ? " - " : "");
    };

    function c(z, x) {
        x.text("");
        x.append("tspan").style({
            "font-size": "11px"
        }).text("plotly - ");
        var y = x.append("a").attr({
            "xlink:xlink:href": "#",
            "class": "link--impt link--embedview",
            "font-weight": "bold"
        }).text("data and graph " + String.fromCharCode(187));
        if (z.shareplot) {
            var A = window.location.pathname.split("/");
            y.attr({
                "xlink:xlink:show": "new",
                "xlink:xlink:href": "/" + A[1] + "/" + A[2]
            });
        } else {
            y.on("click", function () {
                $(z).trigger("plotly_beforeexport");
                var B = $('<div id="hiddenform" style="display:none;"><form action="https://plot.ly/external" method="post" target="_blank"><input type="text" name="data" /></form></div>').appendTo(z);
                B.find("input").val(n.graphJson(z, false, "keepdata").replace(/\\/g, "\\\\").replace(/'/g, "\\'"));
                B.find("form").submit();
                B.remove();
                $(z).trigger("plotly_afterexport");
                return false;
            });
        }
    }
    Plotly.plot = function (L, ag, T) {
        Plotly.Lib.markTime("in plot");
        if (typeof L === "string") {
            L = document.getElementById(L);
        }
        if (!ag && !T && !d3.select(L).classed("js-plotly-plot")) {
            console.log("Warning: calling Plotly.plot as if redrawing but this container doesn't yet have a plot.", L);
        }
        L.mainsite = !!$("#plotlyMainMarker").length;
        if (!T) {
            T = {};
        }
        d3.select(L).classed("js-plotly-plot", true);
        g(L);
        L._promises = [];
        var P = ((typeof L.data === "undefined") && $.isArray(ag));
        if ($.isArray(ag)) {
            var R = [];
            var x = ag.filter(function (ai) {
                return "uid" in ai;
            }).map(function (ai) {
                return ai.uid;
            });
            if (!P) {
                x = x.concat(L.data.filter(function (ai) {
                    return "uid" in ai;
                }).map(function (ai) {
                    return ai.uid;
                }));
            }
            ag.forEach(function (an, ak) {
                if (!("uid" in an) || R.indexOf(an.uid) !== -1) {
                    var am, aj;
                    for (aj = 0; aj < 100; aj++) {
                        am = Plotly.Lib.randstr(x);
                        if (R.indexOf(am) === -1) {
                            break;
                        }
                    }
                    an.uid = Plotly.Lib.randstr(x);
                    x.push(an.uid);
                }
                R.push(an.uid);
                if (an.type === "histogramy" && "xbins" in an && !("ybins" in an)) {
                    an.ybins = an.xbins;
                    delete an.xbins;
                }
                if (an.error_y && "opacity" in an.error_y) {
                    var ai = n.defaultColors,
                        al = an.error_y.color || (n.isBar(an.type) ? "#444" : ai[ak % ai.length]);
                    an.error_y.color = Plotly.Drawing.addOpacity(Plotly.Drawing.rgb(al), Plotly.Drawing.opacity(al) * an.error_y.opacity);
                    delete an.error_y.opacity;
                }
                if ("bardir" in an) {
                    if (an.bardir === "h" && (n.isBar(an.type) || an.type.substr(0, 9) === "histogram")) {
                        an.orientation = "h";
                        u(an);
                    }
                    delete an.bardir;
                }
                if (an.type === "histogramy") {
                    u(an);
                }
                if (an.type === "histogramx" || an.type === "histogramy") {
                    an.type = "histogram";
                }
                if ("scl" in an) {
                    an.colorscale = an.scl;
                    delete an.scl;
                }
                if ("reversescl" in an) {
                    an.reversescale = an.reversescl;
                    delete an.reversescl;
                }
            });
            if (P) {
                L.data = ag;
            } else {
                L.data.push.apply(L.data, ag);
            }
            L.empty = false;
        }
        if (ag && ag[0] && ag[0].type && ag[0].type.indexOf("Polar") !== -1) {
            console.log("This polar chart uses a deprecated pre-release API");
            return null;
        }
        if (ag && ag[0] && ag[0].r) {
            var J = d3.select(L).selectAll(".plot-container").data([0]);
            J.enter().insert("div", ":first-child").classed("plot-container plotly", true);
            var S = J.selectAll(".svg-container").data([0]);
            S.enter().append("div").classed("svg-container", true).style("position", "relative");
            S.html("");
            if (ag) {
                L.data = ag;
            }
            L.layout = T;
            L.layout._container = J;
            L.layout._paperdiv = S;
            if (L.layout.autosize === "initial" && L.mainsite) {
                m(L, {});
                L.layout.autosize = true;
            }
            S.style({
                width: (T.width || 800) + "px",
                height: (T.height || 600) + "px",
                background: (T.paper_bgcolor || "white")
            });
            L.framework = micropolar.manager.framework();
            T = µ.util.deepExtend({}, L.layout);
            delete T._container;
            delete T._paperdiv;
            delete T.autosize;
            delete T._paper;
            delete T._forexport;
            L.framework({
                data: L.data,
                layout: T
            }, S.node());
            L.framework.setUndoPoint();
            var I = L.framework.svg();
            var af = 1;
            var D = L.layout.title;
            if (D === "" || !D) {
                af = 0;
            }
            var V = "Click to enter title";
            var aa = function () {
                this.call(Plotly.util.convertToTspans);
            };
            var U = I.select(".title-group text").call(aa);
            if (L.mainsite && !L.layout._forexport) {
                U.attr({
                    "data-unformatted": D
                });
                if (!D || D === V) {
                    af = 0.2;
                    U.attr({
                        "data-unformatted": V
                    }).text(V).style({
                        opacity: af
                    }).on("mouseover.opacity", function () {
                        d3.select(this).transition().duration(100).style("opacity", 1);
                    }).on("mouseout.opacity", function () {
                        d3.select(this).transition().duration(1000).style("opacity", 0);
                    });
                }
                var B = function () {
                    this.call(Plotly.util.makeEditable).on("edit", function (ai) {
                        L.framework({
                            layout: {
                                title: ai
                            }
                        });
                        this.attr({
                            "data-unformatted": ai
                        }).text(ai).call(aa);
                        this.call(B);
                    }).on("cancel", function () {
                        var ai = this.attr("data-unformatted");
                        this.text(ai).call(aa);
                    });
                };
                U.call(B);
                L.layout._paperdiv = S;
                Plotly.ToolPanel.tweakMenu();
            }
            L.layout._paper = I;
            n.addLinks(L);
            return Promise.resolve();
        } else {
            if (L.mainsite) {
                Plotly.ToolPanel.tweakMenu();
            }
        }
        L._replotting = true;
        var Z = (L.data && L.data.length > 0);
        if (Z) {
            if (L.data.some(function (ai) {
                return n.isGL3D(ai.type);
            })) {
                T._hasGL3D = true;
            }
            if (L.data.some(function (ai) {
                return n.isCartesian(ai.type) && !("r" in ai);
            })) {
                T._hasCartesian = true;
            }
            var X = Plotly.Axes.getSubplots(L).join(""),
                Y = ((L.layout && L.layout._plots) ? Object.keys(L.layout._plots) : []).join("");
            if (!L.framework || L.framework !== i || !L.layout || P || (Y !== X)) {
                L.framework = i;
                i(L, T);
            }
        } else {
            if ((typeof L.layout === "undefined") || P) {
                i(L, T);
            }
        } if (P && Z) {
            q(L, T);
        }
        $(L).find(".data-only").attr("disabled", !Z);
        var H = L.layout;
        if (H._hasGL3D) {
            var G = $(L).find(".examples-container");
            if (G.css("display") === "block") {
                Examples.set();
            }
            var O = $(L).find(".svg-container .modebar")[0];
            SceneFrame.reconfigureModeBar(L.layout, O);
            L.data.filter(function (ai) {
                return n.isGL3D(ai.type);
            }).forEach(function (ak) {
                var ai, aj;
                if (!Array.isArray(ak.z)) {
                    $.extend(ak, SceneFrame.testData(ak.type, 120, 120, [40, 40, 60]));
                }
                aj = "scene";
                if (ak.scene && $.isNumeric(ak.scene) && ak.scene > 1) {
                    aj += ak.scene;
                }
                if (aj in H && "_webgl" in H[aj] && H[aj]._webgl) {
                    ai = H[aj];
                    ai._webgl.draw(H, ak, ak.type);
                } else {
                    H[aj] = ai = Plotly.Plots.defaultSceneLayout(L, aj, {});
                    ai._dataQueue.push(ak);
                }
            });
            var ac = Object.keys(H).filter(function (ai) {
                return ai.match(/^scene[0-9]*$/);
            });
            ac.map(function (ak, ai) {
                var aj = H[ak];
                aj.domain.x = [ai / ac.length, (ai + 1) / ac.length];
                aj.position = {
                    left: H._size.l + aj.domain.x[0] * H._size.w,
                    top: H._size.t + (1 - aj.domain.y[1]) * H._size.h,
                    width: H._size.w * (aj.domain.x[1] - aj.domain.x[0]),
                    height: H._size.h * (aj.domain.y[1] - aj.domain.y[0])
                };
                if (aj._webgl) {
                    aj._webgl.setPosition(aj.position);
                }
                return aj;
            }).filter(function (ai) {
                if (ai && ai._dataQueue.length && !ai._loading) {
                    ai._loading = true;
                    return true;
                }
                return false;
            }).forEach(function (aj) {
                var ai = {
                    container: L.querySelector(".svg-container"),
                    zIndex: "1000",
                    id: aj._id,
                    plotly: Plotly,
                    layout: H
                };
                SceneFrame.createScene(ai, function (ak) {
                    aj._loading = false;
                    ak.setPosition(aj.position);
                    while (aj._dataQueue.length) {
                        var al = aj._dataQueue.shift();
                        ak.draw(H, al, al.type);
                    }
                    aj._webgl = ak;
                });
            });
        }
        if (!H._hasCartesian) {
            H._paperdiv.style({
                width: H.width + "px",
                height: H.height + "px",
                background: H.paper_bgcolor
            });
            L.calcdata = [];
            return Promise.resolve();
        }
        Plotly.Axes.setTypes(L);
        Plotly.Lib.markTime("done Plotly.Axes.setType");
        var K = !L.calcdata || L.calcdata.length !== (L.data || []).length;
        if (K) {
            L.calcdata = [];
            L._modules = [];
            if (!L.data) {
                L.data = [];
            }
            L.firstscatter = true;
            L.numboxes = 0;
            L.hmpixcount = 0;
            L.hmlumcount = 0;
            Plotly.Axes.list(L).forEach(function (ai) {
                ai._categories = [];
            });
            for (var C = 0; C < L.data.length; C++) {
                var M = L.data[C],
                    z = "",
                    W = [];
                if (!M.type) {
                    M.type = "scatter";
                }
                if (!M.name) {
                    if (M.ysrc) {
                        var ae = M.ysrc.split("/");
                        M.name = ae[ae.length - 1].replace(/\n/g, " ");
                    } else {
                        M.name = "trace " + C;
                    }
                }
                if ("r" in M) {
                    console.log("Oops, tried to put a polar trace of type " + M.type + " on an incompatible graph of cartesian " + L.data[0].type + " data. Ignoring this dataset.");
                } else {
                    if (n.isGL3D(M.type)) {} else {
                        if (n.isScatter(M.type)) {
                            z = "Scatter";
                        } else {
                            if (n.isBar(M.type)) {
                                z = "Bars";
                            } else {
                                if (n.isContour(M.type)) {
                                    z = "Contour";
                                } else {
                                    if (n.isHeatmap(M.type)) {
                                        z = "Heatmap";
                                    } else {
                                        if (M.type === "box") {
                                            z = "Boxes";
                                        } else {
                                            console.log("Unrecognized plot type " + M.type + ". Ignoring this dataset.");
                                        }
                                    }
                                }
                            }
                        }
                    }
                } if (z) {
                    W = Plotly[z].calc(L, M);
                }
                if (!("line" in M)) {
                    M.line = {};
                }
                if (!("marker" in M)) {
                    M.marker = {};
                }
                if (!("line" in M.marker)) {
                    M.marker.line = {};
                }
                if (!("textfont" in M)) {
                    M.textfont = {};
                }
                if (!$.isArray(W) || !W[0]) {
                    W = [{
                        x: false,
                        y: false
                    }];
                }
                if (!W[0].t) {
                    W[0].t = {};
                }
                W[0].t.curve = C;
                W[0].t.cdcurve = L.calcdata.length;
                if (z) {
                    W[0].t.module = z;
                    if (L._modules.indexOf(z) === -1) {
                        L._modules.push(z);
                    }
                }
                L.calcdata.push(W);
                Plotly.Lib.markTime("done with calcdata for " + C);
            }
        }
        n.setStyles(L);
        Plotly.Lib.markTime("done setstyles");
        var y = JSON.stringify(H._size);

        function ad() {
            Plotly.Legend.draw(L, H.showlegend || (L.calcdata.length > 1 && H.showlegend !== false));
            L.calcdata.forEach(function (aj) {
                var ai = aj[0].t;
                if (ai.visible === false || !n.isHeatmap(ai.type)) {
                    n.autoMargin(L, "cb" + ai.curve);
                } else {
                    Plotly[ai.module].colorbar(L, aj);
                }
            });
            e(L);
            return n.previousPromises(L);
        }

        function E() {
            var ai = JSON.stringify(H._size) === y ? [] : [ad];
            return Plotly.Lib.syncOrAsync(ai.concat(Plotly.Fx.init), L);
        }

        function ah() {
            if (K) {
                Plotly.Axes.getSubplots(L).forEach(function (aj) {
                    var ai = L.layout._plots[aj];
                    L._modules.forEach(function (ak) {
                        if (Plotly[ak].setPositions) {
                            Plotly[ak].setPositions(L, ai);
                        }
                    });
                });
                Plotly.Lib.markTime("done with bar/box adjustments");
                Plotly.ErrorBars.calc(L);
                Plotly.Lib.markTime("done Plotly.ErrorBars.calc");
                return Plotly.Lib.syncOrAsync([Plotly.Annotations.calcAutorange, A], L);
            }
        }

        function A() {
            Plotly.Axes.list(L).forEach(function (ai) {
                Plotly.Axes.doAutoRange(ai);
                if (!$.isNumeric(ai._m) || !$.isNumeric(ai._b)) {
                    Plotly.Lib.notifier("Something went wrong with axis scaling", "long");
                    L._replotting = false;
                    throw new Error("axis scaling");
                }
            });
        }

        function F() {
            return Plotly.Axes.doTicks(L, "redraw");
        }

        function N() {
            L.calcdata.forEach(function (aj) {
                if (n.isHeatmap(aj[0].t.type)) {
                    return;
                }
                var ai = aj[0].t.cdcurve;
                H._paper.selectAll(".hm" + ai + ",.contour" + ai + ",.cb" + ai).remove();
            });
            Plotly.Axes.getSubplots(L).forEach(function (ak) {
                var ai = L.layout._plots[ak],
                    al = L.calcdata.filter(function (an) {
                        var am = an[0].t;
                        return (am.xaxis || "x") + (am.yaxis || "y") === ak;
                    }),
                    aj = [];
                ai.plot.selectAll("g.trace").remove();
                L._modules.forEach(function (an) {
                    var am = al.filter(function (ao) {
                        return ao[0].t.module === an;
                    });
                    Plotly[an].plot(L, ai, am);
                    Plotly.Lib.markTime("done " + an);
                    if (["Scatter", "Bars"].indexOf(an) !== -1) {
                        aj = aj.concat(am);
                    }
                });
                Plotly.ErrorBars.plot(L, ai, aj);
                Plotly.Lib.markTime("done ErrorBars");
            });
            t(L);
            Plotly.Lib.markTime("done applyStyle");
            Plotly.Annotations.drawAll(L);
            n.addLinks(L);
            return n.previousPromises(L);
        }

        function Q() {
            L._replotting = false;
            Plotly.Lib.markTime("done plot");
        }
        var ab = Plotly.Lib.syncOrAsync([n.previousPromises, ad, w, E, ah, F, N], L, Q);
        return (ab && ab.then) ? ab : Promise.resolve();
    };
    n.previousPromises = function (x) {
        if ((x._promises || []).length) {
            return Promise.all(x._promises).then(function () {
                x._promises = [];
            });
        }
    };
    Plotly.redraw = function (y) {
        var x = (typeof y === "string") ? document.getElementById(y) : y;
        if (!d3.select(x).classed("js-plotly-plot")) {
            console.log("This element is not a Plotly Plot", y, x);
            return;
        }
        x.calcdata = undefined;
        Plotly.plot(x);
    };
    n.setStyles = function (O, G) {
        if (typeof O === "string") {
            O = document.getElementById(O);
        }
        var L, J, H, E, x, Q, C, B, M, N, K;

        function D(S, R, U, T) {
            if (typeof S === "object") {
                R = S.cdAttr;
                U = S.dflt;
                T = S.nosplit;
                S = S.dataAttr;
            }
            x = Plotly.Lib.nestedProperty(N, S);
            Q = x.get();
            if ($.isArray(Q) && !T) {
                H = Math.min(C.length, Q.length);
                for (E = 0; E < H; E++) {
                    C[E][R] = Q[E];
                }
                C[0].t[R] = U;
                C[0].t[R + "array"] = true;
            } else {
                C[0].t[R] = (typeof Q !== "undefined") ? Q : U;
                if (G && typeof Q === "undefined") {
                    x.set(U);
                }
            }
        }

        function P(R) {
            R.forEach(function (S) {
                D(S);
            });
        }

        function I(R) {
            return [1 - R[0], R[1]];
        }
        for (L in O.calcdata) {
            C = O.calcdata[L];
            B = C[0].t;
            M = B.curve;
            N = O.data[M];
            K = n.defaultColors[($.isNumeric(B.selected) ? B.selected : M) % n.defaultColors.length];
            B.xarray = $.isArray(N.x);
            B.yarray = $.isArray(N.y);
            B.zarray = $.isArray(N.z);
            D("type", "type", "scatter");
            D("visible", "visible", true);
            D("showlegend", "showlegend", true);
            D("opacity", "op", 1);
            D("text", "tx", "");
            D("name", "name", "trace " + M);
            D("error_y.visible", "ye_vis", N.error_y && ("array" in N.error_y || "value" in N.error_y));
            D("error_x.visible", "xe_vis", N.error_x && ("array" in N.error_x || "value" in N.error_x));
            B.xaxis = N.xaxis || "x";
            B.yaxis = N.yaxis || "y";
            var y = B.type;
            if (B.ye_vis) {
                D("error_y.type", "ye_type", ("array" in N.error_y) ? "data" : "percent");
                D("error_y.symmetric", "ye_sym", !((B.ye_type === "data" ? "arrayminus" : "valueminus") in N.error_y));
                D("error_y.value", "ye_val", 10);
                D("error_y.valueminus", "ye_valminus", 10);
                D("error_y.traceref", "ye_tref", 0);
                D("error_y.tracerefminus", "ye_trefminus", 0);
                D("error_y.color", "ye_clr", n.isBar(B.type) ? "#444" : K);
                D("error_y.thickness", "ye_tkns", 2);
                D("error_y.width", "ye_w", 4);
            }
            if (B.xe_vis) {
                D("error_x.type", "xe_type", ("array" in N.error_x) ? "data" : "percent");
                D("error_x.symmetric", "xe_sym", !((B.xe_type === "data" ? "arrayminus" : "valueminus") in N.error_x));
                D("error_x.value", "xe_val", 10);
                D("error_x.valueminus", "xe_valminus", 10);
                D("error_x.traceref", "xe_tref", 0);
                D("error_x.tracerefminus", "xe_trefminus", 0);
                D("error_x.copy_ystyle", "xe_ystyle", (N.error_x.color || N.error_x.thickness || N.error_x.width) ? false : true);
                var z = B.xe_ystyle !== false ? "y" : "x";
                D("error_" + z + ".color", "xe_clr", n.isBar(B.type) ? "#444" : K);
                D("error_" + z + ".thickness", "xe_tkns", 2);
                D("error_" + z + ".width", "xe_w", 4);
            }
            if (["scatter", "box"].indexOf(y) !== -1) {
                D("line.color", "lc", N.marker.color || K);
                D("line.width", "lw", 2);
                D("marker.symbol", "mx", "circle");
                D("marker.opacity", "mo", $.isArray(N.marker.size) ? 0.7 : 1);
                D("marker.size", "ms", 6);
                D("marker.color", "mc", B.lc);
                D("marker.line.color", "mlc", ((B.lc !== B.mc) ? B.lc : ($.isArray(N.marker.size) ? "#fff" : "#444")));
                D("marker.line.width", "mlw", $.isArray(N.marker.size) ? 1 : 0);
                D("fill", "fill", "none");
                D("fillcolor", "fc", Plotly.Drawing.addOpacity(B.lc, 0.5));
                B.msr = 1;
                B.msm = "diameter";
                if (y === "scatter") {
                    var F = "lines";
                    if (C.length < Plotly.Scatter.PTS_LINESONLY || (typeof N.mode !== "undefined")) {
                        F = "lines+markers";
                    } else {
                        if (C.length < 10000) {
                            var A = C.length - 1;
                            for (J = 0; J <= A; J++) {
                                if ($.isNumeric(C[J].x) && $.isNumeric(C[J].y) && (J === 0 || !$.isNumeric(C[J - 1].x) || !$.isNumeric(C[J - 1].y)) && (J === A || !$.isNumeric(C[J + 1].x) || !$.isNumeric(C[J + 1].y))) {
                                    F = "lines+markers";
                                    break;
                                }
                            }
                        }
                    }
                    D("mode", "mode", F);
                    D("marker.maxdisplayed", "mnum", 0);
                    if ($.isArray(N.marker.size)) {
                        D("marker.sizeref", "msr", 1);
                        D("marker.sizemode", "msm", "diameter");
                    }
                    D("marker.colorscale", "mscl", Plotly.defaultColorscale, true);
                    D("marker.cauto", "mcauto", true);
                    D("marker.cmax", "mcmax", 10);
                    D("marker.cmin", "mcmin", -10);
                    D("marker.line.colorscale", "mlscl", Plotly.defaultColorscale, true);
                    D("marker.line.cauto", "mlcauto", true);
                    D("marker.line.cmax", "mlcmax", 10);
                    D("marker.line.cmin", "mlcmin", -10);
                    D("line.dash", "ld", "solid");
                    D("textposition", "tp", "middle center");
                    D("textfont.size", "ts", O.layout.font.size);
                    D("textfont.color", "tc", O.layout.font.color);
                    D("textfont.family", "tf", O.layout.font.family);
                    D("connectgaps", "connectgaps", false);
                    D("line.shape", "lineshape", "linear");
                    D("line.smoothing", "ls", 1);
                } else {
                    if (y === "box") {
                        D("whiskerwidth", "ww", 0.5);
                        D("boxpoints", "boxpts", "outliers");
                        D("boxmean", "mean", false);
                        D("jitter", "jitter", B.boxpts === "all" ? 0.3 : 0);
                        D("pointpos", "ptpos", B.boxpts === "all" ? -1.5 : 0);
                        D("marker.outliercolor", "soc", "rgba(0,0,0,0)");
                        D("marker.line.outliercolor", "solc", B.mc);
                        D("marker.line.outlierwidth", "solw", 1);
                        D("marker.outliercolorscale", "soscl", B.mscl, true);
                        D("marker.outliercauto", "socauto", B.mcauto);
                        D("marker.outliercmax", "socmax", B.mcmax);
                        D("marker.outliercmin", "socmin", B.mcmin);
                        D("marker.line.outliercolorscale", "solscl", B.mlscl, true);
                        D("marker.line.outliercauto", "solcauto", B.mlcauto);
                        D("marker.line.outliercmax", "solcmax", B.mlcmax);
                        D("marker.line.outliercmin", "solcmin", B.mlcmin);
                    }
                }
            } else {
                if (n.isHeatmap(y)) {
                    if (n.isHist2D(y)) {
                        D("histfunc", "histfunc", "count");
                        D("histnorm", "histnorm", "");
                        D("autobinx", "autobinx", true);
                        D("nbinsx", "nbinsx", 0);
                        D("xbins.start", "xbstart", 0);
                        D("xbins.end", "xbend", 1);
                        D("xbins.size", "xbsize", 1);
                        D("autobiny", "autobiny", true);
                        D("nbinsy", "nbinsy", 0);
                        D("ybins.start", "ybstart", 0);
                        D("ybins.end", "ybend", 1);
                        D("ybins.size", "ybsize", 1);
                        D("marker.color", "mc", B.lc);
                    } else {
                        D("xtype", "xtype", N.x ? "array" : "noarray");
                        D("ytype", "ytype", N.y ? "array" : "noarray");
                        D("x0", "x0", 0);
                        D("dx", "dx", 1);
                        D("y0", "y0", 0);
                        D("dy", "dy", 1);
                    }
                    D("zauto", "zauto", true);
                    D("zmin", "zmin", -10);
                    D("zmax", "zmax", 10);
                    D("colorscale", "scl", Plotly.defaultColorscale, true);
                    D("reversescale", "reversescale", false);
                    if (B.reversescale) {
                        B.scl = Plotly.Plots.getScale(B.scl).map(I).reverse();
                    }
                    D("showscale", "showscale", true);
                    D("zsmooth", "zsmooth", false);
                    if (n.isContour(y)) {
                        P(Plotly.Contour.defaults());
                    }
                    P(Plotly.Colorbar.defaults());
                } else {
                    if (n.isBar(y)) {
                        if (y === "histogram") {
                            D("histfunc", "histfunc", "count");
                            D("histnorm", "histnorm", "");
                            D("autobinx", "autobinx", true);
                            D("nbinsx", "nbinsx", 0);
                            D("xbins.start", "xbstart", 0);
                            D("xbins.end", "xbend", 1);
                            D("xbins.size", "xbsize", 1);
                            D("autobiny", "autobiny", true);
                            D("nbinsy", "nbinsy", 0);
                            D("ybins.start", "ybstart", 0);
                            D("ybins.end", "ybend", 1);
                            D("ybins.size", "ybsize", 1);
                        }
                        D("marker.opacity", "mo", 1);
                        D("marker.color", "mc", K);
                        D("marker.line.color", "mlc", "#444");
                        D("marker.line.width", "mlw", 0);
                    }
                }
            }
        }
    };

    function t(x) {
        var y = x.layout;
        Plotly.Axes.getSubplots(x).forEach(function (z) {
            var A = y._plots[z].plot;
            x._modules.concat("ErrorBars").forEach(function (B) {
                Plotly[B].style(A, y);
            });
        });
    }
    Plotly.restyle = function (I, N, R, ag) {
        if (typeof I === "string") {
            I = document.getElementById(I);
        }
        var ak, E = I.layout,
            ai = {};
        if (typeof N === "string") {
            ai[N] = R;
        } else {
            if ($.isPlainObject(N)) {
                ai = N;
                if (ag === undefined) {
                    ag = R;
                }
            } else {
                console.log("restyle fail", N, R, ag);
                return;
            }
        } if (Object.keys(ai).length) {
            I.changed = true;
        }
        if ($.isNumeric(ag)) {
            ag = [ag];
        } else {
            if (!$.isArray(ag) || !ag.length) {
                ag = I.data.map(function (ao, ap) {
                    return ap;
                });
            }
        }
        var aj = ["mode", "visible", "type", "orientation", "fill", "histfunc", "histnorm", "text", "xtype", "x0", "dx", "ytype", "y0", "dy", "xaxis", "yaxis", "line.width", "showscale", "zauto", "autobinx", "nbinsx", "xbins.start", "xbins.end", "xbins.size", "autobiny", "nbinsy", "ybins.start", "ybins.end", "ybins.size", "autocontour", "ncontours", "contours.coloring", "swapxy", "swapxyaxes", "orientationaxes"];
        var ab = ["marker.size", "textfont.size", "textposition", "error_y.visible", "error_y.value", "error_y.type", "error_y.traceref", "error_y.array", "error_y.symmetric", "error_y.arrayminus", "error_y.valueminus", "error_y.tracerefminus", "error_x.visible", "error_x.value", "error_x.type", "error_x.traceref", "error_x.array", "error_x.symmetric", "error_x.arrayminus", "error_x.valueminus", "error_x.tracerefminus", "boxpoints", "jitter", "pointpos", "whiskerwidth", "boxmean"];
        var x = ["connectgaps", "zmin", "zmax", "zauto", "mincolor", "maxcolor", "colorscale", "reversescale", "zsmooth", "contours.start", "contours.end", "contours.size", "contours.showlines", "line.smoothing", "line.shape", "error_y.width", "error_x.width", "error_x.copy_ystyle", "marker.maxdisplayed"];
        var Z = ["barmode", "bargap", "bargroupgap", "boxmode", "boxgap", "boxgroupgap", "?axis.autorange", "?axis.range", "?axis.rangemode"];
        var T = ["type", "x", "y", "x0", "y0", "orientation", "xaxis", "yaxis"];
        var K = false,
            z = false,
            G = false,
            ad = false,
            Q = false,
            S = false;
        var am = {},
            an = {},
            W;
        if (E._hasGL3D) {
            G = true;
        }

        function af() {
            return ag.map(function () {
                return undefined;
            });
        }

        function ac(ap) {
            var ao = Plotly.Axes.id2name(ap);
            if (W.indexOf(ao) === -1) {
                W.push(ao);
            }
        }

        function al(ao) {
            return ao + ".autorange";
        }

        function A(ao) {
            return ao + ".range";
        }

        function O(ap, ao, at, aq) {
            if ($.isArray(ao)) {
                ao.forEach(function (au) {
                    O(ap, au, at, aq);
                });
                return;
            }
            if (ao in ai) {
                return;
            }
            var ar = Plotly.Lib.nestedProperty(ap, ao);
            if (!(ao in an)) {
                an[ao] = af();
            }
            if (an[ao][aq] === undefined) {
                an[ao][aq] = ar.get();
            }
            if (at !== undefined) {
                ar.set(at);
            }
        }
        var H = ["zmin", "zmax"],
            y = ["xbins.start", "xbins.end", "xbins.size"],
            ah = ["xbins.start", "xbins.end", "xbins.size"];
        for (var D in ai) {
            var L = ai[D],
                Y, C;
            am[D] = L;
            if (Z.indexOf(D.replace(/[xy]axis[0-9]*/g, "?axis")) !== -1) {
                C = Plotly.Lib.nestedProperty(E, D);
                an[D] = [C.get()];
                C.set($.isArray(L) ? L[0] : L);
                K = true;
                continue;
            }
            an[D] = af();
            for (ak = 0; ak < ag.length; ak++) {
                Y = I.data[ag[ak]];
                C = Plotly.Lib.nestedProperty(Y, D);
                if (H.indexOf(D) !== -1) {
                    O(Y, "zauto", false, ak);
                } else {
                    if (D === "zauto") {
                        O(Y, H, undefined, ak);
                    } else {
                        if (y.indexOf(D) !== -1) {
                            O(Y, "autobinx", false, ak);
                        } else {
                            if (D === "autobinx") {
                                O(Y, y, undefined, ak);
                            } else {
                                if (ah.indexOf(D) !== -1) {
                                    O(Y, "autobiny", false, ak);
                                } else {
                                    if (D === "autobiny") {
                                        O(Y, ah, undefined, ak);
                                    } else {
                                        if (["x0", "dx"].indexOf(D) !== -1 && Y.x && Y.xtype !== "scaled") {
                                            O(Y, "xtype", "scaled", ak);
                                        } else {
                                            if (["y0", "dy"].indexOf(D) !== -1 && Y.y && Y.ytype !== "scaled") {
                                                O(Y, "ytype", "scaled", ak);
                                            } else {
                                                if (D === "colorbar.thicknessmode" && C.get() !== L && ["fraction", "pixels"].indexOf(L) !== -1) {
                                                    var U = ["top", "bottom"].indexOf(Y.colorbar.orient) !== -1 ? (E.height - E.margin.t - E.margin.b) : (E.width - E.margin.l - E.margin.r);
                                                    O(Y, "colorbar.thickness", (Y.colorbar.thickness || Plotly.Colorbar.getDefault("thickness")) * (L === "fraction" ? 1 / U : U), ak);
                                                } else {
                                                    if (D === "colorbar.lenmode" && C.get() !== L && ["fraction", "pixels"].indexOf(L) !== -1) {
                                                        var F = ["top", "bottom"].indexOf(Y.colorbar.orient) !== -1 ? (E.width - E.margin.l - E.margin.r) : (E.height - E.margin.t - E.margin.b);
                                                        O(Y, "colorbar.len", (Y.colorbar.len || Plotly.Colorbar.getDefault("len")) * (L === "fraction" ? 1 / F : F), ak);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                an[D][ak] = C.get();
                var J = ["swapxy", "swapxyaxes", "orientation", "orientationaxes"];
                if (J.indexOf(D) !== -1) {
                    if (D === "orientation") {
                        C.set($.isArray(L) ? L[ak % L.length] : L);
                        if (C.get() === an[D][ak]) {
                            continue;
                        }
                    } else {
                        if (D === "orientationaxes") {
                            Y.orientation = {
                                v: "h",
                                h: "v"
                            }[Y.orientation || "v"];
                        }
                    }
                    u(Y);
                } else {
                    C.set($.isArray(L) ? L[ak % L.length] : L);
                }
            }
            if (["swapxyaxes", "orientationaxes"].indexOf(D) !== -1) {
                k(I, I.data[ag[0]]);
            }
            if ((ag.indexOf(0) !== -1) && (T.indexOf(D) !== -1)) {
                Plotly.Axes.clearTypes(I, ag);
                K = true;
            }
            if ((["autobinx", "autobiny", "zauto"].indexOf(D) === -1) || L !== false) {
                Q = true;
            }
            if (["colorbar", "line"].indexOf(C.parts[0]) !== -1) {
                S = true;
            }
            if (aj.indexOf(D) !== -1) {
                if (["orientation", "type"].indexOf(D) !== -1) {
                    W = [];
                    for (ak = 0; ak < ag.length; ak++) {
                        var M = I.data[ag[ak]];
                        ac(M.xaxis || "x");
                        ac(M.yaxis || "y");
                        if (N === "type") {
                            O(I.data[ag[ak]], ["autobinx", "autobiny"], true, ak);
                        }
                    }
                    O(E, W.map(al), true, 0);
                    O(E, W.map(A), [0, 1], 0);
                }
                K = true;
            } else {
                if (x.indexOf(D) !== -1) {
                    G = true;
                } else {
                    if (ab.indexOf(D) !== -1) {
                        z = true;
                    }
                }
            }
        }
        if (Plotly.Queue) {
            Plotly.Queue.add(I, an, am, ag);
        }
        var X = false;
        Plotly.Axes.list(I).forEach(function (ao) {
            if (ao.autorange) {
                X = true;
            }
        });
        if (K || ad || (z && X)) {
            I.calcdata = undefined;
        }
        var P;
        if (ad) {
            P = [
                function B() {
                    I.layout = undefined;
                    return Plotly.plot(I, "", E);
                }
            ];
        } else {
            if (K || G || z) {
                P = [Plotly.plot];
            } else {
                n.setStyles(I);
                P = [n.previousPromises];
                if (Q) {
                    P.push(function V() {
                        t(I);
                        if (E.showlegend) {
                            Plotly.Legend.draw(I);
                        }
                        return n.previousPromises(I);
                    });
                }
                if (S) {
                    P.push(function ae() {
                        I.calcdata.forEach(function (ao) {
                            if (ao[0].t.cb) {
                                ao[0].t.cb.cdoptions(ao[0].t)();
                            }
                        });
                        return n.previousPromises(I);
                    });
                }
            }
        }
        var aa = Plotly.Lib.syncOrAsync(P, I);
        if (!aa || !aa.then) {
            aa = Promise.resolve();
        }
        return aa.then(function () {
            $(I).trigger("plotly_restyle", [am, ag]);
        });
    };

    function d(y, x, D, A) {
        var B = Plotly.Lib.nestedProperty(y, x.replace("?", D || "x")),
            C = Plotly.Lib.nestedProperty(y, x.replace("?", A || "y")),
            z = B.get();
        B.set(C.get());
        C.set(z);
    }

    function u(y) {
        d(y, "?");
        d(y, "?0");
        d(y, "d?");
        d(y, "?bins");
        d(y, "nbins?");
        d(y, "autobin?");
        if ($.isArray(y.z) && $.isArray(y.z[0])) {
            if (y.transpose) {
                delete y.transpose;
            } else {
                y.transpose = true;
            }
        }
        d(y, "?src");
        d(y, "error_?");
        if (y.error_x && y.error_y) {
            var x = ("copy_ystyle" in y.error_y) ? y.error_y.copy_ystyle : ((y.error_y.color || y.error_y.thickness || y.error_y.width) ? false : true);
            d(y, "error_?.copy_ystyle");
            if (x) {
                d(y, "error_?.color");
                d(y, "error_?.thickness");
                d(y, "error_?.width");
            }
        }
    }

    function k(H, A) {
        var C = H.layout,
            z = A.xaxis || "x",
            B = A.yaxis || "y",
            x = Plotly.Axes.getFromId(H, z),
            F = x._name,
            G = Plotly.Axes.getFromId(H, B),
            E = G._name,
            y = ["anchor", "domain", "overlaying", "position", "tickangle"],
            D = Object.keys(C[F]).filter(function (I) {
                return I.charAt(0) !== "_" && (typeof C[F][I] !== "function") && y.indexOf(I) === -1;
            });
        D.forEach(function (I) {
            d(C, "?." + I, F, E);
        });
        (C.annotations || []).forEach(function (I) {
            if (I.xref === z && I.yref === B) {
                d(I, "?");
            }
        });
        if (x.title === "Click to enter Y axis title") {
            x.title = "Click to enter X axis title";
        }
        if (G.title === "Click to enter X axis title") {
            G.title = "Click to enter Y axis title";
        }
    }
    Plotly.relayout = function (H, N, R) {
        if (H.framework && H.framework.isPolar) {
            return;
        }
        if (typeof H === "string") {
            H = document.getElementById(H);
        }
        var C = H.layout,
            ab = {},
            aa = false,
            G = false,
            M = false,
            D = false,
            J = false,
            U = false;
        if (C._hasGL3D) {
            D = true;
        }
        if (typeof N === "string") {
            ab[N] = R;
        } else {
            if ($.isPlainObject(N)) {
                ab = N;
            } else {
                console.log("relayout fail", N, R);
                return;
            }
        } if (Object.keys(ab).length) {
            H.changed = true;
        }
        var Q = Object.keys(ab),
            W = Plotly.Axes.list(H);
        for (var ad = 0; ad < Q.length; ad++) {
            if (Q[ad].indexOf("allaxes") === 0) {
                for (var ac = 0; ac < W.length; ac++) {
                    var K = Q[ad].replace("allaxes", W[ac]._name);
                    if (!ab[K]) {
                        ab[K] = ab[Q[ad]];
                    }
                }
                delete ab[Q[ad]];
            }
            if (Q[ad].match(/^annotations\[[0-9-]\].ref$/)) {
                var S = ab[Q[ad]].split("y");
                ab[Q[ad].replace("ref", "xref")] = S[0];
                ab[Q[ad].replace("ref", "yref")] = S.length === 2 ? ("y" + S[1]) : "paper";
                delete ab[Q[ad]];
            }
        }
        var ae = {},
            ag = {};

        function O(ah, aj) {
            if ($.isArray(ah)) {
                ah.forEach(function (ak) {
                    O(ak, aj);
                });
                return;
            }
            if (ah in ab) {
                return;
            }
            var ai = Plotly.Lib.nestedProperty(C, ah);
            if (!(ah in ag)) {
                ag[ah] = ai.get();
            }
            if (aj !== undefined) {
                ai.set(aj);
            }
        }

        function X(aj, ah) {
            var ai = Plotly.Axes.id2name(aj[ah + "ref"] || ah);
            return C[ai] && C[ai].autorange;
        }
        var Y = ["height", "width"];
        for (var B in ab) {
            var Z = Plotly.Lib.nestedProperty(C, B),
                L = ab[B];
            ae[B] = ab[B];
            ag[B] = (Z.parts[1] === "reverse") ? ab[B] : Z.get();
            if (Y.indexOf(B) !== -1) {
                O("autosize", false);
            } else {
                if (B === "autosize") {
                    O(Y, undefined);
                } else {
                    if (B.match(/^[xy]axis[0-9]*\.range(\[[0|1]\])?$/)) {
                        O(Z.parts[0] + ".autorange", false);
                    } else {
                        if (B.match(/^[xy]axis[0-9]*\.autorange$/)) {
                            O([Z.parts[0] + ".range[0]", Z.parts[0] + ".range[1]"], undefined);
                        }
                    }
                }
            } if (Z.parts[1] === "type" && (C[Z.parts[0]].type === "log" ? L !== "log" : L === "log")) {
                var y = C[Z.parts[0]],
                    F = y.range[0],
                    E = y.range[1];
                if (!C[Z.parts[0]].autorange) {
                    if (L === "log") {
                        if (F <= 0 && E <= 0) {
                            O(Z.parts[0] + ".autorange", true);
                            continue;
                        } else {
                            if (F <= 0) {
                                F = E / 1000000;
                            } else {
                                if (E <= 0) {
                                    E = F / 1000000;
                                }
                            }
                        }
                        O(Z.parts[0] + ".range[0]", Math.log(F) / Math.LN10);
                        O(Z.parts[0] + ".range[1]", Math.log(E) / Math.LN10);
                    } else {
                        O(Z.parts[0] + ".range[0]", Math.pow(10, F));
                        O(Z.parts[0] + ".range[1]", Math.pow(10, E));
                    }
                } else {
                    if (L === "log") {
                        y.range = E > F ? [1, 2] : [2, 1];
                    }
                }
            }
            if (Z.parts[1] === "reverse") {
                C[Z.parts[0]].range.reverse();
                if (C[Z.parts[0]].autorange) {
                    J = true;
                } else {
                    D = true;
                }
            } else {
                if (Z.parts[0] === "annotations") {
                    var V = Z.parts[1],
                        af = C.annotations,
                        x = (af && af[V]) || {};
                    if (Z.parts.length === 2) {
                        if (ab[B] === "add" || $.isPlainObject(ab[B])) {
                            ag[B] = "remove";
                        } else {
                            if (ab[B] === "remove") {
                                if (V === -1) {
                                    ag.annotations = af;
                                    delete ag[B];
                                } else {
                                    ag[B] = x;
                                }
                            } else {
                                console.log("???", ab);
                            }
                        }
                    }
                    if ((X(x, "x") || X(x, "y")) && B.indexOf("color") === -1 && B.indexOf("opacity") === -1 && B.indexOf("align") === -1) {
                        J = true;
                    }
                    Plotly.Annotations.draw(H, V, Z.parts.slice(2).join("."), ab[B]);
                    delete ab[B];
                } else {
                    if (Z.parts[0].indexOf("legend") !== -1) {
                        aa = true;
                    } else {
                        if (B.indexOf("title") !== -1) {
                            G = true;
                        } else {
                            if (Z.parts[0].indexOf("bgcolor") !== -1) {
                                M = true;
                            } else {
                                if (Z.parts.length > 1 && (Z.parts[1].indexOf("tick") !== -1 || Z.parts[1].indexOf("exponent") !== -1 || Z.parts[1].indexOf("grid") !== -1 || Z.parts[1].indexOf("zeroline") !== -1)) {
                                    G = true;
                                } else {
                                    if (B.indexOf(".linewidth") !== -1 && B.indexOf("axis") !== -1) {
                                        G = M = true;
                                    } else {
                                        if (Z.parts.length > 1 && Z.parts[1].indexOf("line") !== -1) {
                                            M = true;
                                        } else {
                                            if (Z.parts.length > 1 && Z.parts[1] === "mirror") {
                                                G = M = true;
                                            } else {
                                                if (B === "margin.pad") {
                                                    G = M = true;
                                                } else {
                                                    if (Z.parts[0] === "margin" || Z.parts[1] === "autorange" || Z.parts[1] === "rangemode" || Z.parts[1] === "type" || B.match(/^(bar|box|font)/)) {
                                                        J = true;
                                                    } else {
                                                        if (B === "hovermode") {
                                                            U = true;
                                                        } else {
                                                            if (["hovermode", "dragmode", "height", "width", "autosize"].indexOf(B) === -1) {
                                                                D = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    Z.set(L);
                    if (B.match(/^[xy]axis[0-9]*$/)) {
                        Plotly.Axes.initAxis(H, H.layout[B]);
                        Plotly.Axes.setConvert(H.layout[B]);
                    }
                }
            }
        }
        if (Plotly.Queue) {
            Plotly.Queue.add(H, ag, ae, "relayout");
        }
        if (ab.autosize) {
            ab = m(H, ab);
        }
        if (ab.height || ab.width || ab.autosize) {
            J = true;
        }
        var A = Object.keys(ab),
            P = [n.previousPromises];
        if (D || J) {
            P.push(function z() {
                H.layout = undefined;
                if (J) {
                    H.calcdata = undefined;
                }
                return Plotly.plot(H, "", C);
            });
        } else {
            if (A.length) {
                if (aa) {
                    P.push(function I() {
                        Plotly.Legend.draw(H, C.showlegend);
                        return n.previousPromises(H);
                    });
                }
                if (M) {
                    P.push(w);
                }
                if (G) {
                    P.push(function () {
                        Plotly.Axes.doTicks(H, "redraw");
                        n.titles(H, "gtitle");
                        return n.previousPromises(H);
                    });
                }
                if (U) {
                    Plotly.Fx.modeBar(H);
                }
            }
        }
        var T = Plotly.Lib.syncOrAsync(P, H);
        if (!T || !T.then) {
            T = Promise.resolve();
        }
        return T.then(function () {
            $(H).trigger("plotly_relayout", ae);
        });
    };

    function r(z) {
        if (!z || !z.mainsite || !z.layout || z.tabtype !== "plot" || $(z).css("display") === "none") {
            return;
        }
        var y = $(z).find(".plot-container"),
            x = z.layout.width > parseInt(y.css("width"), 10);
        if (z.layout.autosize || !x) {
            y.removeClass("is-fixed-size");
        } else {
            if (x) {
                y.addClass("is-fixed-size");
            }
        }
    }

    function m(C, z) {
        var y, x;
        if (C.mainsite) {
            setFileAndCommentsSize(C);
            var B = C.layout._container.node().getBoundingClientRect();
            y = Math.round(B.height * 0.9);
            x = Math.round(B.width * 0.9);
        } else {
            if (C.shareplot) {
                if (C.standalone) {
                    var A = $(C).position();
                    A.left += parseInt($(C).css("padding-left") || 0, 10);
                    A.top += parseInt($(C).css("padding-top") || 0, 10);
                    x = Plotly.Lib.constrain(($(window).width() - A.left) * 0.9, 200, 10000);
                    y = Plotly.Lib.constrain(($(window).height() - A.top) * 0.9, x / 2, x * 2);
                } else {
                    x = $(window).width();
                    y = $(window).height();
                    $("body").css("overflow", "hidden");
                }
            } else {
                y = $(C).height() || C.layout.height || j().height;
                x = $(C).width() || C.layout.width || j().width;
            }
        } if (Math.abs(C.layout.width - x) > 1 || Math.abs(C.layout.height - y) > 1) {
            C.layout.height = y;
            C.layout.width = x;
        } else {
            if (C.layout.autosize !== "initial") {
                delete(z.autosize);
                C.layout.autosize = true;
            }
        }
        return z;
    }
    n.resize = function (x) {
        if (typeof x === "string") {
            x = document.getElementById(x);
        }
        if (x.mainsite) {
            killPopovers();
            setFileAndCommentsSize(x);
        }
        if (x && (x.tabtype === "plot" || x.shareplot) && $(x).css("display") !== "none") {
            if (x.redrawTimer) {
                clearTimeout(x.redrawTimer);
            }
            x.redrawTimer = setTimeout(function () {
                if ($(x).css("display") === "none") {
                    return;
                }
                if (x.layout && x.layout.autosize) {
                    var y = x.changed;
                    x.autoplay = true;
                    Plotly.relayout(x, {
                        autosize: true
                    });
                    x.changed = y;
                }
                if (window.LIT) {
                    hidebox();
                    litebox();
                }
            }, 100);
        }
        r(x);
    };

    function i(K, G) {
        if (typeof K === "string") {
            K = document.getElementById(K);
        }
        var E = d3.select(K);
        K.mainsite = $("#plotlyMainMarker").length > 0;
        K._promises = [];
        E.classed("js-plotly-plot", true);
        g(K);

        function D(P, O) {
            if (!P[O]) {
                P[O] = Plotly.Axes.defaultAxis({
                    range: [-1, 6],
                    anchor: {
                        x: "y",
                        y: "x"
                    }[O.charAt(0)]
                });
            }
        }
        var H = K.layout || j(),
            I = G || {};
        var N = Object.keys(I).filter(function (O) {
                return O.match(/^xaxis[0-9]*$/);
            }),
            C = Object.keys(I).filter(function (O) {
                return O.match(/^yaxis[0-9]*$/);
            }),
            J = (J = K.data) && (J = J[0]) && (J = J.type),
            F = K.layout,
            L;
        if (!N.length) {
            N = ["xaxis"];
        }
        if (!C.length) {
            C = ["yaxis"];
        }
        N.concat(C).forEach(function (O) {
            D(H, O);
            var P = I[O];
            if (P && P.range && P.range.length === 2) {
                H[O].autorange = false;
            }
        });
        K.layout = F = f(H, I);
        var y = F._hasCartesian || !F._hasGL3D;
        if (y) {
            L = Plotly.Axes.getSubplots(K);
            L.forEach(function (O) {
                var P = O.match(/^(x[0-9]*)(y[0-9]*)$/);
                [P[1], P[2]].forEach(function (Q) {
                    D(F, Plotly.Axes.id2name(Q));
                });
            });
            L = Plotly.Axes.getSubplots(K);
            Plotly.Axes.setTypes(K);
        } else {
            L = [];
            delete K.layout.xaxis;
            delete K.layout.yaxis;
        }
        var B = F._fileandcomments = E.selectAll(".file-and-comments");
        if (!B.node()) {
            B = E;
        }
        F._container = B.selectAll(".plot-container").data([0]);
        F._container.enter().insert("div", ":first-child").classed("plot-container", true).classed("plotly", true).classed("is-mainsite", K.mainsite);
        F._paperdiv = F._container.selectAll(".svg-container").data([0]);
        F._paperdiv.enter().append("div").classed("svg-container", true).style("position", "relative");
        if (F.autosize === "initial") {
            if (K.mainsite) {
                setFileAndCommentsSize(K);
            }
            m(K, {});
            F.autosize = true;
        }
        F._paperdiv.selectAll("svg").remove();
        F._paper = F._paperdiv.append("svg").attr({
            xmlns: "http://www.w3.org/2000/svg",
            "xmlns:xmlns:xlink": "http://www.w3.org/1999/xlink",
            "xml:xml:space": "preserve"
        });

        function A(O) {
            O.append("g").classed("maplayer", true);
            O.append("g").classed("barlayer", true);
            O.append("g").classed("errorlayer", true);
            O.append("g").classed("scatterlayer", true);
            O.append("g").classed("boxlayer", true);
        }
        var x = [];
        F._plots = {};
        F._paper.selectAll("g.subplot").data(L).enter().append("g").classed("subplot", true).each(function (S) {
            var P = F._plots[S] = {},
                Q = d3.select(this).classed(S, true);
            P.id = S;
            P.x = Plotly.Axes.getFromId(K, S, "x");
            P.y = Plotly.Axes.getFromId(K, S, "y");
            P.overlays = [];
            var R = Plotly.Axes.getFromId(K, P.x.overlaying) || P.x;
            if (R !== P.x && R.overlaying) {
                R = P.x;
                P.x.overlaying = false;
            }
            var O = Plotly.Axes.getFromId(K, P.y.overlaying) || P.y;
            if (O !== P.y && O.overlaying) {
                O = P.y;
                P.y.overlaying = false;
            }
            var T = R._id + O._id;
            if (T !== S && L.indexOf(T) !== -1) {
                P.mainplot = T;
                x.push(P);
                P.x.domain = R.domain.slice();
                P.y.domain = O.domain.slice();
            } else {
                P.bg = Q.append("rect").style("stroke-width", 0);
                P.gridlayer = Q.append("g");
                P.overgrid = Q.append("g");
                P.zerolinelayer = Q.append("g");
                P.overzero = Q.append("g");
                P.plot = Q.append("svg").call(A);
                P.overplot = Q.append("g");
                P.xlines = Q.append("path");
                P.ylines = Q.append("path");
                P.overlines = Q.append("g");
                P.xaxislayer = Q.append("g");
                P.yaxislayer = Q.append("g");
                P.overaxes = Q.append("g");
            }
            P.draglayer = F._paper.append("g");
        });
        x.forEach(function (O) {
            var P = F._plots[O.mainplot];
            P.overlays.push(O);
            O.gridlayer = P.overgrid.append("g");
            O.zerolinelayer = P.overzero.append("g");
            O.plot = P.overplot.append("svg").call(A);
            O.xlines = P.overlines.append("path");
            O.ylines = P.overlines.append("path");
            O.xaxislayer = P.overaxes.append("g");
            O.yaxislayer = P.overaxes.append("g");
        });
        L.forEach(function (P) {
            var O = F._plots[P];
            O.plot.attr("preserveAspectRatio", "none").style("fill", "none");
            O.xlines.style("fill", "none").classed("crisp", true);
            O.ylines.style("fill", "none").classed("crisp", true);
        });
        F._infolayer = F._paper.append("g").classed("infolayer", true);
        F._hoverlayer = F._paper.append("g").classed("hoverlayer", true);
        var z = Plotly.Lib.syncOrAsync([w,
            function M() {
                return Plotly.Axes.doTicks(K, "redraw");
            },
            Plotly.Fx.init
        ], K);
        if (z && z.then) {
            K._promises.push(z);
        }
        return z;
    }

    function g(z) {
        var x = d3.select("body").selectAll("#js-plotly-tester").data([0]);
        x.enter().append("svg").attr({
            id: "js-plotly-tester",
            xmlns: "http://www.w3.org/2000/svg",
            "xmlns:xmlns:xlink": "http://www.w3.org/1999/xlink",
            "xml:xml:space": "preserve"
        }).style({
            position: "absolute",
            left: "-10000px",
            top: "-10000px",
            width: "9000px",
            height: "9000px"
        });
        var y = x.selectAll(".js-reference-point").data([0]);
        y.enter().append("path").classed("js-reference-point", true).attr("d", "M0,0H1V1H0Z").style({
            "stroke-width": 0,
            fill: "black"
        });
        if (!x.node()._cache) {
            x.node()._cache = {};
        }
        z._tester = x;
        z._testref = y;
    }
    n.autoMargin = function (x, B, A) {
        var z = x.layout;
        if (!z._pushmargin) {
            z._pushmargin = {};
        }
        if (z.margin.autoexpand !== false) {
            if (!A) {
                delete z._pushmargin[B];
            } else {
                var y = A.pad || 12;
                if (A.l + A.r > z.width * 0.5) {
                    A.l = A.r = 0;
                }
                if (A.b + A.t > z.height * 0.5) {
                    A.b = A.t = 0;
                }
                z._pushmargin[B] = {
                    l: {
                        val: A.x,
                        size: A.l + y
                    },
                    r: {
                        val: A.x,
                        size: A.r + y
                    },
                    b: {
                        val: A.y,
                        size: A.b + y
                    },
                    t: {
                        val: A.y,
                        size: A.t + y
                    }
                };
            } if (!x._replotting) {
                e(x);
            }
        }
    };

    function e(F) {
        var D = F.layout;
        if (!D._size) {
            D._size = {};
        }
        if (!D._pushmargin) {
            D._pushmargin = {};
        }
        var A = D._size,
            x = JSON.stringify(A);
        var C = Math.max(D.margin.l || 0, 0),
            z = Math.max(D.margin.r || 0, 0),
            y = Math.max(D.margin.t || 0, 0),
            E = Math.max(D.margin.b || 0, 0),
            B = D._pushmargin;
        if (D.margin.autoexpand !== false) {
            B.base = {
                l: {
                    val: 0,
                    size: C
                },
                r: {
                    val: 1,
                    size: z
                },
                t: {
                    val: 1,
                    size: y
                },
                b: {
                    val: 0,
                    size: E
                }
            };
            Object.keys(B).forEach(function (M) {
                var H = B[M].l || {},
                    L = B[M].b || {},
                    K = H.val,
                    I = H.size,
                    J = L.val,
                    G = L.size;
                Object.keys(B).forEach(function (S) {
                    if ($.isNumeric(I) && B[S].r) {
                        var Q = B[S].r.val,
                            N = B[S].r.size;
                        if (Q > K) {
                            var O = (I * Q + (N - D.width) * K) / (Q - K),
                                U = (N * (1 - K) + (I - D.width) * (1 - Q)) / (Q - K);
                            if (O >= 0 && U >= 0 && O + U > C + z) {
                                C = O;
                                z = U;
                            }
                        }
                    }
                    if ($.isNumeric(G) && B[S].t) {
                        var P = B[S].t.val,
                            V = B[S].t.size;
                        if (P > J) {
                            var R = (G * P + (V - D.height) * J) / (P - J),
                                T = (V * (1 - J) + (G - D.height) * (1 - P)) / (P - J);
                            if (R >= 0 && T >= 0 && R + T > E + y) {
                                E = R;
                                y = T;
                            }
                        }
                    }
                });
            });
        }
        A.l = Math.round(C);
        A.r = Math.round(z);
        A.t = Math.round(y);
        A.b = Math.round(E);
        A.p = Math.round(D.margin.pad);
        A.w = Math.round(D.width) - A.l - A.r;
        A.h = Math.round(D.height) - A.t - A.b;
        if (!F._replotting && x !== "{}" && x !== JSON.stringify(D._size)) {
            return Plotly.plot(F);
        }
    }

    function w(x) {
        return Plotly.Lib.syncOrAsync([e, s], x);
    }

    function s(y) {
        var z = y.layout,
            x = z._size;
        Plotly.Axes.list(y).forEach(function (B) {
            B._linepositions = {};
        });
        z._paperdiv.style({
            width: z.width + "px",
            height: z.height + "px",
            background: z.paper_bgcolor
        });
        z._paper.call(Plotly.Drawing.setSize, z.width, z.height);
        var A = [];
        z._paper.selectAll("g.subplot").each(function (E) {
            var ac = z._plots[E],
                Q = ac.x,
                D = ac.y;
            Q.setScale();
            D.setScale();
            if (ac.bg) {
                ac.bg.call(Plotly.Drawing.setRect, Q._offset - x.p, D._offset - x.p, Q._length + 2 * x.p, D._length + 2 * x.p).call(Plotly.Drawing.fillColor, z.plot_bgcolor);
            }
            ac.plot.call(Plotly.Drawing.setRect, Q._offset, D._offset, Q._length, D._length);
            var M = $.isNumeric(Q.linewidth) ? Q.linewidth : 1,
                F = $.isNumeric(D.linewidth) ? D.linewidth : 1,
                J = x.p + F,
                T = "M" + (-J) + ",",
                H = "h" + (Q._length + 2 * J),
                R = Q.anchor === "free" && A.indexOf(Q._id) === -1,
                Z = x.h * (1 - (Q.position || 0)) + ((M / 2) % 1),
                G = (Q.anchor === D._id && (Q.mirror || Q.side !== "top")) || Q.mirror === "all" || Q.mirror === "allticks" || (Q.mirrors && Q.mirrors[D._id + "bottom"]),
                U = D._length + x.p + M / 2,
                N = (Q.anchor === D._id && (Q.mirror || Q.side === "top")) || Q.mirror === "all" || Q.mirror === "allticks" || (Q.mirrors && Q.mirrors[D._id + "top"]),
                O = -x.p - M / 2,
                S = x.p,
                C = G ? 0 : M,
                Y = N ? 0 : M,
                V = "," + (-S - Y) + "v" + (D._length + 2 * S + Y + C),
                P = D.anchor === "free" && A.indexOf(D._id) === -1,
                W = x.w * (D.position || 0) + ((F / 2) % 1),
                L = (D.anchor === Q._id && (D.mirror || D.side !== "right")) || D.mirror === "all" || D.mirror === "allticks" || (D.mirrors && D.mirrors[Q._id + "left"]),
                I = -x.p - F / 2,
                B = (D.anchor === Q._id && (D.mirror || D.side === "right")) || D.mirror === "all" || D.mirror === "allticks" || (D.mirrors && D.mirrors[Q._id + "right"]),
                K = Q._length + x.p + F / 2;
            Q._linepositions[E] = [G ? U : undefined, N ? O : undefined, R ? Z : undefined];
            if (Q.anchor === D._id) {
                Q._linepositions[E][3] = Q.side === "top" ? O : U;
            } else {
                if (R) {
                    Q._linepositions[E][3] = Z;
                }
            }
            D._linepositions[E] = [L ? I : undefined, B ? K : undefined, P ? W : undefined];
            if (D.anchor === Q._id) {
                D._linepositions[E][3] = D.side === "right" ? K : I;
            } else {
                if (P) {
                    D._linepositions[E][3] = W;
                }
            }
            var ab = "translate(" + Q._offset + "," + D._offset + ")",
                aa = ab,
                X = ab;
            if (R) {
                aa = "translate(" + Q._offset + "," + x.t + ")";
            }
            if (P) {
                X = "translate(" + x.l + "," + D._offset + ")";
            }
            ac.xlines.attr("transform", aa).attr("d", ((G ? (T + U + H) : "") + (N ? (T + O + H) : "") + (R ? (T + Z + H) : "")) || "M0,0").style("stroke-width", M + "px").call(Plotly.Drawing.strokeColor, Q.showline ? Q.linecolor : "rgba(0,0,0,0)");
            ac.ylines.attr("transform", X).attr("d", ((L ? ("M" + I + V) : "") + (B ? ("M" + K + V) : "") + (P ? ("M" + W + V) : "")) || "M0,0").attr("stroke-width", F + "px").call(Plotly.Drawing.strokeColor, D.showline ? D.linecolor : "rgba(0,0,0,0)");
            ac.xaxislayer.attr("transform", aa);
            ac.yaxislayer.attr("transform", X);
            ac.gridlayer.attr("transform", ab);
            ac.zerolinelayer.attr("transform", ab);
            ac.draglayer.attr("transform", ab);
            if (R) {
                A.push(Q._id);
            }
            if (P) {
                A.push(D._id);
            }
        });
        n.titles(y, "gtitle");
        Plotly.Fx.modeBar(y);
        r(y);
        return y._promises.length && Promise.all(y._promises);
    }
    n.titles = function (ab, ad) {
        var K;
        if (typeof ab === "string") {
            ab = document.getElementById(ab);
        }
        if (!ad) {
            Plotly.Axes.list(ab).forEach(function (x) {
                n.titles(ab, x._id + "title");
            });
            n.titles(ab, "gtitle");
            return;
        }
        var Z = ab.layout,
            W = Z._size,
            J = ad.charAt(0),
            L = ad.substr(1, 2) === "cb",
            z = L ? Number(ad.substr(3).replace("title", "")) : 0,
            E = L ? ab.calcdata[z][0].t.cb.axis : (Z[Plotly.Axes.id2name(ad.replace("title", ""))] || Z),
            G = E === Z ? "title" : E._name + ".title",
            ae = L ? "colorscale" : ((E._id || J).toUpperCase() + " axis"),
            V = E.titlefont.family || Z.font.family || "Arial",
            F = E.titlefont.size || (Z.font.size * 1.2) || 14,
            B = E.titlefont.color || Z.font.color || "#444",
            S, P, T = "",
            Y = {},
            aa, D, R = {
                selection: d3.select(ab).selectAll("g." + E._id + "tick"),
                side: E.side
            },
            N = L ? 0 : 1.5;
        if (L && E.titleside) {
            S = W.l + E.titlex * W.w;
            P = W.t + (1 - E.titley) * W.h + ((E.titleside === "top") ? 3 + F * 0.75 : -3 - F * 0.25);
            K = {
                x: S,
                y: P,
                "text-anchor": "start"
            };
            R = {};
            ad = "h" + ad;
        } else {
            if (J === "x") {
                aa = E;
                D = (aa.anchor === "free") ? {
                    _offset: W.t + (1 - (aa.position || 0)) * W.h,
                    _length: 0
                } : Plotly.Axes.getFromId(ab, aa.anchor);
                S = aa._offset + aa._length / 2;
                P = D._offset + ((aa.side === "top") ? -10 - F * (N + (aa.showticklabels ? 1 : 0)) : D._length + 10 + F * (N + (aa.showticklabels ? 1.5 : 0.5)));
                K = {
                    x: S,
                    y: P,
                    "text-anchor": "middle"
                };
                if (!R.side) {
                    R.side = "bottom";
                }
            } else {
                if (J === "y") {
                    D = E;
                    aa = (D.anchor === "free") ? {
                        _offset: W.l + (D.position || 0) * W.w,
                        _length: 0
                    } : Plotly.Axes.getFromId(ab, D.anchor);
                    P = D._offset + D._length / 2;
                    S = aa._offset + ((D.side === "right") ? aa._length + 10 + F * (N + (D.showticklabels ? 1 : 0.5)) : -10 - F * (N + (D.showticklabels ? 0.5 : 0)));
                    Y = {
                        center: 0
                    };
                    K = {
                        x: S,
                        y: P,
                        "text-anchor": "middle"
                    };
                    T = {
                        rotate: "-90",
                        offset: 0
                    };
                    if (!R.side) {
                        R.side = "left";
                    }
                } else {
                    ae = "Plot";
                    F = Z.titlefont.size || Z.font.size * 1.4 || 16;
                    S = Z.width / 2;
                    P = Z._size.t / 2;
                    K = {
                        x: S,
                        y: P,
                        "text-anchor": "middle"
                    };
                    R = {};
                }
            }
        }
        var I = 1,
            H = false,
            U = E.title.trim();
        if (U === "") {
            I = 0;
        }
        if (U === "Click to enter " + ae + " title") {
            I = 0.2;
            H = true;
        }
        var M;
        if (L) {
            M = d3.select(ab).selectAll("." + E._id.substr(1) + " .cbtitle");
            var O = ad.charAt(0) === "h" ? ad.substr(1) : ("h" + ad);
            M.selectAll("." + O + ",." + O + "-math-group").remove();
        } else {
            M = Z._infolayer.selectAll(".g-" + ad).data([0]);
            M.enter().append("g").classed("g-" + ad, true);
        }
        var A = M.selectAll("text").data([0]);
        A.enter().append("text");
        A.text(U).attr("class", ad);

        function X(x) {
            Plotly.Lib.syncOrAsync([C, Q], x);
        }

        function C(x) {
            x.attr("transform", T ? "rotate(" + [T.rotate, K.x, K.y] + ") translate(0, " + T.offset + ")" : null);
            x.style({
                "font-family": V,
                "font-size": d3.round(F, 2) + "px",
                fill: Plotly.Drawing.rgb(B),
                opacity: I * Plotly.Drawing.opacity(B)
            }).attr(K).call(Plotly.util.convertToTspans).attr(K);
            x.selectAll("tspan.line").attr(K);
            return n.previousPromises(ab);
        }

        function Q(x) {
            var aj = d3.select(x.node().parentNode);
            if (R && R.selection && R.side && U) {
                aj.attr("transform", null);
                var af = 0,
                    ak = {
                        left: "right",
                        right: "left",
                        top: "bottom",
                        bottom: "top"
                    }[R.side],
                    al = (["left", "top"].indexOf(R.side) !== -1) ? -1 : 1,
                    ah = $.isNumeric(R.pad) ? R.pad : 2,
                    ai = Plotly.Drawing.bBox(aj.node()),
                    am = {
                        left: 0,
                        top: 0,
                        right: Z.width,
                        bottom: Z.height
                    },
                    y = L ? Z.width : (am[R.side] - ai[R.side]) * ((R.side === "left" || R.side === "top") ? -1 : 1);
                if (y < 0) {
                    af = y;
                } else {
                    R.selection.each(function () {
                        var an = $.extend({}, Plotly.Drawing.bBox(this));
                        an.left += Z._size.l;
                        an.right += Z._size.l;
                        an.top += Z._size.t;
                        an.bottom += Z._size.t;
                        if (Plotly.Lib.bBoxIntersect(ai, an, ah)) {
                            af = Math.max(af, al * (an[R.side] - ai[ak]) + ah);
                        }
                    });
                    af = Math.min(y, af);
                } if (af > 0 || y < 0) {
                    var ag = {
                        left: [-af, 0],
                        right: [af, 0],
                        top: [0, -af],
                        bottom: [0, af]
                    }[R.side];
                    aj.attr("transform", "translate(" + ag + ")");
                }
            }
        }
        A.attr({
            "data-unformatted": U
        }).call(X);

        function ac() {
            I = 0;
            H = true;
            U = "Click to enter " + ae + " title";
            Z._infolayer.select("." + ad).attr({
                "data-unformatted": U
            }).text("Click to enter " + ae + " title").on("mouseover.opacity", function () {
                d3.select(this).transition().duration(100).style("opacity", 1);
            }).on("mouseout.opacity", function () {
                d3.select(this).transition().duration(1000).style("opacity", 0);
            });
        }
        if (ab.mainsite && !Z._forexport) {
            if (!U) {
                ac();
            }
            A.call(Plotly.util.makeEditable).on("edit", function (x) {
                this.style({
                    "font-family": V,
                    "font-size": F + "px",
                    fill: Plotly.Drawing.opacity(B),
                    opacity: I * Plotly.Drawing.opacity(B)
                }).call(Plotly.util.convertToTspans).attr(K).selectAll("tspan.line").attr(K);
                if (L) {
                    Plotly.restyle(ab, "colorbar.title", x, z);
                } else {
                    Plotly.relayout(ab, G, x);
                }
            }).on("cancel", function () {
                this.text(this.attr("data-unformatted")).call(X);
            }).on("input", function (x) {
                this.text(x || " ").attr(K).selectAll("tspan.line").attr(K);
            });
        } else {
            if (!U || U === "Click to enter " + ae + " title") {
                A.remove();
            }
        }
        A.classed("js-placeholder", H);
    };
    n.graphJson = function (y, x, B) {
        if (typeof y === "string") {
            y = document.getElementById(y);
        }

        function A(F) {
            if (typeof F === "function") {
                return null;
            }
            if ($.isPlainObject(F)) {
                var E = {},
                    C;
                for (C in F) {
                    if (typeof F[C] === "function" || ["_", "["].indexOf(C.charAt(0)) !== -1) {
                        continue;
                    }
                    if (B === "keepdata") {
                        if (C.substr(C.length - 3) === "src") {
                            continue;
                        }
                    } else {
                        if (B !== "keepall") {
                            var D = F[C + "src"];
                            if (typeof D === "string" && D.indexOf(":") > 0) {
                                continue;
                            }
                        }
                    }
                    E[C] = A(F[C]);
                }
                return E;
            }
            if ($.isArray(F)) {
                return F.map(A);
            }
            if (F && F.getTime) {
                return Plotly.Lib.ms2DateTime(F);
            }
            return F;
        }
        var z = {
            data: (y.data || []).map(function (C) {
                var D = A(C);
                if (x) {
                    delete D.fit;
                }
                return D;
            })
        };
        if (!x) {
            z.layout = A(y.layout);
        }
        if (y.framework && y.framework.isPolar) {
            z = y.framework.getConfig();
        }
        return JSON.stringify(z);
    };
    n.viewJson = function () {
        var D = Tabs.get();
        var E, A, B;
        if (D.framework && D.framework.isPolar) {
            var H = D.framework.getLiveConfig();
            E = JSON.stringify(H);
            A = H.data;
            B = H.layout;
        } else {
            E = Plotly.Plots.graphJson(D);
            A = JSON.parse(E).data;
            A.forEach(function (I) {
                delete I.stream;
            });
            B = JSON.parse(E).layout;
        }
        var x = "var data = " + JSON.stringify(A) + ";\n";
        x += "var layout = " + JSON.stringify(B) + ";\n";
        x += "Plotly.plot(Tabs.get(), data, layout);";
        var F = $("#jsonModal");
        var C = F.find("#json-viewer").empty();
        C.data("jsontree", "").jsontree(E, {
            collapsibleOuter: false
        }).show();
        F.modal("show");
        var y = F.find("#json-text").text("").append(x).hide();
        var G = ["Switch to Plain Text", "Switch to JSON Viewer"];
        var z = $(".js-plain-text-toggle").text(G[0]);
        z.off("click").on("click", function () {
            var I = $(this).text() === G[0];
            C.toggle(!I);
            y.toggle(I);
            y.get(0).select();
            $(this).text(G[+I]);
            return false;
        });
        F.find(".close").off("click").on("click", function () {
            F.modal("hide");
            return false;
        });
    };
    var o = [];

    function f(z, x) {
        if (!$.isPlainObject(x)) {
            return z;
        }
        var A = o[o.push({}) - 1],
            y;
        for (y in z) {
            A[y] = z[y];
        }
        for (y in x) {
            if ($.isPlainObject(x[y])) {
                A[y] = f($.isPlainObject(z[y]) ? z[y] : {}, x[y]);
            } else {
                if ($.isNumeric(z[y]) && $.isNumeric(x[y])) {
                    A[y] = +x[y];
                } else {
                    A[y] = x[y];
                }
            }
        }
        return o.pop();
    }
    n.defaultSceneLayout = function (A, x, y) {
        var z = x.slice(5);
        if (!y) {
            y = {};
        }
        return $.extend({
            _webgl: null,
            _dataQueue: [],
            _loading: false,
            _id: x,
            domain: {
                x: [0, 1],
                y: [0, 1]
            },
            orthographic: true,
            xaxis: Plotly.Axes.defaultAxis({
                _td: A,
                _id: "x",
                _name: "xaxis-" + x
            }),
            yaxis: Plotly.Axes.defaultAxis({
                _td: A,
                _id: "y",
                _name: "yaxis-" + x
            }),
            zaxis: Plotly.Axes.defaultAxis({
                _td: A,
                _id: "z",
                _name: "zaxis-" + x
            })
        }, y);
    };
}());
(function () {
    if (!window.Plotly) {
        window.Plotly = {};
    }
    var j = Plotly.Lib = {};
    j.dateTime2ms = function (C) {
        try {
            if (C.getTime) {
                return +C;
            }
        } catch (E) {
            return false;
        }
        var H, A, F, B;
        C = String(C).split(" ");
        if (C.length > 2) {
            return false;
        }
        var D = C[0].split("-");
        if (D.length > 3 || (D.length !== 3 && C.length > 1)) {
            return false;
        }
        if (D[0].length === 4) {
            H = Number(D[0]);
        } else {
            if (D[0].length === 2) {
                var G = new Date().getFullYear();
                H = ((Number(D[0]) - G + 70) % 100 + 200) % 100 + G - 70;
            } else {
                return false;
            }
        } if (!$.isNumeric(H) || (H < 0)) {
            return false;
        }
        if (D.length === 1) {
            return new Date(H, 0, 1).getTime();
        }
        A = Number(D[1]) - 1;
        if (D[1].length > 2 || !(A >= 0 && A <= 11)) {
            return false;
        }
        if (D.length === 2) {
            return new Date(H, A, 1).getTime();
        }
        F = Number(D[2]);
        if (D[2].length > 2 || !(F >= 1 && F <= 31)) {
            return false;
        }
        F = new Date(H, A, F).getTime();
        if (C.length === 1) {
            return F;
        }
        D = C[1].split(":");
        if (D.length > 3) {
            return false;
        }
        B = Number(D[0]);
        if (D[0].length > 2 || !(B >= 0 && B <= 23)) {
            return false;
        }
        F += 3600000 * B;
        if (D.length === 1) {
            return F;
        }
        A = Number(D[1]);
        if (D[1].length > 2 || !(A >= 0 && A <= 59)) {
            return false;
        }
        F += 60000 * A;
        if (D.length === 2) {
            return F;
        }
        C = Number(D[2]);
        if (!(C >= 0 && C < 60)) {
            return false;
        }
        return F + C * 1000;
    };
    j.isDateTime = function (A) {
        return j.dateTime2ms(A) !== false;
    };
    j.ms2DateTime = function (A, C) {
        if (typeof (d3) === "undefined") {
            console.log("d3 is not defined");
            return;
        }
        if (!C) {
            C = 0;
        }
        var D = new Date(A),
            B = d3.time.format("%Y-%m-%d")(D);
        if (C < 7776000000) {
            B += " " + j.lpad(D.getHours(), 2);
            if (C < 432000000) {
                B += ":" + j.lpad(D.getMinutes(), 2);
                if (C < 10800000) {
                    B += ":" + j.lpad(D.getSeconds(), 2);
                    if (C < 300000) {
                        B += "." + j.lpad(D.getMilliseconds(), 3);
                    }
                }
            }
            return B.replace(/([:\s]00)*\.?[0]*$/, "");
        }
        return B;
    };
    var t = {
        H: ["%H:%M:%S~%L", "%H:%M:%S", "%H:%M"],
        I: ["%I:%M:%S~%L%p", "%I:%M:%S%p", "%I:%M%p"],
        D: ["%H", "%I%p", "%Hh"]
    };
    var o = {
        Y: ["%Y~%m~%d", "%Y%m%d", "%y%m%d", "%m~%d~%Y", "%d~%m~%Y"],
        Yb: ["%b~%d~%Y", "%d~%b~%Y", "%Y~%d~%b", "%Y~%b~%d"],
        y: ["%m~%d~%y", "%d~%m~%y", "%y~%m~%d"],
        yb: ["%b~%d~%y", "%d~%b~%y", "%y~%d~%b", "%y~%b~%d"]
    };
    if (typeof d3 !== "undefined") {
        var r = d3.time.format.utc;
        var a = {
            Y: {
                H: ["%Y~%m~%dT%H:%M:%S", "%Y~%m~%dT%H:%M:%S~%L"].map(r),
                I: [],
                D: ["%Y%m%d%H%M%S", "%Y~%m", "%m~%Y"].map(r)
            },
            Yb: {
                H: [],
                I: [],
                D: ["%Y~%b", "%b~%Y"].map(r)
            },
            y: {
                H: [],
                I: [],
                D: []
            },
            yb: {
                H: [],
                I: [],
                D: []
            }
        };
        ["Y", "Yb", "y", "yb"].forEach(function (A) {
            o[A].forEach(function (B) {
                a[A].D.push(r(B));
                ["H", "I", "D"].forEach(function (C) {
                    t[C].forEach(function (E) {
                        var D = a[A][C];
                        D.push(r(B + "~" + E));
                        D.push(r(E + "~" + B));
                    });
                });
            });
        });
    }
    var w = /[a-z]*/g,
        u = function (A) {
            return A.substr(0, 3);
        },
        m = /(mon|tue|wed|thu|fri|sat|sun|the|of|st|nd|rd|th)/g,
        y = /[\s,\/\-\.\(\)]+/g,
        d = /~?([ap])~?m(~|$)/,
        e = function (A, B) {
            return B + "m ";
        },
        x = /\d\d\d\d/,
        v = /(^|~)[a-z]{3}/,
        z = /[ap]m/,
        h = /:/,
        l = /q([1-4])/,
        c = ["31~mar", "30~jun", "30~sep", "31~dec"],
        i = function (A, B) {
            return c[B - 1];
        },
        s = / ?([+\-]\d\d:?\d\d|Z)$/;
    j.parseDate = function (B) {
        if (B.getTime) {
            return B;
        }
        if (typeof B !== "string") {
            return;
        }
        B = B.toLowerCase().replace(w, u).replace(m, "").replace(y, "~").replace(d, e).replace(l, i).trim().replace(s, "");
        var E = (x.test(B) ? "Y" : "y") + (v.test(B) ? "b" : ""),
            F = h.test(B) ? (z.test(B) ? "I" : "H") : "D",
            G = a[E][F],
            A = G.length,
            C = null;
        for (var D = 0; D < A; D++) {
            C = G[D].parse(B);
            if (C) {
                break;
            }
        }
        return C;
    };
    j.findBin = function (D, C, H) {
        if ($.isNumeric(C.start)) {
            return H ? Math.ceil((D - C.start) / C.size) - 1 : Math.floor((D - C.start) / C.size);
        } else {
            var B = 0,
                A = C.length,
                G = 0,
                F, E;
            if (C[C.length - 1] > C[0]) {
                E = H ? function (J, I) {
                    return J < I;
                } : function (J, I) {
                    return J <= I;
                };
            } else {
                E = H ? function (J, I) {
                    return J >= I;
                } : function (J, I) {
                    return J > I;
                };
            }
            while (B < A && G++ < 100) {
                F = Math.floor((B + A) / 2);
                if (E(C[F], D)) {
                    B = F + 1;
                } else {
                    A = F;
                }
            }
            if (G > 90) {
                console.log("Long binary search...");
            }
            return B - 1;
        }
    };
    j.distinctVals = function (C) {
        var F = C.slice();
        F.sort(function (I, H) {
            return I - H;
        });
        var B = F.length - 1,
            A = (F[B] - F[0]) || 1,
            E = A / (B || 1) / 10000,
            G = [F[0]];
        for (var D = 0; D < B; D++) {
            if (F[D + 1] > F[D] + E) {
                A = Math.min(A, F[D + 1] - F[D]);
                G.push(F[D + 1]);
            }
        }
        return {
            vals: G,
            minDiff: A
        };
    };
    j.roundUp = function (J, I, F) {
        var C = 0,
            D = I.length - 1,
            B, H = 0,
            E = F ? 0 : 1,
            G = F ? 1 : 0,
            A = F ? Math.ceil : Math.floor;
        while (C < D && H++ < 100) {
            B = A((C + D) / 2);
            if (I[B] <= J) {
                C = B + E;
            } else {
                D = B - G;
            }
        }
        return I[C];
    };
    j.nestedProperty = function (D, M) {
        var N = D,
            A = M.split("."),
            I, H = 0;
        while (H < A.length) {
            var E = String(A[H]).match(/^([^\[\]]+)((\[\-?[0-9]*\])+)$/);
            if (E) {
                var L = E[2].substr(1, E[2].length - 2).split("][");
                A.splice(H, 1, E[1]);
                for (I = 0; I < L.length; I++) {
                    H++;
                    A.splice(H, 0, Number(L[I]));
                }
            }
            H++;
        }
        var K = M.substr(M.indexOf("[-1]") + 4),
            F;
        if (K.charAt(0) === ".") {
            K = K.substr(1);
        }

        function C(O) {
            return j.nestedProperty(O, K);
        }

        function G(O) {
            for (I = 0; I < F.length; I++) {
                F[I].set($.isArray(O) ? O[I % O.length] : O);
            }
        }

        function J() {
            var O = true,
                P = [];
            for (I = 0; I < F.length; I++) {
                P[I] = F[I].get();
                if (P[I] !== P[0]) {
                    O = false;
                }
            }
            return O ? P[0] : P;
        }
        for (H = 0; H < A.length - 1; H++) {
            if (A[H] === -1) {
                F = N.map(C);
                return {
                    set: G,
                    get: J,
                    astr: M,
                    parts: A,
                    obj: D
                };
            }
            if (!(A[H] in N)) {
                N[A[H]] = (typeof A[H + 1] === "string") ? {} : [];
            }
            N = N[A[H]];
        }
        var B = A[H];
        return {
            set: function (O) {
                if (O === undefined || O === null) {
                    delete N[B];
                } else {
                    N[B] = O;
                }
            },
            get: function () {
                return N[B];
            },
            astr: M,
            parts: A,
            obj: D
        };
    };
    j.pauseEvent = function (A) {
        if (A.stopPropagation) {
            A.stopPropagation();
        }
        if (A.preventDefault) {
            A.preventDefault();
        }
        A.cancelBubble = true;
        return false;
    };
    j.lpad = function (B, A) {
        return String(B + Math.pow(10, A)).substr(1);
    };
    j.aggNums = function (E, C, B, A) {
        var D;
        if (!A) {
            A = B.length;
        }
        if (!$.isNumeric(C)) {
            C = false;
        }
        if ($.isArray(B[0])) {
            B = B.map(function (F) {
                return j.aggNums(E, C, F);
            });
        }
        for (D = 0; D < A; D++) {
            if (!$.isNumeric(C)) {
                C = B[D];
            } else {
                if ($.isNumeric(B[D])) {
                    C = E(C, B[D]);
                }
            }
        }
        return C;
    };
    j.len = function (A) {
        return j.aggNums(function (B) {
            return B + 1;
        }, 0, A);
    };
    j.mean = function (B, A) {
        if (!A) {
            A = j.len(B);
        }
        return j.aggNums(function (D, C) {
            return D + C;
        }, 0, B) / A;
    };
    j.stdev = function (C, A, B) {
        if (!A) {
            A = j.len(C);
        }
        if (!$.isNumeric(B)) {
            B = j.aggNums(function (E, D) {
                return E + D;
            }, 0, C) / A;
        }
        return Math.sqrt(j.aggNums(function (E, D) {
            return E + Math.pow(D - B, 2);
        }, 0, C) / A);
    };
    j.VERBOSE = false;
    j.TIMER = new Date().getTime();
    j.log = function () {
        if (j.VERBOSE) {
            console.log.apply(console, arguments);
        }
    };
    j.markTime = function (A) {
        if (!j.VERBOSE) {
            return;
        }
        var B = new Date().getTime();
        console.log(A, B - j.TIMER, "(msec)");
        if (j.VERBOSE === "trace") {
            console.trace();
        }
        j.TIMER = B;
    };
    j.constrain = function (B, A, C) {
        return Math.max(A, Math.min(C, B));
    };
    j.killspin = function (A) {
        if (A === undefined && typeof Tabs !== "undefined") {
            A = Tabs.get();
        }
        if (!A || !A.spinner) {
            $(".spinner").remove();
            return;
        }
        A.spincount--;
        if (A.spincount > 0) {
            return;
        }
        A.spinner.stop();
        $(A).find(".spinner").remove();
    };
    j.startspin = function (B, E, A) {
        if (B === undefined && typeof Tabs !== "undefined") {
            B = Tabs.get();
        }
        A = A || {};
        if ((typeof B.spincount === "number") && B.spincount > 0) {
            B.spincount++;
        } else {
            B.spincount = 1;
            var C = {
                lines: 17,
                length: 30,
                width: 6,
                radius: 37,
                corners: 1,
                rotate: 0,
                direction: 1,
                color: "#000",
                speed: 1,
                trail: 60,
                shadow: false,
                hwaccel: false,
                className: "spinner",
                zIndex: 2000000000,
                top: "auto",
                left: "auto"
            };
            if (E === "tiny") {
                C.lines = 13;
                C.length = 5;
                C.width = 2;
                C.radius = 5;
                C.corners = 0.6;
            }
            C = $.extend({}, C, A);
            var D = new Spinner(C).spin(B);
            B.spinner = D;
        }
    };
    j.notifier = function (D, B) {
        var C;
        if ($.isNumeric(B)) {
            C = B;
        } else {
            if (B === "long") {
                C = 2000;
            } else {
                C = 1000;
            }
        }
        var A = $(".notifier-container");
        if (!A.length) {
            A = $('<div class="notifier-container"></div>').appendTo("#tabs-one-line,#embedded-graph");
        }
        if ($("div.notifier").text().indexOf(D) > 0) {
            return;
        }
        var E = $('<div class="notifier" style="display:none;"><button class="notifier__close close" data-dismiss="alert">&times;</button><p class="push-half">' + D + "</p></div>");
        E.appendTo(A).fadeIn(700).delay(C).fadeOut(700, function () {
            E.remove();
        });
    };
    j.conf_modal = (function () {
        var I;

        function D(N) {
            I = {
                header: "",
                body: "",
                conf_btn_txt: "Done",
                canc_btn_txt: "",
                conf_func: function () {},
                canc_func: function () {},
                selector: "body",
                hideonclick: true,
                closex: false,
                backdrop: true,
                alt_btn_txt: "",
                alt_func: function () {}
            };
            I = $.extend({}, I, N);
            var M, J, L;
            if ($(I.selector).css("z-index") === "auto") {
                M = J = L = "";
            } else {
                M = $(I.selector).css("z-index");
                J = M + 1;
                L = M + 2;
            } if (I.backdrop) {
                $(".modal-backdrop:visible").hide();
                $(I.selector).first().append('<div id="confirmModalBackdrop" class="modal-backdrop confirmModal ' + (J === "" ? "" : 'style="z-index:' + J) + '"></div>');
            }
            var K = '<div id="confirmModal" class="modal modal--default hide confirmModal" style="z-index:' + L + '"><div class="modal__header">' + (I.closex ? '<button type="button" id="closeConfirmModal" class="close cm-canc_func" aria-hidden="true">&times;</button>' : "") + '<h3 class="cm-header"></h3></div><div class="modal__body"><p class="cm-body"></p></div><div class="modal__footer"><button class="btn btn--small btn--cta2 cm-alt_btn_txt cm-alt_func"></button><button class="btn btn--small btn--cta2 cm-canc_btn_txt cm-canc_func push-half--left"></button><button class="btn btn--small btn--cta  cm-conf_btn_txt cm-conf_func push-half--left"></button><div class="messages success--inline" style="text-align: right;"></div></div></div>';
            $(I.selector).append(K);
            $("#confirmModal").modal({
                backdrop: false
            });
            A(I);
            $("#confirmModal").on("hide", function () {
                G();
            });
        }

        function G() {
            $("#confirmModalBackdrop").remove();
            $("#confirmModal").remove();
            $(".confirmModalBackdrop").remove();
            $(".confirmModal").remove();
        }

        function A(L) {
            function N() {
                if (I.hideonclick) {
                    G();
                }
                L.conf_func();
                return false;
            }

            function J() {
                if (I.hideonclick) {
                    G();
                }
                L.canc_func();
                return false;
            }

            function M() {
                if (I.hideonclick) {
                    G();
                }
                L.alt_func();
                return false;
            }
            for (var K in L) {
                if ($.inArray(K, ["header", "body"]) > -1) {
                    $("#confirmModal .cm-" + K).html(L[K]);
                } else {
                    if ($.inArray(K, ["alt_btn_txt", "canc_btn_txt", "conf_btn_txt"]) > -1) {
                        if (L[K] === "") {
                            $("#confirmModal .cm-" + K).hide();
                        } else {
                            $("#confirmModal .cm-" + K).show();
                            $("#confirmModal .cm-" + K).html(L[K]);
                        }
                    } else {
                        if (K === "conf_func") {
                            $("#confirmModal .cm-conf_func").removeClass("disabled").off("click").on("click", N);
                        } else {
                            if (K === "canc_func") {
                                $("#confirmModal .cm-canc_func").removeClass("disabled").off("click").on("click", J);
                            } else {
                                if (K === "alt_func") {
                                    $("#confirmModal .cm-alt_func").removeClass("disabled").off("click").on("click", M);
                                }
                            }
                        }
                    }
                }
            }
        }

        function B(J) {
            I = $.extend({}, I, J);
            A(J);
        }

        function C(J) {
            $("#confirmModal .messages").html(J);
        }

        function H() {
            C("");
        }

        function E() {
            $("#confirmModal .cm-conf_func").addClass("disabled").off("click");
        }

        function F() {
            $("#confirmModal .cm-canc_func").addClass("disabled").off("click");
        }
        return {
            init: D,
            settings: B,
            addMsg: C,
            rmMsg: H,
            hide: G,
            disableConf: E,
            disableCanc: F
        };
    })();
    j.bBoxIntersect = function (B, A, C) {
        C = C || 0;
        return (B.left <= A.right + C && A.left <= B.right + C && B.top <= A.bottom + C && A.top <= B.bottom + C);
    };
    j.identity = function (A) {
        return A;
    };
    var b = ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth"];
    var p = ["th", "st", "nd", "rd"];
    var g = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];
    j.num2ordinal = function (B) {
        if ((parseFloat(B) === parseInt(B, 10)) && !isNaN(B)) {
            if (parseInt(B, 10) >= 1 && parseInt(B, 10) <= 9) {
                return b[parseInt(B, 10) - 1];
            } else {
                var A = B % 100;
                return B + (p[(A - 20) % 10] || p[A] || p[0]);
            }
        }
        return B;
    };
    j.ppn = function (A) {
        A = parseInt(A, 10);
        return (A >= 0 && A <= 9 ? g[A] : A);
    };
    j.togglecontent = function (C, B, A) {
        $(C + " .js-toggle--" + B).hide();
        $(C + " .js-toggle--" + B + "__" + A).show();
    };
    j.plotlyurl = function (A) {
        return window.location.origin + "/" + A;
    };
    j.randstr = function k(B, J, A) {
        if (!A) {
            A = 16;
        }
        if (J === undefined) {
            J = 24;
        }
        if (J <= 0) {
            return "0";
        }
        var D, G, H;
        var C = Math.log(Math.pow(2, J)) / Math.log(A);
        for (D = 2; C === Infinity; D *= 2) {
            C = Math.log(Math.pow(2, J / D)) / Math.log(A) * D;
        }
        var I = C - Math.floor(C);
        var E = "";
        for (D = 0; D < Math.floor(C); D++) {
            H = Math.floor(Math.random() * A).toString(A);
            E = H + E;
        }
        if (I) {
            G = Math.pow(A, I);
            H = Math.floor(Math.random() * G).toString(A);
            E = H + E;
        }
        var F = parseInt(E, A);
        if ((B && (B.indexOf(E) > -1)) || (F !== Infinity && F >= Math.pow(2, J))) {
            return k(B, J, A);
        } else {
            return E;
        }
    };
    j.OptionControl = function (C, A) {
        if (!C) {
            C = {};
        }
        if (!A) {
            A = "opt";
        }
        var B = {};
        B.optionList = [];
        B._newoption = function (D) {
            D[A] = C;
            B[D.name] = D;
            B.optionList.push(D);
        };
        B["_" + A] = C;
        return B;
    };
    j.smooth = function (F, B) {
        var H = [],
            I = [],
            E, D, C, J;
        B = Math.round(B);
        if (B < 2) {
            return F;
        }
        for (E = 1; E < 2 * B; E++) {
            H.push((1 - Math.cos(Math.PI * E / B)) / (2 * B));
        }
        var G = H.length,
            A = F.length;
        for (E = 0; E < A; E++) {
            J = 0;
            for (D = 0; D < G; D++) {
                C = E + D + 1 - B;
                if (C < 0) {
                    C = -1 - C;
                } else {
                    if (C >= A) {
                        C = 2 * A - 1 - C;
                    }
                }
                J += F[C] * H[D];
            }
            I.push(J);
        }
        return I;
    };
    j.getSources = function (C) {
        var B = j.fullFid(C.fid);
        var A = (C.ref_fids || []).join(",");
        if (!B && !A) {
            return;
        }
        $.post("/getsources", {
            fid: B,
            extrarefs: A
        }, function (D) {
            C.sourcelist = JSON.parse(D);
            if (!$.isArray(C.sourcelist)) {
                console.log("sourcelist error", C.sourcelist);
                C.sourcelist = [];
            }
            j.showSources(C);
        });
    };
    j.fullFid = function (A) {
        if (typeof A === "number") {
            A = String(A);
        }
        if (typeof A !== "string" || A === "") {
            return "";
        }
        if (A.substr(A.length - 4) === "tree") {
            return "-1";
        }
        return ($.isNumeric(A) && window.user ? (window.user + ":" + A) : A).replace("\\:", ":");
    };
    j.showSources = function (H) {
        var D = H.sourcelist;
        if (!D) {
            j.getSources(H);
            return;
        }
        var I = d3.select(H).select(".js-sourcelinks"),
            M = D.filter(function (S) {
                return $.isNumeric(S.ref_fid);
            }),
            K = M[0] || D[0];
        I.text("");
        H.shouldshowsources = false;
        if (!K) {
            return;
        }
        var F = {},
            N = {};
        M.forEach(function (S) {
            F[S.url] = 1;
        });
        D.forEach(function (S) {
            if (!$.isNumeric(S.ref_fid)) {
                N[S.ref_fid] = 1;
            }
        });
        var A = String(K.ref_fid).split(":"),
            L = $(H).hasClass("js-plotly-plot"),
            R = Boolean($("#plotlyMainMarker").length),
            Q, G;
        if (L) {
            var J = K.fid.split(":")[0];
            if (D.every(function (S) {
                return String(S.ref_fid).split(":")[0] === J;
            })) {
                return;
            }
            H.shouldshowsources = true;
            if (H.layout.hidesources) {
                return;
            }
            I.append("tspan").text("Source: ");
            Q = I.append("a").attr({
                "xlink:xlink:href": "#"
            });
            if ($.isNumeric(K.ref_fid)) {
                Q.attr({
                    "xlink:xlink:show": "new",
                    "xlink:xlink:href": K.ref_url
                });
            } else {
                if (!R) {
                    Q.attr({
                        "xlink:xlink:show": "new",
                        "xlink:xlink:href": "/" + A[1] + "/~" + A[0]
                    });
                }
            } if (D.length > 1) {
                I.append("tspan").text(" - ");
                G = I.append("a").attr({
                    "xlink:xlink:href": "#"
                });
            }
        } else {
            if (!I.node()) {
                I = d3.select(H).select(".grid-container").append("div").attr("class", "grid-sourcelinks js-sourcelinks");
            }
            I.append("span").text("Source: ");
            Q = I.append("a").attr({
                href: "#",
                "class": "link--impt"
            });
            if ($.isNumeric(K.ref_fid)) {
                Q.attr({
                    target: "_blank",
                    href: K.ref_url
                });
            }
            if (D.length > 1) {
                I.append("span").text(" - ");
                G = I.append("a").attr({
                    href: "#"
                }).classed("link--impt", true);
            }
        }
        Q.text(K.ref_filename);

        function O() {
            pullf({
                fid: K.ref_fid
            });
            return false;
        }

        function C() {
            var S = $("#sourceModal");
            var T = S.find("#source-viewer").empty();
            T.data("jsontree", "").jsontree(JSON.stringify(B), {
                terminators: false,
                collapsibleOuter: false
            }).show();
            if (R) {
                S.find("[data-fid]").click(function () {
                    S.modal("hide");
                    pullf({
                        fid: $(this).attr("data-fid")
                    });
                    return false;
                });
            } else {
                S.find("[data-fid]").each(function () {
                    A = $(this).attr("data-fid").split(":");
                    $(this).attr({
                        href: "/~" + A[0] + "/" + A[1]
                    });
                });
                if (window.self !== window.top) {
                    S.css({
                        left: "10px",
                        right: "10px",
                        bottom: "10px",
                        width: "auto",
                        height: "auto",
                        margin: 0
                    });
                }
            }
            S.modal("show");
            S.find(".close").off("click").on("click", function () {
                S.modal("hide");
                return false;
            });
            return false;
        }
        if (!L || H.mainsite) {
            Q.on("click", O);
        }
        if (G) {
            G.text("Full list").on("click", C);
        }

        function E(S, T) {
            if (P < 0) {
                console.log("infinite loop?");
                return S;
            }
            P--;
            D.forEach(function (X) {
                if (X.ref_by_uid === T) {
                    var U;
                    if ($.isNumeric(X.ref_fid)) {
                        U = '<a href="' + X.ref_url + '" target="_blank">' + X.ref_filename + "</a>";
                    } else {
                        var W = X.ref_fid.split(":")[0],
                            V = (W !== window.user ? W + ": " : "") + X.ref_filename;
                        U = '<a href="#" data-fid="' + X.ref_fid + '">' + V + "</a>";
                    }
                    S[U] = E({}, X.uid);
                }
            });
            return S;
        }
        var P = D.length,
            B = E({}, null);
    };
    j.isEmpty = function n(C) {
        function B(D) {
            return (D === null || D === undefined || D === "");
        }

        function A(D) {
            return !B && typeof (D) !== "object";
        }
        if (B(C)) {
            return true;
        }
        if (typeof (C) !== "object") {
            return false;
        }
        if (Object.keys(C).map(function (D) {
            return A(C[D]);
        }).some(function (D) {
            return D;
        })) {
            return true;
        }
        return !Object.keys(C).some(function (D) {
            return !n(C[D]);
        });
    };
    j.purgeStream = function f(A) {
        var B = A.data;
        if (!(B && B.length)) {
            return;
        }
        B.forEach(function (C) {
            delete C.stream;
        });
    };
    j.dropdownSelector = function q(D) {
        var C = D.items;
        D.defaults = D.defaults || 0;
        var B = D.cls || "";
        var A = $('<div class="dropdown ' + B + '"><a class="link--default link--blocky dropdown-toggle--fixed-width js-dropdown-text" data-toggle="dropdown" data-target="#" href="/"><span class="caret user-caret"></span></a><ul class="dropdown-menu dropdown-toggle--fixed-width" role="menu"></ul></div>');
        var E = A.find("ul");
        var F = A.find(".js-dropdown-text");
        C.forEach(function (H, G) {
            var I = $('<li><a href="#">' + H + "</a></li>");
            I.click(function () {
                F.html(H + '<span class="caret user-caret"></span>');
                if (D.callback) {
                    D.callback(H, G);
                }
            });
            E.append(I);
            if (G === D.defaults) {
                I.click();
            }
        });
        return A;
    };
    j.promiseError = function (A) {
        console.log(A, A.stack);
    };
    j.syncOrAsync = function (F, A, E) {
        var C, B;

        function D() {
            j.markTime("async done " + B.name);
            return j.syncOrAsync(F, A, E);
        }
        while (F.length) {
            B = F.splice(0, 1)[0];
            C = B(A);
            if (C && C.then) {
                return C.then(D).then(undefined, j.promiseError);
            }
            j.markTime("sync done " + B.name);
        }
        return E && E(A);
    };
    j.dot = function (A, G) {
        if (!(A.length && G.length) || A.length !== G.length) {
            return null;
        }
        if (A.length === 0) {
            return A;
        }

        function C(H) {
            return Object.keys(H[0]).map(function (I) {
                return H.map(function (J) {
                    return J[I];
                });
            });
        }

        function B(H, K) {
            var I = [];
            for (var J = 0; J < H.length; ++J) {
                I = I.concat([
                    [H[J], K[J]]
                ]);
            }
            return I;
        }

        function F(I, H) {
            return I + H[0] * H[1];
        }

        function E(H) {
            return j.dot(A, H);
        }

        function D(H) {
            return j.dot(H, G);
        }
        if (!A[0].length) {
            if (!G[0].length) {
                return B(A, G).reduce(F, 0);
            } else {
                return C(G).map(E);
            }
        } else {
            return A.map(D);
        }
    };
    j.translationMatrix = function (A, B) {
        return [
            [1, 0, A],
            [0, 1, B],
            [0, 0, 1]
        ];
    };
    j.rotationMatrix = function (B) {
        var A = B * Math.PI / 180;
        return [
            [Math.cos(A), -Math.sin(A), 0],
            [Math.sin(A), Math.cos(A), 0],
            [0, 0, 1]
        ];
    };
    j.rotationXYMatrix = function (B, A, C) {
        return j.dot(j.dot(j.translationMatrix(A, C), j.rotationMatrix(B)), j.translationMatrix(-A, -C));
    };
    j.apply2DTransform = function (A) {
        return function () {
            var B = arguments;
            if (B.length === 3) {
                B = B[0];
            }
            var C = arguments.length === 1 ? B[0] : [B[0], B[1]];
            return j.dot(A, [C[0], C[1], 1]).slice(0, 2);
        };
    };
    j.apply2DTransform2 = function (B) {
        var A = j.apply2DTransform(B);
        return function (C) {
            return A(C.slice(0, 2)).concat(A(C.slice(2, 4)));
        };
    };
    j.stripTrailingSlash = function (A) {
        if (A.substr(-1) == "/") {
            return A.substr(0, A.length - 1);
        }
        return A;
    };
}());
(function () {
    if (!window.Plotly) {
        window.Plotly = {};
    }
    var a = Plotly.Storage = {};
    a.supports_html5_storage = function () {
        try {
            return "localStorage" in window && window.localStorage !== null;
        } catch (b) {
            return false;
        }
    };
    a.localGet = function (b) {
        if (a.supports_html5_storage()) {
            return JSON.parse(localStorage.getItem(b));
        } else {
            return null;
        }
    };
    a.localSet = function (b, c) {
        if (a.supports_html5_storage()) {
            localStorage.setItem(b, JSON.stringify(c));
        }
    };
    a.notificationMemoryGet = function (c) {
        var d = a.localGet("notifmem_" + c);
        if (d === null) {
            return {
                last: null,
                count: 0
            };
        } else {
            var b = (new Date()).getTime();
            d.last = (b - d.last) / 1000;
            return d;
        }
    };
    a.notificationMemoryViewed = function (b) {
        var c = a.localGet("notifmem_" + b);
        if (c === null) {
            c = {
                last: (new Date()).getTime(),
                count: 1
            };
        } else {
            c.count += 1;
            c.last = (new Date()).getTime();
        }
        a.localSet("notifmem_" + b, c);
    };
})();
(function () {
    var g = Plotly.Drawing = {};
    g.rgb = function (m) {
        var n = tinycolor(m).toRgb();
        return "rgb(" + Math.round(n.r) + ", " + Math.round(n.g) + ", " + Math.round(n.b) + ")";
    };
    g.opacity = function (m) {
        return tinycolor(m).alpha;
    };
    g.addOpacity = function (m, o) {
        var n = tinycolor(m).toRgb();
        return "rgba(" + Math.round(n.r) + ", " + Math.round(n.g) + ", " + Math.round(n.b) + ", " + o + ")";
    };
    g.strokeColor = function (m, n) {
        m.style({
            stroke: g.rgb(n),
            "stroke-opacity": g.opacity(n)
        });
    };
    g.fillColor = function (m, n) {
        m.style({
            fill: g.rgb(n),
            "fill-opacity": g.opacity(n)
        });
    };
    g.font = function (o, n, m, p) {
        if (n !== undefined) {
            o.style("font-family", n);
        }
        if (m !== undefined) {
            o.style("font-size", m + "px");
        }
        if (p !== undefined) {
            o.call(g.fillColor, p);
        }
    };
    g.setPosition = function (n, m, o) {
        n.attr("x", m).attr("y", o);
    };
    g.setSize = function (o, m, n) {
        o.attr("width", m).attr("height", n);
    };
    g.setRect = function (p, m, q, n, o) {
        p.call(g.setPosition, m, q).call(g.setSize, n, o);
    };
    g.translatePoints = function (n, o, m) {
        n.each(function (s) {
            var q = s.xp || o.c2p(s.x),
                t = s.yp || m.c2p(s.y),
                r = d3.select(this);
            if ($.isNumeric(q) && $.isNumeric(t)) {
                if (this.nodeName === "text") {
                    r.attr("x", q).attr("y", t);
                } else {
                    r.attr("transform", "translate(" + q + "," + t + ")");
                }
            } else {
                r.remove();
            }
        });
    };
    g.getPx = function (n, m) {
        return Number(n.style(m).replace(/px$/, ""));
    };
    g.lineGroupStyle = function (n, p, o, m) {
        n.style("fill", "none").each(function (t) {
            var s = p || (t && t[0] && t[0].t && t[0].t.lw) || 0,
                q = m || (t && t[0] && t[0].t && t[0].t.ld),
                r = Math.max(s, 3);
            if (q === "solid") {
                q = "";
            } else {
                if (q === "dot") {
                    q = r + "px," + r + "px";
                } else {
                    if (q === "dash") {
                        q = (3 * r) + "px," + (3 * r) + "px";
                    } else {
                        if (q === "longdash") {
                            q = (5 * r) + "px," + (5 * r) + "px";
                        } else {
                            if (q === "dashdot") {
                                q = (3 * r) + "px," + r + "px," + r + "px," + r + "px";
                            } else {
                                if (q === "longdashdot") {
                                    q = (5 * r) + "px," + (2 * r) + "px," + r + "px," + (2 * r) + "px";
                                }
                            }
                        }
                    }
                }
            }
            d3.select(this).call(g.strokeColor, o || (t && t[0] && t[0].t && t[0].t.lc)).style("stroke-dasharray", q).style("stroke-width", s + "px");
        });
    };
    g.fillGroupStyle = function (m) {
        m.style("stroke-width", 0).each(function (p) {
            var n = d3.select(this);
            try {
                n.call(g.fillColor, p[0].t.fc);
            } catch (o) {
                console.log(o, m);
                n.remove();
            }
        });
    };
    var e = {
        circle: {
            n: 0,
            f: function (n) {
                var m = d3.round(n, 2);
                return "M" + m + ",0A" + m + "," + m + " 0 1,1 0,-" + m + "A" + m + "," + m + " 0 0,1 " + m + ",0Z";
            }
        },
        square: {
            n: 1,
            f: function (n) {
                var m = d3.round(n, 2);
                return "M" + m + "," + m + "H-" + m + "V-" + m + "H" + m + "Z";
            }
        },
        diamond: {
            n: 2,
            f: function (n) {
                var m = d3.round(n * 1.3, 2);
                return "M" + m + ",0L0," + m + "L-" + m + ",0L0,-" + m + "Z";
            }
        },
        cross: {
            n: 3,
            f: function (m) {
                var n = d3.round(m * 0.4, 2),
                    o = d3.round(m * 1.2, 2);
                return "M" + o + "," + n + "H" + n + "V" + o + "H-" + n + "V" + n + "H-" + o + "V-" + n + "H-" + n + "V-" + o + "H" + n + "V-" + n + "H" + o + "Z";
            }
        },
        x: {
            n: 4,
            f: function (o) {
                var s = d3.round(o * 0.8 / Math.sqrt(2), 2),
                    q = "l" + s + "," + s,
                    p = "l" + s + ",-" + s,
                    m = "l-" + s + ",-" + s,
                    n = "l-" + s + "," + s;
                return "M0," + s + q + p + m + p + m + n + m + n + q + n + q + "Z";
            }
        },
        "triangle-up": {
            n: 5,
            f: function (p) {
                var n = d3.round(p * 2 / Math.sqrt(3), 2),
                    m = d3.round(p / 2, 2),
                    o = d3.round(p, 2);
                return "M-" + n + "," + m + "H" + n + "L0,-" + o + "Z";
            }
        },
        "triangle-down": {
            n: 6,
            f: function (p) {
                var n = d3.round(p * 2 / Math.sqrt(3), 2),
                    m = d3.round(p / 2, 2),
                    o = d3.round(p, 2);
                return "M-" + n + ",-" + m + "H" + n + "L0," + o + "Z";
            }
        },
        "triangle-left": {
            n: 7,
            f: function (p) {
                var n = d3.round(p * 2 / Math.sqrt(3), 2),
                    m = d3.round(p / 2, 2),
                    o = d3.round(p, 2);
                return "M" + m + ",-" + n + "V" + n + "L-" + o + ",0Z";
            }
        },
        "triangle-right": {
            n: 8,
            f: function (p) {
                var n = d3.round(p * 2 / Math.sqrt(3), 2),
                    m = d3.round(p / 2, 2),
                    o = d3.round(p, 2);
                return "M-" + m + ",-" + n + "V" + n + "L" + o + ",0Z";
            }
        },
        "triangle-ne": {
            n: 9,
            f: function (o) {
                var n = d3.round(o * 0.6, 2),
                    m = d3.round(o * 1.2, 2);
                return "M-" + m + ",-" + n + "H" + n + "V" + m + "Z";
            }
        },
        "triangle-se": {
            n: 10,
            f: function (o) {
                var n = d3.round(o * 0.6, 2),
                    m = d3.round(o * 1.2, 2);
                return "M" + n + ",-" + m + "V" + n + "H-" + m + "Z";
            }
        },
        "triangle-sw": {
            n: 11,
            f: function (o) {
                var n = d3.round(o * 0.6, 2),
                    m = d3.round(o * 1.2, 2);
                return "M" + m + "," + n + "H-" + n + "V-" + m + "Z";
            }
        },
        "triangle-nw": {
            n: 12,
            f: function (o) {
                var n = d3.round(o * 0.6, 2),
                    m = d3.round(o * 1.2, 2);
                return "M-" + n + "," + m + "V-" + n + "H" + m + "Z";
            }
        },
        pentagon: {
            n: 13,
            f: function (s) {
                var n = d3.round(s * 0.951, 2),
                    m = d3.round(s * 0.588, 2),
                    q = d3.round(-s, 2),
                    p = d3.round(s * -0.309, 2),
                    o = d3.round(s * 0.809, 2);
                return "M" + n + "," + p + "L" + m + "," + o + "H-" + m + "L-" + n + "," + p + "L0," + q + "Z";
            }
        },
        hexagon: {
            n: 14,
            f: function (p) {
                var o = d3.round(p, 2),
                    n = d3.round(p / 2, 2),
                    m = d3.round(p * Math.sqrt(3) / 2, 2);
                return "M" + m + ",-" + n + "V" + n + "L0," + o + "L-" + m + "," + n + "V-" + n + "L0,-" + o + "Z";
            }
        },
        hexagon2: {
            n: 15,
            f: function (o) {
                var n = d3.round(o, 2),
                    m = d3.round(o / 2, 2),
                    p = d3.round(o * Math.sqrt(3) / 2, 2);
                return "M-" + m + "," + p + "H" + m + "L" + n + ",0L" + m + ",-" + p + "H-" + m + "L-" + n + ",0Z";
            }
        },
        octagon: {
            n: 16,
            f: function (o) {
                var n = d3.round(o * 0.924, 2),
                    m = d3.round(o * 0.383, 2);
                return "M-" + m + ",-" + n + "H" + m + "L" + n + ",-" + m + "V" + m + "L" + m + "," + n + "H-" + m + "L-" + n + "," + m + "V-" + m + "Z";
            }
        },
        star: {
            n: 17,
            f: function (m) {
                var q = m * 1.4,
                    p = d3.round(q * 0.225, 2),
                    o = d3.round(q * 0.951, 2),
                    n = d3.round(q * 0.363, 2),
                    x = d3.round(q * 0.588, 2),
                    w = d3.round(-q, 2),
                    v = d3.round(q * -0.309, 2),
                    u = d3.round(q * 0.118, 2),
                    t = d3.round(q * 0.809, 2),
                    s = d3.round(q * 0.382, 2);
                return "M" + p + "," + v + "H" + o + "L" + n + "," + u + "L" + x + "," + t + "L0," + s + "L-" + x + "," + t + "L-" + n + "," + u + "L-" + o + "," + v + "H-" + p + "L0," + w + "Z";
            }
        },
        hexagram: {
            n: 18,
            f: function (o) {
                var p = d3.round(o * 0.66, 2),
                    n = d3.round(o * 0.38, 2),
                    m = d3.round(o * 0.76, 2);
                return "M-" + m + ",0l-" + n + ",-" + p + "h" + m + "l" + n + ",-" + p + "l" + n + "," + p + "h" + m + "l-" + n + "," + p + "l" + n + "," + p + "h-" + m + "l-" + n + "," + p + "l-" + n + ",-" + p + "h-" + m + "Z";
            }
        },
        "star-triangle-up": {
            n: 19,
            f: function (p) {
                var m = d3.round(p * Math.sqrt(3) * 0.8, 2),
                    o = d3.round(p * 0.8, 2),
                    n = d3.round(p * 1.6, 2),
                    q = d3.round(p * 4, 2),
                    s = "A " + q + "," + q + " 0 0 1 ";
                return "M-" + m + "," + o + s + m + "," + o + s + "0,-" + n + s + "-" + m + "," + o + "Z";
            }
        },
        "star-triangle-down": {
            n: 20,
            f: function (p) {
                var m = d3.round(p * Math.sqrt(3) * 0.8, 2),
                    o = d3.round(p * 0.8, 2),
                    n = d3.round(p * 1.6, 2),
                    q = d3.round(p * 4, 2),
                    s = "A " + q + "," + q + " 0 0 1 ";
                return "M" + m + ",-" + o + s + "-" + m + ",-" + o + s + "0," + n + s + m + ",-" + o + "Z";
            }
        },
        "star-square": {
            n: 21,
            f: function (n) {
                var m = d3.round(n * 1.1, 2),
                    o = d3.round(n * 2, 2),
                    p = "A " + o + "," + o + " 0 0 1 ";
                return "M-" + m + ",-" + m + p + "-" + m + "," + m + p + m + "," + m + p + m + ",-" + m + p + "-" + m + ",-" + m + "Z";
            }
        },
        "star-diamond": {
            n: 22,
            f: function (n) {
                var m = d3.round(n * 1.4, 2),
                    o = d3.round(n * 1.9, 2),
                    p = "A " + o + "," + o + " 0 0 1 ";
                return "M-" + m + ",0" + p + "0," + m + p + m + ",0" + p + "0,-" + m + p + "-" + m + ",0Z";
            }
        },
        "diamond-tall": {
            n: 23,
            f: function (n) {
                var m = d3.round(n * 0.7, 2),
                    o = d3.round(n * 1.4, 2);
                return "M0," + o + "L" + m + ",0L0,-" + o + "L-" + m + ",0Z";
            }
        },
        "diamond-wide": {
            n: 24,
            f: function (n) {
                var m = d3.round(n * 1.4, 2),
                    o = d3.round(n * 0.7, 2);
                return "M0," + o + "L" + m + ",0L0,-" + o + "L-" + m + ",0Z";
            }
        },
        hourglass: {
            n: 25,
            f: function (n) {
                var m = d3.round(n, 2);
                return "M" + m + "," + m + "H-" + m + "L" + m + ",-" + m + "H-" + m + "Z";
            },
            noDot: true
        },
        bowtie: {
            n: 26,
            f: function (n) {
                var m = d3.round(n, 2);
                return "M" + m + "," + m + "V-" + m + "L-" + m + "," + m + "V-" + m + "Z";
            },
            noDot: true
        },
        "circle-cross": {
            n: 27,
            f: function (n) {
                var m = d3.round(n, 2);
                return "M0," + m + "V-" + m + "M" + m + ",0H-" + m + "M" + m + ",0A" + m + "," + m + " 0 1,1 0,-" + m + "A" + m + "," + m + " 0 0,1 " + m + ",0Z";
            },
            needLine: true,
            noDot: true
        },
        "circle-x": {
            n: 28,
            f: function (n) {
                var m = d3.round(n, 2),
                    o = d3.round(n / Math.sqrt(2), 2);
                return "M" + o + "," + o + "L-" + o + ",-" + o + "M" + o + ",-" + o + "L-" + o + "," + o + "M" + m + ",0A" + m + "," + m + " 0 1,1 0,-" + m + "A" + m + "," + m + " 0 0,1 " + m + ",0Z";
            },
            needLine: true,
            noDot: true
        },
        "square-cross": {
            n: 29,
            f: function (n) {
                var m = d3.round(n, 2);
                return "M0," + m + "V-" + m + "M" + m + ",0H-" + m + "M" + m + "," + m + "H-" + m + "V-" + m + "H" + m + "Z";
            },
            needLine: true,
            noDot: true
        },
        "square-x": {
            n: 30,
            f: function (n) {
                var m = d3.round(n, 2);
                return "M" + m + "," + m + "L-" + m + ",-" + m + "M" + m + ",-" + m + "L-" + m + "," + m + "M" + m + "," + m + "H-" + m + "V-" + m + "H" + m + "Z";
            },
            needLine: true,
            noDot: true
        },
        "diamond-cross": {
            n: 31,
            f: function (n) {
                var m = d3.round(n * 1.3, 2);
                return "M" + m + ",0L0," + m + "L-" + m + ",0L0,-" + m + "ZM0,-" + m + "V" + m + "M-" + m + ",0H" + m;
            },
            needLine: true,
            noDot: true
        },
        "diamond-x": {
            n: 32,
            f: function (o) {
                var n = d3.round(o * 1.3, 2),
                    m = d3.round(o * 0.65, 2);
                return "M" + n + ",0L0," + n + "L-" + n + ",0L0,-" + n + "ZM-" + m + ",-" + m + "L" + m + "," + m + "M-" + m + "," + m + "L" + m + ",-" + m;
            },
            needLine: true,
            noDot: true
        },
        "cross-thin": {
            n: 33,
            f: function (m) {
                var n = d3.round(m * 1.4, 2);
                return "M0," + n + "V-" + n + "M" + n + ",0H-" + n;
            },
            needLine: true,
            noDot: true
        },
        "x-thin": {
            n: 34,
            f: function (m) {
                var n = d3.round(m, 2);
                return "M" + n + "," + n + "L-" + n + ",-" + n + "M" + n + ",-" + n + "L-" + n + "," + n;
            },
            needLine: true,
            noDot: true
        },
        asterisk: {
            n: 35,
            f: function (n) {
                var o = d3.round(n * 1.2, 2);
                var m = d3.round(n * 0.85, 2);
                return "M0," + o + "V-" + o + "M" + o + ",0H-" + o + "M" + m + "," + m + "L-" + m + ",-" + m + "M" + m + ",-" + m + "L-" + m + "," + m;
            },
            needLine: true,
            noDot: true
        },
        hash: {
            n: 36,
            f: function (o) {
                var n = d3.round(o / 2, 2),
                    m = d3.round(o, 2);
                return "M" + n + "," + m + "V-" + m + "m-" + m + ",0V" + m + "M" + m + "," + n + "H-" + m + "m0,-" + m + "H" + m;
            },
            needLine: true
        },
        "y-up": {
            n: 37,
            f: function (p) {
                var m = d3.round(p * 1.2, 2),
                    o = d3.round(p * 1.6, 2),
                    n = d3.round(p * 0.8, 2);
                return "M-" + m + "," + n + "L0,0M" + m + "," + n + "L0,0M0,-" + o + "L0,0";
            },
            needLine: true,
            noDot: true
        },
        "y-down": {
            n: 38,
            f: function (p) {
                var m = d3.round(p * 1.2, 2),
                    o = d3.round(p * 1.6, 2),
                    n = d3.round(p * 0.8, 2);
                return "M-" + m + ",-" + n + "L0,0M" + m + ",-" + n + "L0,0M0," + o + "L0,0";
            },
            needLine: true,
            noDot: true
        },
        "y-left": {
            n: 39,
            f: function (o) {
                var p = d3.round(o * 1.2, 2),
                    n = d3.round(o * 1.6, 2),
                    m = d3.round(o * 0.8, 2);
                return "M" + m + "," + p + "L0,0M" + m + ",-" + p + "L0,0M-" + n + ",0L0,0";
            },
            needLine: true,
            noDot: true
        },
        "y-right": {
            n: 40,
            f: function (o) {
                var p = d3.round(o * 1.2, 2),
                    n = d3.round(o * 1.6, 2),
                    m = d3.round(o * 0.8, 2);
                return "M-" + m + "," + p + "L0,0M-" + m + ",-" + p + "L0,0M" + n + ",0L0,0";
            },
            needLine: true,
            noDot: true
        },
        "line-ew": {
            n: 41,
            f: function (m) {
                var n = d3.round(m * 1.4, 2);
                return "M" + n + ",0H-" + n;
            },
            needLine: true,
            noDot: true
        },
        "line-ns": {
            n: 42,
            f: function (m) {
                var n = d3.round(m * 1.4, 2);
                return "M0," + n + "V-" + n;
            },
            needLine: true,
            noDot: true
        },
        "line-ne": {
            n: 43,
            f: function (m) {
                var n = d3.round(m, 2);
                return "M" + n + ",-" + n + "L-" + n + "," + n;
            },
            needLine: true,
            noDot: true
        },
        "line-nw": {
            n: 44,
            f: function (m) {
                var n = d3.round(m, 2);
                return "M" + n + "," + n + "L-" + n + ",-" + n;
            },
            needLine: true,
            noDot: true
        }
    };
    g.symbolNames = [];
    g.symbolFuncs = [];
    g.symbolNeedLines = {};
    g.symbolNoDot = {};
    Object.keys(e).forEach(function (m) {
        var n = e[m];
        g.symbolNames[n.n] = m;
        g.symbolFuncs[n.n] = n.f;
        if (n.needLine) {
            g.symbolNeedLines[n.n] = true;
        }
        if (n.noDot) {
            g.symbolNoDot[n.n] = true;
        }
    });
    var f = g.symbolNames.length,
        i = "M0,0.5L0.5,0L0,-0.5L-0.5,0Z";
    g.symbolNumber = function (n) {
        if (typeof n === "string") {
            var m = 0;
            if (n.indexOf("-open") > 0) {
                m = 100;
                n = n.replace("-open", "");
            }
            if (n.indexOf("-dot") > 0) {
                m += 200;
                n = n.replace("-dot", "");
            }
            n = g.symbolNames.indexOf(n);
            if (n >= 0) {
                n += m;
            }
        }
        if ((n % 100 >= f) || n >= 400) {
            return 0;
        }
        return Math.floor(Math.max(n, 0));
    };
    g.pointStyle = function (o, n) {
        if (["scatter", "box"].indexOf(n.type) !== -1) {
            var p, m = n.msr || 1,
                q = (n.msm === "area") ? function (r) {
                    return Math.sqrt(r / m);
                } : function (r) {
                    return r / m;
                };
            o.attr("d", function (t) {
                if (t.ms + 1) {
                    p = q(t.ms / 2);
                } else {
                    p = ((n.ms + 1 || (t.t ? t.t.ms : 0) + 1) - 1) / 2;
                }
                t.mrc = p;
                if (!$.isNumeric(p) || p < 0) {
                    p = 3;
                }
                var r = g.symbolNumber(t.mx || n.mx || (t.t ? t.t.mx : "")),
                    s = r % 100;
                t.om = r % 200 >= 100;
                return g.symbolFuncs[s](p) + (r >= 200 ? i : "");
            }).style("opacity", function (r) {
                return (r.mo + 1 || n.mo + 1 || (r.t ? r.t.mo : 0) + 1) - 1;
            });
        }
        var u = {
            m: g.tryColorscale(o, n, "m"),
            ml: g.tryColorscale(o, n, "ml"),
            so: g.tryColorscale(o, n, "so"),
            sol: g.tryColorscale(o, n, "sol")
        };
        o.each(function (x) {
            var A = (x.so) ? "so" : "m",
                v = A + "lw",
                y = A + "c",
                s = A + "lc",
                B = (x[v] + 1 || n[v] + 1 || (x.t ? x.t[v] : 0) + 1) - 1,
                r = d3.select(this),
                t, z;
            if (x[y]) {
                x[y + "c"] = t = u[A](x[y]);
            } else {
                t = n[y] || (x.t ? x.t[y] : "");
            } if (x.om) {
                if (!B) {
                    B = 1;
                }
                r.call(g.strokeColor, t).style({
                    "stroke-width": B + "px",
                    fill: "none"
                });
            } else {
                r.style("stroke-width", B + "px").call(g.fillColor, t);
                if (B) {
                    if (x[s]) {
                        x[s + "c"] = z = u[A + "l"](x[s]);
                    } else {
                        z = n[s] || (x.t ? x.t[s] : "");
                    }
                    r.call(g.strokeColor, z);
                }
            }
        });
    };
    g.tryColorscale = function (y, x, p) {
        if ((p + "scl") in x && (p + "cmin") in x && (p + "cmax") in x) {
            var v = x[p + "scl"],
                n = x[p + "cmin"],
                u = x[p + "cmax"],
                w = x[p + "cauto"];
            if (typeof v === "string") {
                v = Plotly.colorscales[v];
            }
            if (!v) {
                v = Plotly.defaultColorscale;
            }
            if (w || !$.isNumeric(n) || !$.isNumeric(u)) {
                n = u = null;
                y.each(function (s) {
                    var r = s[p + "c"];
                    if ($.isNumeric(r)) {
                        if (n === null || n > r) {
                            n = r;
                        }
                        if (u === null || u < r) {
                            u = r;
                        }
                    }
                });
                x[p + "cmin"] = n;
                x[p + "cmax"] = u;
            }
            var q = v.map(function (r) {
                    return n + r[0] * (u - n);
                }),
                m = v.map(function (r) {
                    return r[1];
                }),
                o = d3.scale.linear().domain(q).interpolate(d3.interpolateRgb).range(m);
            return function (r) {
                return $.isNumeric(r) ? o(r) : r;
            };
        } else {
            return Plotly.Lib.identity;
        }
    };
    var a = {
            start: 1,
            end: -1,
            middle: 0,
            bottom: 1,
            top: -1
        },
        k = 1.3;
    g.textPointStyle = function (n, m) {
        n.each(function (x) {
            var s = d3.select(this);
            if (!x.tx) {
                s.remove();
                return;
            }
            var y = x.tp || m.tp || (x.t ? x.t.tp : ""),
                z = y.indexOf("top") !== -1 ? "top" : y.indexOf("bottom") !== -1 ? "bottom" : "middle",
                w = y.indexOf("left") !== -1 ? "end" : y.indexOf("right") !== -1 ? "start" : "middle",
                C = x.ts || m.ts || (x.t ? x.t.tf : ""),
                q = m.mode.indexOf("markers") === -1 ? 0 : (((x.ms + 1 || m.ms + 1 || (x.t ? x.t.ms : 0) + 1) - 1) / 1.6 + 1);
            s.style("opacity", (x.mo + 1 || m.mo + 1 || (x.t ? x.t.mo : 0) + 1) - 1).call(g.font, x.tf || m.tf || (x.t ? x.t.tf : ""), C, x.tc || m.tc || (x.t ? x.t.tc : "")).attr("text-anchor", w).text(x.tx).call(Plotly.util.convertToTspans);
            var u = d3.select(this.parentNode),
                t = s.selectAll("tspan.line"),
                o = ((t[0].length || 1) - 1) * k + 1,
                B = a[w] * q,
                A = C * 0.75 + a[z] * q + (a[z] - 1) * o * C / 2;
            u.attr("transform", "translate(" + B + "," + A + ")");
            if (o > 1) {
                t.attr({
                    x: s.attr("x"),
                    y: s.attr("y")
                });
            }
        });
    };
    var b = 0.5;
    g.smoothopen = function (q, o) {
        if (q.length < 3) {
            return "M" + q.join("L");
        }
        var p = "M" + q[0],
            m = [],
            n;
        for (n = 1; n < q.length - 1; n++) {
            m.push(l(q[n - 1], q[n], q[n + 1], o));
        }
        p += "Q" + m[0][0] + " " + q[1];
        for (n = 2; n < q.length - 1; n++) {
            p += "C" + m[n - 2][1] + " " + m[n - 1][0] + " " + q[n];
        }
        p += "Q" + m[q.length - 3][1] + " " + q[q.length - 1];
        return p;
    };
    g.smoothclosed = function (r, p) {
        if (r.length < 3) {
            return "M" + r.join("L") + "Z";
        }
        var q = "M" + r[0],
            o = r.length - 1,
            m = [l(r[o], r[0], r[1], p)],
            n;
        for (n = 1; n < o; n++) {
            m.push(l(r[n - 1], r[n], r[n + 1], p));
        }
        m.push(l(r[o - 1], r[o], r[0], p));
        for (n = 1; n <= o; n++) {
            q += "C" + m[n - 1][1] + " " + m[n][0] + " " + r[n];
        }
        q += "C" + m[o][1] + " " + m[0][0] + " " + r[0] + "Z";
        return q;
    };

    function l(y, p, z, w) {
        var u = y[0] - p[0],
            s = y[1] - p[1],
            o = z[0] - p[0],
            m = z[1] - p[1],
            t = Math.pow(u * u + s * s, b / 2),
            n = Math.pow(o * o + m * m, b / 2),
            x = (n * n * u - t * t * o) * w,
            v = (n * n * s - t * t * m) * w,
            r = 3 * n * (t + n),
            q = 3 * t * (t + n);
        return [
            [d3.round(p[0] + (r && x / r), 2), d3.round(p[1] + (r && v / r), 2)],
            [d3.round(p[0] - (q && x / q), 2), d3.round(p[1] - (q && v / q), 2)]
        ];
    }
    var j = {
        hv: function (n, m) {
            return "H" + d3.round(m[0], 2) + "V" + d3.round(m[1], 2);
        },
        vh: function (n, m) {
            return "V" + d3.round(m[1], 2) + "H" + d3.round(m[0], 2);
        },
        hvh: function (n, m) {
            return "H" + d3.round((n[0] + m[0]) / 2, 2) + "V" + d3.round(m[1], 2) + "H" + d3.round(m[0], 2);
        },
        vhv: function (n, m) {
            return "V" + d3.round((n[1] + m[1]) / 2, 2) + "H" + d3.round(m[0], 2) + "V" + d3.round(m[1], 2);
        }
    };
    var h = function (n, m) {
        return "L" + d3.round(m[0], 2) + "," + d3.round(m[1], 2);
    };
    g.steps = function (m) {
        var n = j[m] || h;
        return function (q) {
            var p = "M" + d3.round(q[0][0], 2) + "," + d3.round(q[0][1], 2);
            for (var o = 1; o < q.length; o++) {
                p += n(q[o - 1], q[o]);
            }
            return p;
        };
    };
    var c = [],
        d = 10000;
    g.bBox = function (s) {
        var r = s.attributes["data-bb"];
        if (r) {
            return c[r.value];
        }
        var q = d3.select("#js-plotly-tester"),
            m = q.node();
        var p = s.cloneNode(true);
        m.appendChild(p);
        d3.select(p).attr({
            x: 0,
            y: 0,
            transform: ""
        });
        var o = p.getBoundingClientRect(),
            n = q.select(".js-reference-point").node().getBoundingClientRect();
        m.removeChild(p);
        var t = {
            height: o.height,
            width: o.width,
            left: o.left - n.left,
            top: o.top - n.top,
            right: o.right - n.left,
            bottom: o.bottom - n.top
        };
        if (c.length >= d) {
            $("[data-bb]").attr("data-bb", null);
            c = [];
        }
        s.setAttribute("data-bb", c.length);
        c.push(t);
        return t;
    };
}());
(function () {
    var m = Plotly.Axes = {};
    m.defaultAxis = function (t) {
        return $.extend({
            range: [-1, 6],
            type: "-",
            showline: false,
            mirror: false,
            linecolor: "#444",
            linewidth: 1,
            tick0: 0,
            dtick: 1,
            ticks: "",
            ticklen: 5,
            tickwidth: 1,
            tickcolor: "#444",
            nticks: 0,
            showticklabels: true,
            tickangle: "auto",
            exponentformat: "B",
            showexponent: "all",
            showgrid: true,
            gridcolor: "#eee",
            gridwidth: 1,
            autorange: true,
            rangemode: "normal",
            autotick: true,
            zeroline: true,
            zerolinecolor: "#444",
            zerolinewidth: 1,
            titlefont: {
                family: "",
                size: 0,
                color: ""
            },
            tickfont: {
                family: "",
                size: 0,
                color: ""
            },
            overlaying: false,
            domain: [0, 1],
            position: 0
        }, t || {});
    };
    m.clearTypes = function (u, t) {
        if (!$.isArray(t) || !t.length) {
            t = (u.data || []).map(function (w, v) {
                return v;
            });
        }
        t.forEach(function (v) {
            var w = u.data[v];
            m.getFromId(u, w.xaxis || "x").type = "-";
            m.getFromId(u, w.yaxis || "y").type = "-";
        });
    };
    m.setTypes = function (u) {
        (u.data || []).forEach(function (v) {
            if (v.type && v.type.indexOf("Polar") !== -1) {
                return;
            }["x", "y"].forEach(function (w) {
                if (v[w + "axis"] === w + "1") {
                    v[w + "axis"] = w;
                }
                var y = v[w + "axis"] || w,
                    x = m.id2name(y);
                if (!u.layout[x]) {
                    u.layout[x] = m.defaultAxis({
                        range: [-1, w === "x" ? 6 : 4],
                        side: w === "x" ? "bottom" : "left"
                    });
                }
            });
        });
        var t = m.list(u);
        t.forEach(function (v) {
            m.initAxis(u, v);
        });
        if (u.data && u.data.length) {
            t.forEach(i);
        }
        t.forEach(m.setConvert);
    };
    m.initAxis = function (w, v) {
        v._td = w;
        var t = Object.keys(w.layout).filter(function (x) {
            return w.layout[x] === v;
        })[0];
        if (t) {
            if (t === "xaxis1" || t === "yaxis1") {
                var u = t.substr(0, 5);
                w.layout[u] = w.layout[t];
                delete w.layout[t];
                t = u;
            }
            v._name = t;
            v._id = m.name2id(v._name);
        }
        if (!v._categories) {
            v._categories = [];
        }
        v.setScale = function () {
            var x = v._td.layout._size,
                y;
            if (!v.range || v.range.length !== 2 || v.range[0] === v.range[1]) {
                v.range = [-1, 1];
            }
            for (y = 0; y < 2; y++) {
                if (!$.isNumeric(v.range[y])) {
                    v.range[y] = $.isNumeric(v.range[1 - y]) ? (v.range[1 - y] * (y ? 10 : 0.1)) : (y ? 1 : -1);
                }
                if (v.range[y] < -(Number.MAX_VALUE / 2)) {
                    v.range[y] = -(Number.MAX_VALUE / 2);
                } else {
                    if (v.range[y] > Number.MAX_VALUE / 2) {
                        v.range[y] = Number.MAX_VALUE / 2;
                    }
                }
            }
            if (v._id.charAt(0) === "y") {
                v._offset = x.t + (1 - v.domain[1]) * x.h;
                v._length = x.h * (v.domain[1] - v.domain[0]);
                v._m = v._length / (v.range[0] - v.range[1]);
                v._b = -v._m * v.range[1];
            } else {
                v._offset = x.l + v.domain[0] * x.w;
                v._length = x.w * (v.domain[1] - v.domain[0]);
                v._m = v._length / (v.range[1] - v.range[0]);
                v._b = -v._m * v.range[0];
            }
        };
        if (!v.anchor) {
            v.anchor = m.counterLetter(v._id);
        }
        if (!v.domain || v.domain.length !== 2 || v.domain[0] >= v.domain[1] || v.domain[0] < 0 || v.domain[1] > 1) {
            v.domain = [0, 1];
        }
        if (v.title === undefined) {
            v.title = "Click to enter " + v._id.toUpperCase() + " axis title";
        }
        return v;
    };
    m.id2name = function (t) {
        return t && t.charAt(0) + "axis" + t.substr(1);
    };
    m.name2id = function (t) {
        return t && t.charAt(0) + t.substr(5);
    };
    m.counterLetter = function (t) {
        return {
            x: "y",
            y: "x"
        }[t.charAt(0)];
    };

    function i(w) {
        var u = w._id.charAt(0),
            v = (w._td.data || []).filter(function (y) {
                return (y[u + "axis"] || u) === w._id;
            });
        if (!w.type) {
            if (w.isdate) {
                w.type = "date";
            } else {
                if (w.islog) {
                    w.type = "log";
                } else {
                    if (w.isdate === false && w.islog === false) {
                        w.type = "linear";
                    }
                }
            }
        }
        if (w.autorange === "withzero") {
            w.autorange = true;
            w.automode = "withzero";
        }
        delete w.islog;
        delete w.isdate;
        delete w.categories;
        if (!v.length) {
            return;
        }
        var x = v[0];
        if (!x) {
            return;
        }
        var t = x.type || "scatter";
        if (["linear", "log", "date", "category"].indexOf(w.type) !== -1) {
            return;
        }
        if (t === "histogram" && u === {
            v: "y",
            h: "x"
        }[x.orientation || "v"]) {
            w.type = "linear";
            return;
        }
        if (x.type === "box" && u === "x" && !("x" in x) && !("x0" in x)) {
            w.type = m.autoType(v.filter(function (y) {
                return y.type === "box";
            }).map(function (y) {
                if ("x" in y) {
                    return y.x[0];
                }
                if ("name" in y) {
                    return y.name;
                }
                return "text";
            }));
        } else {
            w.type = m.autoType((u in x) ? x[u] : [x[u + "0"]]);
        }
    }
    m.autoType = function (t) {
        if (m.moreDates(t)) {
            return "date";
        }
        if (m.category(t)) {
            return "category";
        }
        if (e(t)) {
            return "linear";
        } else {
            return "-";
        }
    };

    function e(t) {
        return t && t.some(function (u) {
            return $.isNumeric(u);
        });
    }
    m.moreDates = function (v) {
        var u = 0,
            x = 0,
            y = Math.max(1, (v.length - 1) / 1000),
            t;
        for (var w = 0; w < v.length; w += y) {
            t = v[Math.round(w)];
            if (Plotly.Lib.isDateTime(t)) {
                u += 1;
            }
            if ($.isNumeric(t)) {
                x += 1;
            }
        }
        return (u > x * 2);
    };
    m.category = function (v) {
        function x(A) {
            return !$.isNumeric(A) && ["", "None"].indexOf("v") === -1;
        }
        var z = Math.max(1, (v.length - 1) / 1000),
            y = 0,
            u = 0,
            t;
        for (var w = 0; w < v.length; w += z) {
            t = m.cleanDatum(v[Math.round(w)]);
            if ($.isNumeric(t)) {
                y++;
            } else {
                if (t && x(t)) {
                    u++;
                }
            }
        }
        return u > y * 2;
    };
    m.cleanDatum = function (u) {
        try {
            if (typeof u === "object" && u !== null && u.getTime) {
                return Plotly.Lib.ms2DateTime(u);
            }
            if (typeof u !== "string" && !$.isNumeric(u)) {
                return "";
            }
            u = u.toString().replace(/['"%,$# ]/g, "");
        } catch (t) {
            console.log(t, u);
        }
        return u;
    };
    m.setConvert = function (w) {
        function t(A) {
            return (A > 0) ? Math.log(A) / Math.LN10 : null;
        }

        function z(A) {
            return Math.pow(10, A);
        }

        function u(A) {
            return $.isNumeric(A) ? Number(A) : null;
        }
        w.c2l = (w.type === "log") ? t : u;
        w.l2c = (w.type === "log") ? z : u;
        var v = 10;
        w.l2p = function (A) {
            return d3.round(Plotly.Lib.constrain(w._b + w._m * A, -v * w._length, (1 + v) * w._length), 2);
        };
        w.p2l = function (A) {
            return (A - w._b) / w._m;
        };
        w.c2p = function (B, E) {
            var D = w.c2l(B);
            if ($.isNumeric(D)) {
                return w.l2p(D);
            }
            if (E && $.isNumeric(B)) {
                var C = w.range[0],
                    A = w.range[1];
                return w.l2p(0.5 * (C + A - 3 * v * Math.abs(C - A)));
            }
        };
        w.p2c = function (A) {
            return w.l2c(w.p2l(A));
        };
        if (["linear", "log", "-"].indexOf(w.type) !== -1) {
            w.c2d = u;
            w.d2c = function (A) {
                A = m.cleanDatum(A);
                return $.isNumeric(A) ? Number(A) : undefined;
            };
        } else {
            if (w.type === "date") {
                w.c2d = function (A) {
                    return $.isNumeric(A) ? Plotly.Lib.ms2DateTime(A) : null;
                };
                w.d2c = function (A) {
                    return (typeof A === "number") ? A : Plotly.Lib.dateTime2ms(A);
                };
                if (w.range && w.range.length > 1) {
                    try {
                        var y = w.range.map(Plotly.Lib.dateTime2ms);
                        if (!$.isNumeric(w.range[0]) && $.isNumeric(y[0])) {
                            w.range[0] = y[0];
                        }
                        if (!$.isNumeric(w.range[1]) && $.isNumeric(y[1])) {
                            w.range[1] = y[1];
                        }
                    } catch (x) {
                        console.log(x, w.range);
                    }
                }
            } else {
                if (w.type === "category") {
                    w.c2d = function (A) {
                        return w._categories[Math.round(A)];
                    };
                    w.d2c = function (A) {
                        if (!w._categories) {
                            w._categories = [];
                        }
                        if (w._categories.indexOf(A) === -1) {
                            w._categories.push(A);
                        }
                        var B = w._categories.indexOf(A);
                        return B === -1 ? undefined : B;
                    };
                } else {
                    console.log("unknown axis type " + w.type);
                }
            }
        }
        w.makeCalcdata = function (E, B) {
            if (B in E) {
                return E[B].map(w.d2c);
            } else {
                var A = ((B + "0") in E) ? w.d2c(E[B + "0"]) : 0,
                    C = (E["d" + B]) ? Number(E["d" + B]) : 1,
                    D = E[{
                        x: "y",
                        y: "x"
                    }[B]];
                return D.map(function (F, G) {
                    return A + G * C;
                });
            }
        };
        w._min = [];
        w._max = [];
        w._minDtick = null;
        w._forceTick0 = null;
    };
    m.minDtick = function (v, u, w, t) {
        if (["log", "category"].indexOf(v.type) !== -1 || !t) {
            v._minDtick = 0;
        } else {
            if (v._minDtick === null) {
                v._minDtick = u;
                v._forceTick0 = w;
            } else {
                if (v._minDtick) {
                    if ((v._minDtick / u + 0.000001) % 1 < 0.000002 && (((w - v._forceTick0) / u % 1) + 1.000001) % 1 < 0.000002) {
                        v._minDtick = u;
                        v._forceTick0 = w;
                    } else {
                        if ((u / v._minDtick + 0.000001) % 1 > 0.000002 || (((w - v._forceTick0) / v._minDtick % 1) + 1.000001) % 1 > 0.000002) {
                            v._minDtick = 0;
                        }
                    }
                }
            }
        }
    };
    m.doAutoRange = function (t) {
        function C(H) {
            return H.val;
        }
        if (!t._length) {
            t.setScale();
        }
        if (t.autorange && t._min && t._max && t._min.length && t._max.length) {
            var B, z, u, x, w, E, y, v, F = 0,
                G = Math.min.apply(null, t._min.map(C)),
                A = Math.max.apply(null, t._max.map(C)),
                D = (t.range && t.range[1] < t.range[0]);
            if (t.autorange === "reversed") {
                D = true;
                t.autorange = true;
            }
            for (B = 0; B < t._min.length; B++) {
                u = t._min[B];
                for (z = 0; z < t._max.length; z++) {
                    x = t._max[z];
                    v = x.val - u.val;
                    y = t._length - u.pad - x.pad;
                    if (v > 0 && y > 0 && v / y > F) {
                        w = u;
                        E = x;
                        F = v / y;
                    }
                }
            }
            if (G === A) {
                t.range = D ? [G + 1, G - 1] : [G - 1, G + 1];
            } else {
                if (F) {
                    if (t.type === "linear" || t.type === "-") {
                        if (t.rangemode === "tozero" && w.val >= 0) {
                            w = {
                                val: 0,
                                pad: 0
                            };
                        } else {
                            if (t.rangemode === "nonnegative") {
                                if (w.val - F * w.pad < 0) {
                                    w = {
                                        val: 0,
                                        pad: 0
                                    };
                                }
                                if (E.val < 0) {
                                    E = {
                                        val: 1,
                                        pad: 0
                                    };
                                }
                            }
                        }
                        F = (E.val - w.val) / (t._length - w.pad - E.pad);
                    }
                    t.range = [w.val - F * w.pad, E.val + F * E.pad];
                    if (t.range[0] === t.range[1]) {
                        t.range = [t.range[0] - 1, t.range[0] + 1];
                    }
                    if (D) {
                        t.range.reverse();
                    }
                }
            }
        }
    };
    var q = Number.MAX_VALUE / 2;
    m.expand = function (B, Q, u) {
        if (!B.autorange || !Q) {
            return;
        }
        if (!B._min) {
            B._min = [];
        }
        if (!B._max) {
            B._max = [];
        }
        if (!u) {
            u = {};
        }
        if (!B._m) {
            B.setScale();
        }
        var M = Q.length,
            P = u.padded ? B._length * 0.05 : 0,
            w = u.tozero && (B.type === "linear" || B.type === "-"),
            L, J, C, N, F, G, O, H, E, x, z;

        function y(S) {
            if ($.isArray(S)) {
                return function (v) {
                    return Math.max(Number(S[v] || 0), 0);
                };
            } else {
                var R = Math.max(Number(S || 0), 0);
                return function () {
                    return R;
                };
            }
        }
        var D = y((B._m > 0 ? u.ppadplus : u.ppadminus) || u.ppad || 0),
            A = y((B._m > 0 ? u.ppadminus : u.ppadplus) || u.ppad || 0),
            t = y(u.vpadplus || u.vpad),
            I = y(u.vpadminus || u.vpad);

        function K(R) {
            N = Q[R];
            if (!$.isNumeric(N)) {
                return;
            }
            O = D(R) + P;
            H = A(R) + P;
            x = N - I(R);
            z = N + t(R);
            if (B.type === "log" && x < z / 10) {
                x = z / 10;
            }
            F = B.c2l(x);
            G = B.c2l(z);
            if (w) {
                F = Math.min(0, F);
                G = Math.max(0, G);
            }

            function v(S) {
                return $.isNumeric(S) && Math.abs(S) < q;
            }
            if (v(F)) {
                E = true;
                for (J = 0; J < B._min.length && E; J++) {
                    C = B._min[J];
                    if (C.val <= F && C.pad >= H) {
                        E = false;
                    } else {
                        if (C.val >= F && C.pad <= H) {
                            B._min.splice(J, 1);
                            J--;
                        }
                    }
                }
                if (E) {
                    B._min.push({
                        val: F,
                        pad: (w && F === 0) ? 0 : H
                    });
                }
            }
            if (v(G)) {
                E = true;
                for (J = 0; J < B._max.length && E; J++) {
                    C = B._max[J];
                    if (C.val >= G && C.pad >= O) {
                        E = false;
                    } else {
                        if (C.val <= G && C.pad <= O) {
                            B._max.splice(J, 1);
                            J--;
                        }
                    }
                }
                if (E) {
                    B._max.push({
                        val: G,
                        pad: (w && G === 0) ? 0 : O
                    });
                }
            }
        }
        for (L = 0; L < 6; L++) {
            K(L);
        }
        for (L = M - 1; L > 5; L--) {
            K(L);
        }
    };
    m.autoBin = function (K, B, D, u) {
        var E = Plotly.Lib.aggNums(Math.min, null, K),
            F = Plotly.Lib.aggNums(Math.max, null, K);
        if (B.type === "category") {
            return {
                start: E - 0.5,
                end: F + 0.5,
                size: 1
            };
        } else {
            var A;
            if (D) {
                A = ((F - E) / D);
            } else {
                var z = Plotly.Lib.distinctVals(K),
                    G = Math.pow(10, Math.floor(Math.log(z.minDiff) / Math.LN10)),
                    t = G * Plotly.Lib.roundUp(z.minDiff / G, [0.9, 1.9, 4.9], true);
                A = Math.max(t, 2 * Plotly.Lib.stdev(K) / Math.pow(K.length, u ? 0.25 : 0.4));
            }
            var x = {
                type: B.type === "log" ? "linear" : B.type,
                range: [E, F]
            };
            m.autoTicks(x, A);
            var y = m.tickIncrement(m.tickFirst(x), x.dtick, "reverse");
            var C = 0,
                I = 0,
                w = 0;
            for (var H = 0; H < K.length; H++) {
                if (K[H] % 1 === 0) {
                    I++;
                } else {
                    if (!$.isNumeric(K[H])) {
                        w++;
                    }
                } if ((1 + (K[H] - y) * 100 / x.dtick) % 100 < 2) {
                    C++;
                }
            }
            if (I + w === K.length && B.type !== "date") {
                if (x.dtick < 1) {
                    x.dtick = 1;
                    y = E - 0.5;
                } else {
                    y -= 0.5;
                }
            } else {
                if (C > (K.length - w) / 2) {
                    var J = (m.tickIncrement(y, x.dtick) - y) / 2;
                    y += (y + J < E) ? J : -J;
                }
            }
            var v = y;
            while (v < F) {
                v = m.tickIncrement(v, x.dtick);
            }
            return {
                start: y,
                end: v,
                size: x.dtick
            };
        }
    };
    m.calcTicks = function g(z) {
        if (z.autotick || !z.dtick) {
            var w = (z.nticks || Plotly.Lib.constrain(z._length / (z._id.charAt(0) === "y" ? 40 : 80), 4, 9) + 1);
            m.autoTicks(z, Math.abs(z.range[1] - z.range[0]) / w);
            if (z._minDtick > 0 && z.dtick < z._minDtick * 2) {
                z.dtick = z._minDtick;
                z.tick0 = z._forceTick0;
            }
        }
        if (!z.tick0) {
            z.tick0 = (z.type === "date") ? new Date(2000, 0, 1).getTime() : 0;
        }
        l(z);
        z._tmin = m.tickFirst(z);
        var v = (z.range[1] < z.range[0]);
        var y = [],
            u = z.range[1] * 1.0001 - z.range[0] * 0.0001;
        if (z.type === "category") {
            u = (v) ? Math.max(-0.5, u) : Math.min(z._categories.length - 0.5, u);
        }
        for (var t = z._tmin;
            (v) ? (t >= u) : (t <= u); t = m.tickIncrement(t, z.dtick, v)) {
            y.push(t);
            if (y.length > 1000) {
                break;
            }
        }
        z._tmax = y[y.length - 1];
        return y.map(function (A) {
            return m.tickText(z, A);
        });
    };
    m.autoTicks = function (y, u) {
        var x, w;
        if (y.type === "date") {
            y.tick0 = new Date(2000, 0, 1).getTime();
            if (u > 15778800000) {
                u /= 31557600000;
                w = Math.pow(10, Math.floor(Math.log(u) / Math.LN10));
                y.dtick = "M" + String(12 * w * Plotly.Lib.roundUp(u / w, [2, 5, 10]));
            } else {
                if (u > 1209600000) {
                    u /= 2629800000;
                    y.dtick = "M" + Plotly.Lib.roundUp(u, [1, 2, 3, 6]);
                } else {
                    if (u > 43200000) {
                        x = 86400000;
                        y.tick0 = new Date(2000, 0, 2).getTime();
                        y.dtick = x * Plotly.Lib.roundUp(u / x, [1, 2, 3, 7, 14]);
                    } else {
                        if (u > 1800000) {
                            x = 3600000;
                            y.dtick = x * Plotly.Lib.roundUp(u / x, [1, 2, 3, 6, 12]);
                        } else {
                            if (u > 30000) {
                                x = 60000;
                                y.dtick = x * Plotly.Lib.roundUp(u / x, [1, 2, 5, 10, 15, 30]);
                            } else {
                                if (u > 500) {
                                    x = 1000;
                                    y.dtick = x * Plotly.Lib.roundUp(u / x, [1, 2, 5, 10, 15, 30]);
                                } else {
                                    w = Math.pow(10, Math.floor(Math.log(u) / Math.LN10));
                                    y.dtick = w * Plotly.Lib.roundUp(u / w, [2, 5, 10]);
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (y.type === "log") {
                y.tick0 = 0;
                if (u > 0.7) {
                    y.dtick = Math.ceil(u);
                } else {
                    if (Math.abs(y.range[1] - y.range[0]) < 1) {
                        var v = 1.5 * Math.abs((y.range[1] - y.range[0]) / u);
                        u = Math.abs(Math.pow(10, y.range[1]) - Math.pow(10, y.range[0])) / v;
                        w = Math.pow(10, Math.floor(Math.log(u) / Math.LN10));
                        y.dtick = "L" + String(w * Plotly.Lib.roundUp(u / w, [2, 5, 10]));
                    } else {
                        y.dtick = (u > 0.3) ? "D2" : "D1";
                    }
                }
            } else {
                if (y.type === "category") {
                    y.tick0 = 0;
                    y.dtick = 1;
                } else {
                    y.tick0 = 0;
                    w = Math.pow(10, Math.floor(Math.log(u) / Math.LN10));
                    y.dtick = w * Plotly.Lib.roundUp(u / w, [2, 5, 10]);
                }
            }
        } if (y.dtick === 0) {
            y.dtick = 1;
        }
        if (!$.isNumeric(y.dtick) && typeof y.dtick !== "string") {
            var t = y.dtick;
            y.dtick = 1;
            throw "ax.dtick error: " + String(t);
        }
    };

    function l(v) {
        var u = v.dtick,
            t;
        v._tickexponent = 0;
        if (!$.isNumeric(u) && typeof u !== "string") {
            u = 1;
        }
        if (v.type === "category") {
            v._tickround = null;
        } else {
            if ($.isNumeric(u) || u.charAt(0) === "L") {
                if (v.type === "date") {
                    if (u >= 86400000) {
                        v._tickround = "d";
                    } else {
                        if (u >= 3600000) {
                            v._tickround = "H";
                        } else {
                            if (u >= 60000) {
                                v._tickround = "M";
                            } else {
                                if (u >= 1000) {
                                    v._tickround = "S";
                                } else {
                                    v._tickround = 3 - Math.round(Math.log(u / 2) / Math.LN10);
                                }
                            }
                        }
                    }
                } else {
                    if (!$.isNumeric(u)) {
                        u = Number(u.substr(1));
                    }
                    v._tickround = 2 - Math.floor(Math.log(u) / Math.LN10 + 0.01);
                    t = (v.type === "log") ? Math.pow(10, Math.max(v.range[0], v.range[1])) : Math.max(Math.abs(v.range[0]), Math.abs(v.range[1]));
                    var w = Math.floor(Math.log(t) / Math.LN10 + 0.01);
                    if (Math.abs(w) > 3) {
                        v._tickexponent = (["SI", "B"].indexOf(v.exponentformat) !== -1) ? 3 * Math.round((w - 1) / 3) : w;
                    }
                }
            } else {
                if (u.charAt(0) === "M") {
                    v._tickround = (u.length === 2) ? "m" : "y";
                } else {
                    v._tickround = null;
                }
            }
        }
    }
    m.tickIncrement = function (C, A, B) {
        if ($.isNumeric(A)) {
            return C + (B ? -A : A);
        }
        var E = A.charAt(0);
        var w = Number(A.substr(1)),
            D = (B ? -w : w);
        if (E === "M") {
            var z = new Date(C);
            return z.setMonth(z.getMonth() + D);
        } else {
            if (E === "L") {
                return Math.log(Math.pow(10, C) + D) / Math.LN10;
            } else {
                if (E === "D") {
                    var v = (A === "D2") ? [-0.301, 0, 0.301, 0.699, 1] : [-0.046, 0, 0.301, 0.477, 0.602, 0.699, 0.778, 0.845, 0.903, 0.954, 1];
                    var t = C + (B ? -0.01 : 0.01);
                    var u = Plotly.Lib.roundUp(r(t, 1), v, B);
                    return Math.floor(t) + Math.log(d3.round(Math.pow(10, u), 1)) / Math.LN10;
                } else {
                    throw "unrecognized dtick " + String(A);
                }
            }
        }
    };
    m.tickFirst = function (t) {
        var C = (t.range[1] < t.range[0]),
            E = (C ? Math.floor : Math.ceil),
            x = t.range[0] * 1.0001 - t.range[1] * 0.0001;
        if ($.isNumeric(t.dtick)) {
            var v = E((x - t.tick0) / t.dtick) * t.dtick + t.tick0;
            if (t.type === "category") {
                v = Plotly.Lib.constrain(v, 0, t._categories.length - 1);
            }
            return v;
        }
        var D = t.dtick.charAt(0),
            w = Number(t.dtick.substr(1)),
            B, y, A;
        if (D === "M") {
            B = new Date(t.tick0);
            x = new Date(x);
            y = (x.getFullYear() - B.getFullYear()) * 12 + x.getMonth() - B.getMonth();
            A = B.setMonth(B.getMonth() + (Math.round(y / w) + (C ? 1 : -1)) * w);
            while (C ? A > x : A < x) {
                A = m.tickIncrement(A, t.dtick, C);
            }
            return A;
        } else {
            if (D === "L") {
                return Math.log(E((Math.pow(10, x) - t.tick0) / w) * w + t.tick0) / Math.LN10;
            } else {
                if (D === "D") {
                    var z = (t.dtick === "D2") ? [-0.301, 0, 0.301, 0.699, 1] : [-0.046, 0, 0.301, 0.477, 0.602, 0.699, 0.778, 0.845, 0.903, 0.954, 1];
                    var u = Plotly.Lib.roundUp(r(x, 1), z, C);
                    return Math.floor(x) + Math.log(d3.round(Math.pow(10, u), 1)) / Math.LN10;
                } else {
                    throw "unrecognized dtick " + String(t.dtick);
                }
            }
        }
    };
    var h = d3.time.format("%Y"),
        b = d3.time.format("%b %Y"),
        s = d3.time.format("%b %-d"),
        c = d3.time.format("%b %-d %Hh"),
        o = d3.time.format("%H:%M"),
        n = d3.time.format(":%S");
    var p = /%(\d?)f/;

    function d(u, t) {
        var w = u.match(p),
            z = new Date(t);
        if (w) {
            var y = Math.min(+w[1] || 6, 6),
                v = String((t / 1000 % 1) + 2.0000005).substr(2, y).replace(/0+$/, "") || "0";
            return d3.time.format(u.replace(p, v))(z);
        } else {
            return d3.time.format(u)(z);
        }
    }
    m.tickText = function (B, A, L) {
        var K = B._td.layout.font,
            z = B.tickfont,
            u = B._tickround,
            F = B.dtick,
            E = z.family || K.family || "Arial",
            y = z.size || K.size || 12,
            v = z.color || K.color || "#444",
            D = 0,
            C = 0,
            w = "",
            t, I = B.exponentformat !== "none" && (L ? B.showexponent === "none" : (B.showexponent !== "all" && A !== {
                first: B._tmin,
                last: B._tmax
            }[B.showexponent]));
        if (I) {
            I = "hide";
        }
        if (B.type === "date") {
            var J = new Date(A);
            if (L && B.hoverformat && (typeof B.hoverformat === "string")) {
                t = d(B.hoverformat, A);
            } else {
                if (B.tickformat && (typeof B.tickformat === "string")) {
                    t = d(B.tickformat, A);
                } else {
                    if (L) {
                        if ($.isNumeric(u)) {
                            u += 2;
                        } else {
                            u = {
                                y: "m",
                                m: "d",
                                d: "H",
                                H: "M",
                                M: "S",
                                S: 2
                            }[u];
                        }
                    }
                    if (u === "y") {
                        t = h(J);
                    } else {
                        if (u === "m") {
                            t = b(J);
                        } else {
                            if (A === B._tmin && !L) {
                                w = "<br>" + h(J);
                            }
                            if (u === "d") {
                                t = s(J);
                            } else {
                                if (u === "H") {
                                    t = c(J);
                                } else {
                                    if (A === B._tmin && !L) {
                                        w = "<br>" + s(J) + ", " + h(J);
                                    }
                                    t = o(J);
                                    if (u !== "M") {
                                        t += n(J);
                                        if (u !== "S") {
                                            t += a(r(A / 1000, 1), B, "none", L).substr(1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (B.type === "log") {
                if (L && ($.isNumeric(F) || F.charAt(0) !== "L")) {
                    F = "L3";
                }
                if ($.isNumeric(F) || ((F.charAt(0) === "D") && (r(A + 0.01, 1) < 0.1))) {
                    var G = Math.round(A);
                    if (["e", "E", "power"].indexOf(B.exponentformat) !== -1) {
                        t = (G === 0) ? "1" : (G === 1) ? "10" : "10" + String(G).sup();
                        y *= 1.25;
                    } else {
                        t = a(Math.pow(10, A), B, "", "fakehover");
                        if (F === "D1" && B._id.charAt(0) === "y") {
                            C -= y / 6;
                        }
                    }
                } else {
                    if (F.charAt(0) === "D") {
                        t = Math.round(Math.pow(10, r(A, 1)));
                        y *= 0.75;
                    } else {
                        if (F.charAt(0) === "L") {
                            t = a(Math.pow(10, A), B, I, L);
                        } else {
                            throw "unrecognized dtick " + String(F);
                        }
                    }
                }
            } else {
                if (B.type === "category") {
                    var H = B._categories[Math.round(A)];
                    if (H === undefined) {
                        H = "";
                    }
                    t = String(H);
                } else {
                    if (B.showexponent === "all" && Math.abs(A / F) < 0.000001) {
                        I = "hide";
                    }
                    t = a(A, B, I, L);
                }
            }
        } if ((B.dtick === "D1") && (["0", "1"].indexOf(String(t).charAt(0)) !== -1)) {
            if (B._id.charAt(0) === "y") {
                D -= y / 4;
            } else {
                C += y / 2;
                D += (B.range[1] > B.range[0] ? 1 : -1) * y * (A < 0 ? 0.5 : 0.25);
            }
        }
        t += w;
        if (B.type !== "category") {
            t = t.replace(/-/g, "\u2212");
        }
        return {
            x: A,
            dx: D,
            dy: C,
            text: t,
            fontSize: y,
            font: E,
            fontColor: v
        };
    };
    var j = ["f", "p", "n", "&mu;", "m", "", "k", "M", "G", "T"];

    function a(F, t, z, B) {
        var w = (F < 0),
            u = t._tickround,
            x = z || t.exponentformat || "B",
            D = t._tickexponent;
        if (B) {
            var E = {
                exponentformat: t.exponentformat,
                dtick: t.showexponent === "none" ? t.dtick : ($.isNumeric(F) ? Math.abs(F) || 1 : 1),
                range: t.showexponent === "none" ? t.range : [0, F || 1]
            };
            l(E);
            u = (Number(E._tickround) || 0) + 2;
            D = E._tickexponent;
        }
        var C = Math.pow(10, -u) / 2;
        if (x === "none") {
            D = 0;
        }
        F = Math.abs(F);
        if (F < C) {
            F = "0";
            w = false;
        } else {
            F += C;
            if (D) {
                F *= Math.pow(10, -D);
                u += D;
            }
            if (u === 0) {
                F = String(Math.floor(F));
            } else {
                if (u < 0) {
                    F = String(Math.round(F));
                    F = F.substr(0, F.length + u);
                    for (var A = u; A < 0; A++) {
                        F += "0";
                    }
                } else {
                    F = String(F);
                    var y = F.indexOf(".") + 1;
                    if (y) {
                        F = F.substr(0, y + u).replace(/\.?0+$/, "");
                    }
                }
            }
            F = f(F, t._td.layout.separators);
        } if (D && x !== "hide") {
            if (x === "e" || ((x === "SI" || x === "B") && (D > 12 || D < -15))) {
                F += "e" + (D > 0 ? "+" : "") + D;
            } else {
                if (x === "E") {
                    F += "E" + (D > 0 ? "+" : "") + D;
                } else {
                    if (x === "power") {
                        F += "&times;10" + String(D).sup();
                    } else {
                        if (x === "B" && D === 9) {
                            F += "B";
                        } else {
                            if (x === "SI" || x === "B") {
                                F += j[D / 3 + 5];
                            } else {
                                console.log("unknown exponent format " + x);
                            }
                        }
                    }
                }
            }
        }
        return (w ? "-" : "") + F;
    }
    var k = /(\d+)(\d{3})/;

    function f(z, y) {
        var A = y.charAt(0),
            u = y.charAt(1),
            t = z.split("."),
            w = t[0],
            v = t.length > 1 ? A + t[1] : "";
        if (u && (t.length > 1 || w.length > 4)) {
            while (k.test(w)) {
                w = w.replace(k, "$1" + u + "$2");
            }
        }
        return w + v;
    }
    m.list = function (y, u) {
        if (!y.layout) {
            return [];
        }

        function x(z) {
            return Object.keys(z).filter(function (A) {
                if (u && A.charAt(0) !== u) {
                    return false;
                }
                return A.match(/^[xyz]axis[0-9]*/g);
            }).sort().map(function (A) {
                return z[A];
            });
        }
        var v = x(y.layout);
        var w = [];
        var t = Object.keys(y.layout).filter(function (z) {
            return z.match(/^scene[0-9]*$/);
        });
        if (t) {
            t.forEach(function (z) {
                w = w.concat(x(y.layout[z]));
            });
        }
        return v.concat(w);
    };
    m.getFromId = function (z, y, w) {
        if (w === "x") {
            y = y.replace(/y[0-9]*/, "");
        } else {
            if (w === "y") {
                y = y.replace(/x[0-9]*/, "");
            }
        }
        var x = z.layout[m.id2name(y)];
        if (!x && ["x1", "y1", "x", "y"].indexOf(y) !== -1) {
            var u = y.charAt(0),
                v = y.charAt(1);
            if (v === "" || v === "1") {
                var t = z.layout[m.id2name(u + "1")];
                if (t) {
                    m.initAxis(z, t);
                }
                x = z.layout[m.id2name(u)];
            }
        }
        return x;
    };
    m.getSubplots = function (w, y) {
        var x = w.data,
            u = [];
        (x || []).forEach(function (C) {
            if (C.xaxis === "x1") {
                C.xaxis = "x";
            }
            if (C.yaxis === "y1") {
                C.yaxis = "y";
            }
            var A = (C.xaxis || "x"),
                D = (C.yaxis || "y"),
                B = A + D;
            if (u.indexOf(B) === -1) {
                u.push(B);
            }
        });
        Plotly.Axes.list(w).forEach(function (F) {
            if (F.anchor === "x1") {
                F.anchor = "x";
            }
            if (F.anchor === "y1") {
                F.anchor = "y";
            }
            if (F.overlaying === "x1") {
                F.overlaying = "x";
            }
            if (F.overlaying === "y1") {
                F.overlaying = "y";
            }
            if (!F._id) {
                Plotly.Axes.initAxis(w, F);
            }
            var A = F._id.charAt(0),
                C = F.anchor === "free" ? {
                    x: "y",
                    y: "x"
                }[A] : F.anchor,
                E = Plotly.Axes.getFromId(w, C);

            function D(G) {
                return G.indexOf(F._id) !== -1;
            }
            if (F.anchor === "free" && u.some(D)) {
                return;
            }
            if (!E) {
                console.log("warning: couldnt find anchor " + C + " for axis " + F._id);
                return;
            }
            var B = A === "x" ? (F._id + E._id) : (E._id + F._id);
            if (u.indexOf(B) === -1) {
                u.push(B);
            }
        });
        if (!u.length) {
            console.log("Warning! No subplots found - missing axes?");
        }
        var z = /^x([0-9]*)y([0-9]*)$/;
        var t = u.filter(function (A) {
            return A.match(z);
        }).sort(function (B, A) {
            var D = B.match(z),
                C = A.match(z);
            if (D[1] === C[1]) {
                return +(D[2] || 1) - (C[2] || 1);
            }
            return +(D[1] || 0) - (C[1] || 0);
        });
        if (y) {
            if (!y._id) {
                Plotly.Axes.initAxis(w, y);
            }
            var v = new RegExp(y._id.charAt(0) === "x" ? ("^" + y._id + "y") : (y._id + "$"));
            return t.filter(function (A) {
                return A.match(v);
            });
        } else {
            return t;
        }
    };
    m.doTicks = function (C, F, I) {
        var Q = C.layout,
            H, G = false;
        if (typeof F === "object") {
            H = F;
            F = H._id;
            G = true;
        } else {
            H = m.getFromId(C, F);
            if (F === "redraw") {
                C.layout._paper.selectAll("g.subplot").each(function (W) {
                    var V = Q._plots[W];
                    V.plot.attr("viewBox", "0 0 " + V.x._length + " " + V.y._length);
                    V.xaxislayer.selectAll("." + V.x._id + "tick").remove();
                    V.yaxislayer.selectAll("." + V.y._id + "tick").remove();
                    V.gridlayer.selectAll("path").remove();
                    V.zerolinelayer.selectAll("path").remove();
                });
            }
            if (!F || F === "redraw") {
                return Plotly.Lib.syncOrAsync(m.list(C).map(function (V) {
                    return function () {
                        if (!V._id) {
                            return;
                        }
                        var W = m.doTicks(C, V._id);
                        if (F === "redraw") {
                            V._r = V.range.slice();
                        }
                        return W;
                    };
                }));
            }
        } if (["none", "e", "E", "power", "SI", "B"].indexOf(H.exponentformat) === -1) {
            H.exponentformat = "e";
        }
        if (["all", "first", "last", "none"].indexOf(H.showexponent) === -1) {
            H.showexponent = "all";
        }
        H.range = H.range.map(Number);
        H.setScale();
        var w = F.charAt(0),
            J = m.calcTicks(H),
            D = function (V) {
                return V.text + V.x + H.mirror;
            },
            B = F + "tick",
            E = F + "grid",
            z = F + "zl",
            S = ($.isNumeric(H.linewidth) ? H.linewidth : 1) / 2,
            L = (H.ticks === "outside" ? H.ticklen : 1) + H.linewidth,
            K = H.gridwidth || 1,
            T, O, y, A, P;
        if (w === "x") {
            T = ["bottom", "top"];
            O = function (V) {
                return "translate(" + H.l2p(V.x) + ",0)";
            };
            y = "M0,";
            A = "v";
        } else {
            if (w === "y") {
                T = ["left", "right"];
                O = function (V) {
                    return "translate(0," + H.l2p(V.x) + ")";
                };
                y = "M";
                A = ",0h";
            } else {
                console.log("unrecognized doTicks axis", F);
                return;
            }
        }
        var U = H.side || T[0],
            M = [-1, 1, U === T[1] ? 1 : -1];
        if ((H.ticks !== "inside") === (w === "x")) {
            M = M.map(function (V) {
                return -V;
            });
        }

        function v(W) {
            var V = H.l2p(W.x);
            return (V > 1 && V < H._length - 1);
        }
        var N = J.filter(v);

        function t(V, W) {
            var X = V.selectAll("path." + B).data(H.ticks === "inside" ? N : J, D);
            if (W && H.ticks) {
                X.enter().append("path").classed(B, 1).classed("ticks", 1).classed("crisp", 1).call(Plotly.Drawing.strokeColor, H.tickcolor || "#444").style("stroke-width", (H.tickwidth || 1) + "px").attr("d", W);
                X.attr("transform", O);
                X.exit().remove();
            } else {
                X.remove();
            }
        }

        function R(V, ad) {
            var aj = V.selectAll("g." + B).data(J, D);
            if (!H.showticklabels || !$.isNumeric(ad)) {
                aj.remove();
                Plotly.Plots.titles(C, F + "title");
                return;
            }
            var ab, Y, ah, af;
            if (w === "x") {
                var aa = U === "bottom" ? 1 : -1;
                ab = function (ak) {
                    return ak.dx;
                };
                af = ad + (L + S) * aa;
                Y = function (ak) {
                    return ak.dy + af + ak.fontSize * (U === "bottom" ? 1 : -0.5);
                };
                ah = function (ak) {
                    if (!$.isNumeric(ak) || ak === 0 || ak === 180) {
                        return "middle";
                    }
                    return ak * aa < 0 ? "end" : "start";
                };
            } else {
                Y = function (ak) {
                    return ak.dy + ak.fontSize / 2;
                };
                ab = function (ak) {
                    return ak.dx + ad + (L + S + (Math.abs(H.tickangle) === 90 ? ak.fontSize / 2 : 0)) * (U === "right" ? 1 : -1);
                };
                ah = function (ak) {
                    if ($.isNumeric(ak) && Math.abs(ak) === 90) {
                        return "middle";
                    }
                    return U === "right" ? "start" : "end";
                };
            }
            var ai = 0,
                X = 0,
                Z = [];
            aj.enter().append("g").classed(B, 1).append("text").attr("text-anchor", "middle").each(function (am) {
                var al = d3.select(this),
                    ak = C._promises.length;
                al.call(Plotly.Drawing.setPosition, ab(am), Y(am)).call(Plotly.Drawing.font, am.font, am.fontSize, am.fontColor).text(am.text).call(Plotly.util.convertToTspans);
                ak = C._promises[ak];
                if (ak) {
                    Z.push(C._promises.pop().then(function () {
                        ae(al, H.tickangle);
                    }));
                } else {
                    ae(al, H.tickangle);
                }
            });
            aj.exit().remove();
            aj.each(function (ak) {
                ai = Math.max(ai, ak.fontSize);
            });

            function ae(ak, al) {
                ak.each(function (at) {
                    var aq = ah(al);
                    var ar = d3.select(this),
                        an = ar.select(".text-math-group"),
                        ap = O(at) + (($.isNumeric(al) && +al !== 0) ? (" rotate(" + al + "," + ab(at) + "," + (Y(at) - at.fontSize / 2) + ")") : "");
                    if (an.empty()) {
                        var am = ar.select("text").attr({
                            transform: ap,
                            "text-anchor": aq
                        });
                        if (!am.empty()) {
                            am.selectAll("tspan.line").attr({
                                x: am.attr("x"),
                                y: am.attr("y")
                            });
                        }
                    } else {
                        var ao = Plotly.Drawing.bBox(an.node()).width * {
                            end: -0.5,
                            start: 0.5
                        }[aq];
                        an.attr("transform", ap + (ao ? "translate(" + ao + ",0)" : ""));
                    }
                });
            }
            ae(aj, H._lastangle || H.tickangle);

            function W() {
                return Z.length && Promise.all(Z);
            }

            function ag() {
                ae(aj, H.tickangle);
                if (w === "x" && !$.isNumeric(H.tickangle) && (H.type !== "log" || String(H.dtick).charAt(0) !== "D")) {
                    var ak = [];
                    aj.each(function (aq) {
                        var an = d3.select(this),
                            ao = an.select(".text-math-group"),
                            am = H.l2p(aq.x);
                        if (ao.empty()) {
                            ao = an.select("text");
                        }
                        var ap = Plotly.Drawing.bBox(ao.node());
                        ak.push({
                            top: 0,
                            bottom: 10,
                            height: 10,
                            left: am - ap.width / 2,
                            right: am + ap.width / 2 + 2,
                            width: ap.width + 2
                        });
                    });
                    for (P = 0; P < ak.length - 1; P++) {
                        if (Plotly.Lib.bBoxIntersect(ak[P], ak[P + 1])) {
                            X = 30;
                            break;
                        }
                    }
                    if (X) {
                        var al = Math.abs((J[J.length - 1].x - J[0].x) * H._m) / (J.length - 1);
                        if (al < ai * 2.5) {
                            X = 90;
                        }
                        ae(aj, X);
                    }
                    H._lastangle = X;
                }
                if (!I) {
                    Plotly.Plots.titles(C, F + "title");
                }
                return F + " done";
            }
            var ac = Plotly.Lib.syncOrAsync([W, ag]);
            if (ac && ac.then) {
                C._promises.push(ac);
            }
            return ac;
        }

        function u(ac, ae, Z) {
            var X = ac.gridlayer,
                aa = ac.zerolinelayer,
                ab = ac["hidegrid" + w] ? [] : N,
                af = "M0,0" + ((w === "x") ? "v" : "h") + ae._length,
                V = X.selectAll("path." + E).data(H.showgrid === false ? [] : ab, D);
            V.enter().append("path").classed(E, 1).classed("crisp", 1).attr("d", af).each(function (ag) {
                if (H.zeroline && (H.type === "linear" || H.type === "-") && Math.abs(ag.x) < H.dtick / 100) {
                    d3.select(this).remove();
                }
            });
            V.attr("transform", O).call(Plotly.Drawing.strokeColor, H.gridcolor || "#ddd").style("stroke-width", K + "px");
            V.exit().remove();
            var Y = (C.data || []).filter(function (ag) {
                return ag.visible !== false && ((ag.xaxis || "x") + (ag.yaxis || "y") === Z) && ((Plotly.Plots.isBar(ag.type) && (ag.orientation || "v") === {
                    x: "h",
                    y: "v"
                }[w]) || ((ag.type || "scatter") === "scatter" && ag.fill && ag.fill.charAt(ag.fill.length - 1) === w));
            }).length;
            var W = (H.range[0] * H.range[1] <= 0) && H.zeroline && (H.type === "linear" || H.type === "-") && ab.length && (Y || v({
                x: 0
            }) || !H.showline);
            var ad = aa.selectAll("path." + z).data(W ? [{
                x: 0
            }] : []);
            ad.enter().append("path").classed(z, 1).classed("zl", 1).classed("crisp", 1).attr("d", af);
            ad.attr("transform", O).call(Plotly.Drawing.strokeColor, H.zerolinecolor || "#444").style("stroke-width", (H.zerolinewidth || K) + "px");
            ad.exit().remove();
        }
        if (G) {
            t(H._axislayer, y + (H._pos + S * M[2]) + A + (M[2] * H.ticklen));
            return R(H._axislayer, H._pos);
        } else {
            var x = m.getSubplots(C, H).map(function (Z) {
                var aa = Q._plots[Z],
                    Y = aa[w + "axislayer"],
                    W = H._linepositions[Z] || [],
                    ab = aa[{
                        x: "y",
                        y: "x"
                    }[w]],
                    ac = ab._id === H.anchor,
                    ad = [false, false, false],
                    X = "";
                if (H.mirror === "allticks") {
                    ad = [true, true, false];
                } else {
                    if (ac) {
                        if (H.mirror === "ticks") {
                            ad = [true, true, false];
                        } else {
                            ad[T.indexOf(U)] = true;
                        }
                    }
                } if (H.mirrors) {
                    for (P = 0; P < 2; P++) {
                        var V = H.mirrors[ab._id + T[P]];
                        if (V === "ticks" || V === "labels") {
                            ad[P] = true;
                        }
                    }
                }
                if (W[2] !== undefined) {
                    ad[2] = true;
                }
                ad.forEach(function (ae, ag) {
                    var ah = W[ag],
                        af = M[ag];
                    if (ae && $.isNumeric(ah)) {
                        X += y + (ah + S * af) + A + (af * H.ticklen);
                    }
                });
                t(Y, X);
                u(aa, ab, Z);
                return R(Y, W[3]);
            }).filter(function (V) {
                return V && V.then;
            });
            return x.length ? Promise.all(x) : 0;
        }
    };

    function r(t, u) {
        return ((t % u) + u) % u;
    }
}());
(function () {
    var e = Plotly.Annotations = {};
    e.drawAll = function (j) {
        var g = j.layout.annotations;
        j.layout._infolayer.selectAll(".annotation").remove();
        if (g) {
            for (var h in g) {
                e.draw(j, h);
            }
        }
        return Plotly.Plots.previousPromises(j);
    };
    e.add = function (h) {
        var g = h.layout.annotations || [];
        Plotly.relayout(h, "annotations[" + g.length + "]", "add");
    };
    e.draw = function (G, q, g, y) {
        var D = G.layout,
            w = D._size,
            v = Plotly.Fx.MINDRAG,
            E;
        if (!D.annotations) {
            D.annotations = [];
        }
        if (!$.isNumeric(q) || q === -1) {
            if (!q && $.isArray(y)) {
                D.annotations = y;
                e.drawAll(G);
                return;
            } else {
                if (y === "remove") {
                    D.annotations = [];
                    e.drawAll(G);
                    return;
                } else {
                    if (g && y !== "add") {
                        for (E = 0; E < D.annotations.length; E++) {
                            e.draw(G, E, g, y);
                        }
                        return;
                    } else {
                        q = D.annotations.length;
                        D.annotations.push({});
                    }
                }
            }
        }
        if (!g && y) {
            if (y === "remove") {
                D._infolayer.selectAll('.annotation[data-index="' + q + '"]').remove();
                D.annotations.splice(q, 1);
                for (E = q; E < D.annotations.length; E++) {
                    D._infolayer.selectAll('.annotation[data-index="' + (E + 1) + '"]').attr("data-index", String(E));
                    e.draw(G, E);
                }
                return;
            } else {
                if (y === "add" || $.isPlainObject(y)) {
                    D.annotations.splice(q, 0, {});
                    if ($.isPlainObject(y)) {
                        Object.keys(y).forEach(function (i) {
                            D.annotations[q][i] = y[i];
                        });
                    }
                    for (E = D.annotations.length - 1; E > q; E--) {
                        D._infolayer.selectAll('.annotation[data-index="' + (E - 1) + '"]').attr("data-index", String(E));
                        e.draw(G, E);
                    }
                }
            }
        }
        D._infolayer.selectAll('.annotation[data-index="' + q + '"]').remove();
        var p = D.annotations[q],
            r = {
                x: p.xref || (p.ref === "paper" ? "paper" : "x"),
                y: p.yref || (p.ref === "paper" ? "paper" : "y")
            },
            m = $.extend({
                text: "new text",
                bordercolor: "",
                borderwidth: 1,
                borderpad: 1,
                bgcolor: "rgba(0,0,0,0)",
                xref: r.x,
                yref: r.y,
                showarrow: true,
                arrowwidth: 0,
                arrowcolor: "",
                arrowhead: 1,
                arrowsize: 1,
                textangle: 0,
                tag: "",
                font: {
                    family: "",
                    size: 0,
                    color: ""
                },
                opacity: 1,
                align: "center",
                xanchor: "auto",
                yanchor: "auto"
            }, p);
        D.annotations[q] = m;
        if (["left", "right", "center"].indexOf(m.xanchor) === -1) {
            m.xanchor = "auto";
        }
        if (["top", "bottom", "middle"].indexOf(m.yanchor) === -1) {
            m.yanchor = "auto";
        }
        if (typeof g === "string" && g) {
            Plotly.Lib.nestedProperty(m, g).set(y);
        } else {
            if ($.isPlainObject(g)) {
                Object.keys(g).forEach(function (i) {
                    Plotly.Lib.nestedProperty(m, i).set(g[i]);
                });
            }
        } if (!m.text) {
            m.text = m.showarrow ? "&nbsp;" : "new text";
        }
        var F = Plotly.Axes.getFromId(G, m.xref),
            k = Plotly.Axes.getFromId(G, m.yref),
            s = {
                x: 0,
                y: 0
            },
            h = m.textangle || 0;
        h = $.isNumeric(h) ? h : 0;
        var B = D._infolayer.append("g").classed("annotation", true).attr({
            "data-index": String(q),
            "data-cmmt": m.tag
        }).style("opacity", m.opacity);
        var t = B.append("g").classed("annotation-text-g", true).attr({
            "data-index": String(q)
        });
        var C = t.append("svg").attr("data-cmmt", m.tag).call(Plotly.Drawing.setPosition, 0, 0);
        var A = m.borderwidth;
        var n = C.append("rect").attr("class", "bg").style("stroke-width", A + "px").call(Plotly.Drawing.strokeColor, m.bordercolor || "rgba(0,0,0,0)").call(Plotly.Drawing.fillColor, m.bgcolor);
        var u = m.font.family || D.font.family || "Arial",
            l = m.font.size || D.font.size || 12,
            j = m.font.color || D.font.color || "#444";
        var x = C.append("text").classed("annotation", true).attr({
            "data-cmmt": m.tag,
            "data-unformatted": m.text
        }).text(m.text);

        function o(i) {
            i.style({
                "font-family": u,
                "font-size": l + "px",
                fill: Plotly.Drawing.rgb(j),
                opacity: Plotly.Drawing.opacity(j)
            }).attr({
                "text-anchor": {
                    left: "start",
                    right: "end"
                }[m.align] || "middle"
            });
            Plotly.util.convertToTspans(i, z);
            return i;
        }

        function z() {
            x.selectAll("tspan.line").attr({
                y: 0,
                x: 0
            });
            var O = C.select(".annotation-math-group"),
                S = !O.empty(),
                I = Plotly.Drawing.bBox((S ? O : x).node()),
                X = I.width,
                H = I.height;
            m._w = X;
            m._h = H;

            function J(Y, Z) {
                if (Z === "center" || Z === "middle") {
                    return 0;
                } else {
                    if (Z === "left" || Z === "bottom") {
                        return -0.5;
                    } else {
                        if (Z === "right" || Z === "top") {
                            return 0.5;
                        } else {
                            return Plotly.Lib.constrain(Math.floor(Y * 3 - 1), -0.5, 0.5);
                        }
                    }
                }
            }
            var U = true;
            ["x", "y"].forEach(function (ah) {
                var Y = Plotly.Axes.getFromId(G, m[ah + "ref"] || ah),
                    ae = Plotly.Axes.getFromId(G, r[ah] || ah),
                    ab = "_" + ah + "type",
                    aa = ah === "x" ? X : -H,
                    af = (Y || ae) ? (Y || ae).range[1] - (Y || ae).range[0] : null,
                    ag = Y ? Y.range[0] + (ah === "x" ? 0.1 : 0.3) * af : (ah === "x" ? 0.1 : 0.7),
                    ad = m[ah + "anchor"];
                if (Y && ["date", "category"].indexOf(Y.type) !== -1 && typeof m[ah] === "string") {
                    var Z;
                    if (Y.type === "date") {
                        Z = Plotly.Lib.dateTime2ms(m[ah]);
                        if (Z !== false) {
                            m[ah] = Z;
                        }
                    } else {
                        if (Y.categories && Y.categories.length) {
                            Z = Y.categories.indexOf(m[ah]);
                            if (Z !== -1) {
                                m[ah] = Z;
                            }
                        }
                    }
                }
                if (Y && Y === ae && m[ab]) {
                    c(m, Y);
                } else {
                    if ($.isNumeric(m[ah]) && Y !== ae) {
                        if (Y && ae) {
                            m[ah] = ag;
                        } else {
                            if (Y) {
                                if (!Y.domain) {
                                    Y.domain = [0, 1];
                                }
                                var ac = (m[ah] - Y.domain[0]) / (Y.domain[1] - Y.domain[0]);
                                m[ah] = Y.range[0] + af * ac - (m.showarrow ? 0 : ((J(ac, ad) - J(0, ad)) * aa / Y._m));
                            } else {
                                if (ae) {
                                    if (!ae.domain) {
                                        ae.domain = [0, 1];
                                    }
                                    m[ah] = (ae.domain[0] + (ae.domain[1] - ae.domain[0]) * (m[ah] - ae.range[0]) / af);
                                    if (!m.showarrow) {
                                        m[ah] += (J(m[ah], ad) - J(0, ad)) * aa / ae._length;
                                    }
                                }
                            }
                        }
                    }
                } if (!$.isNumeric(m[ah])) {
                    m[ah] = ag;
                }
                if (!Y) {
                    s[ah] = (ah === "x") ? (w.l + (w.w) * m[ah]) : (w.t + (w.h) * (1 - m[ah]));
                } else {
                    if (((m[ah] - Y.range[0]) * (m[ah] - Y.range[1]) > 0) && !Y.autorange) {
                        U = false;
                    }
                    s[ah] = Y._offset + Y.l2p(m[ah]);
                } if (!m.showarrow) {
                    s[ah] -= aa * J(Y ? 0 : m[ah], ad);
                }
                m[ab] = Y && Y.type;
            });
            if (!U) {
                C.remove();
                return;
            }
            if (!$.isNumeric(m.ax)) {
                m.ax = -10;
            }
            if (!$.isNumeric(m.ay)) {
                m.ay = -H / 2 - 20;
            }
            var M, L;
            if (m.showarrow) {
                M = Plotly.Lib.constrain(s.x, 1, D.width - 1);
                L = Plotly.Lib.constrain(s.y, 1, D.height - 1);
                s.x += m.ax;
                s.y += m.ay;
            }
            s.x = Plotly.Lib.constrain(s.x, 1, D.width - 1);
            s.y = Plotly.Lib.constrain(s.y, 1, D.height - 1);
            var P = Number(m.borderpad),
                i = A + P,
                V = i - I.top,
                W = i - I.left;
            if (S) {
                O.select("svg").attr({
                    x: i - 1,
                    y: i
                });
            } else {
                x.attr({
                    x: W,
                    y: V
                });
                x.selectAll("tspan.line").attr({
                    y: V,
                    x: W
                });
            }
            var T = Math.round(X + 2 * i),
                R = Math.round(H + 2 * i);
            n.call(Plotly.Drawing.setRect, A / 2, A / 2, T - A, R - A);
            C.call(Plotly.Drawing.setRect, Math.round(s.x - T / 2), Math.round(s.y - R / 2), T, R);
            var K = function (am, ak) {
                $(G).find('.annotation-arrow-g[data-index="' + q + '"]').remove();
                var aa = s.x + am,
                    aj = s.y + ak,
                    Z = Plotly.Lib.rotationXYMatrix(h, aa, aj),
                    ad = Plotly.Lib.apply2DTransform(Z),
                    Y = Plotly.Lib.apply2DTransform2(Z),
                    ai = n.attr("width") / 2,
                    ag = n.attr("height") / 2,
                    ac = [
                        [aa - ai, aj - ag, aa - ai, aj + ag],
                        [aa - ai, aj + ag, aa + ai, aj + ag],
                        [aa + ai, aj + ag, aa + ai, aj - ag],
                        [aa + ai, aj - ag, aa - ai, aj - ag]
                    ].map(Y);
                if (ac.reduce(function (ao, an) {
                    return ao ^ !!a(M, L, M + 1000000, L + 1000000, an[0], an[1], an[2], an[3]);
                }, false)) {
                    return;
                }
                ac.forEach(function (an) {
                    var ao = a(aa, aj, M, L, an[0], an[1], an[2], an[3]);
                    if (ao) {
                        aa = ao.x;
                        aj = ao.y;
                    }
                });
                var al = m.arrowwidth || A * 2 || 2,
                    af = m.arrowcolor || (Plotly.Drawing.opacity(m.bordercolor) ? m.bordercolor : "") || "#444";
                var ab = B.append("g").attr("data-cmmt", m.tag).style({
                    opacity: Plotly.Drawing.opacity(af)
                }).classed("annotation-arrow-g", true).attr({
                    "data-index": String(q)
                });
                var ah = ab.append("path").attr("data-cmmt", m.tag).attr("d", "M" + aa + "," + aj + "L" + M + "," + L).style("stroke-width", al + "px").call(Plotly.Drawing.strokeColor, Plotly.Drawing.rgb(af));
                d(ah, m.arrowhead, "end", m.arrowsize);
                var ae = ab.append("path").classed("annotation", true).classed("anndrag", true).attr({
                    "data-cmmt": m.tag,
                    "data-index": String(q),
                    d: "M3,3H-3V-3H3ZM0,0L" + (aa - M) + "," + (aj - L),
                    transform: "translate(" + M + "," + L + ")"
                }).style("stroke-width", (al + 6) + "px").call(Plotly.Drawing.strokeColor, "rgba(0,0,0,0)").call(Plotly.Drawing.fillColor, "rgba(0,0,0,0)");
                if (G.mainsite) {
                    ae.node().onmousedown = function (aq) {
                        if (Plotly.Fx.dragClear(G)) {
                            return true;
                        }
                        var an = Number(C.attr("x")),
                            ao = Number(C.attr("y")),
                            ar = {},
                            ap = "annotations[" + q + "]";
                        if (F && F.autorange) {
                            ar[F._name + ".autorange"] = true;
                        }
                        if (k && k.autorange) {
                            ar[k._name + ".autorange"] = true;
                        }
                        G.dragged = false;
                        window.onmousemove = function (ay) {
                            var av = ay.clientX - aq.clientX,
                                au = ay.clientY - aq.clientY;
                            if (Math.abs(av) < v) {
                                av = 0;
                            }
                            if (Math.abs(au) < v) {
                                au = 0;
                            }
                            if (av || au) {
                                G.dragged = true;
                            }
                            ab.attr({
                                transform: "translate(" + av + "," + au + ")"
                            });
                            var aw = ad(an, ao),
                                ax = aw[0] + av,
                                at = aw[1] + au;
                            C.call(Plotly.Drawing.setPosition, ax, at);
                            ar[ap + ".x"] = F ? (m.x + av / F._m) : ((M + av - w.l) / w.w);
                            ar[ap + ".y"] = k ? (m.y + au / k._m) : (1 - ((L + au - w.t) / w.h));
                            t.attr({
                                transform: "rotate(" + h + "," + ax + "," + at + ")"
                            });
                            return Plotly.Lib.pauseEvent(ay);
                        };
                        window.onmouseup = function (at) {
                            window.onmousemove = null;
                            window.onmouseup = null;
                            if (G.dragged) {
                                Plotly.relayout(G, ar);
                            }
                            return Plotly.Lib.pauseEvent(at);
                        };
                        return Plotly.Lib.pauseEvent(aq);
                    };
                }
            };
            if (m.showarrow) {
                K(0, 0);
            }
            var N = Plotly.Lib.rotationXYMatrix(h, s.x, s.y),
                Q = Plotly.Lib.apply2DTransform(N);
            if (G.mainsite) {
                C.node().onmousedown = function (ac) {
                    if (Plotly.Fx.dragClear(G)) {
                        return true;
                    }
                    var Y = d3.select(this),
                        Z = Number(Y.attr("x")),
                        aa = Number(Y.attr("y")),
                        ad = {},
                        ab = "annotations[" + q + "]";
                    if (F && F.autorange) {
                        ad[F._name + ".autorange"] = true;
                    }
                    if (k && k.autorange) {
                        ad[k._name + ".autorange"] = true;
                    }
                    G.dragged = false;
                    Plotly.Fx.setCursor(Y);
                    window.onmousemove = function (aj) {
                        var af = aj.clientX - ac.clientX,
                            ae = aj.clientY - ac.clientY;
                        if (Math.abs(af) < v) {
                            af = 0;
                        }
                        if (Math.abs(ae) < v) {
                            ae = 0;
                        }
                        if (af || ae) {
                            G.dragged = true;
                        }
                        Y.call(Plotly.Drawing.setPosition, Z + af, aa + ae);
                        var ai = "pointer";
                        if (m.showarrow) {
                            ad[ab + ".ax"] = m.ax + af;
                            ad[ab + ".ay"] = m.ay + ae;
                            K(af, ae);
                        } else {
                            ad[ab + ".x"] = F ? (m.x + af / F._m) : (Plotly.Fx.dragAlign(Z + af + i, X, w.l, w.l + w.w, m.xanchor));
                            ad[ab + ".y"] = k ? (m.y + ae / k._m) : (Plotly.Fx.dragAlign(aa + ae + i + H, -H, w.t + w.h, w.t, m.yanchor));
                            if (!F || !k) {
                                ai = Plotly.Fx.dragCursors(F ? 0.5 : ad[ab + ".x"], k ? 0.5 : ad[ab + ".y"], m.xanchor, m.yanchor);
                            }
                        }
                        var ak = Q(Z, aa),
                            ag = ak[0] + af,
                            ah = ak[1] + ae;
                        Y.call(Plotly.Drawing.setPosition, ag, ah);
                        t.attr({
                            transform: "rotate(" + h + "," + ag + "," + ah + ")"
                        });
                        Plotly.Fx.setCursor(Y, ai);
                        return Plotly.Lib.pauseEvent(aj);
                    };
                    window.onmouseup = function (ae) {
                        window.onmousemove = null;
                        window.onmouseup = null;
                        Plotly.Fx.setCursor(Y);
                        if (G.dragged) {
                            Plotly.relayout(G, ad);
                        }
                        return Plotly.Lib.pauseEvent(ae);
                    };
                    return Plotly.Lib.pauseEvent(ac);
                };
            }
        }
        if (G.mainsite) {
            x.call(Plotly.util.makeEditable, n).call(o).on("edit", function (i) {
                m.text = i;
                this.attr({
                    "data-unformatted": m.text
                });
                this.call(o);
                var H = {};
                H["annotations[" + q + "].text"] = m.text;
                if (F && F.autorange) {
                    H[F._name + ".autorange"] = true;
                }
                if (k && k.autorange) {
                    H[k._name + ".autorange"] = true;
                }
                Plotly.relayout(G, H);
            });
        } else {
            x.call(o);
        }
        t.attr({
            transform: "rotate(" + h + "," + s.x + "," + s.y + ")"
        }).call(Plotly.Drawing.setPosition, s.x, s.y);
    };

    function c(h, j) {
        var g = j._id.charAt(0),
            l = "_" + g + "type",
            k = h[l],
            i = j.type;
        if (k) {
            if (k === "log" && i !== "log") {
                h[g] = Math.pow(10, h[g]);
            } else {
                if (k !== "log" && i === "log") {
                    h[g] = (h[g] > 0) ? Math.log(h[g]) / Math.LN10 : (j.range[0] + j.range[1]) / 2;
                }
            }
        }
        h[l] = i;
    }
    var b = ["", {
        path: "M-2,-3V3L1,0Z",
        centerx: 0.4
    }, {
        path: "M-3,-2.5V2.5L2,0Z",
        centerx: 0.7
    }, {
        path: "M-4,-3L-1.2,-0.2V0.2L-4,3L2,0Z",
        centerx: 0.45
    }, {
        path: "M-2.2,-2.2L-0.2,-0.2V0.2L-2.2,2.2L-1.4,3L1.6,0L-1.4,-3Z",
        centerx: 0
    }, {
        path: "M-4.2,-2.1L-0.4,-0.2V0.2L-4.2,2.1L-3.8,3L2.2,0L-3.8,-3Z",
        centerx: 0.2
    }, {
        path: "M2,0A2,2 0 1,1 0,-2A2,2 0 0,1 2,0Z",
        centerx: 0
    }, {
        path: "M2,2V-2H-2V2Z",
        centerx: 0
    }];

    function d(j, g, n, m) {
        if (!$.isNumeric(m)) {
            m = 1;
        }
        var i = j.node(),
            q = b[g || 0];
        if (!q) {
            return;
        }
        if (typeof n !== "string" || !n) {
            n = "end";
        }
        var h, l, p, k, o;
        if (i.nodeName === "line") {
            h = {
                x: j.attr("x1"),
                y: j.attr("y1")
            };
            l = {
                x: j.attr("x2"),
                y: j.attr("y2")
            };
            p = l;
            k = h;
        } else {
            if (i.nodeName === "path") {
                h = i.getPointAtLength(0);
                p = i.getPointAtLength(0.1);
                o = i.getTotalLength();
                l = i.getPointAtLength(o);
                k = i.getPointAtLength(o - 0.1);
            }
        }
        var r = function (w, u) {
            var s = Math.atan2(w.y - u.y, w.x - u.x) * 180 / Math.PI,
                x = (Plotly.Drawing.getPx(j, "stroke-width") || 1) * (m),
                v = j.style("stroke") || "#444",
                t = j.style("stroke-opacity") || 1;
            if (g > 5) {
                s = 0;
            }
            d3.select(i.parentElement).append("path").attr({
                "class": j.attr("class"),
                "data-cmmt": j.attr("data-cmmt"),
                d: q.path,
                transform: "translate(" + w.x + "," + w.y + ")rotate(" + s + ")translate(" + (q.centerx * x * (1 / m - 1)) + ",0)scale(" + x + ")"
            }).style({
                fill: v,
                opacity: t,
                "stroke-width": 0
            });
        };
        if (n.indexOf("start") >= 0) {
            r(h, p);
        }
        if (n.indexOf("end") >= 0) {
            r(l, k);
        }
    }
    e.allArrowheads = function (g) {
        if (g) {
            $(g).find("[data-arrowhead]").each(function () {
                var i = d3.select(this);
                d(i.select("line"), Number(i.attr("data-arrowhead")));
            });
            return;
        }
        var j = [];
        for (var h = 0; h < b.length; h++) {
            j.push({
                val: h,
                name: '<svg width="40" height="20" data-arrowhead="' + h + '" style="position: relative; top: 2px;"><line stroke="rgb(0,0,0)" style="fill: none;" x1="5" y1="10" x2="25" y2="10" stroke-width="2"></line></svg>'
            });
        }
        return j;
    };
    e.calcAutorange = function (g) {
        var h = g.layout;
        if (!h.annotations || !g.data || !g.data.length) {
            return;
        }
        if (!Plotly.Axes.list(g).filter(function (i) {
            return i.autorange;
        }).length) {
            return;
        }
        return Plotly.Lib.syncOrAsync([e.drawAll, f], g);
    };

    function f(g) {
        var h = g.layout,
            i = {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0,
                width: 0,
                height: 0
            };
        h.annotations.forEach(function (k, m) {
            var j = Plotly.Axes.getFromId(g, k.xref),
                p = Plotly.Axes.getFromId(g, k.yref);
            if (!(j || p)) {
                return;
            }
            var t, l = h._infolayer.selectAll('g.annotation[data-index="' + m + '"] rect.bg').node(),
                s = l ? Plotly.Drawing.bBox(l) : i,
                r = k.borderwidth || 0,
                o = s.width + r,
                q = s.height + r;
            if (k.showarrow) {
                var n = 3 * (k.arrowsize || 1) * (k.arrowwidth || 1);
                t = {
                    left: Math.min(k.ax - o / 2, -n),
                    right: Math.max(k.ax + o / 2, n),
                    top: Math.min(k.ay - q / 2, -n),
                    bottom: Math.max(k.ay + q / 2, n)
                };
            } else {
                t = {
                    left: o * ({
                        center: -0.5,
                        right: -1
                    }[k.xanchor] || 0),
                    right: o * ({
                        center: 0.5,
                        right: 0
                    }[k.xanchor] || 1),
                    top: q * ({
                        middle: -0.5,
                        top: 0
                    }[k.yanchor] || 1),
                    bottom: q * ({
                        middle: 0.5,
                        top: 1
                    }[k.yanchor] || 0)
                };
            } if (j && j.autorange) {
                Plotly.Axes.expand(j, [j.l2c(k.x)], {
                    ppadplus: t.right,
                    ppadminus: -t.left
                });
            }
            if (p && p.autorange) {
                Plotly.Axes.expand(p, [p.l2c(k.y)], {
                    ppadplus: t.bottom,
                    ppadminus: -t.top
                });
            }
        });
    }

    function a(i, v, h, r, g, p, y, n) {
        var s = h - i,
            q = g - i,
            o = y - g,
            m = r - v,
            l = p - v,
            k = n - p,
            j = s * k - o * m;
        if (j === 0) {
            return null;
        }
        var x = (q * k - o * l) / j,
            w = (q * m - s * l) / j;
        if (w < 0 || w > 1 || x < 0 || x > 1) {
            return null;
        }
        return {
            x: i + s * x,
            y: v + m * x
        };
    }
}());
(function () {
    var a = Plotly.Legend = {};
    a.lines = function (i) {
        var f = i[0].t,
            b = ["scatter", undefined].indexOf(i[0].t.type) !== -1,
            e = b && (f.fill && f.fill !== "none" && $.isNumeric(f.cdcurve)),
            g = b && (f.mode && f.mode.indexOf("lines") !== -1);
        var h = d3.select(this).select(".legendfill").selectAll("path").data(e ? [i] : []);
        h.enter().append("path").classed("js-fill", true);
        h.exit().remove();
        h.attr({
            "data-curve": f.cdcurve,
            d: "M5,0h30v6h-30z"
        }).call(Plotly.Drawing.fillGroupStyle);
        var c = d3.select(this).select(".legendlines").selectAll("path").data(g ? [i] : []);
        c.enter().append("path").classed("js-line", true).attr("d", "M5,0h30");
        c.exit().remove();
        c.call(Plotly.Drawing.lineGroupStyle);
    };
    a.points = function (i) {
        var l = i[0].t,
            h = ["scatter", undefined].indexOf(l.type) !== -1 && l.mode,
            c = h && l.mode.indexOf("markers") !== -1,
            j = h && l.mode.indexOf("text") !== -1;
        var f = {
            tx: "Aa",
            mo: 1
        };
        if (i[0].ms) {
            f.ms = 10;
        }
        if (i[0].mlw > 5) {
            f.mlw = 5;
        }
        var k = [$.extend({}, i[0], f)],
            g = $.extend({}, l, {
                ts: 10,
                ms: Math.max(Math.min(l.ms, 16), 2),
                msr: 1,
                msm: "diameter",
                lw: Math.min(l.lw, 10)
            });
        var b = d3.select(this).select("g.legendpoints");
        var m = b.selectAll("path.scatterpts").data(c ? k : []);
        m.enter().append("path").classed("scatterpts", true).attr("transform", "translate(20,0)");
        m.exit().remove();
        m.call(Plotly.Drawing.pointStyle, g);
        var e = b.selectAll("g.pointtext").data(j ? k : []);
        e.enter().append("g").classed("pointtext", true).append("text").attr("transform", "translate(20,0)");
        e.exit().remove();
        e.selectAll("text").call(Plotly.Drawing.textPointStyle, g);
    };
    a.bars = function (e) {
        var c = e[0].t,
            b = d3.select(this).select("g.legendpoints").selectAll("path.legendbar").data(Plotly.Plots.isBar(c.type) ? [e] : []);
        b.enter().append("path").classed("legendbar", true).attr("d", "M6,6H-6V-6H6Z").attr("transform", "translate(20,0)");
        b.exit().remove();
        b.each(function (h) {
            var f = (h.mlw + 1 || c.mlw + 1 || (h.t ? h.t.mlw : 0) + 1) - 1,
                g = d3.select(this);
            g.style("stroke-width", f + "px").call(Plotly.Drawing.fillColor, h.mc || c.mc || (h.t ? h.t.mc : ""));
            if (f) {
                g.call(Plotly.Drawing.strokeColor, h.mlc || c.mlc || (h.t ? h.t.mlc : ""));
            }
        });
    };
    a.boxes = function (e) {
        var b = e[0].t,
            c = d3.select(this).select("g.legendpoints").selectAll("path.legendbox").data(b.type === "box" ? [e] : []);
        c.enter().append("path").classed("legendbox", true).attr("d", "M6,6H-6V-6H6Z").attr("transform", "translate(20,0)");
        c.exit().remove();
        c.each(function (h) {
            var f = (h.lw + 1 || b.lw + 1 || (h.t ? h.t.lw : 0) + 1) - 1,
                g = d3.select(this);
            g.style("stroke-width", f + "px").call(Plotly.Drawing.fillColor, h.fc || b.fc || (h.t ? h.t.fc : ""));
            if (f) {
                g.call(Plotly.Drawing.strokeColor, h.lc || b.lc || (h.t ? h.t.lc : ""));
            }
        });
    };
    a.style = function (b) {
        b.each(function (g) {
            var f = d3.select(this).selectAll("g.legendfill").data([g]);
            f.enter().append("g").classed("legendfill", true);
            var c = d3.select(this).selectAll("g.legendlines").data([g]);
            c.enter().append("g").classed("legendlines", true);
            var e = d3.select(this).selectAll("g.legendsymbols").data([g]);
            e.enter().append("g").classed("legendsymbols", true);
            e.style("opacity", g[0].t.op);
            e.selectAll("g.legendpoints").data([g]).enter().append("g").classed("legendpoints", true);
        }).each(a.bars).each(a.boxes).each(a.lines).each(a.points);
    };
    a.texts = function (c, f, j, h, l) {
        var k = f.layout.font,
            n = f.layout.legend.font;
        var e = j[0].t.curve;
        var b = j[0].t.name;
        var m = d3.select(c).selectAll("text.legendtext").data([0]);
        m.enter().append("text");
        m.attr({
            "class": "legendtext text-" + e,
            x: 40,
            y: 0
        }).style({
            "text-anchor": "start",
            "font-family": n.family || k.family || "Arial",
            "font-size": (n.size || k.size || 12) + "px",
            fill: Plotly.Drawing.rgb(n.color || k.color || "#444"),
            opacity: Plotly.Drawing.opacity(n.color || k.color || "#444")
        }).text(b).attr({
            "data-unformatted": b
        });

        function g(d) {
            Plotly.util.convertToTspans(d, function () {
                if (f.firstRender) {
                    a.repositionLegend(f, l);
                }
            });
            d.selectAll("tspan.line").attr({
                x: d.attr("x")
            });
        }
        if (f.mainsite) {
            m.call(Plotly.util.makeEditable).call(g).on("edit", function (o) {
                this.attr({
                    "data-unformatted": o
                });
                this.text(o).call(g);
                if (this.text() === "") {
                    o = " \u0020\u0020 ";
                }
                var d = Number(this.attr("class").split("-")[1]),
                    i = Plotly.Lib.nestedProperty(f.data[d], "name");
                i.name = o;
                j[0].t.name = o;
                Plotly.restyle(f, i.astr, o, d);
            });
        } else {
            m.call(g);
        }
    };
    a.draw = function (f, j) {
        var h = f.layout;
        if (!h._infolayer || !f.calcdata) {
            return;
        }
        if (!h.legend) {
            h.legend = {};
        }
        var c = h.legend;
        var b = f.calcdata.filter(function (n) {
            var m = n[0].t;
            return m.visible !== false && m.showlegend !== false && !Plotly.Plots.isHeatmap(m.type);
        }).map(function (m) {
            return [m[0]];
        });
        if (c.traceorder === "reversed") {
            b.reverse();
        }
        if (j === false || !b.length) {
            h._infolayer.selectAll(".legend").remove();
            Plotly.Plots.autoMargin(f, "legend");
            return;
        }
        h.showlegend = true;
        if (typeof f.firstRender === "undefined") {
            f.firstRender = true;
        } else {
            if (f.firstRender) {
                f.firstRender = false;
            }
        }
        var g = h._infolayer.selectAll("svg.legend").data([0]);
        g.enter(0).append("svg").attr("class", "legend");
        var i = c.bordercolor || "#444",
            e = $.isNumeric(c.borderwidth) ? c.borderwidth : 1,
            l = c.bgcolor || h.paper_bgcolor || "#fff";
        if (["left", "right", "center"].indexOf(c.xanchor) === -1) {
            c.xanchor = "auto";
        }
        if (["top", "bottom", "middle"].indexOf(c.yanchor) === -1) {
            c.yanchor = "auto";
        }
        var d = g.selectAll("rect.bg").data([0]);
        d.enter(0).append("rect").attr("class", "bg");
        d.style({
            stroke: Plotly.Drawing.rgb(i),
            "stroke-opacity": Plotly.Drawing.opacity(i),
            fill: Plotly.Drawing.rgb(l),
            opacity: Plotly.Drawing.opacity(l),
            "stroke-width": e + "px"
        });
        var k = g.selectAll("g.traces").data(b);
        k.enter().append("g").attr("class", "traces");
        k.exit().remove();
        k.call(a.style).each(function (n, m) {
            a.texts(this, f, n, m, k);
        });
        a.repositionLegend(f, k);
        if (f.mainsite) {
            g.node().onmousedown = function (r) {
                if (Plotly.Fx.dragClear(f)) {
                    return true;
                }
                var m = d3.select(this),
                    n = Number(m.attr("x")),
                    p = Number(m.attr("y")),
                    o = null,
                    q = null;
                f.dragged = false;
                Plotly.Fx.setCursor(m);
                window.onmousemove = function (z) {
                    var v = z.clientX - r.clientX,
                        t = z.clientY - r.clientY,
                        u = h._size,
                        y = Number(m.attr("width")),
                        s = Number(m.attr("height")),
                        x = Plotly.Fx.MINDRAG;
                    if (Math.abs(v) < x) {
                        v = 0;
                    }
                    if (Math.abs(t) < x) {
                        t = 0;
                    }
                    if (v || t) {
                        f.dragged = true;
                    }
                    m.call(Plotly.Drawing.setPosition, n + v, p + t);
                    o = Plotly.Fx.dragAlign(n + v, y, u.l, u.l + u.w, c.xanchor);
                    q = Plotly.Fx.dragAlign(p + t + s, -s, u.t + u.h, u.t, c.yanchor);
                    var w = Plotly.Fx.dragCursors(o, q, c.xanchor, c.yanchor);
                    Plotly.Fx.setCursor(m, w);
                    return Plotly.Lib.pauseEvent(z);
                };
                window.onmouseup = function (s) {
                    window.onmousemove = null;
                    window.onmouseup = null;
                    Plotly.Fx.setCursor(m);
                    if (f.dragged && o !== null && q !== null) {
                        Plotly.relayout(f, {
                            "legend.x": o,
                            "legend.y": q
                        });
                    }
                    return Plotly.Lib.pauseEvent(s);
                };
                return Plotly.Lib.pauseEvent(r);
            };
        }
    };
    a.repositionLegend = function (i, m) {
        var k = i.layout,
            f = k._size,
            c = k.legend,
            h = $.isNumeric(c.borderwidth) ? c.borderwidth : 1,
            d = 0,
            l = 0;
        m.each(function (u) {
            var s = d3.select(this),
                x = s.select(".legendtext"),
                n = s.selectAll(".legendtext>tspan"),
                w = (c.font.size || k.font.size || 12) * 1.3,
                p = n[0].length || 1,
                r = x.node() && Plotly.Drawing.bBox(x.node()).width,
                v = s.select("g[class*=math-group]"),
                q, t;
            if (u[0].t.showinlegend === false) {
                s.remove();
                return;
            }
            if (v.node()) {
                var o = Plotly.Drawing.bBox(v.node());
                w = o.height;
                r = o.width;
                v.attr("transform", "translate(0," + (w / 4) + ")");
            } else {
                q = w * (0.3 + (1 - p) / 2);
                x.attr("y", q);
                n.attr("y", q);
            }
            t = Math.max(w * p, 16) + 3;
            s.attr("transform", "translate(" + h + "," + (5 + h + l + t / 2) + ")");
            l += t;
            d = Math.max(d, r || 0);
        });
        d += 45 + h * 2;
        l += 10 + h * 2;
        if (c.x > 3 || !$.isNumeric(c.x)) {
            c.x = 1.02;
            c.xanchor = "left";
        } else {
            if (c.x < -2) {
                c.x = -0.02;
                c.xanchor = "right";
            }
        } if (!$.isNumeric(c.y)) {
            c.y = 1;
            c.yanchor = "top";
        } else {
            if (c.y > 3) {
                c.y = 1.02;
                c.yanchor = "bottom";
            } else {
                if (c.y < -2) {
                    c.y = -0.02;
                    c.yanchor = "top";
                }
            }
        }
        var g = f.l + f.w * c.x,
            e = f.t + f.h * (1 - c.y);
        var j = "left";
        if (c.xanchor === "right" || (c.xanchor === "auto" && c.x >= 2 / 3)) {
            g -= d;
            j = "right";
        } else {
            if (c.xanchor === "center" || (c.xanchor === "auto" && c.x > 1 / 3)) {
                g -= d / 2;
                j = "center";
            }
        }
        var b = "top";
        if (c.yanchor === "bottom" || (c.yanchor === "auto" && c.y <= 1 / 3)) {
            e -= l;
            b = "bottom";
        } else {
            if (c.yanchor === "middle" || (c.yanchor === "auto" && c.y < 2 / 3)) {
                e -= l / 2;
                b = "middle";
            }
        }
        d = Math.ceil(d);
        l = Math.ceil(l);
        g = Math.round(g);
        e = Math.round(e);
        k._infolayer.selectAll("svg.legend").call(Plotly.Drawing.setRect, g, e, d, l);
        k._infolayer.selectAll("svg.legend .bg").call(Plotly.Drawing.setRect, h / 2, h / 2, d - h, l - h);
        Plotly.Plots.autoMargin(i, "legend", {
            x: c.x,
            y: c.y,
            l: d * ({
                right: 1,
                center: 0.5
            }[j] || 0),
            r: d * ({
                left: 1,
                center: 0.5
            }[j] || 0),
            b: l * ({
                top: 1,
                middle: 0.5
            }[b] || 0),
            t: l * ({
                bottom: 1,
                middle: 0.5
            }[b] || 0)
        });
    };
}());
(function () {
    var d = Plotly.Fx = {};
    d.DBLCLICKDELAY = 600;
    d.MINDRAG = 8;
    d.MINZOOM = 20;
    d.init = function (o) {
        var p = o.layout;
        if (p._hasGL3D) {
            return;
        }
        var n = Object.keys(p._plots).sort(function (r, q) {
            if ((p._plots[r].mainplot && true) === (p._plots[q].mainplot && true)) {
                var t = r.split("y"),
                    s = q.split("y");
                return (t[0] === s[0]) ? (Number(t[1] || 1) - Number(s[1] || 1)) : (Number(t[0] || 1) - Number(s[0] || 1));
            }
            return p._plots[r].mainplot ? 1 : -1;
        });
        n.forEach(function (u) {
            var r = p._plots[u],
                x = r.x,
                q = r.y,
                v = (x._linepositions[u] || [])[3],
                t = (q._linepositions[u] || [])[3],
                w = 20;
            if ($.isNumeric(v) && x.side === "top") {
                v -= w;
            }
            if ($.isNumeric(t) && q.side !== "right") {
                t -= w;
            }
            if (!r.mainplot) {
                var s = e(o, r, 0, 0, x._length, q._length, "ns", "ew");
                $(s).mousemove(function (y) {
                    d.hover(o, y, u);
                    p._lasthover = s;
                    p._hoversubplot = u;
                }).mouseout(function (y) {
                    d.unhover(o, y);
                }).click(function (y) {
                    d.click(o, y);
                });
                e(o, r, -w, -w, w, w, "n", "w");
                e(o, r, x._length, -w, w, w, "n", "e");
                e(o, r, -w, q._length, w, w, "s", "w");
                e(o, r, x._length, q._length, w, w, "s", "e");
            }
            if ($.isNumeric(v)) {
                if (x.anchor === "free") {
                    v -= p._size.h * (1 - q.domain[1]);
                }
                e(o, r, x._length * 0.1, v, x._length * 0.8, w, "", "ew");
                e(o, r, 0, v, x._length * 0.1, w, "", "w");
                e(o, r, x._length * 0.9, v, x._length * 0.1, w, "", "e");
            }
            if ($.isNumeric(t)) {
                if (q.anchor === "free") {
                    t -= p._size.w * x.domain[0];
                }
                e(o, r, t, q._length * 0.1, w, q._length * 0.8, "ns", "");
                e(o, r, t, q._length * 0.9, w, q._length * 0.1, "s", "");
                e(o, r, t, 0, w, q._length * 0.1, "n", "");
            }
        });
        $(p._hoverlayer.node()).off("mousemove click").on("mousemove", function (q) {
            q.target = p._lasthover;
            d.hover(o, q, p._hoversubplot);
        }).on("click", function (q) {
            q.target = p._lasthover;
            d.click(o, q);
        });
        p._hoverlayer.node().onmousedown = function (q) {
            p._lasthover.onmousedown(q);
        };
    };
    var b = 60,
        c = Math.PI * b / 180,
        f = 1 / Math.sin(c),
        l = Math.cos(c),
        k = Math.sin(c);
    d.MAXDIST = 20;
    d.hover = function (I, aa, av) {
        if (typeof I === "string") {
            I = document.getElementById(I);
        }
        if (!av) {
            av = "xy";
        }
        var E = I.layout,
            U = E._plots[av],
            ae = [av].concat(U.overlays.map(function (x) {
                return x.x._id + x.y._id;
            })),
            C = [U.x].concat(U.overlays.map(function (x) {
                return x.x;
            })),
            F = [U.y].concat(U.overlays.map(function (x) {
                return x.y;
            })),
            N = aa.hovermode || E.hovermode;
        if (["x", "y", "closest"].indexOf(N) === -1 || !I.calcdata || $(I).find(".zoombox").length || I.dragging) {
            return d.unhover(I, aa);
        }
        var Z = [],
            J, T, ab, B, af, ak, ai;

        function R(x) {
            return ae.map(function () {
                return x;
            });
        }

        function n(x, y) {
            return x.map(function (aE) {
                return aE.c2p(y);
            });
        }

        function ah(x, y) {
            return x.map(function (aE) {
                return aE.p2c(y);
            });
        }
        if ($.isArray(aa)) {
            N = "array";
            J = aa.map(function (y) {
                var x = I.calcdata.filter(function (aE) {
                    return aE[0].t.curve === Number(y.curveNumber);
                });
                return x.length ? x[0] : null;
            });
        } else {
            J = I.calcdata.filter(function (x) {
                return ae.indexOf(x[0].t.xaxis + x[0].t.yaxis) !== -1;
            });
            if (aa.target && ("clientX" in aa) && ("clientY" in aa)) {
                if ($(I).triggerHandler("plotly_beforehover", aa) === false) {
                    return;
                }
                var M = aa.target.getBoundingClientRect(),
                    G = aa.clientX - M.left,
                    w = aa.clientY - M.top;
                if (G < 0 || G > M.width || w < 0 || w > M.height) {
                    return d.unhover(I, aa);
                }
                T = R(G);
                ab = R(w);
            }
            if ("xval" in aa) {
                B = R(aa.xval);
                T = n(C, B[0]);
            } else {
                if ("xpx" in aa) {
                    T = R(aa.xpx);
                }
            } if (T === undefined) {
                T = R(C[0]._length / 2);
            }
            if (B === undefined) {
                B = ah(C, T[0]);
            }
            if ("yval" in aa) {
                af = R(aa.yval);
                ab = n(F, af);
            } else {
                if ("ypx" in aa) {
                    ab = R(aa.ypx);
                }
            } if (ab === undefined) {
                ab = R(F[0]._length / 2);
            }
            if (af === undefined) {
                af = ah(F, ab[0]);
            }
            if (!$.isNumeric(T[0]) || !$.isNumeric(ab[0])) {
                console.log("Plotly.Fx.hover failed", aa, I);
                return d.unhover(I, aa);
            }
        }
        var v = Infinity;
        J = J.filter(function (x) {
            return x && x[0] && x[0].t && x[0].t.visible !== false;
        });
        var ag = J.filter(function (x) {
            return !(Plotly.Plots.isBar(x[0].t.type) && x[0].t.orientation === "h");
        });
        if (N === "x" && !ag.length) {
            N = "y";
        }
        var L = N === "y" && J.length > 1;
        J.forEach(function (aY, be) {
            if (!aY) {
                return;
            }
            var aO = null,
                a4 = aY[0].t,
                a2 = ae.indexOf(a4.xaxis + a4.yaxis),
                a6 = C[a2],
                aU = F[a2],
                aH = N,
                aN, a5, aG, aK, aS, aR, x, bf, aF, aE, aV, y, bc, ba, a9, a8;
            if (aH !== "closest") {
                v = Infinity;
            }
            if (aH === "array") {
                var aM = aa[be];
                if ("pointNumber" in aM) {
                    aO = aM.pointNumber;
                    aH = "closest";
                } else {
                    aH = "";
                    if ("xval" in aM) {
                        a5 = aM.xval;
                        aN = a6.c2p(a5);
                        aH = "x";
                    }
                    if ("yval" in aM) {
                        aK = aM.yval;
                        aG = aU.c2p(aK);
                        aH = aH ? "closest" : "y";
                    }
                }
            } else {
                aN = T[a2];
                aG = ab[a2];
                a5 = B[a2];
                aK = af[a2];
            } if (Plotly.Plots.isHeatmap(a4.type)) {
                if (v < d.MAXDIST) {
                    return;
                }
                aH = "closest";
                var a0 = aY[0].z,
                    a7 = Plotly.Plots.isContour(a4.type);
                ak = aY[0].x;
                ai = aY[0].y;
                var aQ = ak,
                    bd = ai,
                    aZ, aT;
                if (aO !== null) {
                    try {
                        a9 = Math.round(aO[1]);
                        a8 = Math.round(aO[0]);
                    } catch (bb) {
                        console.log("Error hovering on heatmap, pointNumber must be [row,col], found:", aO);
                        return;
                    }
                    if (a9 < 0 || a9 >= a0[0].length || a8 < 0 || a8 > a0.length) {
                        return;
                    }
                } else {
                    if (j(a5 - ak[0], a5 - ak[ak.length - 1]) > d.MAXDIST || j(aK - ai[0], aK - ai[ai.length - 1]) > d.MAXDIST) {
                        return;
                    } else {
                        if (a7) {
                            aQ = [2 * ak[0] - ak[1]];
                            for (var aJ = 1; aJ < ak.length; aJ++) {
                                aQ.push((ak[aJ] + ak[aJ - 1]) / 2);
                            }
                            aQ.push([2 * ak[ak.length - 1] - ak[ak.length - 2]]);
                            bd = [2 * ai[0] - ai[1]];
                            for (aJ = 1; aJ < ai.length; aJ++) {
                                bd.push((ai[aJ] + ai[aJ - 1]) / 2);
                            }
                            bd.push([2 * ai[ai.length - 1] - ai[ai.length - 2]]);
                        }
                        a9 = Math.max(0, Math.min(aQ.length - 2, Plotly.Lib.findBin(a5, aQ)));
                        a8 = Math.max(0, Math.min(bd.length - 2, Plotly.Lib.findBin(aK, bd)));
                    }
                }
                aS = a6.c2p(ak[a9]);
                aR = a6.c2p(ak[a9 + 1]);
                x = aU.c2p(ai[a8]);
                bf = aU.c2p(ai[a8 + 1]);
                if (a7) {
                    aR = aS;
                    aZ = ak[a9];
                    bf = x;
                    aT = ai[a8];
                } else {
                    aZ = (ak[a9] + ak[a9 + 1]) / 2;
                    aT = (ai[a8] + ai[a8 + 1]) / 2;
                    if (a4.zsmooth) {
                        aS = aR = (aS + aR) / 2;
                        x = bf = (x + bf) / 2;
                    }
                }
                Z.push({
                    i: 0,
                    dist: d.MAXDIST + 10,
                    curvenum: be,
                    x0: aS,
                    x1: aR,
                    y0: x,
                    y1: bf,
                    xLabel: aZ,
                    yLabel: aT,
                    zLabel: a0[a8][a9],
                    xa: a6,
                    ya: aU
                });
                return;
            } else {
                if (Plotly.Plots.isBar(a4.type)) {
                    var a3 = a4.dbar * (1 - E.bargap) / 2;
                    if (a4.orientation === "h") {
                        bc = function (bg) {
                            return [a6.c2p(bg.x, true)];
                        };
                        aF = function (bi) {
                            var bh = a6.c2p(bi.b, true),
                                bg = a6.c2p(bi.x, true);
                            return j(bh - aN, bg - aN) + (aN - bg) / (bh - bg);
                        };
                        aV = function (bg) {
                            return bg.s;
                        };
                        ba = (N === "y") ? function (bg) {
                            return [aU.c2p(bg.p - a3, true), aU.c2p(bg.p + a3, true)];
                        } : function (bg) {
                            return [aU.c2p(bg.y - a4.barwidth / 2, true), aU.c2p(bg.y + a4.barwidth / 2, true)];
                        };
                        aE = function (bg) {
                            var bh = ba(bg);
                            return j(bh[0] - aG, bh[1] - aG);
                        };
                        y = function (bg) {
                            return bg.p;
                        };
                    } else {
                        ba = function (bg) {
                            return [aU.c2p(bg.y, true)];
                        };
                        aE = function (bi) {
                            var bh = aU.c2p(bi.b, true),
                                bg = aU.c2p(bi.y, true);
                            return j(bh - aG, bg - aG) + (aG - bg) / (bh - bg);
                        };
                        y = function (bg) {
                            return bg.s;
                        };
                        bc = (N === "x") ? function (bg) {
                            return [a6.c2p(bg.p - a3, true), a6.c2p(bg.p + a3, true)];
                        } : function (bg) {
                            return [a6.c2p(bg.x - a4.barwidth / 2, true), a6.c2p(bg.x + a4.barwidth / 2, true)];
                        };
                        aF = function (bh) {
                            var bg = bc(bh);
                            return j(bg[0] - aN, bg[1] - aN);
                        };
                        aV = function (bg) {
                            return bg.p;
                        };
                    }
                } else {
                    if (a4.type === "box") {
                        var aP = (aH === "closest") ? d.MAXDIST / 5 : 0;
                        bc = function (bg) {
                            return [a6.c2p(bg.x + a4.bx - a4.bdx, true), a6.c2p(bg.x + a4.bx + a4.bdx, true)];
                        };
                        aF = function (bh) {
                            var bg = bc(bh);
                            return j(bg[0] - aN, bg[1] - aN) + aP;
                        };
                        aE = function (bg) {
                            return j(aU.c2p(bg.min, true) - aG, aU.c2p(bg.max, true) - aG);
                        };
                        aV = function (bg) {
                            return bg.x;
                        };
                    } else {
                        aF = function (bg) {
                            return Math.abs(a6.c2p(bg.x) - aN);
                        };
                        aE = function (bg) {
                            return Math.abs(aU.c2p(bg.y) - aG);
                        };
                        bc = function (bh) {
                            var bi = a6.c2p(bh.x),
                                bg = bh.mrc || 0;
                            return [bi - bg, bi + bg];
                        };
                        ba = function (bh) {
                            var bi = aU.c2p(bh.y),
                                bg = bh.mrc || 0;
                            return [bi - bg, bi + bg];
                        };
                        aV = function (bg) {
                            return bg.x;
                        };
                        y = function (bg) {
                            return bg.y;
                        };
                    }
                }
            } if (aO !== null) {
                if (aO < 0 || aO >= aY.length) {
                    return;
                }
                v = 0;
            } else {
                var aI = {
                    x: aF,
                    y: aE,
                    closest: function (bg) {
                        return Math.sqrt(Math.pow(aF(bg), 2) + Math.pow(aE(bg), 2));
                    }
                }[aH];
                aY.forEach(function (bi, bh) {
                    var bj = aI(bi);
                    if (bi.mrc) {
                        var bg = Math.max(3, bi.mrc);
                        bj = Math.max(bj - bg, 1 - 3 / bg);
                    }
                    if (bj < v) {
                        v = bj;
                        aO = bh;
                    }
                });
            } if (!$.isNumeric(aO) || v > d.MAXDIST) {
                return;
            }
            if (N === "closest") {
                Z = [];
            }
            var aL = aY[aO];
            ak = bc(aL);
            var a1 = {
                    i: aO,
                    dist: v,
                    curvenum: be,
                    x0: ak[0],
                    x1: ak[ak.length - 1],
                    xLabel: aV(aL),
                    name: a4.name,
                    xa: a6,
                    ya: aU
                },
                aX;
            if (a4.type === "box") {
                var aW = [];
                ["med", "min", "lf", "q1", "mean", "q3", "uf", "max"].forEach(function (bg) {
                    if (bg === "mean" && !a4.mean) {
                        return;
                    }
                    if (!(bg in aL)) {
                        return;
                    }
                    if (bg === "lf" && aL.lf === aL.min) {
                        return;
                    }
                    if (bg === "uf" && aL.uf === aL.max) {
                        return;
                    }
                    ai = aU.c2p(aL[bg], true);
                    if (aW.indexOf(ai) !== -1) {
                        return;
                    }
                    aW.push(ai);
                    aX = $.extend({}, a1, {
                        y0: ai,
                        y1: ai,
                        yLabel: aL[bg],
                        attr: bg,
                        type: "box"
                    });
                    if (bg === "mean" && ("sd" in aL) && a4.mean === "sd") {
                        aX.ysd = aL.sd;
                    }
                    if (bg !== "med") {
                        aX.name = "";
                    }
                    Z.push(aX);
                });
            } else {
                ai = ba(aL);
                $.extend(a1, {
                    y0: ai[0],
                    y1: ai[ai.length - 1],
                    yLabel: y(aL)
                });
                if (aL.tx) {
                    a1.text = aL.tx;
                }
                Z.push(a1);
            }
        });
        var V = Infinity;
        Z = Z.filter(function (x) {
            if (x && ("dist" in x)) {
                V = Math.min(V, x.dist);
            }
            return x && $.isNumeric(x.curvenum) && x.i >= 0 && x.i < J[x.curvenum].length && $.isNumeric(x.x0) && $.isNumeric(x.y0) && $.isNumeric(x.xa.c2l(x.xLabel)) && $.isNumeric(x.ya.c2l(x.yLabel));
        });
        if (Z.length === 0) {
            return d.unhover(I, aa);
        }
        var p, an = C[0],
            S = F[0];
        Z.forEach(function (y, x) {
            y.posref = N === "y" ? (y.x0 + y.x1) / 2 : (y.y0 + y.y1) / 2;
            y.x0 = Plotly.Lib.constrain(y.x0, 0, an._length);
            y.x1 = Plotly.Lib.constrain(y.x1, 0, an._length);
            y.y0 = Plotly.Lib.constrain(y.y0, 0, S._length);
            y.y1 = Plotly.Lib.constrain(y.y1, 0, S._length);
            y.xLabel = Plotly.Axes.tickText(y.xa, y.xa.c2l(y.xLabel), "hover");
            y.yLabel = Plotly.Axes.tickText(y.ya, y.ya.c2l(y.yLabel), "hover");
            if (y.dist === V && p === undefined) {
                p = x;
            }
            if ("xsd" in y) {
                y.xLabel.text += " &plusmn; " + Plotly.Axes.tickText(y.xa, y.xa.c2l(y.xsd), "hover").text;
            }
            if ("ysd" in y) {
                y.yLabel.text += " &plusmn; " + Plotly.Axes.tickText(y.ya, y.ya.c2l(y.ysd), "hover").text;
            }
        });
        if (!p) {
            p = 0;
        }
        E._hoverlayer.selectAll("g.axistext").remove();
        var z = Z[p],
            W = 13,
            ad = "Arial, sans-serif",
            aA = 3,
            P = 6,
            u = E._paperdiv.node().getBoundingClientRect().top,
            ac = z[N === "y" ? "yLabel" : "xLabel"].text;
        if (V <= d.MAXDIST && ["array", "closest"].indexOf(N) === -1) {
            var am = E._hoverlayer.append("g").classed("axistext", true);
            var D = am.append("path").style({
                fill: "#444",
                "stroke-width": "1px",
                stroke: "#fff"
            });
            var aD = am.append("text").call(Plotly.Drawing.font, ad, W, "#fff").text(ac).attr("data-notex", 1).call(Plotly.util.convertToTspans);
            aD.selectAll("tspan.line").call(Plotly.Drawing.setPosition, 0, 0);
            var Y = aD.node().getBoundingClientRect();
            if (N === "x") {
                aD.attr("text-anchor", "middle").call(Plotly.Drawing.setPosition, 0, (an.side === "top" ? (u - Y.bottom - P - aA) : (u - Y.top + P + aA))).selectAll("tspan.line").attr({
                    x: aD.attr("x"),
                    y: aD.attr("y")
                });
                var A = an.side === "top" ? "-" : "";
                D.attr("d", "M0,0L" + P + "," + A + P + "H" + (aA + Y.width / 2) + "v" + A + (aA * 2 + Y.height) + "H-" + (aA + Y.width / 2) + "V" + A + P + "H-" + P + "Z");
                am.attr("transform", "translate(" + (an._offset + (z.x0 + z.x1) / 2) + "," + (S._offset + (an.side === "top" ? 0 : S._length)) + ")");
            } else {
                aD.attr("text-anchor", S.side === "right" ? "start" : "end").call(Plotly.Drawing.setPosition, (S.side === "right" ? 1 : -1) * (aA + P), u - Y.top - Y.height / 2).selectAll("tspan.line").attr({
                    x: aD.attr("x"),
                    y: aD.attr("y")
                });
                var aq = S.side === "right" ? "" : "-";
                D.attr("d", "M0,0L" + aq + P + "," + P + "V" + (aA + Y.height / 2) + "h" + aq + (aA * 2 + Y.width) + "V-" + (aA + Y.height / 2) + "H" + aq + P + "V-" + P + "Z");
                am.attr("transform", "translate(" + (an._offset + (S.side === "right" ? an._length : 0)) + "," + (S._offset + (z.y0 + z.y1) / 2) + ")");
            }
            Z = Z.filter(function (x) {
                return ("zLabel" in x) || x[N === "y" ? "yLabel" : "xLabel"].text === ac;
            });
        }
        var H = g(E.plot_bgcolor, E.paper_bgcolor);
        var ao = E._hoverlayer.selectAll("g.hovertext").data(Z, function (x) {
            return [x.curvenum, x.i, x.x0, x.y0, x.name, x.attr || ""].join(",");
        });
        ao.enter().append("g").classed("hovertext", true).each(function () {
            var x = d3.select(this);
            x.append("rect").call(Plotly.Drawing.fillColor, Plotly.Drawing.addOpacity(H, 0.8));
            x.append("text").classed("name", true).call(Plotly.Drawing.font, ad, W);
            x.append("path").style("stroke-width", "1px");
            x.append("text").classed("nums", true).call(Plotly.Drawing.font, ad, W);
        });
        ao.exit().remove();
        ao.each(function (aU) {
            var aS = d3.select(this).attr("transform", ""),
                aM = J[aU.curvenum][0].t,
                aR = J[aU.curvenum][aU.i],
                aX = (aU.name && !("zLabel" in aU) && I.data.length > 1) ? $("<p>" + aU.name + "</p>").text() : "",
                aQ = 0,
                aN, y, aO, aP;
            if (!aM.visible) {
                aO = "";
            } else {
                if (aM.type === "scatter") {
                    if (aM.mode === "lines") {
                        aO = (aM.lc && Plotly.Drawing.opacity(aM.lc)) ? aM.lc : aM.fc;
                    } else {
                        if (aM.mode === "none") {
                            aO = aM.fill ? aM.fc : "";
                        } else {
                            var aG = aR.mcc || aM.mc,
                                aT = aR.mlcc || aM.mlc;
                            aO = (aG && Plotly.Drawing.opacity(aG)) ? aG : (aT && Plotly.Drawing.opacity(aT) && (aR.mlw || aM.mlw)) ? aT : "";
                            if (aO) {
                                aQ = 0.3;
                            } else {
                                aO = (aM.lc && Plotly.Drawing.opacity(aM.lc) && aM.mode.indexOf("lines") !== -1 && aM.lw) ? aM.lc : aM.fc;
                            }
                        }
                    }
                } else {
                    if (Plotly.Plots.isBar(aM.type)) {
                        aO = (aM.mc && Plotly.Drawing.opacity(aM.mc)) ? aM.mc : (aM.mlc && Plotly.Drawing.opacity(aM.mlc) && aM.mlw) ? aM.mlc : "";
                    } else {
                        if (aM.type === "box") {
                            aO = (aM.lc && Plotly.Drawing.opacity(aM.lc) && aM.lw) ? aM.lc : (aM.mc && Plotly.Drawing.opacity(aM.mc) && aM.boxpts) ? aM.mc : aM.fc;
                        }
                    }
                }
            } if (!aO || !Plotly.Drawing.opacity(aO)) {
                aO = "#444";
            }
            aO = g(aO, H, aQ);
            y = tinycolor(aO).toRgb();
            aP = (0.299 * y.r + 0.587 * y.g + 0.114 * y.b) > 128 ? "#000" : "#FFF";
            if (aX.length > 15) {
                aX = aX.substr(0, 12) + "...";
            }
            if ("zLabel" in aU) {
                aN = "x: " + aU.xLabel.text + "<br>y: " + aU.yLabel.text + "<br>z: " + aU.zLabel;
            } else {
                if (N === "x" && aU.xLabel.text === ac) {
                    aN = aU.yLabel.text;
                } else {
                    if (N === "y" && aU.yLabel.text === ac) {
                        aN = aU.xLabel.text;
                    } else {
                        if (aU.type === "box") {
                            aN = aU.yLabel.text;
                            if (aX) {
                                var x = $("<p>" + aU.xLabel.text + "</p>").text();
                                if (x !== aX) {
                                    aX += ": " + x;
                                }
                            }
                        } else {
                            aN = "(" + aU.xLabel.text + ", " + aU.yLabel.text + ")";
                        }
                    }
                }
            } if (aU.text) {
                aN += "<br>" + aU.text;
            }
            var aV = aS.select("text.nums").style("fill", aP).call(Plotly.Drawing.setPosition, 0, 0).text(aN).attr("data-notex", 1).call(Plotly.util.convertToTspans);
            aV.selectAll("tspan.line").call(Plotly.Drawing.setPosition, 0, 0);
            var aW = aS.select("text.name"),
                aE = 0;
            if (aX) {
                aW.style("fill", aO).text(aX).call(Plotly.Drawing.setPosition, 0, 0).attr("data-notex", 1).call(Plotly.util.convertToTspans);
                aW.selectAll("tspan.line").call(Plotly.Drawing.setPosition, 0, 0);
                aE = aW.node().getBoundingClientRect().width + 2 * aA;
            } else {
                aW.remove();
                aS.select("rect").remove();
            }
            aS.select("path").style({
                fill: aO,
                stroke: aP
            });
            var aI = aV.node().getBoundingClientRect(),
                aK = an._offset + (aU.x0 + aU.x1) / 2,
                aH = S._offset + (aU.y0 + aU.y1) / 2,
                aL = Math.abs(aU.x1 - aU.x0),
                aJ = Math.abs(aU.y1 - aU.y0),
                aF = aI.width + P + aA + aE;
            aU.ty0 = u - aI.top;
            aU.bx = aI.width + 2 * aA;
            aU.by = aI.height + 2 * aA;
            aU.anchor = "start";
            aU.txwidth = aI.width;
            aU.tx2width = aE;
            if (L) {
                aU.pos = aK;
                aH += aJ / 2;
                if (aH + aF > E.height) {
                    aU.anchor = "end";
                    aH -= aJ;
                    if (aH - aF < 0) {
                        aU.anchor = "middle";
                        aH += aJ / 2;
                    }
                }
            } else {
                aU.pos = aH;
                aK += aL / 2;
                if (aK + aF > E.width) {
                    aU.anchor = "end";
                    aK -= aL;
                    if (aK - aF < 0) {
                        aU.anchor = "middle";
                        aK += aL / 2;
                    }
                }
            }
            aV.attr("text-anchor", aU.anchor);
            if (aE) {
                aW.attr("text-anchor", aU.anchor);
            }
            aS.attr("transform", "translate(" + aK + "," + aH + ")" + (L ? "rotate(" + b + ")" : ""));
        });
        var s = 0,
            O = L ? an : S,
            ay = O._offset,
            Q = O._offset + O._length,
            al = Z.map(function (y, x) {
                return [{
                    i: x,
                    dp: 0,
                    pos: y.pos,
                    posref: y.posref,
                    size: y.by * (L ? f : 1) / 2
                }];
            }).sort(function (y, x) {
                return y[0].posref - x[0].posref;
            }),
            aB, r, aC, au, q, t;

        function o(x) {
            t += x.dp;
        }

        function K(x) {
            x.dp += r;
        }

        function aj(x) {
            x.dp -= aC;
        }

        function aw(x) {
            var aF = x[0],
                y = x[x.length - 1];
            r = ay - aF.pos - aF.dp + aF.size;
            aC = y.pos + y.dp + y.size - Q;
            if (r > 0.01) {
                x.forEach(K);
                aB = false;
            }
            if (aC < 0.01) {
                return;
            }
            if (r < -0.01) {
                x.forEach(aj);
                aB = false;
            }
            if (!aB) {
                return;
            }
            if (al.length > 1) {
                console.log("hover error... how did we get here?", al);
            }
            var aE = 0;
            for (au = 0; au < x.length; au++) {
                q = x[au];
                if (q.pos + q.dp + q.size > Q) {
                    aE++;
                }
            }
            for (au = x.length - 1; au >= 0; au--) {
                if (aE <= 0) {
                    break;
                }
                q = x[au];
                if (q.pos > Q - 1) {
                    q.del = true;
                    aE--;
                }
            }
            for (au = 0; au < x.length; au++) {
                if (aE <= 0) {
                    break;
                }
                q = x[au];
                if (q.pos < ay + 1) {
                    q.del = true;
                    aE--;
                    aC = q.size * 2;
                    x.forEach(aj);
                }
            }
            for (au = x.length - 1; au >= 0; au--) {
                if (aE <= 0) {
                    break;
                }
                q = x[au];
                if (q.pos + q.dp + q.size > Q) {
                    q.del = true;
                    aE--;
                }
            }
        }
        while (!aB && s <= Z.length) {
            s++;
            aB = true;
            au = 0;
            while (au < al.length - 1) {
                var at = al[au],
                    ap = al[au + 1],
                    az = at[at.length - 1],
                    ax = ap[0];
                r = az.pos + az.dp + az.size - ax.pos - ax.dp + ax.size;
                if (r > 0.01) {
                    ap.forEach(K);
                    at.push.apply(at, ap);
                    al.splice(au + 1, 1);
                    t = 0;
                    at.forEach(o);
                    aC = t / at.length;
                    at.forEach(aj);
                    aB = false;
                } else {
                    au++;
                }
            }
            al.forEach(aw);
        }
        al.forEach(function (x) {
            x.forEach(function (y) {
                Z[y.i].offset = y.dp;
                Z[y.i].del = y.del;
            });
        });
        ao.each(function (aK) {
            var aJ = d3.select(this);
            if (aK.del) {
                aJ.remove();
                return;
            }
            var aF = aK.anchor === "end" ? -1 : 1,
                aH = aJ.select("text.nums"),
                aE = {
                    start: 1,
                    end: -1,
                    middle: 0
                }[aK.anchor],
                y = aE * (P + aA),
                x = y + aE * (aK.txwidth + aA),
                aI = 0,
                aG = aK.offset;
            if (aK.anchor === "middle") {
                y -= aK.tx2width / 2;
                x -= aK.tx2width / 2;
            }
            if (L) {
                aG *= -k;
                aI = aK.offset * l;
            }
            aJ.select("path").attr("d", aK.anchor === "middle" ? ("M-" + (aK.bx / 2) + ",-" + (aK.by / 2) + "h" + aK.bx + "v" + aK.by + "h-" + aK.bx + "Z") : ("M0,0L" + (aF * P + aI) + "," + (P + aG) + "v" + (aK.by / 2 - P) + "h" + (aF * aK.bx) + "v-" + aK.by + "H" + (aF * P + aI) + "V" + (aG - P) + "Z"));
            aH.call(Plotly.Drawing.setPosition, y + aI, aG + aK.ty0 - aK.by / 2 + aA).selectAll("tspan.line").attr({
                x: aH.attr("x"),
                y: aH.attr("y")
            });
            if (aK.tx2width) {
                aJ.select("text.name, text.name tspan.line").call(Plotly.Drawing.setPosition, x + aE * aA + aI, aG + aK.ty0 - aK.by / 2 + aA);
                aJ.select("rect").call(Plotly.Drawing.setRect, x + (aE - 1) * aK.tx2width / 2 + aI, aG - aK.by / 2 - 1, aK.tx2width, aK.by + 2);
            }
        });
        var ar = I.hoverdata;
        I.hoverdata = Z.map(function (y) {
            var aE = J[y.curvenum][0].t.curve,
                x = {
                    data: I.data[aE],
                    curveNumber: aE,
                    pointNumber: y.i,
                    x: y.xLabel.x,
                    y: y.yLabel.x,
                    xaxis: y.xa,
                    yaxis: y.ya
                };
            if ("zLabel" in y) {
                x.z = y.zLabel;
            }
            return x;
        });
        if (!aa.target) {
            return;
        }
        var X = !ar || ar.length !== I.hoverdata.length;
        if (!X) {
            ar.forEach(function (y, x) {
                if (y.curveNumber !== I.hoverdata[x].curveNumber || y.pointNumber !== I.hoverdata[x].pointNumber) {
                    X = true;
                }
            });
        }
        if (!X) {
            return;
        }
        if (ar) {
            $(I).trigger("plotly_unhover", {
                points: ar
            });
        }
        $(I).trigger("plotly_hover", {
            points: I.hoverdata,
            xaxes: C,
            yaxes: F,
            xvals: B,
            yvals: af
        });
    };
    d.unhover = function (o, n) {
        if (typeof o === "string") {
            o = document.getElementById(o);
        }
        if (n.fromUnhover) {
            return;
        }
        if (n && n.relatedTarget && $(n.relatedTarget).parents('[class="hoverlayer"]').length) {
            n.fromUnhover = true;
            d.hover(o, n, o.layout._hoversubplot);
        } else {
            if (n && n.target && $(o).triggerHandler("plotly_beforehover", n) === false) {
                return;
            }
            o.layout._hoverlayer.selectAll("g").remove();
            if (n && n.target && o.hoverdata) {
                $(o).trigger("plotly_unhover", {
                    points: o.hoverdata
                });
            }
            o.hoverdata = undefined;
        }
    };
    d.click = function (o, n) {
        if (o.hoverdata && n && n.target) {
            $(o).trigger("plotly_click", {
                points: o.hoverdata
            });
            n.stopImmediatePropagation();
        }
    };
    d.modeBar = function (n) {
        var o = $(n).find(".modebar"),
            q = n.layout;

        function p() {
            o.find("button").each(function () {
                var s = $(this),
                    r = s.attr("data-val") || true,
                    t = n.layout[s.attr("data-attr")];
                s.toggleClass("active", t === r);
            });
        }
        if (o.length === 0) {
            o = $('<div class="modebar"><div class="btn-group float--left"><button class="btn btn--icon btn--plot ploticon" data-attr="dragmode" data-val="zoom" rel="tooltip" title="Zoom"><i class="ploticon-zoombox"></i></button><button class="btn btn--icon btn--plot ploticon" data-attr="dragmode" data-val="pan" rel="tooltip" title="Pan"><i class="ploticon-pan"></i></button></div><div class="btn-group float--left"><button class="btn btn--icon btn--plot ploticon" data-attr="zoom" data-val="in" rel="tooltip" title="Zoom in"><i class="ploticon-zoom_plus"></i></button><button class="btn btn--icon btn--plot ploticon" data-attr="zoom" data-val="out" rel="tooltip" title="Zoom out"><i class="ploticon-zoom_minus"></i></button><button class="btn btn--icon btn--plot ploticon" data-attr="allaxes.autorange" data-val="" rel="tooltip" title="Autoscale"><i class="ploticon-autoscale"></i></button></div><div class="btn-group float--left"><button class="btn btn--icon btn--plot ploticon" data-attr="hovermode" data-val="closest" rel="tooltip" title="Closest data"><i class="ploticon-tooltip_basic"></i></button><button class="btn btn--icon btn--plot ploticon" data-attr="hovermode" data-val="x" rel="tooltip" title="Compare data"><i class="ploticon-tooltip_compare"></i></button></div></div>').appendTo(q._paperdiv.node());
            o.find("button").tipsy({
                gravity: "n",
                opacity: 1
            }).click(function () {
                var w = $(this).attr("data-attr"),
                    t = $(this).attr("data-val") || true,
                    r = {},
                    x = n.layout;
                r[w] = t;
                if (w === "zoom") {
                    var v = x.xaxis.range,
                        z = x.yaxis.range,
                        y = (t === "in") ? 0.5 : 2,
                        u = (1 + y) / 2,
                        s = (1 - y) / 2;
                    r = {
                        "xaxis.range[0]": u * v[0] + s * v[1],
                        "xaxis.range[1]": u * v[1] + s * v[0],
                        "yaxis.range[0]": u * z[0] + s * z[1],
                        "yaxis.range[1]": u * z[1] + s * z[0]
                    };
                }
                Plotly.relayout(n, r).then(function () {
                    p();
                    if (w === "dragmode") {
                        d.setCursor(x._paper.select(".nsewdrag"), {
                            pan: "move",
                            zoom: "crosshair"
                        }[t]);
                    }
                });
            });
            if (q._privateplot) {
                o.append('<span class="badge-private float--left">PRIVATE</span>');
            }
        }
        p();
        if (q) {
            o.find('[data-attr="hovermode"]').toggle(q.hovermode !== false);
        }
    };
    var m = true;

    function e(U, X, I, H, J, Q, Y, S) {
        var V = 0,
            F = 1,
            P = U.layout,
            R = [X.x],
            p = [X.y],
            M = R[0]._length,
            T = p[0]._length,
            z = (Y + S === "nsew") ? ({
                pan: "move",
                zoom: "crosshair"
            }[P.dragmode]) : (Y + S).toLowerCase() + "-resize",
            s = Y + S + "drag",
            W = [X].concat((Y && S) ? X.overlays : []),
            u = X.draglayer.selectAll("." + s).data([0]);
        u.enter().append("rect").classed("drag", true).classed(s, true).style({
            fill: "black",
            opacity: 0,
            "stroke-width": 0
        }).attr("data-subplot", X.id);
        u.call(Plotly.Drawing.setRect, I, H, J, Q).call(d.setCursor, z);
        u = u.node();
        W.forEach(function (w) {
            if (R.indexOf(w.x) === -1) {
                R.push(w.x);
            }
            if (p.indexOf(w.y) === -1) {
                p.push(w.y);
            }
        });

        function o(w) {
            if (!w._id) {
                Plotly.Axes.initAxis(U, w);
            }
            return w._id;
        }
        var K = R.map(o),
            O = p.map(o),
            G = R.concat(p);

        function E(w) {
            w.range = w.range.map(Number);
        }
        u.onmousedown = function (w) {
            if (d.dragClear(U)) {
                return true;
            }
            U.dragging = true;
            var x = (new Date()).getTime();
            if (x - V < d.DBLCLICKDELAY) {
                F += 1;
            } else {
                F = 1;
                V = x;
            } if (Y + S === "nsew" && ((P.dragmode === "zoom") ? !w.shiftKey : w.shiftKey)) {
                v(w);
            } else {
                t(w);
            }
            return Plotly.Lib.pauseEvent(w);
        };
        var N = [0, 0, M, T],
            D = null,
            B = 300,
            r = X.mainplot ? P._plots[X.mainplot] : X;
        if (Y.length * S.length !== 1) {
            $(u).off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll", function (ad) {
                if (!U.mainsite && !P._enablescrollzoom) {
                    return;
                }
                var x = $(U).find(".plotly")[0];
                if (x.scrollHeight !== x.clientHeight || x.scrollWidth !== x.clientWidth) {
                    return;
                }
                clearTimeout(D);
                var aa = Math.exp(-Math.min(Math.max(ad.originalEvent.wheelDelta, -50), 50) / 200),
                    y = r.draglayer.select(".nsewdrag").node().getBoundingClientRect(),
                    ac = (ad.originalEvent.clientX - y.left) / y.width,
                    Z = N[0] + N[2] * ac,
                    w = (y.bottom - ad.originalEvent.clientY) / y.height,
                    ab = N[1] + N[3] * (1 - w);
                if (S) {
                    R.forEach(function (af) {
                        E(af);
                        var ae = af.range[0] + (af.range[1] - af.range[0]) * ac;
                        af.range = [ae + (af.range[0] - ae) * aa, ae + (af.range[1] - ae) * aa];
                    });
                    N[2] *= aa;
                    N[0] = Z - N[2] * ac;
                }
                if (Y) {
                    p.forEach(function (ae) {
                        E(ae);
                        var af = ae.range[0] + (ae.range[1] - ae.range[0]) * w;
                        ae.range = [af + (ae.range[0] - af) * aa, af + (ae.range[1] - af) * aa];
                    });
                    N[3] *= aa;
                    N[1] = ab - N[3] * (1 - w);
                }
                n(N);
                A(Y, S);
                D = setTimeout(function () {
                    N = [0, 0, M, T];
                    L();
                }, B);
            });
        }

        function v(ae) {
            var w = r.draglayer.select(".nsewdrag").node().getBoundingClientRect(),
                y = ae.clientX - w.left,
                ag = ae.clientY - w.top,
                ad = {
                    l: y,
                    r: y,
                    w: 0,
                    t: ag,
                    b: ag,
                    h: 0
                },
                x = U.hmpixcount ? (U.hmlumcount / U.hmpixcount) : tinycolor(U.layout.plot_bgcolor).toHsl().l,
                ah = "M0,0H" + M + "V" + T + "H0V0",
                Z = X.plot.append("path").attr("class", "zoombox").style({
                    fill: x > 0.2 ? "rgba(0,0,0,0)" : "rgba(255,255,255,0",
                    "stroke-width": 0
                }).attr("d", ah + "Z"),
                ac = X.plot.append("path").attr("class", "zoombox-corners").style({
                    fill: "#FFF",
                    stroke: "#444",
                    "stroke-width": 1,
                    opacity: 0
                }).attr("d", "M0,0Z"),
                aa = false,
                ab = "xy";
            R.forEach(E);
            p.forEach(E);
            window.onmousemove = function (an) {
                var al = Math.max(0, Math.min(M, an.clientX - w.left)),
                    am = Math.max(0, Math.min(T, an.clientY - w.top)),
                    ak = Math.abs(al - y),
                    aj = Math.abs(am - ag),
                    ai = Math.floor(Math.min(aj, ak, d.MINZOOM) / 2);
                ad = {
                    l: Math.min(y, al),
                    r: Math.max(y, al),
                    t: Math.min(ag, am),
                    b: Math.max(ag, am)
                };
                if (aj < Math.min(Math.max(ak * 0.6, d.MINDRAG), d.MINZOOM)) {
                    if (ak < d.MINDRAG) {
                        ab = "";
                        ad.r = ad.l;
                        ad.t = ad.b;
                        ac.attr("d", "M0,0Z");
                    } else {
                        ad.t = 0;
                        ad.b = T;
                        ab = "x";
                        ac.attr("d", "M" + (ad.l - 0.5) + "," + (ag - d.MINZOOM - 0.5) + "h-3v" + (2 * d.MINZOOM + 1) + "h3ZM" + (ad.r + 0.5) + "," + (ag - d.MINZOOM - 0.5) + "h3v" + (2 * d.MINZOOM + 1) + "h-3Z");
                    }
                } else {
                    if (ak < Math.min(aj * 0.6, d.MINZOOM)) {
                        ad.l = 0;
                        ad.r = M;
                        ab = "y";
                        ac.attr("d", "M" + (y - d.MINZOOM - 0.5) + "," + (ad.t - 0.5) + "v-3h" + (2 * d.MINZOOM + 1) + "v3ZM" + (y - d.MINZOOM - 0.5) + "," + (ad.b + 0.5) + "v3h" + (2 * d.MINZOOM + 1) + "v-3Z");
                    } else {
                        ab = "xy";
                        ac.attr("d", "M" + (ad.l - 3.5) + "," + (ad.t - 0.5 + ai) + "h3v" + (-ai) + "h" + ai + "v-3h-" + (ai + 3) + "ZM" + (ad.r + 3.5) + "," + (ad.t - 0.5 + ai) + "h-3v" + (-ai) + "h" + (-ai) + "v-3h" + (ai + 3) + "ZM" + (ad.r + 3.5) + "," + (ad.b + 0.5 - ai) + "h-3v" + ai + "h" + (-ai) + "v3h" + (ai + 3) + "ZM" + (ad.l - 3.5) + "," + (ad.b + 0.5 - ai) + "h3v" + ai + "h" + ai + "v3h-" + (ai + 3) + "Z");
                    }
                }
                ad.w = ad.r - ad.l;
                ad.h = ad.b - ad.t;
                Z.attr("d", ah + "M" + (ad.l) + "," + (ad.t) + "v" + (ad.h) + "h" + (ad.w) + "v-" + (ad.h) + "h-" + (ad.w) + "Z");
                if (!aa) {
                    Z.transition().style("fill", x > 0.2 ? "rgba(0,0,0,0.4)" : "rgba(255,255,255,0.3)").duration(200);
                    ac.transition().style("opacity", 1).duration(200);
                    aa = true;
                }
                return Plotly.Lib.pauseEvent(ae);
            };
            window.onmouseup = function (ak) {
                U.dragging = false;
                window.onmousemove = null;
                window.onmouseup = null;
                if (Math.min(ad.h, ad.w) < d.MINDRAG * 2) {
                    if (F === 2 && (new Date()).getTime() - V < d.DBLCLICKDELAY) {
                        C();
                    }
                    return af();
                }

                function al() {
                    if (ab.indexOf("x") > -1) {
                        R.forEach(function (an) {
                            var am = an.range;
                            an.range = [am[0] + (am[1] - am[0]) * (ad.l) / M, am[0] + (am[1] - am[0]) * (ad.r) / M];
                        });
                    }
                    if (ab.indexOf("y") > -1) {
                        p.forEach(function (am) {
                            var an = am.range;
                            am.range = [an[0] + (an[1] - an[0]) * (T - ad.b) / T, an[0] + (an[1] - an[0]) * (T - ad.t) / T];
                        });
                    }
                    af();
                    L(ab);
                    if (m && U.data && (!U.mainsite || !signedin("noprompt"))) {
                        Plotly.Lib.notifier("Double-click to<br>zoom back out", "long");
                        m = false;
                    }
                }

                function ai() {
                    if (ab.indexOf("y") > -1) {
                        R.forEach(function (an) {
                            var am = an.range;
                            an.range = [(am[0] * (ad.r) + am[1] * (-ad.l)) / ad.w, (am[0] * (ad.r - M) + am[1] * (M - ad.l)) / ad.w];
                        });
                    }
                    if (ab.indexOf("y") > -1) {
                        p.forEach(function (am) {
                            var an = am.range;
                            am.range = [(an[0] * (T - ad.t) + an[1] * (ad.b - T)) / ad.h, (an[0] * (-ad.t) + an[1] * (ad.b)) / ad.h];
                        });
                    }
                    af();
                    L();
                }
                if (ae.altKey || ae.ctrlKey || ae.metaKey || ak.altKey || ak.ctrlKey || ak.metaKey) {
                    $('<div class="modal-backdrop fade" id="js-zoombox-backdrop"></div><div class="open" id="js-zoombox-menu"><ul class="dropdown-menu"><li><a id="zoomboxin">Zoom In</a></li><li><a id="zoomboxout">Zoom Out</a></li></ul></div>').appendTo("body");
                    var aj = $(".js-zoombox-menu ul")[0].getBoundingClientRect();
                    $(".js-zoombox-menu ul").css({
                        left: (Math.min(ak.clientX, w.right - aj.width) + window.scrollX) + "px",
                        top: (Math.min(ak.clientY, w.bottom - aj.height) + window.scrollY) + "px",
                        "z-index": 20001
                    });
                    $(".js-zoombox-backdrop,.zoombox").click(af);
                    $(".js-zoombox-in").click(al);
                    $(".js-zoombox-out").click(ai);
                } else {
                    al();
                }
                return Plotly.Lib.pauseEvent(ak);
            };

            function af() {
                $(".zoombox,.js-zoombox-backdrop,.js-zoombox-menu").remove();
            }
        }

        function t(w) {
            U.dragged = false;
            window.onmousemove = function (Z) {
                var y = Z.clientX - w.clientX,
                    x = Z.clientY - w.clientY;
                U.dragged = (S ? Math.abs(y) : 0) + (Y ? Math.abs(x) : 0) > d.MINDRAG;
                if (U.dragged) {
                    q(y, x);
                } else {
                    q(0, 0);
                }
                return Plotly.Lib.pauseEvent(Z);
            };
            window.onmouseup = function (x) {
                window.onmousemove = null;
                window.onmouseup = null;
                U.dragging = false;
                if (U.dragged) {
                    L();
                } else {
                    if ((new Date()).getTime() - V < d.DBLCLICKDELAY) {
                        if (F === 2 && (Y + S).length !== 1) {
                            C();
                        } else {
                            if (F === 1 && (Y + S).length === 1) {
                                i(u);
                            }
                        }
                    }
                }
                return Plotly.Lib.pauseEvent(x);
            };
        }

        function q(y, x) {
            if (S === "ew" || Y === "ns") {
                if (S) {
                    R.forEach(function (aa) {
                        aa.range = [aa._r[0] - y / aa._m, aa._r[1] - y / aa._m];
                    });
                }
                if (Y) {
                    p.forEach(function (aa) {
                        aa.range = [aa._r[0] - x / aa._m, aa._r[1] - x / aa._m];
                    });
                }
                n([S ? -y : 0, Y ? -x : 0, M, T]);
                A(Y, S);
                return;
            }

            function Z(aa) {
                return 1 - ((aa >= 0) ? Math.min(aa, 0.9) : 1 / (1 / Math.max(aa, -0.3) + 3.222));
            }

            function w(ab, aa, ac) {
                ab.forEach(function (ad) {
                    ad.range[aa] = ad._r[1 - aa] + (ad._r[aa] - ad._r[1 - aa]) / Z(ac / ad._length);
                });
                return ab[0]._length * (ab[0]._r[aa] - ab[0].range[aa]) / (ab[0]._r[aa] - ab[0]._r[1 - aa]);
            }
            if (S === "w") {
                y = w(R, 0, y);
            } else {
                if (S === "e") {
                    y = w(R, 1, -y);
                } else {
                    if (!S) {
                        y = 0;
                    }
                }
            } if (Y === "n") {
                x = w(p, 1, x);
            } else {
                if (Y === "s") {
                    x = w(p, 0, -x);
                } else {
                    if (!Y) {
                        x = 0;
                    }
                }
            }
            n([(S === "w") ? y : 0, (Y === "n") ? x : 0, M - y, T - x]);
            A(Y, S);
        }

        function A(x, w) {
            (w ? R : []).concat(x ? p : []).forEach(function (y) {
                Plotly.Axes.doTicks(U, y._id, true);
            });
            (P.annotations || []).forEach(function (Z, y) {
                if ((w && K.indexOf(Z.xref) !== -1) || (x && O.indexOf(Z.yref) !== -1)) {
                    Plotly.Annotations.draw(U, y);
                }
            });
        }

        function C() {
            var w = {};
            (S ? R : []).concat(Y ? p : []).forEach(function (x) {
                w[x._name + ".autorange"] = true;
            });
            Plotly.relayout(U, w);
        }

        function L(x) {
            var w = {};
            G.forEach(function (y) {
                if (x && x.indexOf(y._id.charAt(0)) === -1) {
                    return;
                }[0, 1].forEach(function (Z) {
                    if (y._r[Z] !== y.range[Z]) {
                        w[y._name + ".range[" + Z + "]"] = y.range[Z];
                    }
                });
                y.range = y._r.slice();
            });
            n([0, 0, M, T]);
            Plotly.relayout(U, w);
        }

        function n(w) {
            Object.keys(P._plots).forEach(function (aa) {
                var y = P._plots[aa],
                    Z = y.x,
                    x = y.y,
                    ac = S && R.indexOf(Z) !== -1,
                    ab = Y && p.indexOf(x) !== -1;
                if (ac || ab) {
                    var ad = [0, 0, Z._length, x._length];
                    if (ac) {
                        ad[0] = w[0];
                        ad[2] = w[2];
                    }
                    if (ab) {
                        ad[1] = w[1];
                        ad[3] = w[3];
                    }
                    y.plot.attr("viewBox", ad.join(" "));
                }
            });
        }
        return u;
    }
    d.dragAlign = function (p, s, n, u, q) {
        var o = (p - n) / (u - n),
            t = o + s / (u - n),
            r = (o + t) / 2;
        if (q === "left" || q === "bottom") {
            return o;
        }
        if (q === "center" || q === "middle") {
            return r;
        }
        if (q === "right" || q === "top") {
            return t;
        }
        if (o < (2 / 3) - r) {
            return o;
        }
        if (t > (4 / 3) - r) {
            return t;
        }
        return r;
    };
    var h = [
        ["sw-resize", "s-resize", "se-resize"],
        ["w-resize", "move", "e-resize"],
        ["nw-resize", "n-resize", "ne-resize"]
    ];
    d.dragCursors = function (o, q, n, p) {
        if (n === "left") {
            o = 0;
        } else {
            if (n === "center") {
                o = 1;
            } else {
                if (n === "right") {
                    o = 2;
                } else {
                    o = Plotly.Lib.constrain(Math.floor(o * 3), 0, 2);
                }
            }
        } if (p === "bottom") {
            q = 0;
        } else {
            if (p === "middle") {
                q = 1;
            } else {
                if (p === "top") {
                    q = 2;
                } else {
                    q = Plotly.Lib.constrain(Math.floor(q * 3), 0, 2);
                }
            }
        }
        return h[q][o];
    };
    d.dragClear = function (n) {
        if (n.input) {
            n.input.trigger("blur");
        }
        return false;
    };

    function i(w) {
        var P = $(w).parents(".js-plotly-plot")[0],
            K = P.layout,
            G = d3.select(w),
            o = G.attr("class"),
            u = $(w),
            x, s = {
                maxWidth: 1000,
                minWidth: 20
            },
            Q = {},
            r, z, B, t, L, O;
        var p = ($(w).attr("data-subplot").match(/(x[0-9]*)(y[0-9]*)/) || ["", "x", "y"]);
        r = (["n", "s"].indexOf(o.charAt(5)) !== -1) ? "y" : "x";
        z = p[r === "x" ? 1 : 2];
        B = Plotly.Axes.getFromId(P, z);
        t = (["s", "w"].indexOf(o.charAt(5)) !== -1) ? 0 : 1;
        x = Plotly.Lib.nestedProperty(K, B._name + ".range[" + t + "]");
        s.align = (o === "drag edrag" || B.side === "right") ? "right" : "left";
        u = $(P).find("." + B._id + "title");
        var I = ["font-size", "font-family", "font-weight", "font-style", "font-stretch", "font-variant", "letter-spacing", "word-spacing"];
        var y = ["font-size", "letter-spacing", "word-spacing"];
        for (L in I) {
            var J = u.attr(I[L]);
            if (y.indexOf(I[L]) >= 0 && Number(J) > 0) {
                J += "px";
            }
            if (J) {
                Q[I[L]] = J;
            }
        }
        s.comfortZone = 3 + (Number(String(Q["font-size"]).split("px")[0]) || 20);
        var n = w.getBoundingClientRect(),
            D = $("<input/>").appendTo(P);
        P.input = D;
        D.css(Q).css({
            position: "absolute",
            top: 0,
            left: 0,
            "z-index": 6000
        });
        var C = x.get(),
            F = Math.abs(C - B.range[1 - t]);
        if (B.type === "date") {
            D.val(Plotly.Lib.ms2DateTime(C, F));
        } else {
            if (B.type === "log") {
                O = Math.ceil(Math.max(0, -Math.log(F) / Math.LN10)) + 3;
                D.val(d3.format("." + String(O) + "g")(Math.pow(10, C)));
            } else {
                O = Math.floor(Math.log(Math.abs(C)) / Math.LN10) - Math.floor(Math.log(F) / Math.LN10) + 4;
                D.val(d3.format("." + String(O) + "g")(C));
            }
        }
        var S = D.val(),
            q = $("<tester/>").css({
                position: "absolute",
                top: -9999,
                left: -9999,
                width: "auto",
                whiteSpace: "nowrap"
            }).css(Q).insertAfter(D).html(a(S));

        function A() {
            return Plotly.Lib.constrain(q.width() + s.comfortZone, s.minWidth, s.maxWidth);
        }
        D.width(A());
        var M = D[0].getBoundingClientRect(),
            R = n.left - M.left;
        D.css("top", (n.top - M.top + (n.height - M.height) / 2) + "px");
        if (s.align === "right") {
            R += n.width - M.width;
        } else {
            if (s.align === "center") {
                R += (n.width + s.comfortZone - M.width) / 2;
            }
        }
        D.css("left", R + "px");
        var N = {
            left: 0,
            center: 0.5,
            right: 1
        }[s.align];
        var H = D.position().left + D.width() * N;
        D[0].select();

        function E() {
            D.remove();
            q.remove();
            P.input = null;
        }
        D.bind("keyup keydown blur update", function (X) {
            var T = S;
            S = D.val();
            var U = $.trim(S);
            if (!P.input || !K) {
                return;
            }
            if ((X.type === "blur") || (X.type === "keydown" && X.which === 13)) {
                U = B.c2l(B.type === "category" ? U : B.d2c(U));
                if (!$.isNumeric(U)) {
                    return;
                }
                var V = {};
                V[x.astr] = U;
                Plotly.relayout(P, V);
                E();
            } else {
                if (X.type === "keydown" && X.which === 27) {
                    E();
                } else {
                    if (S !== T) {
                        q.html(a(S));
                        var W = A();
                        D.css({
                            width: W,
                            left: H - W * N
                        });
                    }
                }
            }
        });
    }
    d.setCursor = function (n, o) {
        (n.attr("class") || "").split(" ").forEach(function (p) {
            if (p.indexOf("cursor-") === 0) {
                n.classed(p, false);
            }
        });
        if (o) {
            n.classed("cursor-" + o, true);
        }
    };

    function a(n) {
        return n.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\s/g, "&nbsp;");
    }

    function g(r, o, p) {
        var q = tinycolor(r).toRgb(),
            s = tinycolor(o || "#FFF").toRgb();
        if (q.a === 1) {
            return tinycolor(r).toRgbString();
        } else {
            if (p && q.a < p) {
                q.a = p;
            }
        }
        var n = s.a === 1 ? s : {
            r: 255 * (1 - s.a) + s.r * s.a,
            g: 255 * (1 - s.a) + s.g * s.a,
            b: 255 * (1 - s.a) + s.b * s.a
        };
        var t = {
            r: n.r * (1 - q.a) + q.r * q.a,
            g: n.g * (1 - q.a) + q.g * q.a,
            b: n.b * (1 - q.a) + q.b * q.a
        };
        return tinycolor(t).toRgbString();
    }

    function j(n, o) {
        if (n * o < 0 || n === 0) {
            return d.MAXDIST * (0.6 - 0.3 / Math.max(3, Math.abs(n - o)));
        }
        return Infinity;
    }
}());
(function () {
    var b = window.Plotly.ErrorBars = {};
    b.pushRef2GDC = function (p, g, k, f) {
        var h, q = false,
            j = k.split("."),
            d = j[0],
            m = j[1],
            e = d.charAt(d.length - 1);
        if (m == "type") {
            if (g == "various") {
                q = true;
                g = 0;
            }
            h = Number(p.calcdata[Number(g)][0].t[e + "e_tref"]);
        } else {
            if (m == "traceref" || m == "tracerefminus") {
                if (g == "various") {
                    q = true;
                }
                h = Number(f);
            }
        }
        var o = p.data[h][e].map(Number);

        function n(s) {
            var r = p.data[s][d];
            r[m == "tracerefminus" ? "arrayminus" : "array"] = o;
        }
        if (!q) {
            n(Number(g));
        } else {
            for (var l = 0; l < p.data.length; l++) {
                n(l);
            }
        }
    };
    b.styleBoxDrop = function (m, f, z, e, u, j, r, o) {
        var k = (e[0][0] === undefined) ? k == e[0].t : e[0][0].t,
            w = false;
        if (!u) {
            u = e;
            w = true;
        }
        var p = $(Plotly.ToolPanel.dropdown("select-" + f, z)).appendTo(m).get(0),
            v = d3.select(p),
            h = $(m).parents(".popover"),
            n = {
                ye_tkns: "error_y.thickness",
                ye_w: "error_y.width",
                ye_tref: "error_y.traceref",
                ye_trefminus: "error_y.tracerefminus",
                xe_tkns: "error_x.thickness",
                xe_w: "error_x.width",
                xe_tref: "error_x.traceref",
                xe_trefminus: "error_x.tracerefminus"
            },
            y = f.charAt(0);
        var l = v.select("ul").selectAll("li").data(u).enter().append("li").append("a").on("click", function (B, s) {
            var A = $(this).parents(".btn-group");
            A.find(".selected-val").html(A.find("li")[s].innerHTML);
            var t = j || h[0].applyChange;
            t({
                popover: h,
                astr: n[f],
                val: B[0].t[f],
                d: B,
                i: s
            });
        });
        if (o) {
            var x = 40,
                g = 20;
            l.append("svg").attr("width", x).attr("height", g).style("position", "relative").style("top", "2px").append("g").attr("transform", "translate(0," + g / 2 + ")").each(function (t, i) {
                var s = (t[0].t[y + "e_clr"] === "various" ? "#444" : t[0].t[y + "e_clr"]);
                d3.select(this).append("polyline").attr("points", "5,0 35,0").attr(r, t[0].t[f]).style({
                    stroke: Plotly.Drawing.rgb(s),
                    "stroke-opacity": Plotly.Drawing.opacity(s)
                });
            });
        }
        l.append("span").html(function (i) {
            return i[0].t.name + "&nbsp;";
        });
        if (!w) {
            for (var q = 0; q < u.length && u[q][0].t[f] != e[0].t[f]; q++) {
                q = q % u.length;
            }
            if (q === u.length) {
                $(p).find(".btn-group .selected-val").html("Various");
            } else {
                $(p).find(".btn-group .selected-val").html($(v.node()).find("li")[q].innerHTML);
            }
        }
        return p;
    };

    function c(d, e, f) {
        if (d === "percent") {
            return Math.abs(e * f / 100);
        }
        if (d === "constant") {
            return Math.abs(f);
        }
        if (d === "sqrt") {
            return Math.sqrt(Math.abs(e));
        }
        console.log("unrecognized errorbar type", d, f, e);
        return 0;
    }
    b.calc = function (d) {
        (d.calcdata || []).forEach(function (g) {
            var q = g[0].t,
                i = d.data[q.curve],
                e = Plotly.Axes.getFromId(d, q.xaxis || "x"),
                n = Plotly.Axes.getFromId(d, q.yaxis || "y"),
                m = q.ye_vis && ["linear", "log"].indexOf(n.type) != -1,
                o = q.xe_vis && ["linear", "log"].indexOf(e.type) != -1;
            if (!o && !m) {
                return;
            }
            var j = [],
                h = [],
                l, k, p, f;
            g.forEach(function (t, r) {
                try {
                    if ($.isNumeric(n.c2l(t.y)) && $.isNumeric(e.c2l(t.x))) {
                        if (m) {
                            if (q.ye_type == "data") {
                                l = Number(i.error_y.array[r]);
                                k = (q.ye_sym || !("arrayminus" in i.error_y)) ? l : Number(i.error_y.arrayminus[r]);
                            } else {
                                l = c(q.ye_type, t.y, q.ye_val);
                                k = (q.ye_sym || !("valueminus" in i.error_y)) ? l : c(q.ye_type, t.y, q.ye_valminus);
                            } if ($.isNumeric(l) && $.isNumeric(k)) {
                                t.yh = t.y + l;
                                t.ys = t.y - k;
                                h.push(t.ys, t.yh);
                            }
                        }
                        if (o) {
                            if (q.xe_type == "data") {
                                p = Number(i.error_x.array[r]);
                                f = (q.xe_sym || !("arrayminus" in i.error_x)) ? p : Number(i.error_x.arrayminus[r]);
                            } else {
                                p = c(q.xe_type, t.x, q.xe_val);
                                f = (q.xe_sym || !("valueminus" in i.error_x)) ? p : c(q.xe_type, t.x, q.xe_valminus);
                            } if ($.isNumeric(p) && $.isNumeric(f)) {
                                t.xh = t.x + p;
                                t.xs = t.x - f;
                                j.push(t.xs, t.xh);
                            }
                        }
                    }
                } catch (s) {
                    console.log(s);
                }
            });
            Plotly.Axes.expand(n, h, {
                padded: true
            });
            Plotly.Axes.expand(e, j, {
                padded: true
            });
        });
    };
    b.plot = function (e, d, g) {
        d.plot.select(".errorlayer").selectAll("g.errorbars").remove();
        var f;
        d.plot.select(".errorlayer").selectAll("g.errorbars").data(g).enter().append("g").attr("class", "errorbars").each(function (j) {
            var h = j[0].t,
                i = h.mnum > 0 && h.mode.indexOf("markers") != -1;
            if (!(h.ye_vis || h.xe_vis)) {
                return;
            }
            d3.select(this).selectAll("g").data(function (k) {
                return k;
            }).enter().append("g").each(function (n) {
                f = a(n, d, h);
                var l = d3.select(this),
                    m;
                if (i && !n.vis) {
                    return;
                }
                if (h.ye_vis && $.isNumeric(f.x) && $.isNumeric(f.yh) && $.isNumeric(f.ys)) {
                    var k = h.ye_w;
                    m = "M" + (f.x - k) + "," + f.yh + "h" + (2 * k) + "m-" + k + ",0V" + f.ys;
                    if (!f.no_ys) {
                        m += "m-" + k + ",0h" + (2 * k);
                    }
                    l.append("path").classed("yerror", true).attr("d", m);
                }
                if (h.xe_vis && $.isNumeric(f.y) && $.isNumeric(f.xh) && $.isNumeric(f.xs)) {
                    var o = h.xe_w;
                    m = "M" + f.xh + "," + (f.y - o) + "v" + (2 * o) + "m0,-" + o + "H" + f.xs;
                    if (!f.no_xs) {
                        m += "m0,-" + o + "v" + (2 * o);
                    }
                    l.append("path").classed("xerror", true).attr("d", m);
                }
            });
        });
    };
    b.style = function (d) {
        d.selectAll("g.errorbars").each(function (g) {
            var f = d3.select(this),
                e = g[0].t;
            f.selectAll("g path.yerror").style({
                "stroke-width": e.ye_tkns + "px"
            }).call(Plotly.Drawing.strokeColor, e.ye_clr);
            f.selectAll("g path.xerror").style({
                "stroke-width": e.xe_tkns + "px"
            }).call(Plotly.Drawing.strokeColor, e.xe_clr);
        });
    };

    function a(i, f, h) {
        var j = f.x,
            e = f.y,
            g = {
                x: j.c2p(i.x),
                y: e.c2p(i.y)
            };
        if (i.yh !== undefined) {
            g.yh = e.c2p(i.yh);
            g.ys = e.c2p(i.ys);
            if (!$.isNumeric(g.ys)) {
                g.no_ys = true;
                g.ys = e.c2p(i.ys, true);
            }
        }
        if (i.xh !== undefined) {
            g.xh = j.c2p(i.xh);
            g.xs = j.c2p(i.xs);
            if (!$.isNumeric(g.xs)) {
                g.no_xs = true;
                g.xs = j.c2p(i.xs, true);
            }
        }
        return g;
    }
}());
(function () {
    var a = window.Plotly.Scatter = {};
    a.PTS_LINESONLY = 20;
    a.calc = function (o, g) {
        if (!("y" in g) && !("x" in g)) {
            return;
        }
        var j, f = [];
        if (g.visible === false) {
            if (g.mode || ((!g.x || g.x.length < a.PTS_LINESONLY) && (!g.y || g.y.length < a.PTS_LINESONLY))) {
                return [{
                    x: false,
                    y: false
                }];
            } else {
                for (j = 0; j < a.PTS_LINESONLY + 1; j++) {
                    f.push({
                        x: false,
                        y: false
                    });
                }
                return f;
            }
        }
        var c = Plotly.Axes.getFromId(o, g.xaxis || "x"),
            k = Plotly.Axes.getFromId(o, g.yaxis || "y");
        Plotly.Lib.markTime("in Scatter.calc");
        var n = c.makeCalcdata(g, "x");
        Plotly.Lib.markTime("finished convert x");
        var m = k.makeCalcdata(g, "y");
        Plotly.Lib.markTime("finished convert y");
        var h = Math.min(n.length, m.length);
        c._minDtick = 0;
        k._minDtick = 0;
        if (n.length > h) {
            n.splice(h, n.length - h);
        }
        if (m.length > h) {
            m.splice(h, m.length - h);
        }
        var b = {
                padded: true
            },
            p = {
                padded: true
            };
        if (g.mode && g.mode.indexOf("markers") != -1) {
            var e = g.marker ? g.marker.size : 0,
                l = 1.6 * ((g.marker && g.marker.sizeref) || 1),
                d;
            if (g.marker && g.marker.sizemode == "area") {
                d = function (i) {
                    return Math.max(Math.sqrt((i || 0) / l), 3);
                };
            } else {
                d = function (i) {
                    return Math.max((i || 0) / l, 3);
                };
            }
            b.ppad = p.ppad = $.isArray(e) ? e.map(d) : d(e);
        }
        if ((g.fill == "tozerox" || (g.fill == "tonextx" && o.firstscatter)) && (n[0] !== n[h - 1] || m[0] !== m[h - 1])) {
            b.tozero = true;
        } else {
            if ((!g.error_y || !g.error_y.visible) && (["tonexty", "tozeroy"].indexOf(g.fill) != -1 || (g.mode && g.mode.indexOf("markers") == -1 && g.mode.indexOf("text") == -1) || (!g.mode && h >= a.PTS_LINESONLY))) {
                b.padded = false;
                b.ppad = 0;
            }
        } if ((g.fill == "tozeroy" || (g.fill == "tonexty" && o.firstscatter)) && (n[0] !== n[h - 1] || m[0] !== m[h - 1])) {
            p.tozero = true;
        } else {
            if (["tonextx", "tozerox"].indexOf(g.fill) != -1) {
                p.padded = false;
            }
        }
        Plotly.Lib.markTime("ready for Axes.expand");
        Plotly.Axes.expand(c, n, b);
        Plotly.Lib.markTime("done expand x");
        Plotly.Axes.expand(k, m, p);
        Plotly.Lib.markTime("done expand y");
        for (j = 0; j < h; j++) {
            f.push(($.isNumeric(n[j]) && $.isNumeric(m[j])) ? {
                x: n[j],
                y: m[j]
            } : {
                x: false,
                y: false
            });
        }
        o.firstscatter = false;
        return f;
    };
    a.selectMarkers = function (f, c, b) {
        var d = d3.extent(c.x.range.map(c.x.l2c)),
            e = d3.extent(c.y.range.map(c.y.l2c));
        b.forEach(function (l) {
            var g = l[0].t.mnum;
            if (!(g > 0) || l[0].t.mode.indexOf("markers") == -1) {
                return;
            }
            var k = l.filter(function (m) {
                    return m.x >= d[0] && m.x <= d[1] && m.y >= e[0] && m.y <= e[1];
                }),
                j = Math.ceil(k.length / g),
                i = 0;
            b.forEach(function (m) {
                if (m[0].t.mnum > 0 && m[0].t.curve < l[0].t.curve) {
                    i++;
                }
            });
            var h = Math.round(i * j / 3 + Math.floor(i / 3) * j / 7.1);
            l.forEach(function (m) {
                delete m.vis;
            });
            k.forEach(function (m, n) {
                if (Math.round((n + h) % j) === 0) {
                    m.vis = true;
                }
            });
        });
    };
    a.plot = function (k, j, m) {
        a.selectMarkers(k, j, m);
        var b = j.x,
            i = j.y;
        var f = j.plot.select(".scatterlayer").selectAll("g.trace.scatter").data(m);
        f.enter().append("g").attr("class", "trace scatter").style("stroke-miterlimit", 2);

        function c(n, p, o) {
            return (0.75 + 10 * Math.max(0, Math.max(-n, n - b._length) / b._length, Math.max(-p, p - i._length) / i._length)) * Math.max(o || 1, 1);
        }
        var e = "",
            g, d, h;
        f.each(function (H) {
            var y = H[0].t;
            if (y.visible === false) {
                return;
            }
            var C = -1,
                n = d3.select(this);
            g = (y.fill.substr(0, 6) == "tozero" || (y.fill.substr(0, 2) == "to" && !e)) ? n.append("path").classed("js-fill", true).attr("data-curve", y.cdcurve) : null;
            if (h) {
                d = h.datum(H);
            }
            h = n.append("path").classed("js-fill", true);
            var x = null,
                u = null;
            var M = [],
                p, s = "",
                J = "",
                o;
            var z, G, I, q, r;
            var A, L, K;
            var E, B;
            if (["hv", "vh", "hvh", "vhv"].indexOf(y.lineshape) != -1) {
                E = Plotly.Drawing.steps(y.lineshape);
                B = Plotly.Drawing.steps(y.lineshape.split("").reverse().join(""));
            } else {
                if (y.lineshape == "spline") {
                    E = B = function (t) {
                        return Plotly.Drawing.smoothopen(t, y.ls);
                    };
                } else {
                    E = B = function (t) {
                        return "M" + t.join("L");
                    };
                }
            }
            var w = function (t) {
                return "L" + B(t.reverse()).substr(1);
            };

            function F(t) {
                o = true;
                D(t);
                u = t;
            }

            function D(t) {
                if (!$.isNumeric(t[0]) || !$.isNumeric(t[1])) {
                    return;
                }
                M.push(t);
            }

            function v(t) {
                if (t) {
                    q = t;
                }
                if (q == G) {
                    if (G != I) {
                        D(I);
                    }
                } else {
                    if (q == I || I == G) {
                        D(G);
                    } else {
                        if (A == "high") {
                            D(I);
                            D(G);
                        } else {
                            D(G);
                            D(I);
                        }
                    }
                }
                F(q);
                z = q;
                G = I = null;
                L = -1;
            }
            while (C < H.length) {
                M = [];
                o = false;
                z = null;
                L = -1;
                for (C++; C < H.length; C++) {
                    r = [b.c2p(H[C].x), i.c2p(H[C].y)];
                    if (!$.isNumeric(r[0]) || !$.isNumeric(r[1])) {
                        if (y.connectgaps) {
                            continue;
                        } else {
                            break;
                        }
                    }
                    if (!z) {
                        z = r;
                        M.push(z);
                        if (!x) {
                            x = z;
                        }
                        continue;
                    }
                    K = c(r[0], r[1], y.lw);
                    if (L < 0) {
                        if (Math.abs(r[0] - z[0]) < K) {
                            L = 0;
                        } else {
                            if (Math.abs(r[0] - z[1]) < K) {
                                L = 1;
                            } else {
                                z = r;
                                F(z);
                                continue;
                            }
                        }
                    } else {
                        if (Math.abs(r[L] - z[L]) >= K) {
                            v(r);
                            continue;
                        }
                    }
                    q = r;
                    if (!G || q[1 - L] > G[1 - L]) {
                        G = q;
                        A = "high";
                    }
                    if (!I || q[1 - L] < I[1 - L]) {
                        I = q;
                        A = "low";
                    }
                }
                if (L >= 0) {
                    v(r);
                }
                if (M.length) {
                    p = E(M);
                    s += s ? ("L" + p.substr(1)) : p;
                    J = w(M) + J;
                    if (y.mode.indexOf("lines") != -1 && o) {
                        n.append("path").classed("js-line", true).attr("d", p);
                    }
                }
            }
            if (s) {
                if (g) {
                    if (x && u) {
                        if (y.fill.charAt(y.fill.length - 1) == "y") {
                            x[1] = u[1] = i.c2p(0, true);
                        } else {
                            x[0] = u[0] = b.c2p(0, true);
                        }
                        g.attr("d", s + "L" + u + "L" + x + "Z");
                    }
                } else {
                    if (y.fill.substr(0, 6) == "tonext" && s && e) {
                        d.attr("d", s + e + "Z");
                    }
                }
                e = J;
            }
        });
        f.selectAll("path:not([d])").remove();

        function l(n) {
            return n.filter(function (o) {
                return o.vis;
            });
        }
        f.append("g").attr("class", "points").each(function (r) {
            var p = r[0].t,
                q = d3.select(this),
                n = p.mode.indexOf("markers") != -1,
                o = p.mode.indexOf("text") != -1;
            if ((!n && !o) || p.visible === false) {
                q.remove();
            } else {
                if (n) {
                    q.selectAll("path.point").data(p.mnum > 0 ? l : Plotly.Lib.identity).enter().append("path").classed("point", true).call(Plotly.Drawing.translatePoints, b, i);
                }
                if (o) {
                    q.selectAll("g").data(Plotly.Lib.identity).enter().append("g").append("text").call(Plotly.Drawing.translatePoints, b, i);
                }
            }
        });
    };
    a.style = function (c) {
        var b = c.selectAll("g.trace.scatter");
        b.style("opacity", function (e) {
            return e[0].t.op;
        });
        b.selectAll("g.points").each(function (e) {
            d3.select(this).selectAll("path.point").call(Plotly.Drawing.pointStyle, e.t || e[0].t);
            d3.select(this).selectAll("text").call(Plotly.Drawing.textPointStyle, e.t || e[0].t);
        });
        b.selectAll("g.trace path.js-line").call(Plotly.Drawing.lineGroupStyle);
        b.selectAll("g.trace path.js-fill").call(Plotly.Drawing.fillGroupStyle);
    };
}());
(function () {
    var a = window.Plotly.Bars = {};
    a.calc = function (k, e) {
        if (e.visible === false) {
            return;
        }
        if (e.type === "histogram") {
            return Plotly.Histogram.calc(k, e);
        }
        var b = Plotly.Axes.getFromId(k, e.xaxis || "x"),
            h = Plotly.Axes.getFromId(k, e.yaxis || "y"),
            c = e.orientation || ((e.x && !e.y) ? "h" : "v"),
            j, l, g;
        if (c === "h") {
            l = b.makeCalcdata(e, "x");
            j = h.makeCalcdata(e, "y");
        } else {
            l = h.makeCalcdata(e, "y");
            j = b.makeCalcdata(e, "x");
        }
        var f = Math.min(j.length, l.length),
            d = [];
        for (g = 0; g < f; g++) {
            if (($.isNumeric(j[g]) && $.isNumeric(l[g]))) {
                d.push({
                    p: j[g],
                    s: l[g],
                    b: 0
                });
            }
        }
        if (d[0]) {
            d[0].t = {
                orientation: c
            };
        }
        return d;
    };
    a.setPositions = function (f, c) {
        var g = f.layout,
            h = c.x,
            b = c.y,
            e, d;
        ["v", "h"].forEach(function (l) {
            var k = [],
                j = {
                    v: "x",
                    h: "y"
                }[l],
                q = {
                    v: "y",
                    h: "x"
                }[l],
                t = c[j],
                s = c[q];
            f.calcdata.forEach(function (z, y) {
                var v = z[0].t;
                if (v.visible !== false && Plotly.Plots.isBar(v.type) && (v.orientation || "v") === l && (v.xaxis || "x") === h._id && (v.yaxis || "y") === b._id) {
                    k.push(y);
                }
            });
            if (!k.length) {
                return;
            }

            function x(E) {
                var H = [];
                E.forEach(function (I) {
                    f.calcdata[I].forEach(function (J) {
                        H.push(J.p);
                    });
                });
                var y = Plotly.Lib.distinctVals(H),
                    B = y.vals,
                    z = y.minDiff;
                var F = false,
                    A = [];
                if (g.barmode === "group") {
                    E.forEach(function (I) {
                        if (F) {
                            return;
                        }
                        f.calcdata[I].forEach(function (J) {
                            if (F) {
                                return;
                            }
                            A.forEach(function (K) {
                                if (Math.abs(J.p - K) < z) {
                                    F = true;
                                }
                            });
                        });
                        if (F) {
                            return;
                        }
                        f.calcdata[I].forEach(function (J) {
                            A.push(J.p);
                        });
                    });
                }
                Plotly.Axes.minDtick(t, z, B[0], F);
                Plotly.Axes.expand(t, B, {
                    vpad: z / 2
                });
                z *= (1 - g.bargap);
                if (F) {
                    z /= k.length;
                }
                var v;

                function C(I) {
                    I[j] = I.p + v;
                }
                for (var D = 0; D < E.length; D++) {
                    var G = f.calcdata[E[D]][0].t;
                    G.barwidth = z * (1 - g.bargroupgap);
                    G.poffset = ((F ? (2 * D + 1 - E.length) * z : 0) - G.barwidth) / 2;
                    G.dbar = y.minDiff;
                    v = G.poffset + G.barwidth / 2;
                    f.calcdata[E[D]].forEach(C);
                }
            }
            if (g.barmode === "overlay") {
                k.forEach(function (v) {
                    x([v]);
                });
            } else {
                x(k);
            } if (g.barmode === "stack") {
                var r = s.l2c(s.c2l(0)),
                    n = r,
                    p = {},
                    w = 0,
                    m = f.calcdata[k[0]][0].t.barwidth / 100,
                    u = 0;
                for (e = 0; e < k.length; e++) {
                    var i = f.calcdata[k[e]];
                    for (d = 0; d < i.length; d++) {
                        u = Math.round(i[d].p / m);
                        i[d].b = (p[u] || 0);
                        w = i[d].b + i[d].s;
                        i[d][q] = w;
                        p[u] = w;
                        if ($.isNumeric(s.c2l(w))) {
                            r = Math.max(r, w);
                            n = Math.min(n, w);
                        }
                    }
                }
                Plotly.Axes.expand(s, [n, r], {
                    tozero: true,
                    padded: true
                });
            } else {
                var o = function (y) {
                    y[q] = y.s;
                    return y.s;
                };
                for (e = 0; e < k.length; e++) {
                    Plotly.Axes.expand(s, f.calcdata[k[e]].map(o), {
                        tozero: true,
                        padded: true
                    });
                }
            }
        });
    };
    a.plot = function (f, d, e) {
        var h = d.x,
            c = d.y,
            g = f.layout;
        var b = d.plot.select(".barlayer").selectAll("g.trace.bars").data(e).enter().append("g").attr("class", "trace bars");
        b.append("g").attr("class", "points").each(function (j) {
            var i = j[0].t;
            d3.select(this).selectAll("path").data(Plotly.Lib.identity).enter().append("path").each(function (r) {
                var l, k, u, t;
                if (i.orientation === "h") {
                    u = c.c2p(i.poffset + r.p, true);
                    t = c.c2p(i.poffset + r.p + i.barwidth, true);
                    l = h.c2p(r.b, true);
                    k = h.c2p(r.s + r.b, true);
                } else {
                    l = h.c2p(i.poffset + r.p, true);
                    k = h.c2p(i.poffset + r.p + i.barwidth, true);
                    t = c.c2p(r.s + r.b, true);
                    u = c.c2p(r.b, true);
                } if (!$.isNumeric(l) || !$.isNumeric(k) || !$.isNumeric(u) || !$.isNumeric(t) || l === k || u === t) {
                    d3.select(this).remove();
                    return;
                }
                var m = (r.mlw + 1 || i.mlw + 1 || (r.t ? r.t.mlw : 0) + 1) - 1,
                    n = d3.round((m / 2) % 1, 2);

                function s(w) {
                    return (g.bargap === 0 && g.bargroupgap === 0) ? d3.round(Math.round(w) - n, 2) : w;
                }

                function p(w, x) {
                    return Math.abs(w - x) >= 2 ? s(w) : (w > x ? Math.ceil(w) : Math.floor(w));
                }
                if (!g._forexport) {
                    var o = Plotly.Drawing.opacity(r.mc || i.mc || (r.t ? r.t.mc : "")),
                        q = (o < 1 || m > 0.01) ? s : p;
                    l = q(l, k);
                    k = q(k, l);
                    u = q(u, t);
                    t = q(t, u);
                }
                d3.select(this).attr("d", "M" + l + "," + u + "V" + t + "H" + k + "V" + u + "Z");
            });
        });
    };
    a.style = function (d, e) {
        var c = d.selectAll("g.trace.bars"),
            b = c.size();
        c.style("opacity", function (f) {
            return f[0].t.op;
        }).each(function (f) {
            if ((e.barmode === "stack" && b > 1) || (e.bargap === 0 && e.bargroupgap === 0 && !f[0].t.mlw)) {
                d3.select(this).attr("shape-rendering", "crispEdges");
            }
        });
        c.selectAll("g.points").each(function (g) {
            var f = g.t || g[0].t;
            d3.select(this).selectAll("path").each(function (j) {
                var h = (j.mlw + 1 || f.mlw + 1 || (j.t ? j.t.mlw : 0) + 1) - 1,
                    i = d3.select(this);
                i.style("stroke-width", h + "px").call(Plotly.Drawing.fillColor, Plotly.Drawing.tryColorscale(c, f, "m")(j.mc || f.mc || (j.t ? j.t.mc : "")));
                if (h) {
                    i.call(Plotly.Drawing.strokeColor, Plotly.Drawing.tryColorscale(c, f, "ml")(j.mlc || f.mlc || (j.t ? j.t.mlc : "")));
                }
            });
        });
    };
}());
(function () {
    var a = window.Plotly.Boxes = {};
    a.calc = function (n, h) {
        if (!("y" in h) || h.visible === false) {
            return;
        }
        var b = Plotly.Axes.getFromId(n, h.xaxis || "x"),
            i = Plotly.Axes.getFromId(n, h.yaxis || "y"),
            k, j = i.makeCalcdata(h, "y");
        if ("x" in h) {
            k = b.makeCalcdata(h, "x");
        } else {
            var d;
            if ("x0" in h) {
                d = h.x0;
            } else {
                if ("name" in h && (b.type == "category" || ($.isNumeric(h.name) && ["linear", "log"].indexOf(b.type) != -1) || (Plotly.Lib.isDateTime(h.name) && b.type == "date"))) {
                    d = h.name;
                } else {
                    d = n.numboxes;
                }
            }
            d = b.d2c(d);
            k = j.map(function () {
                return d;
            });
        }
        var c = Plotly.Lib.distinctVals(k),
            g = c.vals,
            q = c.minDiff / 2,
            e = g.map(function (l) {
                return {
                    x: l
                };
            }),
            p = g.map(function () {
                return [];
            }),
            o = g.map(function (l) {
                return l - q;
            }),
            f = g.length;
        o.push(g[f - 1] + q);
        Plotly.Axes.expand(i, j, {
            padded: true
        });
        j.forEach(function (l, r) {
            if (!$.isNumeric(l)) {
                return;
            }
            var s = Plotly.Lib.findBin(k[r], o);
            if (s >= 0 && s < f) {
                p[s].push(l);
            }
        });

        function m(l, s) {
            s -= 0.5;
            if (s < 0) {
                return l[0];
            }
            if (s > l.length - 1) {
                return l[l.length - 1];
            }
            var r = s % 1;
            return r * l[Math.ceil(s)] + (1 - r) * l[Math.floor(s)];
        }
        p.forEach(function (s, t) {
            s.sort(function (v, l) {
                return v - l;
            });
            var r = s.length,
                u = e[t];
            u.y = s;
            u.min = s[0];
            u.max = s[r - 1];
            u.mean = Plotly.Lib.mean(s, r);
            u.sd = Plotly.Lib.stdev(s, r, u.mean);
            u.q1 = m(s, r / 4);
            u.med = m(s, r / 2);
            u.q3 = m(s, 0.75 * r);
            u.lf = Math.min(u.q1, s[Math.min(Plotly.Lib.findBin(2.5 * u.q1 - 1.5 * u.q3, s, true) + 1, r - 1)]);
            u.uf = Math.max(u.q3, s[Math.max(Plotly.Lib.findBin(2.5 * u.q3 - 1.5 * u.q1, s), 0)]);
            u.lo = 4 * u.q1 - 3 * u.q3;
            u.uo = 4 * u.q3 - 3 * u.q1;
        });
        e = e.filter(function (l) {
            return l.y && l.y.length;
        });
        if (!e.length) {
            return [{
                t: {
                    emptybox: true
                }
            }];
        }
        e[0].t = {
            boxnum: n.numboxes,
            dx: q
        };
        n.numboxes++;
        return e;
    };
    a.setPositions = function (i, h) {
        var c = h.x,
            g = h.y,
            d = [],
            j = 0,
            l = 0;
        i.calcdata.forEach(function (o, n) {
            var m = o[0].t;
            if (m.visible !== false && !m.emptybox && m.type == "box" && (m.xaxis || "x") == c._id && (m.yaxis || "y") == g._id) {
                d.push(n);
                if (m.boxpts !== false) {
                    j = Math.max(j, m.jitter - m.ptpos - 1);
                    l = Math.max(l, m.jitter + m.ptpos - 1);
                }
            }
        });
        var e = [];
        d.forEach(function (m) {
            i.calcdata[m].forEach(function (n) {
                e.push(n.x);
            });
        });
        if (e.length) {
            var f = Plotly.Lib.distinctVals(e),
                k = f.minDiff / 2;
            if (e.length == f.vals.length) {
                i.numboxes = 1;
            }
            Plotly.Axes.minDtick(c, f.minDiff, f.vals[0], true);
            d.forEach(function (m) {
                i.calcdata[m][0].t.dx = k;
            });
            var b = (1 - i.layout.boxgap) * (1 - i.layout.boxgroupgap) * k / i.numboxes;
            Plotly.Axes.expand(c, f.vals, {
                vpadminus: k + j * b,
                vpadplus: k + l * b
            });
        }
    };
    a.plot = function (f, d, e) {
        var g = f.layout,
            h = d.x,
            c = d.y;
        var b = d.plot.select(".boxlayer").selectAll("g.trace.boxes").data(e).enter().append("g").attr("class", "trace boxes");
        b.each(function (m) {
            var i = m[0].t,
                k = (g.boxmode == "group" && f.numboxes > 1),
                j = i.dx * (1 - g.boxgap) * (1 - g.boxgroupgap) / (k ? f.numboxes : 1),
                l = k ? 2 * i.dx * (-0.5 + (i.boxnum + 0.5) / f.numboxes) * (1 - g.boxgap) : 0,
                n = j * i.ww;
            if (i.visible === false || i.emptybox) {
                d3.select(this).remove();
                return;
            }
            i.bx = l;
            i.bdx = j;
            d3.select(this).selectAll("path.box").data(Plotly.Lib.identity).enter().append("path").attr("class", "box").each(function (v) {
                var y = h.c2p(v.x + l, true),
                    q = h.c2p(v.x + l - j, true),
                    o = h.c2p(v.x + l + j, true),
                    u = h.c2p(v.x + l - n, true),
                    t = h.c2p(v.x + l + n, true),
                    r = c.c2p(v.med, true),
                    x = c.c2p(v.q1, true),
                    w = c.c2p(v.q3, true),
                    s = c.c2p(i.boxpts === false ? v.min : v.lf, true),
                    p = c.c2p(i.boxpts === false ? v.max : v.uf, true);
                d3.select(this).attr("d", "M" + q + "," + r + "H" + o + "M" + q + "," + x + "H" + o + "V" + w + "H" + q + "ZM" + y + "," + x + "V" + s + "M" + y + "," + w + "V" + p + ((i.ww === 0) ? "" : "M" + u + "," + s + "H" + t + "M" + u + "," + p + "H" + t));
            });
            if (i.boxpts !== false) {
                d3.select(this).selectAll("g.points").data(function (o) {
                    o.forEach(function (p) {
                        p.t = i;
                    });
                    return o;
                }).enter().append("g").attr("class", "points").selectAll("path").data(function (p) {
                    var o = (i.boxpts == "all") ? p.y : p.y.filter(function (q) {
                        return (q < p.lf || q > p.uf);
                    });
                    return o.map(function (q) {
                        var r = (i.jitter ? i.jitter * (Math.random() - 0.5) * 2 : 0) + i.ptpos,
                            s = {
                                x: p.x + r * j + l,
                                y: q,
                                t: i
                            };
                        if (i.boxpts == "suspectedoutliers" && q < p.uo && q > p.lo) {
                            s.so = true;
                        }
                        return s;
                    });
                }).enter().append("path").call(Plotly.Drawing.translatePoints, h, c);
            }
            if (i.mean) {
                d3.select(this).selectAll("path.mean").data(Plotly.Lib.identity).enter().append("path").attr("class", "mean").style("fill", "none").each(function (u) {
                    var t = h.c2p(u.x + l, true),
                        s = h.c2p(u.x + l - j, true),
                        q = h.c2p(u.x + l + j, true),
                        p = c.c2p(u.mean, true),
                        o = c.c2p(u.mean - u.sd, true),
                        r = c.c2p(u.mean + u.sd, true);
                    d3.select(this).attr("d", "M" + s + "," + p + "H" + q + ((i.mean != "sd") ? "" : "m0,0L" + t + "," + o + "L" + s + "," + p + "L" + t + "," + r + "Z"));
                });
            }
        });
    };
    a.style = function (c) {
        var b = c.selectAll("g.trace.boxes");
        b.style("opacity", function (e) {
            return e[0].t.op;
        }).each(function (f) {
            var e = f[0].t;
            d3.select(this).selectAll("path.box").style("stroke-width", e.lw + "px").call(Plotly.Drawing.strokeColor, e.lc).call(Plotly.Drawing.fillColor, e.fc);
            d3.select(this).selectAll("path.mean").style({
                "stroke-width": e.lw,
                "stroke-dasharray": (2 * e.lw) + "px," + (e.lw) + "px"
            }).call(Plotly.Drawing.strokeColor, e.lc);
        }).selectAll("g.points").each(function (f) {
            var e = f.t || f[0].t;
            d3.select(this).selectAll("path").call(Plotly.Drawing.pointStyle, e);
            d3.select(this).selectAll("text").call(Plotly.Drawing.textPointStyle, e);
        });
    };
}());
(function () {
    var d = window.Plotly.Heatmap = {};
    MAX_PX_PER_BRICK = 0;
    d.calc = function (u, C) {
        if (!("colorbar" in C)) {
            C.colorbar = {};
        }
        if (C.visible === false) {
            return;
        }
        Plotly.Lib.markTime("start convert x&y");
        var U = Plotly.Axes.getFromId(u, C.xaxis || "x"),
            I = Plotly.Axes.getFromId(u, C.yaxis || "y"),
            R = C.x ? U.makeCalcdata(C, "x") : [],
            v, j, Q = C.y ? I.makeCalcdata(C, "y") : [],
            e, h, P, ae;
        U._minDtick = 0;
        I._minDtick = 0;
        Plotly.Lib.markTime("done convert x&y");
        if (Plotly.Plots.isHist2D(C.type)) {
            var s = Math.min(R.length, Q.length);
            if (R.length > s) {
                R.splice(s, R.length - s);
            }
            if (Q.length > s) {
                Q.splice(s, Q.length - s);
            }
            Plotly.Lib.markTime("done convert data");
            if (C.autobinx || !("xbins" in C)) {
                C.xbins = Plotly.Axes.autoBin(R, U, C.nbinsx, "2d");
                if (C.type == "histogram2dcontour") {
                    C.xbins.start -= C.xbins.size;
                    C.xbins.end += C.xbins.size;
                }
            }
            if (C.autobiny || !("ybins" in C)) {
                C.ybins = Plotly.Axes.autoBin(Q, I, C.nbinsy, "2d");
                if (C.type == "histogram2dcontour") {
                    C.ybins.start -= C.ybins.size;
                    C.ybins.end += C.ybins.size;
                }
            }
            Plotly.Lib.markTime("done autoBin");
            P = [];
            var V = [],
                ai = [],
                k = (typeof (C.xbins.size) == "string") ? [] : C.xbins,
                ad = (typeof (C.xbins.size) == "string") ? [] : C.ybins,
                L = 0,
                ab, ac, D = [],
                ah = C.histnorm || "",
                A = C.histfunc || "",
                F = (ah.indexOf("density") != -1),
                M = (A == "max" || A == "min"),
                E = (M ? null : 0),
                O = function (i, r) {
                    P[i][r]++;
                    L++;
                },
                p = null,
                w = false,
                l, K;
            var af = ("z" in C) ? C.z : (("marker" in C && $.isArray(C.marker.color)) ? C.marker.color : "");
            if (af && ["sum", "avg", "min", "max"].indexOf(A) != -1) {
                var J = af.map(Number);
                if (A == "sum") {
                    O = function (r, z, y) {
                        var x = J[y];
                        if ($.isNumeric(x)) {
                            P[r][z] += x;
                            L += x;
                        }
                    };
                } else {
                    if (A == "avg") {
                        w = true;
                        O = function (r, z, y) {
                            var x = J[y];
                            if ($.isNumeric(x)) {
                                P[r][z] += x;
                                D[r][z]++;
                            }
                        };
                    } else {
                        if (A == "min") {
                            O = function (r, z, y) {
                                var x = J[y];
                                if ($.isNumeric(x)) {
                                    if (!$.isNumeric(P[r][z])) {
                                        L += x;
                                        P[r][z] = x;
                                    } else {
                                        if (P[r][z] > x) {
                                            L += x - P[r][z];
                                            P[r][z] = x;
                                        }
                                    }
                                }
                            };
                        } else {
                            if (A == "max") {
                                O = function (r, z, y) {
                                    var x = J[y];
                                    if ($.isNumeric(x)) {
                                        if (!$.isNumeric(P[r][z])) {
                                            L += x;
                                            P[r][z] = x;
                                        } else {
                                            if (P[r][z] < x) {
                                                L += x - P[r][z];
                                                P[r][z] = x;
                                            }
                                        }
                                    }
                                };
                            }
                        }
                    }
                }
            }
            if (ah.indexOf("probability") != -1 || ah.indexOf("percent") != -1) {
                p = F ? function (i, r) {
                    P[i][r] *= l[r] * K[i] / L;
                } : function (i, r) {
                    P[i][r] /= L;
                };
            } else {
                if (F) {
                    p = function (i, r) {
                        P[i][r] *= l[r] * K[i];
                    };
                }
            }
            for (ae = C.xbins.start; ae < C.xbins.end; ae = Plotly.Axes.tickIncrement(ae, C.xbins.size)) {
                V.push(E);
                if ($.isArray(k)) {
                    k.push(ae);
                }
                if (w) {
                    ai.push(0);
                }
            }
            if ($.isArray(k)) {
                k.push(ae);
            }
            var aa = V.length;
            v = C.xbins.start;
            j = (ae - v) / aa;
            v += j / 2;
            for (ae = C.ybins.start; ae < C.ybins.end; ae = Plotly.Axes.tickIncrement(ae, C.ybins.size)) {
                P.push(V.concat());
                if ($.isArray(ad)) {
                    ad.push(ae);
                }
                if (w) {
                    D.push(ai.concat());
                }
            }
            if ($.isArray(ad)) {
                ad.push(ae);
            }
            var X = P.length;
            e = C.ybins.start;
            h = (ae - e) / X;
            e += h / 2;
            if (F) {
                l = V.map(function (m, n) {
                    if (ah.indexOf("density") == -1) {
                        return 1;
                    } else {
                        if ($.isArray(k)) {
                            return 1 / (k[n + 1] - k[n]);
                        } else {
                            return 1 / j;
                        }
                    }
                });
                K = P.map(function (m, n) {
                    if (ah.indexOf("density") == -1) {
                        return 1;
                    } else {
                        if ($.isArray(ad)) {
                            return 1 / (ad[n + 1] - ad[n]);
                        } else {
                            return 1 / h;
                        }
                    }
                });
            }
            Plotly.Lib.markTime("done making bins");
            for (ae = 0; ae < s; ae++) {
                ab = Plotly.Lib.findBin(R[ae], k);
                ac = Plotly.Lib.findBin(Q[ae], ad);
                if (ab >= 0 && ab < aa && ac >= 0 && ac < X) {
                    O(ac, ab, ae);
                }
            }
            if (w) {
                for (ab = 0; ab < aa; ab++) {
                    for (ac = 0; ac < X; ac++) {
                        if (D[ac][ab] > 0) {
                            P[ac][ab] /= D[ac][ab];
                            L += P[ac][ab];
                        } else {
                            P[ac][ab] = null;
                        }
                    }
                }
            }
            if (ah.indexOf("percent") != -1) {
                L /= 100;
            }
            if (p) {
                for (ab = 0; ab < aa; ab++) {
                    for (ac = 0; ac < X; ac++) {
                        if ($.isNumeric(P[ac][ab])) {
                            p(ac, ab);
                        }
                    }
                }
            }
            Plotly.Lib.markTime("done binning");
        } else {
            v = C.x0 || 0;
            j = C.dx || 1;
            e = C.y0 || 0;
            h = C.dy || 1;
            if (C.transpose) {
                var W = Plotly.Lib.aggNums(Math.max, 0, C.z.map(function (i) {
                    return i.length;
                }));
                P = [];
                for (var ag = 0; ag < W; ag++) {
                    var q = [];
                    for (var S = 0; S < C.z.length; S++) {
                        q.push(b(C.z[S][ag]));
                    }
                    P.push(q);
                }
            } else {
                P = C.z.map(function (i) {
                    return i.map(b);
                });
            }
        } if ([true, "fast"].indexOf(C.zsmooth) != -1) {
            if (U.type == "log" || I.type == "log") {
                C.zsmooth = false;
                Plotly.Lib.notifier("cannot fast-zsmooth: log axis found");
            } else {
                if (!Plotly.Plots.isHist2D(C.type)) {
                    if (R.length) {
                        var g = (R[R.length - 1] - R[0]) / (R.length - 1),
                            H = Math.abs(g / 100);
                        for (ae = 0; ae < R.length - 1; ae++) {
                            if (Math.abs(R[ae + 1] - R[ae] - g) > H) {
                                C.zsmooth = false;
                                Plotly.Lib.notifier("cannot fast-zsmooth: x scale is not linear");
                                break;
                            }
                        }
                    }
                    if (Q.length) {
                        var f = (Q[Q.length - 1] - Q[0]) / (Q.length - 1),
                            G = Math.abs(f / 100);
                        for (ae = 0; ae < Q.length - 1; ae++) {
                            if (Math.abs(Q[ae + 1] - Q[ae] - f) > G) {
                                C.zsmooth = false;
                                Plotly.Lib.notifier("cannot fast-zsmooth: y scale is not linear");
                                break;
                            }
                        }
                    }
                }
            }
        }
        if (C.zauto !== false || !("zmin" in C)) {
            C.zmin = Plotly.Lib.aggNums(Math.min, null, P);
        }
        if (C.zauto !== false || !("zmax" in C)) {
            C.zmax = Plotly.Lib.aggNums(Math.max, null, P);
        }
        if (C.zmin == C.zmax) {
            C.zmin -= 0.5;
            C.zmax += 0.5;
        }
        var N = Plotly.Lib.aggNums(Math.max, null, P.map(function (i) {
                return i.length;
            })),
            Z = C.xtype == "scaled" ? "" : C.x,
            T = c(C.type, Z, v, j, N, u.layout.xaxis),
            o = C.ytype == "scaled" ? "" : C.y,
            t = c(C.type, o, e, h, P.length, u.layout.yaxis);
        Plotly.Axes.expand(U, T);
        Plotly.Axes.expand(I, t);
        var B = {
            x: T,
            y: t,
            z: P
        };
        if (Plotly.Plots.isContour(C.type) && C.contours && C.contours.coloring == "heatmap") {
            var Y = C.type === "contour" ? "heatmap" : "histogram2d";
            B.xfill = c(Y, Z, v, j, N, u.layout.xaxis);
            B.yfill = c(Y, o, e, h, P.length, u.layout.yaxis);
        }
        return [B];
    };

    function b(e) {
        if (!e && e !== 0) {
            return null;
        }
        return Number(e);
    }

    function c(m, n, k, o, l, e) {
        var g = [],
            p, f, h;
        if ($.isArray(n) && (!Plotly.Plots.isHist2D(m)) && (e.type != "category")) {
            n = n.map(e.d2c);
            var j = n.length;
            if (j == l) {
                if (Plotly.Plots.isContour(m)) {
                    return n.slice(0, l);
                }
                if (l == 1) {
                    return [n[0] - 0.5, n[0] + 0.5];
                } else {
                    g = [1.5 * n[0] - 0.5 * n[1]];
                    for (h = 1; h < j; h++) {
                        g.push((n[h - 1] + n[h]) * 0.5);
                    }
                    g.push(1.5 * n[j - 1] - 0.5 * n[j - 2]);
                }
            } else {
                return n.slice(0, l + 1);
            }
        } else {
            f = o || 1;
            if (k === undefined) {
                p = 0;
            } else {
                if (Plotly.Plots.isHist2D(m) || e.type == "category") {
                    p = k;
                } else {
                    p = e.d2c(k);
                }
            } if (Plotly.Plots.isContour(m)) {
                for (h = 0; h < l; h++) {
                    g.push(p + f * h);
                }
            } else {
                for (h = 0; h <= l; h++) {
                    g.push(p + f * (h - 0.5));
                }
            }
        }
        return g;
    }
    d.plot = function (g, f, e) {
        e.forEach(function (h) {
            a(g, f, h);
        });
    };

    function a(H, R, S) {
        Plotly.Lib.markTime("in Heatmap.plot");
        var ad = S[0].t,
            ar = ad.curve,
            aj = R.x,
            Q = R.y,
            A = H.layout;
        var U = "hm" + ar;
        var ai = "cb" + ar;
        A._paper.selectAll(".contour" + ar).remove();
        if (ad.visible === false) {
            A._paper.selectAll("." + U).remove();
            A._paper.selectAll("." + ai).remove();
            return;
        }
        var X = S[0].z,
            ay = ad.zmin,
            O = ad.zmax,
            w = Plotly.Plots.getScale(ad.scl),
            aa = S[0].x,
            Y = S[0].y;
        var h = [true, "fast"].indexOf(ad.zsmooth) != -1;
        var an = X.length,
            am = Plotly.Lib.aggNums(Math.max, null, X.map(function (i) {
                return i.length;
            }));
        var ao = false,
            l, ah, q;
        ar = 0;
        while (l === undefined && ar < aa.length - 1) {
            l = aj.c2p(aa[ar]);
            ar++;
        }
        ar = aa.length - 1;
        while (ah === undefined && ar > 0) {
            ah = aj.c2p(aa[ar]);
            ar--;
        }
        if (ah < l) {
            q = ah;
            ah = l;
            l = q;
            ao = true;
        }
        var C = false,
            o, f;
        ar = 0;
        while (o === undefined && ar < Y.length - 1) {
            o = Q.c2p(Y[ar]);
            ar++;
        }
        ar = Y.length - 1;
        while (f === undefined && ar > 0) {
            f = Q.c2p(Y[ar]);
            ar--;
        }
        if (f < o) {
            q = o;
            o = f;
            f = q;
            C = true;
        }
        if (Plotly.Plots.isContour(ad.type)) {
            aa = S[0].xfill;
            Y = S[0].yfill;
        }
        if (!h) {
            var az = ad.zsmooth == "best" ? 0 : 0.5;
            l = Math.max(-az * aj._length, l);
            ah = Math.min((1 + az) * aj._length, ah);
            o = Math.max(-az * Q._length, o);
            f = Math.min((1 + az) * Q._length, f);
        }
        var k = Math.round(ah - l);
        var al = Math.round(f - o),
            g = al / (f - o);
        if (k <= 0 || al <= 0) {
            return;
        }
        var ak = h ? new PNGlib(am, an, 256) : new PNGlib(k, al, 256);
        var af = d3.scale.linear().domain(w.map(function (i) {
            return i[0] * 255;
        })).interpolate(d3.interpolateRgb).range(w.map(function (i) {
            return i[1];
        }));
        var F, r;
        if (h) {
            F = ao ? function (i) {
                return am - 1 - i;
            } : Plotly.Lib.identity;
            r = C ? function (i) {
                return an - 1 - i;
            } : Plotly.Lib.identity;
        } else {
            F = function (i) {
                return Plotly.Lib.constrain(Math.round(aj.c2p(aa[i]) - l), 0, k);
            };
            r = function (i) {
                return Plotly.Lib.constrain(Math.round(Q.c2p(Y[i]) - o), 0, al);
            };
        }

        function ap(j, v) {
            var m = v.length - 2,
                x = Plotly.Lib.constrain(Plotly.Lib.findBin(j, v), 0, m),
                p = v[x],
                n = v[x + 1],
                s = Plotly.Lib.constrain(x + (j - p) / (n - p) - 0.5, 0, m),
                t = Math.round(s),
                i = Math.abs(s - t);
            if (!s || s == m || !i) {
                return {
                    bin0: t,
                    bin1: t,
                    frac: 0
                };
            }
            return {
                bin0: t,
                frac: i,
                bin1: Math.round(t + i / (s - t))
            };
        }
        var ae = {};
        ae[256] = ak.color(0, 0, 0, 0);

        function M(m, j) {
            if ($.isNumeric(m)) {
                var i = Plotly.Lib.constrain(Math.round((m - ay) * 254 / (O - ay)), 0, 254),
                    n = af(i);
                ab += j;
                if (!ae[i]) {
                    ae[i] = [tinycolor(n).toHsl().l, ak.color("0x" + n.substr(1, 2), "0x" + n.substr(3, 2), "0x" + n.substr(5, 2))];
                }
                ag += j * ae[i][0];
                return ae[i][1];
            } else {
                return ae[256];
            }
        }
        Plotly.Lib.markTime("done init png");
        var L = r(0),
            P = [L, L];
        var aq, Z, ax, K, ac, G;
        var e = ao ? 0 : 1,
            au = C ? 0 : 1;
        var ab = 0,
            ag = 0;
        if (ad.zsmooth == "best") {
            var N = aa.map(function (i) {
                    return Math.round(aj.c2p(i) - l);
                }),
                at = Y.map(function (i) {
                    return Math.round(Q.c2p(i) - o);
                });
            var T = [],
                u = [];
            for (ar = 0; ar < k; ar++) {
                T.push(ap(ar, N));
            }
            for (aq = 0; aq < al; aq++) {
                u.push(ap(aq, at));
            }
            var aw, av, E, D, W, J, V, I;
            for (aq = 0; aq < al; aq++) {
                av = u[aq];
                E = X[av.bin0];
                D = X[av.bin1];
                if (!E || !D) {
                    console.log(aq, av, X);
                }
                for (ar = 0; ar < k; ar++) {
                    aw = T[ar];
                    W = E[aw.bin0];
                    if (!$.isNumeric(W)) {
                        K = M(null, 1);
                    } else {
                        V = E[aw.bin1];
                        J = D[aw.bin0];
                        I = D[aw.bin1];
                        if (!$.isNumeric(V)) {
                            V = W;
                        }
                        if (!$.isNumeric(J)) {
                            J = W;
                        }
                        if (!$.isNumeric(I)) {
                            I = W;
                        }
                        K = M(W + aw.frac * (V - W) + av.frac * ((J - W) + aw.frac * (W + I - V - J)));
                    }
                    ak.buffer[ak.index(ar, aq)] = K;
                }
            }
        } else {
            if (h) {
                for (aq = 0; aq < an; aq++) {
                    G = X[aq];
                    P = r(aq);
                    for (ar = 0; ar < am; ar++) {
                        ak.buffer[ak.index(F(ar), P)] = M(G[ar], 1);
                    }
                }
            } else {
                for (aq = 0; aq < an; aq++) {
                    G = X[aq];
                    P.reverse();
                    P[au] = r(aq + 1);
                    if (P[0] == P[1] || P[0] === undefined || P[1] === undefined) {
                        continue;
                    }
                    Z = F(0);
                    xb = [Z, Z];
                    for (ar = 0; ar < am; ar++) {
                        xb.reverse();
                        xb[e] = F(ar + 1);
                        if (xb[0] == xb[1] || xb[0] === undefined || xb[1] === undefined) {
                            continue;
                        }
                        ac = G[ar];
                        K = M(ac, (xb[1] - xb[0]) * (P[1] - P[0]));
                        for (Z = xb[0]; Z < xb[1]; Z++) {
                            for (L = P[0]; L < P[1]; L++) {
                                ak.buffer[ak.index(Z, L)] = K;
                            }
                        }
                    }
                }
            }
        }
        Plotly.Lib.markTime("done filling png");
        H.hmpixcount = (H.hmpixcount || 0) + ab;
        H.hmlumcount = (H.hmlumcount || 0) + ag;
        var B = "data:image/png;base64,\n" + ak.getBase64();
        A._paper.selectAll("." + U).remove();
        R.plot.select(".maplayer").append("svg:image").classed(U, true).datum(S[0]).attr({
            xmlns: "http://www.w3.org/2000/svg",
            "xlink:xlink:href": B,
            height: al,
            width: k,
            x: l,
            y: o,
            preserveAspectRatio: "none"
        });
        Plotly.Lib.markTime("done showing png");
    }
    d.colorbar = function (g, i) {
        var f = i[0].t,
            h = "cb" + f.curve,
            e = Plotly.Plots.getScale(f.scl);
        g.layout._infolayer.selectAll("." + h).remove();
        if (f.showscale === false) {
            Plotly.Plots.autoMargin(g, h);
            return;
        }
        Plotly.Colorbar(g, h).fillcolor(d3.scale.linear().domain(e.map(function (j) {
            return f.zmin + j[0] * (f.zmax - f.zmin);
        })).range(e.map(function (j) {
            return j[1];
        }))).filllevels({
            start: f.zmin,
            end: f.zmax,
            size: (f.zmax - f.zmin) / 254
        }).cdoptions(f)();
        Plotly.Lib.markTime("done colorbar");
    };
    d.style = function (e) {
        e.selectAll("image").style("opacity", function (f) {
            return f.t.op;
        });
    };
}());
(function () {
    var b = window.Plotly.Contour = {};
    b.calc = function (c, d) {
        if (!("colorbar" in d)) {
            d.colorbar = {};
        }
        if (d.visible === false) {
            return;
        }
        var f = Plotly.Heatmap.calc(c, d);
        if (d.autocontour !== false || !d.contours || !$.isNumeric(d.contours.start) || !$.isNumeric(d.contours.end) || !d.contours.size) {
            if (!d.contours) {
                d.contours = {};
            }
            var e = {
                type: "linear",
                range: [d.zmin, d.zmax]
            };
            Plotly.Axes.autoTicks(e, (d.zmax - d.zmin) / (d.ncontours || 15));
            d.contours.start = Plotly.Axes.tickFirst(e);
            d.contours.size = e.dtick;
            e.range.reverse();
            d.contours.end = Plotly.Axes.tickFirst(e);
            if (d.contours.start == d.zmin) {
                d.contours.start += d.contours.size;
            }
            if (d.contours.end == d.zmax) {
                d.contours.end -= d.contours.size;
            }
            d.contours.end += d.contours.size / 100;
        }
        return f;
    };
    b.plot = function (e, d, c) {
        c.forEach(function (f) {
            a(e, d, f);
        });
    };

    function a(B, L, R) {
        Plotly.Lib.markTime("in Contour.plot");
        var ad = R[0].t,
            ar = ad.curve,
            ak = L.x,
            K = L.y,
            r = B.layout;
        var U = "contour" + ar;
        var aj = "cb" + ar;
        var S = [],
            w = [],
            J = ad.contoursize || 1;
        for (var O = ad.contourstart; O < ad.contourend + J / 10; O += J) {
            S.push(O);
            w.push({
                level: O,
                crossings: {},
                starts: [],
                edgepaths: [],
                paths: []
            });
        }
        ad.numcontours = w.length;
        if (ad.coloring == "heatmap") {
            ad.zsmooth = "best";
            if (ad.zauto && ad.autocontour === false) {
                ad.zmin = ad.contourstart - ad.contoursize / 2;
                ad.zmax = ad.zmin + ad.numcontours * ad.contoursize;
            }
            Plotly.Heatmap.plot(B, L, [R]);
        } else {
            r._paper.selectAll(".hm" + ar).remove();
        } if (ad.coloring != "fill") {
            ad.showlines = true;
        }
        if (ad.visible === false) {
            r._paper.selectAll("." + U).remove();
            r._paper.selectAll("." + aj).remove();
            return;
        }
        var X = R[0].z,
            ab = R[0].x,
            Z = R[0].y;
        var ap = X.length,
            an = Plotly.Lib.aggNums(Math.max, null, X.map(function (i) {
                return i.length;
            }));

        function s(t, m) {
            var i = (m[0][0] > t ? 0 : 1) + (m[0][1] > t ? 0 : 2) + (m[1][1] > t ? 0 : 4) + (m[1][0] > t ? 0 : 8);
            if (i == 5 || i == 10) {
                var n = (m[0][0] + m[0][1] + m[1][0] + m[1][1]) / 4;
                if (t > n) {
                    if (i == 5) {
                        return 713;
                    }
                    return 1114;
                } else {
                    if (i == 5) {
                        return 104;
                    }
                    return 208;
                }
            } else {
                if (i == 15) {
                    return 0;
                }
            }
            return i;
        }
        var aa, F, C, H, al, D, P, j, v, f;
        var k = [1, 9, 13, 104, 713],
            E = [4, 6, 7, 104, 713],
            u = [8, 12, 14, 208, 1114],
            aq = [2, 3, 11, 208, 1114],
            ac = [null, [-1, 0],
                [0, -1],
                [-1, 0],
                [1, 0], null, [0, -1],
                [-1, 0],
                [0, 1],
                [0, 1], null, [0, 1],
                [1, 0],
                [1, 0],
                [0, -1]
            ],
            ai = {
                104: [4, 1],
                208: [2, 8],
                713: [7, 13],
                1114: [11, 14]
            },
            e = {
                1: 4,
                2: 8,
                4: 1,
                7: 13,
                8: 2,
                11: 14,
                13: 7,
                14: 11
            };

        function M(i) {
            v = s(i.level, D);
            if (v) {
                i.crossings[al] = v;
                if (H.indexOf(v) != -1) {
                    i.starts.push(al.split(",").map(Number));
                }
            }
        }

        function V(m, n) {
            var i = X[n][m];
            if ($.isNumeric(i)) {
                return i;
            }
            return ad.zmin;
        }
        for (F = 0; F < ap - 1; F++) {
            if (F === 0) {
                ystartIndices = k;
            } else {
                if (F == ap - 2) {
                    ystartIndices = E;
                } else {
                    ystartIndices = [];
                }
            }
            for (aa = 0; aa < an - 1; aa++) {
                if (aa === 0) {
                    H = ystartIndices.concat(u);
                } else {
                    if (aa == an - 2) {
                        H = ystartIndices.concat(aq);
                    } else {
                        H = ystartIndices;
                    }
                }
                al = aa + "," + F;
                D = [
                    [V(aa, F), V(aa + 1, F)],
                    [V(aa, F + 1), V(aa + 1, F + 1)]
                ];
                j = Plotly.Lib.findBin(Plotly.Lib.aggNums(Math.max, null, D), S, true);
                P = Plotly.Lib.findBin(Plotly.Lib.aggNums(Math.min, null, D), S, true);
                w.forEach(M);
            }
        }

        function af(t, n, i) {
            var m = (t - V(n, i)) / (V(n + 1, i) - V(n, i));
            return [ak.c2p((1 - m) * ab[n] + m * ab[n + 1]), K.c2p(Z[i])];
        }

        function am(t, n, m) {
            var i = (t - V(n, m)) / (V(n, m + 1) - V(n, m));
            return [ak.c2p(ab[n]), K.c2p((1 - i) * Z[m] + i * Z[m + 1])];
        }

        function A(m, i) {
            return Math.abs(m[0] - i[0]) < 0.01 && Math.abs(m[1] - i[1]) < 0.01;
        }

        function q(t, n) {
            var m = t[0] - n[0],
                i = t[1] - n[1];
            return Math.sqrt(m * m + i * i);
        }

        function c(au, aD, aE) {
            var aN = w[au],
                az = aD.split(",").map(Number),
                aL = aN.crossings[aD],
                n = aN.level,
                t = [];
            var aQ, aB = 0,
                aA = 0;
            if (aL > 20 && aE) {
                if (aL == 208 || aL == 1114) {
                    aQ = am;
                    aB = az[0] === 0 ? 1 : -1;
                } else {
                    aQ = af;
                    aA = az[1] === 0 ? 1 : -1;
                }
            } else {
                if (k.indexOf(aL) != -1) {
                    aQ = af;
                    aA = 1;
                } else {
                    if (u.indexOf(aL) != -1) {
                        aQ = am;
                        aB = 1;
                    } else {
                        if (E.indexOf(aL) != -1) {
                            aQ = af;
                            aA = -1;
                        } else {
                            aQ = am;
                            aB = -1;
                        }
                    }
                }
            }
            var aP = [aQ(n, az[0] + Math.max(-aB, 0), az[1] + Math.max(-aA, 0))],
                aJ = aB + "," + aA;
            var aK, y = az.join(",");
            for (var aH = 0; aH < 10000; aH++) {
                t.push(y);
                if (aL > 20) {
                    aK = ai[aL][(aB || aA) < 0 ? 0 : 1];
                    aN.crossings[y] = e[aK];
                } else {
                    aK = aL;
                    delete aN.crossings[y];
                } if (!ac[aK]) {
                    console.log("found bad marching index", aL, aK, az, au);
                    break;
                }
                aB = ac[aK][0];
                aA = ac[aK][1];
                if (aB) {
                    aP.push(am(n, az[0] + Math.max(aB, 0), az[1]));
                    az[0] += aB;
                } else {
                    aP.push(af(n, az[0], az[1] + Math.max(aA, 0)));
                    az[1] += aA;
                } if (A(aP[aP.length - 1], aP[aP.length - 2])) {
                    aP.pop();
                }
                y = az.join(",");
                if ((y == aD && aB + "," + aA == aJ) || (aE && ((aB && (az[0] < 0 || az[0] > an - 2)) || (aA && (az[1] < 0 || az[1] > ap - 2))))) {
                    break;
                }
                aL = aN.crossings[y];
            }
            if (aH == 10000) {
                console.log("Infinite loop in contour?");
            }
            var aC = A(aP[0], aP[aP.length - 1]);
            var aw = 0,
                at, aG = [],
                z = 0.2 * ad.ls;
            for (aH = 1; aH < aP.length; aH++) {
                at = q(aP[aH], aP[aH - 1]);
                aw += at;
                aG.push(at);
            }
            var aI = aw / aG.length * z,
                aF, m, aO, av = 0,
                ax, x, i;

            function ay(aR) {
                return aP[aR % aP.length];
            }
            for (aH = aP.length - 2; aH >= av; aH--) {
                aF = aG[aH];
                if (aF < aI) {
                    aO = 0;
                    for (m = aH - 1; m >= av; m--) {
                        if (aF + aG[m] < aI) {
                            aF += aG[m];
                        } else {
                            break;
                        }
                    }
                    if (aC && aH == aP.length - 2) {
                        for (aO = 0; aO < m; aO++) {
                            if (aF + aG[aO] < aI) {
                                aF += aG[aO];
                            } else {
                                break;
                            }
                        }
                    }
                    x = aH - m + aO + 1;
                    i = Math.floor((aH + m + aO + 2) / 2);
                    if (!aC && aH == aP.length - 2) {
                        ax = aP[aP.length - 1];
                    } else {
                        if (!aC && m == -1) {
                            ax = aP[0];
                        } else {
                            if (x % 2) {
                                ax = ay(i);
                            } else {
                                ax = [(ay(i)[0] + ay(i + 1)[0]) / 2, (ay(i)[1] + ay(i + 1)[1]) / 2];
                            }
                        }
                    }
                    aP.splice(m + 1, aH - m + 1, ax);
                    aH = m + 1;
                    if (aO) {
                        av = aO;
                    }
                    if (aC) {
                        if (aH == aP.length - 2) {
                            aP[aO] = aP[aP.length - 1];
                        } else {
                            if (aH === 0) {
                                aP[aP.length - 1] = aP[0];
                            }
                        }
                    }
                }
            }
            aP.splice(0, av);
            if (aP.length < 2) {
                return;
            } else {
                if (aC) {
                    aP.pop();
                    aN.paths.push(aP);
                } else {
                    if (!aE) {
                        console.log("unclosed interior contour?", au, aD, t, aP.join("L"));
                    }
                    var aM = false;
                    aN.edgepaths.forEach(function (aT, aR) {
                        if (!aM && A(aT[0], aP[aP.length - 1])) {
                            aP.pop();
                            aM = true;
                            var aS = false;
                            aN.edgepaths.forEach(function (aV, aU) {
                                if (!aS && A(aV[aV.length - 1], aP[0])) {
                                    aS = true;
                                    aP.splice(0, 1);
                                    aN.edgepaths.splice(aR, 1);
                                    if (aU == aR) {
                                        aN.paths.push(aP.concat(aV));
                                    } else {
                                        aN.edgepaths[aU] = aN.edgepaths[aU].concat(aP, aV);
                                    }
                                }
                            });
                            if (!aS) {
                                aN.edgepaths[aR] = aP.concat(aT);
                            }
                        }
                    });
                    aN.edgepaths.forEach(function (aS, aR) {
                        if (!aM && A(aS[aS.length - 1], aP[0])) {
                            aP.splice(0, 1);
                            aN.edgepaths[aR] = aS.concat(aP);
                            aM = true;
                        }
                    });
                    if (!aM) {
                        aN.edgepaths.push(aP);
                    }
                }
            }
        }
        w.forEach(function (m, n) {
            m.starts.forEach(function (t) {
                c(n, String(t), "edge");
            });
            var i = 0;
            while (Object.keys(m.crossings).length && i < 10000) {
                i++;
                c(n, Object.keys(m.crossings)[0]);
            }
            if (i == 10000) {
                console.log("Infinite loop in contour?");
            }
        });
        var W = L.plot.select(".maplayer").selectAll("g.contour." + U).data(R);
        W.enter().append("g").classed("contour", true).classed(U, true);
        W.exit().remove();
        var ah = ak.c2p(ab[0]),
            p = ak.c2p(ab[ab.length - 1]),
            T = K.c2p(Z[0]),
            l = K.c2p(Z[Z.length - 1]),
            o = [
                [ah, l],
                [p, l],
                [p, T],
                [ah, T]
            ];

        function Q(i) {
            return Math.abs(i[1] - l) < 0.01;
        }

        function N(i) {
            return Math.abs(i[1] - T) < 0.01;
        }

        function ao(i) {
            return Math.abs(i[0] - ah) < 0.01;
        }

        function G(i) {
            return Math.abs(i[0] - p) < 0.01;
        }
        var ae = W.selectAll("g.contourbg").data([0]);
        ae.enter().append("g").classed("contourbg", true);
        var Y = ae.selectAll("path").data(ad.coloring == "fill" ? [0] : []);
        Y.enter().append("path");
        Y.exit().remove();
        Y.attr("d", "M" + o.join("L") + "Z").style("stroke", "none");
        var g = W.selectAll("g.contourfill").data([0]);
        g.enter().append("g").classed("contourfill", true);
        var h = g.selectAll("path").data(ad.coloring == "fill" ? w : []);
        h.enter().append("path");
        h.exit().remove();
        h.each(function (au, x) {
            var ay = (au.edgepaths.length || V(0, 0) < au.level) ? "" : ("M" + o.join("L") + "Z");
            var y = 0,
                aw = au.edgepaths.map(function (az, aA) {
                    return aA;
                }),
                t, ax, m, n, av = true,
                z;
            while (aw.length) {
                z = Plotly.Drawing.smoothopen(au.edgepaths[y], ad.ls);
                ay += av ? z : z.replace(/^M/, "L");
                aw.splice(aw.indexOf(y), 1);
                t = au.edgepaths[y][au.edgepaths[y].length - 1];
                m = 0;
                for (m = 0; m < 4; m++) {
                    if (!t) {
                        console.log("missing end?", y, au);
                        break;
                    }
                    if (Q(t) && !G(t)) {
                        ax = [p, l];
                    } else {
                        if (ao(t)) {
                            ax = [ah, l];
                        } else {
                            if (N(t)) {
                                ax = [ah, T];
                            } else {
                                if (G(t)) {
                                    ax = [p, T];
                                }
                            }
                        }
                    }
                    for (n = 0; n < au.edgepaths.length; n++) {
                        var at = au.edgepaths[n][0];
                        if (Math.abs(t[0] - ax[0]) < 0.01) {
                            if (Math.abs(t[0] - at[0]) < 0.01 && (at[1] - t[1]) * (ax[1] - at[1]) >= 0) {
                                ax = at;
                                break;
                            }
                        } else {
                            if (Math.abs(t[1] - ax[1]) < 0.01) {
                                if (Math.abs(t[1] - at[1]) < 0.01 && (at[0] - t[0]) * (ax[0] - at[0]) >= 0) {
                                    ax = at;
                                    break;
                                }
                            } else {
                                console.log("endpt to newendpt is not vert. or horz.", t, ax, at);
                            }
                        }
                    }
                    t = ax;
                    if (n < au.edgepaths.length) {
                        break;
                    }
                    ay += "L" + ax;
                }
                if (n == au.edgepaths.length) {
                    console.log("unclosed perimeter path");
                    break;
                }
                y = n;
                av = (aw.indexOf(y) == -1);
                if (av) {
                    y = aw[0];
                    ay += "Z";
                }
            }
            au.paths.forEach(function (i) {
                ay += Plotly.Drawing.smoothclosed(i, ad.ls);
            });
            if (!ay) {
                d3.select(this).remove();
            } else {
                d3.select(this).attr("d", ay).style("stroke", "none");
            }
        });
        var d = W.selectAll("g.contourlevel").data(ad.showlines ? w : []);
        d.enter().append("g").classed("contourlevel", true);
        d.exit().remove();
        var I = d.selectAll("path.openline").data(function (i) {
            return i.edgepaths;
        });
        I.enter().append("path").classed("openline", true);
        I.exit().remove();
        I.attr("d", function (i) {
            return Plotly.Drawing.smoothopen(i, ad.ls);
        }).style("stroke-miterlimit", 1);
        var ag = d.selectAll("path.closedline").data(function (i) {
            return i.paths;
        });
        ag.enter().append("path").classed("closedline", true);
        ag.exit().remove();
        ag.attr("d", function (i) {
            return Plotly.Drawing.smoothclosed(i, ad.ls);
        }).style("stroke-miterlimit", 1);
        Plotly.Lib.markTime("done Contour.plot");
    }
    b.style = function (c) {
        c.selectAll("g.contour").style("opacity", function (e) {
            return e.t.op;
        }).each(function (j) {
            var l = d3.select(this),
                g = j.t,
                h = g.contoursize || 1,
                k = Math.floor((g.contourend + h / 10 - g.contourstart) / h) + 1,
                f = Plotly.Plots.getScale(g.scl),
                e = g.coloring == "lines" ? 0 : 1,
                i = d3.scale.linear().domain(f.map(function (d) {
                    return (d[0] * (k + e - 1) - (e / 2)) * h + g.contourstart;
                })).interpolate(d3.interpolateRgb).range(f.map(function (d) {
                    return d[1];
                }));
            l.selectAll("g.contourlevel").each(function (o, m) {
                var n = g.coloring == "lines" ? i(g.contourstart + m * h) : g.lc;
                d3.select(this).selectAll("path").call(Plotly.Drawing.lineGroupStyle, g.lw, n, g.ld);
            });
            l.selectAll("g.contourbg path").style("fill", i(g.contourstart - h / 2));
            l.selectAll("g.contourfill path").style("fill", function (n, m) {
                return i(g.contourstart + (m + 0.5) * h);
            });
        });
    };
    b.colorbar = function (m, e) {
        var q = e[0].t,
            j = "cb" + q.curve;
        m.layout._infolayer.selectAll("." + j).remove();
        if (q.showscale === false) {
            Plotly.Plots.autoMargin(m, j);
            return;
        }
        var f = Plotly.Colorbar(m, j);
        var i = q.contoursize || 1,
            g = Math.floor((q.contourend + i / 10 - q.contourstart) / i) + 1,
            n = Plotly.Plots.getScale(q.scl),
            c = q.coloring == "lines" ? 0 : 1,
            d = d3.scale.linear().interpolate(d3.interpolateRgb),
            p = n.map(function (r) {
                return (r[0] * (g + c - 1) - (c / 2)) * i + q.contourstart;
            }),
            l = n.map(function (r) {
                return r[1];
            });
        if (q.coloring == "heatmap") {
            if (q.zauto && q.autocontour === false) {
                q.zmin = q.contourstart - i / 2;
                q.zmax = q.zmin + g * i;
            }
            f.filllevels({
                start: q.zmin,
                end: q.zmax,
                size: (q.zmax - q.zmin) / 254
            });
            p = n.map(function (r) {
                return r[0] * (q.zmax - q.zmin) + q.zmin;
            });
            var k = d3.extent([q.zmin, q.zmax, q.contourstart, q.contourstart + i * (g - 1)]),
                h = k[q.zmin < q.zmax ? 0 : 1],
                o = k[q.zmin < q.zmax ? 1 : 0];
            if (h != q.zmin) {
                p.splice(0, 0, h);
                l.splice(0, 0, l[0]);
            }
            if (o != q.zmax) {
                p.push(o);
                l.push(l[l.length - 1]);
            }
        }
        d.domain(p).range(l);
        f.options({
            fillcolor: q.coloring == "fill" || q.coloring == "heatmap" ? d : "",
            line: {
                color: q.coloring == "lines" ? d : q.lc,
                width: q.showlines ? q.lw : 0,
                dash: q.ld
            },
            levels: {
                start: q.contourstart,
                end: q.contourend,
                size: i
            }
        });
        f.cdoptions(q)();
    };
    b.defaults = function () {
        return [{
            dataAttr: "autocontour",
            cdAttr: "autocontour",
            dflt: true
        }, {
            dataAttr: "ncontours",
            cdAttr: "ncontours",
            dflt: 0
        }, {
            dataAttr: "contours.start",
            cdAttr: "contourstart",
            dflt: 0
        }, {
            dataAttr: "contours.end",
            cdAttr: "contourend",
            dflt: 1
        }, {
            dataAttr: "contours.size",
            cdAttr: "contoursize",
            dflt: 1
        }, {
            dataAttr: "contours.coloring",
            cdAttr: "coloring",
            dflt: "fill"
        }, {
            dataAttr: "contours.showlines",
            cdAttr: "showlines",
            dflt: true
        }, {
            dataAttr: "line.color",
            cdAttr: "lc",
            dflt: "#000"
        }, {
            dataAttr: "line.width",
            cdAttr: "lw",
            dflt: 0.5
        }, {
            dataAttr: "line.dash",
            cdAttr: "ld",
            dflt: "solid"
        }, {
            dataAttr: "line.smoothing",
            cdAttr: "ls",
            dflt: 1
        }];
    };
}());
(function () {
    var b = window.Plotly.Colorbar = function (g, f) {
        var d = Plotly.Axes.defaultAxis();
        var e = {
            orient: "right",
            thicknessmode: "pixels",
            thickness: 30,
            lenmode: "fraction",
            len: 1,
            x: 1.02,
            xanchor: "left",
            xpad: 10,
            y: 0.5,
            yanchor: "middle",
            ypad: 10,
            fillcolor: null,
            line: {
                color: null,
                width: null,
                dash: ""
            },
            outlinecolor: d.linecolor,
            outlinewidth: 0,
            bordercolor: d.linecolor,
            borderwidth: 0,
            bgcolor: "rgba(0,0,0,0)",
            levels: {
                start: null,
                size: null,
                end: null
            },
            filllevels: null,
            autotick: d.autotick,
            nticks: d.nticks,
            tick0: d.tick0,
            dtick: d.dtick,
            ticks: "",
            ticklen: d.ticklen,
            tickwidth: d.tickwidth,
            tickcolor: d.tickcolor,
            showticklabels: true,
            tickfont: d.tickfont,
            tickangle: d.tickangle,
            exponentformat: d.exponentformat,
            showexponent: d.showexponent,
            title: "Click to enter colorscale title",
            titlefont: d.titlefont,
            titleside: "top"
        };

        function c() {
            var u = g.layout;
            if ((typeof e.fillcolor !== "function") && (typeof e.line.color !== "function")) {
                u._infolayer.selectAll("g." + f).remove();
                return;
            }
            var p = d3.extent(((typeof e.fillcolor === "function") ? e.fillcolor : e.line.color).domain()),
                y = [],
                i = [],
                P, H = typeof e.line.color === "function" ? e.line.color : function () {
                    return e.line.color;
                },
                R = typeof e.fillcolor === "function" ? e.fillcolor : function () {
                    return e.fillcolor;
                };
            var v = e.levels.end + e.levels.size / 100,
                D = e.levels.size,
                q = (1.001 * p[0] - 0.001 * p[1]),
                o = (1.001 * p[1] - 0.001 * p[0]);
            for (P = e.levels.start;
                (P - v) * D < 0; P += D) {
                if (P > q && P < o) {
                    y.push(P);
                }
            }
            if (typeof e.fillcolor === "function") {
                if (e.filllevels) {
                    v = e.filllevels.end + e.filllevels.size / 100;
                    D = e.filllevels.size;
                    for (P = e.filllevels.start;
                        (P - v) * D < 0; P += D) {
                        if (P > p[0] && P < p[1]) {
                            i.push(P);
                        }
                    }
                } else {
                    i = y.map(function (l) {
                        return l - e.levels.size / 2;
                    });
                    i.push(i[i.length - 1] + e.levels.size);
                }
            } else {
                if (e.fillcolor && typeof e.fillcolor === "string") {
                    i = [0];
                }
            } if (e.levels.size < 0) {
                y.reverse();
                i.reverse();
            }
            var G = u.height - u.margin.t - u.margin.b,
                C = u.width - u.margin.l - u.margin.r,
                j = Math.round(e.thickness * (e.thicknessmode === "fraction" ? C : 1)),
                z = j / u._size.w,
                O = Math.round(e.len * (e.lenmode === "fraction" ? G : 1)),
                m = O / u._size.h,
                s = e.xpad / u._size.w,
                h = (e.borderwidth + e.outlinewidth) / 2,
                w = e.ypad / u._size.h,
                n = Math.round(e.x * u._size.w + e.xpad),
                A = e.y + m * (({
                    top: -0.5,
                    bottom: 0.5
                }[e.yanchor] || 0) - 0.5),
                L = Math.round(u._size.h * (1 - A)),
                K = L - O,
                M;
            var F = Plotly.Axes.defaultAxis({
                type: "linear",
                range: p,
                anchor: "free",
                position: e.x + s + z,
                _id: "y" + f,
                ticks: e.ticks,
                tickfont: e.tickfont,
                title: e.title,
                titlefont: e.titlefont,
                autotick: e.autotick,
                nticks: e.nticks,
                tick0: e.tick0,
                dtick: e.dtick,
                ticklen: e.ticklen,
                tickwidth: e.tickwidth,
                tickcolor: e.tickcolor,
                tickangle: e.tickangle,
                exponentformat: e.exponentformat,
                showexponent: e.showexponent
            });
            c.axis = F;
            if (["top", "bottom"].indexOf(e.titleside) !== -1) {
                F.titleside = e.titleside;
                F.titlex = e.x + s;
                F.titley = A + (e.titleside === "top" ? m - w : w);
            }
            if (e.line.color && e.autotick !== false) {
                F.autotick = false;
                F.tick0 = e.levels.start;
                var J = e.levels.size;
                var N = Plotly.Lib.constrain((L - K) / 50, 4, 15) + 1,
                    B = (p[1] - p[0]) / ((e.nticks || N) * J);
                if (B > 1) {
                    var t = Math.pow(10, Math.floor(Math.log(B) / Math.LN10));
                    J *= t * Plotly.Lib.roundUp(B / t, [2, 5, 10]);
                    if ((Math.abs(e.levels.start) / e.levels.size + 0.000001) % 1 < 0.000002) {
                        F.tick0 = 0;
                    }
                }
                F.dtick = J;
            }
            Plotly.Axes.initAxis(g, F);
            F.domain = [A + w, A + m - w];
            Plotly.Axes.setConvert(F);
            F.setScale();
            var I = u._infolayer.selectAll("g." + f).data([0]);
            I.enter().append("g").classed(f, true).each(function () {
                var l = d3.select(this);
                l.append("rect").classed("cbbg", true);
                l.append("g").classed("cbfills", true);
                l.append("g").classed("cblines", true);
                l.append("g").classed("cbaxis", true).classed("crisp", true);
                l.append("g").classed("cbtitleunshift", true).append("g").classed("cbtitle", true);
                l.append("rect").classed("cboutline", true);
            });
            I.attr("transform", "translate(" + Math.round(u._size.l) + "," + Math.round(u._size.t) + ")");
            var E = I.select(".cbtitleunshift").attr("transform", "translate(-" + Math.round(u._size.l) + ",-" + Math.round(u._size.t) + ")");
            F._axislayer = I.select(".cbaxis");
            var k = 0;
            if (["top", "bottom"].indexOf(e.titleside) !== -1) {
                Plotly.Plots.titles(g, F._id + "title");
            }

            function Q() {
                if (["top", "bottom"].indexOf(e.titleside) !== -1) {
                    var T = I.select(".cbtitle"),
                        S = T.select("text"),
                        Y = [-e.outlinewidth / 2, e.outlinewidth / 2],
                        V = T.select(".h" + F._id + "title-math-group").node(),
                        W = 15.6;
                    if (S.node()) {
                        W = parseInt(S.style("font-size"), 10) * 1.3;
                    }
                    if (V) {
                        k = Plotly.Drawing.bBox(V).height;
                        if (k > W) {
                            Y[1] -= (k - W) / 2;
                        }
                    } else {
                        if (S.node() && !S.classed("js-placeholder")) {
                            k = Plotly.Drawing.bBox(T.node()).height;
                        }
                    } if (k) {
                        k += 5;
                        if (e.titleside === "top") {
                            F.domain[1] -= k / u._size.h;
                            Y[1] *= -1;
                        } else {
                            F.domain[0] += k / u._size.h;
                            var U = Math.max(1, S.selectAll("tspan.line").size());
                            Y[1] += (1 - U) * W;
                        }
                        T.attr("transform", "translate(" + Y + ")");
                        F.setScale();
                    }
                }
                I.selectAll(".cbfills,.cblines,.cbaxis").attr("transform", "translate(0," + Math.round(u._size.h * (1 - F.domain[1])) + ")");
                var X = I.select(".cbfills").selectAll("rect.cbfill").data(i);
                X.enter().append("rect").classed("cbfill", true).style("stroke", "none");
                X.exit().remove();
                X.each(function (ab, Z) {
                    var aa = [(Z === 0) ? p[0] : (i[Z] + i[Z - 1]) / 2, (Z === i.length - 1) ? p[1] : (i[Z] + i[Z + 1]) / 2].map(F.c2p).map(Math.round);
                    if (Z !== i.length - 1) {
                        aa[1] += (aa[1] > aa[0]) ? 1 : -1;
                    }
                    d3.select(this).attr({
                        x: n,
                        width: Math.max(j, 2),
                        y: d3.min(aa),
                        height: Math.max(d3.max(aa) - d3.min(aa), 2)
                    }).style("fill", R(ab));
                });
                var l = I.select(".cblines").selectAll("path.cbline").data(e.line.color && e.line.width ? y : []);
                l.enter().append("path").classed("cbline", true);
                l.exit().remove();
                l.each(function (Z) {
                    d3.select(this).attr("d", "M" + n + "," + (Math.round(F.c2p(Z)) + (e.line.width / 2) % 1) + "h" + j).call(Plotly.Drawing.lineGroupStyle, e.line.width, H(Z), e.line.dash);
                });
                F._axislayer.selectAll("g." + F._id + "tick,path").remove();
                F._pos = n + j + (e.outlinewidth || 0) / 2 - (e.ticks === "outside" ? 1 : 0);
                F.side = e.orient;
                return Plotly.Axes.doTicks(g, F);
            }

            function r() {
                var l = j + e.outlinewidth / 2 + Plotly.Drawing.bBox(F._axislayer.node()).width;
                M = E.select("text");
                if (M.node() && !M.classed("js-placeholder")) {
                    var T = E.select(".h" + F._id + "title-math-group").node(),
                        W;
                    if (T && ["top", "bottom"].indexOf(e.titleside) !== -1) {
                        W = Plotly.Drawing.bBox(T).width;
                    } else {
                        W = Plotly.Drawing.bBox(E.node()).right - n - u._size.l;
                    }
                    l = Math.max(l, W);
                }
                var S = 2 * e.xpad + l + e.borderwidth + e.outlinewidth / 2,
                    V = L - K;
                I.select(".cbbg").attr({
                    x: n - e.xpad - (e.borderwidth + e.outlinewidth) / 2,
                    y: K - h,
                    width: Math.max(S, 2),
                    height: Math.max(V + 2 * h, 2)
                }).call(Plotly.Drawing.fillColor, e.bgcolor).call(Plotly.Drawing.strokeColor, e.bordercolor).style({
                    "stroke-width": e.borderwidth
                });
                I.selectAll(".cboutline").attr({
                    x: n,
                    y: K + e.ypad + (e.titleside === "top" ? k : 0),
                    width: Math.max(j, 2),
                    height: Math.max(V - 2 * e.ypad - k, 2)
                }).call(Plotly.Drawing.strokeColor, e.outlinecolor).style({
                    fill: "None",
                    "stroke-width": e.outlinewidth
                });
                var U = ({
                    center: 0.5,
                    right: 1
                }[e.xanchor] || 0) * S;
                I.attr("transform", "translate(" + (u._size.l - U) + "," + u._size.t + ")");
                Plotly.Plots.autoMargin(g, f, {
                    x: e.x,
                    y: e.y,
                    l: S * ({
                        right: 1,
                        center: 0.5
                    }[e.xanchor] || 0),
                    r: S * ({
                        left: 1,
                        center: 0.5
                    }[e.xanchor] || 0),
                    t: V * ({
                        bottom: 1,
                        middle: 0.5
                    }[e.yanchor] || 0),
                    b: V * ({
                        top: 1,
                        middle: 0.5
                    }[e.yanchor] || 0)
                });
            }
            var x = Plotly.Lib.syncOrAsync([Plotly.Plots.previousPromises, Q, Plotly.Plots.previousPromises, r], g);
            if (x && x.then) {
                (g._promises || []).push(x);
            }
            if (g.mainsite) {
                I.node().onmousedown = function (W) {
                    if (Plotly.Fx.dragClear(g)) {
                        return true;
                    }
                    var S = d3.select(this),
                        V = S.attr("transform"),
                        l = u._size,
                        T = null,
                        U = null;
                    g.dragged = false;
                    Plotly.Fx.setCursor(S);
                    window.onmousemove = function (ab) {
                        var Y = ab.clientX - W.clientX,
                            X = ab.clientY - W.clientY,
                            aa = Plotly.Fx.MINDRAG;
                        if (Math.abs(Y) < aa) {
                            Y = 0;
                        }
                        if (Math.abs(X) < aa) {
                            X = 0;
                        }
                        if (Y || X) {
                            g.dragged = true;
                        }
                        S.attr("transform", V + " translate(" + Y + "," + X + ")");
                        T = Plotly.Fx.dragAlign(e.x + (Y / l.w), z, 0, 1, e.xanchor);
                        U = Plotly.Fx.dragAlign(e.y - (X / l.h), m, 0, 1, e.yanchor);
                        var Z = Plotly.Fx.dragCursors(T, U, e.xanchor, e.yanchor);
                        Plotly.Fx.setCursor(S, Z);
                        return Plotly.Lib.pauseEvent(ab);
                    };
                    window.onmouseup = function (X) {
                        window.onmousemove = null;
                        window.onmouseup = null;
                        Plotly.Fx.setCursor(S);
                        if (g.dragged && T !== null && U !== null) {
                            Plotly.restyle(g, {
                                "colorbar.x": T,
                                "colorbar.y": U
                            }, Number(f.substr(2)));
                        }
                        return Plotly.Lib.pauseEvent(X);
                    };
                    return Plotly.Lib.pauseEvent(W);
                };
            }
            return x;
        }
        Object.keys(e).forEach(function (h) {
            c[h] = function (i) {
                if (!arguments.length) {
                    return e[h];
                }
                if ($.isPlainObject(e[h])) {
                    $.extend(e[h], i);
                } else {
                    e[h] = i;
                }
                return c;
            };
        });
        c.options = function (h) {
            Object.keys(h).forEach(function (i) {
                if (typeof c[i] === "function") {
                    c[i](h[i]);
                }
            });
            return c;
        };
        c.cdoptions = function (h) {
            h.cb = c;
            Object.keys(h).forEach(function (i) {
                if (i.substr(0, 3) === "cb_" && i !== "cb_id") {
                    var j = i.substr(3);
                    if (typeof c[j] === "function") {
                        c[j](h[i]);
                    }
                }
            });
            return c;
        };
        c._opts = e;
        return c;
    };
    var a = ["fillcolor", "line", "levels", "filllevels"];
    b.defaults = function () {
        var c = b()._opts;
        return Object.keys(c).filter(function (d) {
            return a.indexOf(d) === -1;
        }).map(function (d) {
            return {
                dataAttr: "colorbar." + d,
                cdAttr: "cb_" + d,
                dflt: c[d]
            };
        });
    };
    b.getDefault = function (c) {
        return b()._opts[c];
    };
}());
(function () {
    var a = window.Plotly.Histogram = {};
    a.calc = function (F, E) {
        if (E.visible === false) {
            return;
        }
        var h = [],
            r = [],
            z, d = E.orientation || ((E.y && !E.x) ? "h" : "v"),
            b = Plotly.Axes.getFromId(F, d == "h" ? E.yaxis || "y" : E.xaxis || "x"),
            l = d == "h" ? "y" : "x",
            D = {
                x: "y",
                y: "x"
            }[l];
        var e = b.makeCalcdata(E, l);
        if ((E["autobin" + l] !== false) || !(l + "bins" in E)) {
            E[l + "bins"] = Plotly.Axes.autoBin(e, b, E["nbins" + l]);
        }
        var B = E[l + "bins"],
            j = (typeof (B.size) == "string"),
            u = j ? [] : B,
            v, s, m = [],
            y = [],
            H = 0,
            g = E.histnorm || "",
            f = E.histfunc || "",
            k = (g.indexOf("density") != -1),
            w = (f == "max" || f == "min"),
            x = (w ? null : 0),
            t = function (i) {
                r[i]++;
                H++;
            },
            A = null,
            C = false;
        if ((D in E) && ["sum", "avg", "min", "max"].indexOf(f) != -1) {
            var G = b.makeCalcdata(E, D);
            if (f == "sum") {
                t = function (K, J) {
                    var I = G[J];
                    if ($.isNumeric(I)) {
                        r[K] += I;
                        H += I;
                    }
                };
            } else {
                if (f == "avg") {
                    C = true;
                    t = function (K, J) {
                        var I = G[J];
                        if ($.isNumeric(I)) {
                            r[K] += I;
                            y[K]++;
                        }
                    };
                } else {
                    if (f == "min") {
                        t = function (K, J) {
                            var I = G[J];
                            if ($.isNumeric(I)) {
                                if (!$.isNumeric(r[K])) {
                                    H += I;
                                    r[K] = I;
                                } else {
                                    if (r[K] > I) {
                                        H += I - r[K];
                                        r[K] = I;
                                    }
                                }
                            }
                        };
                    } else {
                        if (f == "max") {
                            t = function (K, J) {
                                var I = G[J];
                                if ($.isNumeric(I)) {
                                    if (!$.isNumeric(r[K])) {
                                        H += I;
                                        r[K] = I;
                                    } else {
                                        if (r[K] < I) {
                                            H += I - r[K];
                                            r[K] = I;
                                        }
                                    }
                                }
                            };
                        }
                    }
                }
            }
        }
        if (g.indexOf("probability") != -1 || g.indexOf("percent") != -1) {
            A = k ? function (n, I) {
                r[I] *= m[I] / H;
            } : function (n, I) {
                r[I] /= H;
            };
        } else {
            if (k) {
                A = function (n, I) {
                    r[I] *= m[I];
                };
            }
        }
        z = B.start;
        while (z < B.end) {
            v = Plotly.Axes.tickIncrement(z, B.size);
            h.push((z + v) / 2);
            r.push(x);
            if (j) {
                u.push(z);
            }
            if (k) {
                m.push(1 / (v - z));
            }
            if (C) {
                y.push(0);
            }
            z = v;
        }
        for (z = 0; z < e.length; z++) {
            s = Plotly.Lib.findBin(e[z], u);
            if (s >= 0 && s < r.length) {
                t(s, z);
            }
        }
        if (C) {
            r.forEach(function (n, I) {
                if (y[I] > 0) {
                    r[I] = n / y[I];
                    H += r[I];
                } else {
                    r[I] = null;
                }
            });
        }
        if (g.indexOf("percent") != -1) {
            H /= 100;
        }
        if (A) {
            r.forEach(A);
        }
        var o = Math.min(h.length, r.length),
            q = [],
            p = 0,
            c = o - 1;
        for (z = 0; z < o; z++) {
            if (r[z]) {
                p = z;
                break;
            }
        }
        for (z = o - 1; z > p; z--) {
            if (r[z]) {
                c = z;
                break;
            }
        }
        for (z = p; z <= c; z++) {
            if (($.isNumeric(h[z]) && $.isNumeric(r[z]))) {
                q.push({
                    p: h[z],
                    s: r[z],
                    b: 0
                });
            }
        }
        if (q[0]) {
            q[0].t = {
                orientation: d
            };
        }
        return q;
    };
}());
FILE_BATCH_SIZE = 100;
$("html").click(function (d) {
    var c = [];
    var f;
    var b = $(d.target);
    if (b.parents("DIV").hasClass("ff-header-content") || b.hasClass("ff-header-content") || b.parents("DIV").hasClass("ff-floating-menu") || b.hasClass("ff-floating-menu")) {
        return;
    }
    c.push(document.getElementById("ff-contextmenu"));
    c.push(document.getElementById("ff-headermenu"));
    for (var a = 0; a < c.length; a++) {
        f = c[a];
        if (f.style.display == "block") {
            f.style.display = "none";
        }
    }
});

function fileNameOnClick(c) {
    c.preventDefault();
    var b = c.target;
    var a = treeId2FileFabric(whichFileTreeIsVisible());
    b = a.parentRow(b);
    pullfile(b);
}

function sharingCellOnClick(c) {
    c.preventDefault();
    var b = c.target;
    var a = treeId2FileFabric(whichFileTreeIsVisible());
    var d;
    var f;
    b = a.parentRow(b);
    d = b.getAttribute("id");
    f = b.getAttribute("rel");
    showSharing(d, f);
}

function fileFabricCleanUp(c, g, d) {
    updateTSRel();
    prettyPrint();
    var b = _.template('<div style="display:none;"     	class="filewell__section load-more js-load-more">        <a class="js-load-more">            <span class="loading-indicator" style="display: none;">                <div class="loading-spinner">                    <img class="spinner-tiny" src="/static/img/spinny.png">                </div>            </span>            <span class="more-label">                <span>Load more...</span>            </span>        </a>    </div>');
    $(c._containerDiv).append(b);
    if (c._data["ff-root"].length >= FILE_BATCH_SIZE) {
        $(c._containerDiv).find(".js-load-more").show();
    }
    $("a.js-load-more").off("click").on("click", function () {
        var l = $(this);
        var j;
        var i;
        var h;
        var k;
        l.find(".loading-indicator").show();
        i = c.getCurrentFolder().id;
        j = c._data[i].length;
        if (i == "ff-root") {
            i = -1;
        }
        filters = c.getAllFilters();
        console.log("loading more files with filters", filters);
        $.post("/" + g + "/", {
            id: i,
            nnodes: j,
            filters: JSON.stringify(filters)
        }, function (m) {
            $(".loading-indicator").hide();
            c.addItems(m);
            h = JSON.parse(m).length;
            if (h < (FILE_BATCH_SIZE - 10)) {
                console.log("Hiding load more.", h);
                $(c._containerDiv).find(".js-load-more").hide();
            }
            setTimeout(function () {
                updateTSRel();
                prettyPrint();
            }, 800);
        });
    });
    if (d !== undefined) {
        var f;
        var e;
        var a = Object.keys(d);
        $(a).each(function (h, j) {
            f = Object.keys(d[j]);
            $(f).each(function (i, k) {
                e = d[j][k];
                $(e).each(function (m, l) {
                    FF_PRIVATE.addFilter(j, l, k);
                });
            });
        });
    }
    $("#ff-headermenu").removeClass("inactivate-filter-clicking");
}

function pullFolderContents(c, e, h, i) {
    var g = i._containerDiv;
    var f = $("#" + c);
    if (f.hasClass("loading")) {
        console.log("Folder contents are loading");
        return false;
    }
    console.log("pulling folder contents", c, e, g, i);
    var a = i.retrieveFolder(c, i),
        b = h,
        d = {
            folderId: c,
            containerDiv: g,
            folderName: b
        };
    if (a !== false) {
        d.fileJson = JSON.stringify(a);
        i.showFolder(d);
    } else {
        addMessage("Loading Folder");
        f.addClass("loading");
        $.post("/" + e + "/", {
            id: c
        }, function (j) {
            delMessage("Loading Folder");
            f.removeClass("loading");
            d.fileJson = j;
            i.showFolder(d);
        });
    }
}

function toggleLoadMoreBtn(a) {
    var c = a._data[a.getCurrentFolder().id].length;
    var b = $(a._containerDiv).find(".js-load-more");
    prettyPrint();
    if (c < FILE_BATCH_SIZE) {
        b.hide();
    } else {
        b.show();
    }
    updateTSRel();
}

function fileItemContextMenu(f) {
    var g = document.getElementById("ff-contextmenu");
    var b = treeId2FileFabric(whichFileTreeIsVisible());
    var c = b.parentRow(f.target);
    var d = b.getCheckedItems().length;
    f.preventDefault();
    if (d > 1) {
        $(g).find(".single-action").hide();
    } else {
        $(g).find(".single-action").show();
    }
    g.fid = c.getAttribute("id");
    g.ft = c.getAttribute("rel");
    var a = function (e) {
        e.style.left = f.pageX + "px";
        e.style.top = f.pageY + "px";
        e.style.display = "block";
    };
    a(g);
}

function menuItemOnClick(f) {
    var h = f.target;
    var l = whichFileTreeIsVisible();
    var k;
    var g;
    var i;
    var c = Tabs.get();
    var a;
    var j;
    var b;
    var d;
    f.stopPropagation();
    if (h.tagName == "LI") {
        h = h.children[1];
    } else {
        if (h.tagName == "I") {
            h = h.nextElementSibling;
        }
    }
    j = h.parentNode.parentNode.parentNode;
    b = j.fid;
    d = j.ft;
    j.style.display = "none";
    k = treeId2FileFabric(l);
    i = h.getAttribute("rel");
    switch (i) {
    case "rename":
        launchRenameFromFilewell(b, k, d);
        break;
    case "remove":
        removeFilesModal(k);
        break;
    case "show-revisions":
        $.post("/getrevisions/", {
            fid: b
        }, showRevisions);
        break;
    case "move-to":
        moveFilesModal(k);
        break;
    case "share":
        console.log("clicked share");
        showSharing(b, d);
        break;
    default:
        console.log("unknown item clicked", i);
    }
}

function removeFilesModal(a) {
    var f = a.getCheckedItems();
    var g;
    var d = $("#removeFilesModal");
    var e = d.find("tbody");
    var b;
    console.log("checked rows to remove", f);
    e.html("");
    for (var c = 0; c < f.length; c++) {
        g = f[c];
        b = g.cloneNode(true);
        b.deleteCell(5);
        b.deleteCell(4);
        b.deleteCell(3);
        b.deleteCell(0);
        e.append(b);
    }
    d.modal("show");
}

function moveFilesModal(j) {
    var i = j.getCheckedItems();
    var e = i.length;
    var c = $("#moveFilesModal");
    var f = c.find("#num-file-text");
    var b = c.find("#breadcrumb-destinations");
    var g = c.find("#folder-destinations");
    var h = j.getItemsByAttribute("rel", "fold");
    f.text("this 1 item");
    if (e > 1) {
        f.text("these " + e + " items");
    }
    var d = "<% _.each(crumbs, function(o) { %> <span class='js-select-dest' data-id='<%= o.id %>'><%= o.name %></span> <% }); %>";
    b.html(_.template(d, {
        crumbs: j._breadcrumbs
    }));
    var a = "<% _.each(folders, function(o) { %> <li class='js-select-dest' data-id='<%= o.attr.id %>'>		<i class='ploticon-folder ff-icon'></i><%= o.data %></li> <% }); %>";
    g.html('<ul class="modal-file-list">' + _.template(a, {
        folders: h
    }) + "</ul>");
    $(".js-select-dest").off("click").on("click", function () {
        $(".js-select-dest").removeClass("active-file-item");
        $(this).addClass("active-file-item");
    });
    c.modal("show");
}

function treeId2FileFabric(a) {
    if (a == "privatetree") {
        return FF_PRIVATE;
    } else {
        if (a == "sharedtree") {
            return FF_SHARED;
        }
    }
}

function removeFileItems() {
    var a = whichFileTreeIsVisible();
    var b = treeId2FileFabric(a);
    var c = b.getCheckedItems();
    var d = [];
    b.removeCheckedItems();
    _.each(c, function (g, f, e) {
        d.push(g.getAttribute("id"));
    });
    console.log("fids list to delete", d);
    treeci(d, "rm", b);
}

function moveFileItems() {
    var a = whichFileTreeIsVisible();
    var c = treeId2FileFabric(a);
    var d = c.getCheckedItems();
    var b = document.getElementsByClassName("active-file-item")[0].getAttribute("data-id");
    var e = [];
    console.log("PID", b);
    c.moveCheckedItems(b);
    _.each(d, function (h, g, f) {
        e.push(h.getAttribute("id"));
    });
    console.log("fids list to move", e, "to parent", b);
    treeci(e, "mv", c, b);
}

function showRevisions(c) {
    var d = document.getElementById("revisions-list");
    var c = JSON.parse(c);
    var a = JSON.stringify(c.revisions);
    var b;
    if (c.err) {
        console.log("there was error returning revisions", c.err);
        return false;
    }
    b = {
        fileJson: a,
        containerDiv: d,
        columns: [{
            name: "Revision ID",
            key: "revid",
            template: ffTemplate.fileName,
            onclick: fileNameOnClick
        }, {
            name: "Owner",
            key: "owner"
        }, {
            name: "Saved",
            key: "created",
            cellClasses: "tsrel"
        }]
    };
    a = FileFabric(b);
    $("#fileRevisionsModal").modal("show");
    $("#fileRevisionsModal").off("hidden").on("hidden", function () {
        delete b;
        d.innerHTML = "";
    });
    updateTSRel();
}

function showSharing(a, c) {
    console.log("showSharing");
    if (jumpToTab(a, c)) {
        var b = Tabs.get();
        if (c == "plot") {
            saveGraph(b).then(function (d) {
                shareLink(a);
            });
        } else {
            if (c == "grid") {
                saveGrid(b).then(function () {
                    shareLink(b);
                });
            }
        }
    } else {
        shareLink(a);
    }
}

function createNewFolder(d) {
    console.log("folderName", d);
    var a = whichFileTreeIsVisible();
    var c = treeId2FileFabric(a);
    var b = c.getCurrentFolder().id;
    if (b == "ff-root") {
        b = -1;
    }
    if (b === -1 && a === "sharedtree") {
        Plotly.Lib.notifier("To create a new shared folder, first create a private folder and then share it.", "long");
        return;
    }
    addMessage("Loading Folder...");
    $.post("/mk_dir/", {
        pid: b,
        fn: d
    }, function (e) {
        e = JSON.parse(e);
        if (e.err) {
            console.log(e.err);
        }
        c.addItems(JSON.stringify([e.node]), "first");
        delMessage("Loading Folder...");
    });
}
var ffTemplate = ffTemplate || {};
ffTemplate.fileName = function (a) {
    if (a.data === undefined && a.revid !== undefined) {
        a.data = a.revid;
    }
    var b = 40;
    if (a.data.length > b) {
        a.data = ([a.data.substr(0, b), "..."]).join();
    }
    var c = _.template('<a><i class="ff-icon"></i><%= data %></a>');
    return c(a);
};
ffTemplate.gridPreview = function (h) {
    var f = '<table class="tiny-table-preview">';
    var g = Object.keys(h);
    var c = 2;
    var b = 4;
    var e;
    var a;
    f += "<thead><tr>";
    _.each(g, function (j, k) {
        j = j.toString();
        if (k >= c) {
            return false;
        }
        if (j.length > 10) {
            j = j.substr(0, 8) + "...";
        }
        f += (["<th>", j, "</th>"]).join("");
    });
    f += "</tr></thead>";
    f += "<tbody>";
    for (var d = 0; d < b; d++) {
        f += "<tr>";
        _.each(g, function (j, i) {
            a = "";
            e = h[j];
            if (i >= c) {
                return false;
            }
            if (d < e.length) {
                a = e[d];
            }
            if (a === null || a === undefined) {
                a = "";
            }
            a = a.toString();
            if (a.length > 10) {
                a = a.substr(0, 8) + "...";
            }
            f += (["<td>", a, "</td>"]).join("");
        });
        f += "</tr>";
    }
    f += "</tbody></table>";
    return (["<a>", f, "</a>"]).join("");
};
ffTemplate.preview = function (f) {
    var d = f.attr.rel;
    var h;
    var c;
    var a;
    var b;
    if (d == "plot") {
        if (f.attr["data-imgurl"] == "") {
            return "";
        }
        h = _.template('<a><img src="<%= imgurl %>"></img></a>');
        return h({
            imgurl: f.attr["data-imgurl"]
        });
    } else {
        if (d == "grid") {
            if (f.preview == "") {
                return "";
            }
            try {
                c = JSON.parse(f.preview || "null");
                return ffTemplate.gridPreview(c);
            } catch (g) {
                console.log("error parsing grid preview", g);
                return "";
            }
        } else {
            if (d == "script") {
                h = _.template('<a><pre class="tiny-script-preview prettyprint lang-py"><%= preview %>"></pre></a>');
                b = f.preview.substr(0, 200).replace("# Python 2.7.3 (default, Apr 20 2012, 23:04:22) [GCC 4.6.3]", "").replace("# Use plot() to plot lists or arrays", "").replace("# Use print to show results in the command line history", "").replace(/^\s+|\s+$/g, "");
                a = h({
                    preview: b
                });
                return a;
            } else {
                return "";
            }
        }
    }
};
ffTemplate.sharing = function (a) {
    var b;
    b = _.template("<a><%= sharing %></a>");
    return b(a);
};
ffTemplate.sharingWithFileOwner = function (a) {
    var b;
    b = _.template('<a href="#"><%= sharing %></a>		<div><span class="muted">File Owner - </span>		<a href="/~<%= fowner %>" target="_blank"><%= fowner %></a></div>');
    return b(a);
};
ffTemplate.shortlink = function (a) {
    if (a.shortlink === "") {
        return "";
    }
    var b = _.template('<a href="<%= shortlink %>" target="_blank">Link</a>');
    return b(a);
};
ffTemplate.noFilesFound = function (a) {
    var b = '<div class="ff-announcement-banner">		<span><img src="/static/bootstrap/img/png/glyphicons_027_search.png" /></span>		Looks like you have no files here yet.</div>		<div class="ff-announcement-supplement">		Click the blue import button 		(<i class="btn--tab-tool__icon ploticon-import"></i>) 		to upload data, or try an example.</div>';
    return b;
};
ffTemplate.headerMenu = function (k) {
    k.preventDefault();
    var q = $(k.target);
    var j = q.closest(".ff-header-menu");
    var b = j.attr("data-key");
    var i = j.offset();
    var c = 40;
    var l = 10;
    var a = $("#ff-headermenu");
    var g = document.createElement("TABLE");
    var o;
    var n;
    var d;
    var p = treeId2FileFabric(whichFileTreeIsVisible());
    var f = function (u) {
        var e = p.getAllFilters();
        var t;
        var r;
        var s;
        u.each(function (v, w) {
            r = $(w);
            t = r.attr("data-filter");
            s = r.find(".ff-checkbox");
            if (e.indexOf(t) >= 0) {
                s = r.find(".ff-checkbox");
                s.addClass("ff-checked");
            }
        });
    };
    g.className = "ff-header";
    var m = {
        items: [{
            fileType: "plot",
            text: "Plots",
            filterkey: "plots_only"
        }, {
            fileType: "grid",
            text: "Grids",
            filterkey: "grids_only"
        }, {
            fileType: "script",
            text: "Scripts",
            filterkey: "scripts_only"
        }, {
            fileType: "fold",
            text: "Folders",
            filterkey: "folders_only"
        }]
    };
    var h = {
        items: [{
            text: "Private Files Only",
            filterkey: "private_only"
        }, {
            text: "Public Files - Most Views First",
            filterkey: "most_views_first"
        }, {
            text: "Public Files - Least Views First",
            filterkey: "least_views_first"
        }]
    };
    console.log(b);
    switch (b) {
    case "data":
        o = '<% _.each(items, function(item) { %>				<tr rel="<%= item.fileType %>" data-filter="<%= item.filterkey %>">					<td><div class="ff-checkbox ff-unchecked"></div></td>					<td><a href="#"><i class="ff-icon"></i><%= item.text %></a></td>				</tr><% }); %>';
        g.innerHTML = _.template(o, m);
        break;
    case "sharing":
        o = '<% _.each(items, function(item) { %>				<tr data-filter="<%= item.filterkey %>" class="ff-radio-selection">					<td><div class="ff-checkbox ff-unchecked"></div></td>					<td><a href="#"><%= item.text %></a></td>				</tr><% }); %>';
        g.innerHTML = _.template(o, h);
    default:
        console.log("unknown header column clicked", b);
        break;
    }
    j = $("#ff-headermenu");
    j.empty().append(g);
    j[0].columnKey = b;
    n = j.find("tr");
    n.off("click").on("click", applyFileFilterOrSort);
    f(n);
    i.top += c;
    i.left += l;
    a.css(i);
    a.css({
        display: "block"
    });
};

function applyFileFilterOrSort(d) {
    if ($("#ff-headermenu").hasClass("inactivate-filter-clicking")) {
        return;
    }
    var a = treeId2FileFabric(whichFileTreeIsVisible());
    var h = $(d.target).closest("TR");
    var b = h.find(".ff-checkbox");
    var f = h.attr("data-filter");
    var g = document.getElementById("ff-headermenu").columnKey;
    var c = whichFileTreeIsVisible();
    if (b.hasClass("ff-checked")) {
        b.removeClass("ff-checked");
        a.removeFilter(g, f);
    } else {
        if (h.hasClass("ff-radio-selection")) {
            $("#ff-headermenu").find(".ff-checkbox").each(function (j, e) {
                $(e).removeClass("ff-checked");
            });
            a.addFilter(g, f, "exclusive");
        } else {
            a.addFilter(g, f);
        }
        b.addClass("ff-checked");
    }
    refreshFileTrees(c);
}
jQuery(function () {
    jQuery(document).on("_updateCheckboxStatus", function (d) {
        var b = whichFileTreeIsVisible() == "sharedtree" ? FF_SHARED : FF_PRIVATE,
            a = b.getCheckedItems().length,
            c = $(".js-filewell-toggle");
        if (a > 0) {
            c.show();
        } else {
            c.hide();
        }
    });
});
WARN_ON_LEAVE = true;
user = "";
var FF_PRIVATE;
var FF_SHARED;
var ffTemplate = ffTemplate || {};
userobj = {
    user: "",
    clientoffset: 0,
    utcoffset: 0
};
$(function () {
    function a(b) {
        return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(b));
    }
    $.ajaxSetup({
        crossDomain: false,
        beforeSend: function (c, b) {
            if (!a(b.type)) {
                c.setRequestHeader("X-CSRFToken", $.cookie("csrftoken"));
            }
        }
    });
    $("#addtabdrop").click(function () {
        killPopovers();
    });
    $(window).keydown(function (e) {
        var b = (e.keyCode ? e.keyCode : e.which),
            f = Tabs.get(),
            d = f.tabtype,
            c = false;
        if (b == 13) {
            $(".catch-return").each(function () {
                var g = $(this);
                if (g.parents(".modal").css("display") === "block") {
                    if ($(".js-signupParam").is(":focus") || $(".js-signupParam").val() !== "") {
                        $("#submituser").trigger("click");
                        c = true;
                        return false;
                    } else {
                        if ($(".js-loginParam").is(":focus") || $(".js-loginParam").val() !== "") {
                            $("#loginuser").trigger("click");
                            c = true;
                            return false;
                        }
                    }
                    g.trigger("click");
                    c = true;
                }
            });
            if (c) {
                return;
            } else {
                if ($(document.activeElement).is(".comments__new-comment-input") && $(".comments__new-comment-input").hasClass("disabled") === false) {
                    Comments.postcomment();
                } else {
                    if ($(".renameDialogue").css("display") == "block") {
                        $(".renameDialogue>a.btn.js-rename").click();
                    }
                }
            }
        } else {
            if (e.shiftKey) {
                SHIFT_KEY = true;
            }
        } if (e.ctrlKey || e.metaKey) {
            if (d == "plot" && $("input:focus").length === 0 && $(".modal").not(":hidden").length === 0 && $("div:focus").length === 0) {
                if (b == 86) {
                    $("#copyarea").css("display", "block");
                    $("#copyarea").focus();
                } else {
                    if (b == 90) {
                        Plotly.Queue[SHIFT_KEY ? "redo" : "undo"]();
                    } else {
                        if (b == 80) {
                            setTimeout(function () {
                                Plotly.Lib.notifier("For best quality, download a                             PDF or PNG, then print from your desktop.", "long");
                            }, 400);
                            startGraphExport(Tabs.get());
                            e.preventDefault();
                            return false;
                        } else {
                            if (b == 83) {
                                saveGraph(Tabs.get());
                                e.preventDefault();
                                return false;
                            }
                        }
                    }
                }
            } else {
                if (d == "grid" && $("input:focus").length === 0 && $("textarea:focus").length === 0 && $(".modal").not(":hidden").length === 0) {
                    if (b == 86) {
                        $(f.HotGrid.rootElement).focus();
                    } else {
                        if (b == 83) {
                            Plotly.Grids.saveGrid(f);
                            e.preventDefault();
                            return false;
                        }
                    }
                }
            }
        }
    }).keyup(function (c) {
        var b = (c.keyCode ? c.keyCode : c.which);
        if (c.shiftKey || b == 16) {
            SHIFT_KEY = false;
        }
    }).click(function () {
        $(".tooltip").remove();
    });
    Tabs.init();
    $(window).resize(function (b) {
        b.stopPropagation();
        killPopovers();
        if (Plotly.CMDRESIZING) {
            return;
        }
        setTimeout(resizeWindow, 500);
    });
    $(".close").click(Plotly.Lib.killspin());
    getuser("bizwack");
    $(".wellicon").tooltip({
        placement: "bottom",
        delay: {
            show: 700
        }
    });
    $("#closelitebox").draggable();
    setInterval(updateTSRel, 60000);
    getnotifs();
    if (EXAMPLES_TAG != "NO_EXAMPLES") {
        Examples.lookUp(EXAMPLES_TAG, INITIAL_TAB);
    }
    $(".dropdown-toggle").each(function (c, b) {
        $v = $(b);
        var d = $v.outerWidth();
        $v.next(".dropdown-menu").attr("style", function (e, f) {
            return (f || "") + " min-width: " + d + "px !important;";
        });
    });
    $(".dropdown-menu").each(function (c, b) {
        $(b).click(function () {
            $(".dropdown.open .dropdown-toggle").dropdown("toggle");
        });
    });
    are_cookies_enabled();
    userSettings.init(function () {
        Raven.setUser({
            username: userObj.info().un
        });
    });
});

function fileFabricListenters() {
    var d = document.getElementById("ff-contextmenu").getElementsByTagName("li");
    for (var b = 0; b < d.length; b++) {
        d[b].addEventListener("click", menuItemOnClick, false);
    }
    var a = document.getElementsByClassName("js-remove-files-submit")[0];
    a.addEventListener("click", removeFileItems, false);
    var c = document.getElementsByClassName("js-move-files-submit")[0];
    c.addEventListener("click", moveFileItems, false);
}

function refreshFileTrees(b) {
    var a = function (h, g, f) {
        addMessage("Loading Files...");
        h.innerHTML = "";
        var d = [];
        var c;
        var e;
        if (FF_PRIVATE !== undefined) {
            e = FF_PRIVATE._columnFilters;
            d = FF_PRIVATE.getAllFilters();
        }
        $("#ff-headermenu").addClass("inactivate-filter-clicking");
        $.ajax({
            type: "POST",
            contentType: "text/plain; charset=utf-8",
            url: "/" + g + "/",
            data: {
                id: -1,
                filters: JSON.stringify(d)
            }
        }).done(function (i) {
            var j = {
                fileJson: i,
                containerDiv: h,
                columns: [{
                    name: "Name",
                    key: "data",
                    template: ffTemplate.fileName,
                    onCellClick: fileNameOnClick
                }, {
                    name: "Preview",
                    key: "imgurl",
                    template: ffTemplate.preview,
                    onCellClick: fileNameOnClick
                }, {
                    name: "Sharing",
                    key: "sharing",
                    template: ffTemplate.sharing,
                    onCellClick: sharingCellOnClick
                }, {
                    name: "Shortlink",
                    key: "shortlink",
                    template: ffTemplate.shortlink
                }, {
                    name: "Created",
                    key: "created",
                    cellClasses: "tsrel"
                }],
                contextMenu: fileItemContextMenu,
                changeFolder: toggleLoadMoreBtn,
                emptyFolder: ffTemplate.noFilesFound
            };
            if (g == "privatetree") {
                j.columns[0]["onHeaderClick"] = ffTemplate.headerMenu;
                j.columns[2]["onHeaderClick"] = ffTemplate.headerMenu;
                FF_PRIVATE = new FileFabric(j);
                setTimeout(function () {
                    fileFabricCleanUp(FF_PRIVATE, g, e);
                }, 800);
            } else {
                j.columns[2]["template"] = ffTemplate.sharingWithFileOwner;
                FF_SHARED = new FileFabric(j);
                setTimeout(function () {
                    fileFabricCleanUp(FF_SHARED, g);
                }, 800);
            }
            delMessage("Loading Files...");
        });
    };
    if (b === undefined) {
        a($(".js-files-tree-container-private")[0], "privatetree");
        a($(".js-files-tree-container-shared")[0], "sharedtree");
    } else {
        a($(".js-files-tree-container-private")[0], b);
    }
    resizeCenter();
}

function getUrlVars() {
    var d = [],
        c;
    var a = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&");
    for (var b = 0; b < a.length; b++) {
        c = a[b].split("=");
        d.push(c[0]);
        d[c[0]] = c[1];
    }
    return d;
}
$(document).ready(function () {
    $("#usertags").tagit();
    $("#usertokens").tagit({
        readOnly: true
    });
});

function killPopovers() {
    var a = $(".popover");
    if (a.length) {
        a.find(".pickcolor").spectrum("destroy");
        a.remove();
    }
}

function set_title(e, b) {
    if (!b) {
        var a = e.tabtype;
        b = a.charAt(0).toUpperCase() + a.slice(1);
    }
    b = " " + b;
    var d = $('.ui-tabs-nav > li > a[href="#' + e.id + '"]');
    var c = d.html().replace(d.text(), b);
    d.html(c).attr("title", b).attr("rel", "tooltip");
}

function getTitle(a) {
    return $("a[href$=" + a + "]").attr("title");
}

function resizeWindow() {
    resizeCenter();
}

function resizeCenter() {
    var a = Tabs.get();
    if (!a) {
        return;
    }
    if (Plotly.CMDRESIZING) {
        return;
    }
    if (a.tabtype == "plot") {
        Plotly.Plots.resize(a);
    } else {
        if (a.tabtype == "grid") {
            Plotly.Grids.resize(a);
        } else {
            if (a.tabtype == "files") {
                filesResize(a);
            }
        }
    }
    a.scrollTop = 0;
    a.scrollLeft = 0;
}

function setFileAndCommentsSize(h) {
    if (h.tabtype == "plot" && !h.mainsite) {
        console.log("******** not mainsite");
        return;
    }
    var f = $(h);
    var g = f.innerHeight() - f.children(".tool-menu").innerHeight(),
        b = f.innerWidth(),
        d = f.children(".theme-bar"),
        a = f.children(".examples-container"),
        c = f.children(".grid-op-container");
    if (d.css("display") == "block") {
        g -= d.innerHeight();
    }
    if (a.css("display") == "block") {
        g -= a.innerHeight();
    }
    if (c.length) {
        if (c.css("display") != "none") {
            b -= c.innerWidth();
        }
        c.css("max-height", g);
    }
    var e = f.children(".file-and-comments");
    e.css("width", b);
    e.css("height", g);
}
window.onbeforeunload = function (a) {
    var b = Tabs.get();
    if (b.changed === false || b.data === [] || b.data === undefined) {
        return;
    }
    if (b.tabtype == "plot") {
        saveGraph(b);
    } else {
        if (b.tabtype == "grid") {
            Plotly.Grids.saveGrid(b);
        }
    } if (user && WARN_ON_LEAVE) {
        return "Make sure you've saved your work.";
    }
    WARN_ON_LEAVE = true;
};

function toggleCommentPane(a) {
    var c = Tabs.get(),
        b = $(c);
    if (a === undefined) {
        a = !(b.find(".comments-container").css("display") === "block");
    }
    if (a) {
        b.find("." + c.tabtype + "-container").css({
            "margin-right": "240px"
        });
        resizeCenter();
        b.find(".comments-container").fadeIn();
        if (c.fid !== undefined) {
            Comments.retrievecomments(c.fid);
            b.find(".comments__new-comment-input").focus();
            b.find(".comments__new-comment-input").on("keyup", function () {
                Comments.enableSubmit();
            });
        } else {
            Comments.emptyInbox();
        }
        Comments.enableSubmit();
    } else {
        $(c).find(".comments-container").fadeOut();
        $(c).find("." + c.tabtype + "-container").css({
            "margin-right": "0px"
        });
        resizeCenter();
    }
}

function calltoaction(d, a, b) {
    var e = Tabs.get(),
        c = $("#calltoaction");
    if (Plotly.Grids.getOp(e) == "Run") {
        return;
    }
    c.find("a.btn-success").text(a).unbind("click.plotly").bind("click.plotly", function () {
        if (typeof (b) == "function") {
            b();
        }
        c.css("display", "none");
    });
    c.find(".alert__contents").html(d);
    c.fadeIn("fast");
}

function clearTextSelection() {
    var a = window.getSelection ? window.getSelection() : document.selection;
    if (a) {
        if (a.empty) {
            a.empty();
        } else {
            if (a.removeAllRanges) {
                a.removeAllRanges();
            }
        }
    }
}
if (!String.prototype.format) {
    String.prototype.format = function () {
        var a = arguments;
        return this.replace(/{(\d+)}/g, function (b, c) {
            return typeof a[c] != "undefined" ? a[c] : b;
        });
    };
}
jQuery.fn.slideLeftHide = function (a, b) {
    this.animate({
        width: "hide",
        marginLeft: "hide",
        marginRight: "hide"
    }, a, b);
};
jQuery.fn.slideLeftShow = function (a, b) {
    this.animate({
        width: "show",
        marginLeft: "show",
        marginRight: "show"
    }, a, b);
};
jQuery.fn.errorTip = function (f, d, c, g, a) {
    var e = null;
    var h = $(this);
    h.tipsy({
        className: "error__tooltip",
        trigger: "manual",
        gravity: d,
        opacity: 1
    });
    h.on("input", function () {
        var j = $(this);
        clearTimeout(e);
        var i = f(j);
        if (!i || j.val().length === 0) {
            j.removeClass("js-has-error-tooltip error__form-field");
            j.tipsy("hide");
            if (g) {
                g(j);
            }
        } else {
            if (c === 0) {
                b(j, i);
            }
            e = setTimeout(function () {
                b(j, i);
            }, c);
        }
    });

    function b(i, j) {
        i.addClass("js-has-error-tooltip error__form-field");
        i.attr("title", j).tipsy("show");
        if (a) {
            a(i);
        }
    }
};
subscriptions = {
    save_access: function (a) {
        $.get("/acct_quota", function (c) {
            var b = JSON.parse(c);
            if (b.err !== "") {
                console.log(b.err);
                a(false);
            } else {
                userObj.update({
                    acct: {
                        private_files: b.private_files
                    }
                }, false);
                if (b.private_files < (userObj.info().acct.customer.plan.private_files - 1)) {
                    a(false);
                } else {
                    if (b.private_files >= (userObj.info().acct.customer.plan.private_files - 1)) {
                        if (b.private_files == (userObj.info().acct.customer.plan.private_files - 1)) {
                            Plotly.Lib.conf_modal.init({
                                header: "Upgrade account to save more private files",
                                body: "Hey " + userObj.info().un + ", your current account settings allow you to save " + Plotly.Lib.ppn(userObj.info().acct.customer.plan.private_files) + " private files. This is your " + Plotly.Lib.num2ordinal(userObj.info().acct.customer.plan.private_files) + '.<br><br>You can keep saving public files after this; to save more private files, you can upgrade your account.<br><br><a href="' + Plotly.Lib.plotlyurl("plans") + '">Click here to learn more.</a>',
                                canc_btn_txt: "Upgrade My Account",
                                conf_btn_txt: "Save File Privately",
                                canc_func: function () {
                                    payment_form("ind", "signed-in", "modal", function () {
                                        a(false);
                                    });
                                },
                                conf_func: function () {
                                    a(false);
                                }
                            });
                        } else {
                            if (b.private_files >= userObj.info().acct.customer.plan.private_files) {
                                var d = userObj.reminderLevel();
                                if (d === 0) {
                                    url = Plotly.Lib.plotlyurl("~" + userObj.info().un + "/" + b.idlocal);
                                    Plotly.Lib.conf_modal.init({
                                        header: "This file will be public",
                                        body: 'Upgrade your account now to save more files privately. Or, you can make this file publicly viewable, and share it at <a href="' + url + '">' + url + '</a>.<br><br><a href="' + Plotly.Lib.plotlyurl("plans") + '">Click here to learn more.</a>',
                                        alt_btn_txt: "Don't Save Yet",
                                        canc_btn_txt: "Upgrade Now",
                                        conf_btn_txt: "Save File Publicly",
                                        alt_func: function () {},
                                        canc_func: function () {
                                            payment_form("ind", "signed-in", "modal", function () {
                                                a(false);
                                            });
                                        },
                                        conf_func: function () {
                                            a(true);
                                        }
                                    });
                                } else {
                                    if (d === 1) {
                                        url = Plotly.Lib.plotlyurl("~" + userObj.info().un + "/" + b.idlocal);
                                        Plotly.Lib.conf_modal.init({
                                            header: "Upgrade to save more files privately",
                                            body: 'To save more files privately in the future, you can upgrade your account anytime. <a href="' + Plotly.Lib.plotlyurl("plans") + '">Learn more here.</a> You can still save files; they will just default to public.',
                                            alt_btn_txt: "Don't Save Yet",
                                            canc_btn_txt: "Upgrade Now",
                                            conf_btn_txt: "Save File Publicly",
                                            alt_func: function () {},
                                            canc_func: function () {
                                                payment_form("ind", "signed-in", "modal", function () {
                                                    a(false);
                                                });
                                            },
                                            conf_func: function () {
                                                a(true);
                                            }
                                        });
                                    } else {
                                        a(true);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        });
    },
    wr_access: function (c, b, a) {
        $.get("/acct_quota", function (f) {
            res = JSON.parse(f);
            if (res.err) {
                b();
                return;
            }
            userObj.update({
                acct: {
                    private_files: res.private_files
                }
            }, false);
            var e = Plotly.Lib.plotlyurl("~" + userObj.info().un + "/" + c.split(":")[c.split(":").length - 1]);
            if (res.private_files < userObj.info().acct.customer.plan.private_files - 1) {
                b();
                return;
            }
            var d = $("#sharingModal");
            d.modal("hide");
            if (res.private_files == userObj.info().acct.customer.plan.private_files - 1) {
                Plotly.Lib.conf_modal.init({
                    header: "Upgrade account to save more private files",
                    body: "Hey " + userObj.info().un + ", your current account settings allow you to save " + Plotly.Lib.ppn(userObj.info().acct.customer.plan.private_files) + " private files. This is your " + Plotly.Lib.num2ordinal(userObj.info().acct.customer.plan.private_files) + '.<br><br>You can keep saving public files after this; to save more private files, you can upgrade your account. <a href="' + Plotly.Lib.plotlyurl("plans") + '">Click here to learn more.</a>',
                    conf_btn_txt: "Make file private",
                    conf_func: function () {
                        d.modal("show");
                        b();
                    },
                    canc_btn_txt: "Upgrade my account",
                    canc_func: function () {
                        payment_form("ind", "signed-in", "modal", function () {
                            d.modal("show");
                            b();
                        });
                    }
                });
            } else {
                if (res.private_files >= userObj.info().acct.customer.plan.private_files) {
                    Plotly.Lib.conf_modal.init({
                        header: "Upgrade account to make file private",
                        body: "Hey " + userObj.info().un + ", your current account settings allow you to save " + Plotly.Lib.ppn(userObj.info().acct.customer.plan.private_files) + " private files. This would be your " + Plotly.Lib.num2ordinal(userObj.info().acct.private_files + 1) + '.<br><br>You can upgrade now to save this and many more files privately. Or, you can keep this file publicly viewable at <a href="' + e + '">' + e + "</a>.",
                        conf_btn_txt: "Keep file public",
                        conf_func: function () {
                            d.modal("show");
                            a();
                        },
                        canc_btn_txt: "Upgrade my account",
                        canc_func: function () {
                            payment_form("ind", "signed-in", "modal", function () {
                                d.modal("show");
                                b();
                            });
                        }
                    });
                }
            }
        });
    },
    pullf_access: function (b, a) {
        if (a.cause === "personal_file") {
            Plotly.Lib.conf_modal.init({
                header: "Upgrade account to view file",
                body: "Hey " + userObj.info().un + ", you can save and access " + Plotly.Lib.ppn(userObj.info().acct.customer.plan.private_files) + ' private files for this account type. <br><br>To access this file, you can upgrade your account. <a href="' + Plotly.Lib.plotlyurl("plans") + '">Click here to learn more</a>.',
                canc_btn_txt: "Cancel",
                canc_func: function () {},
                conf_btn_txt: "Upgrade and View",
                conf_func: function () {
                    payment_form("ind", "signed-in", "modal", function () {
                        b();
                    });
                }
            });
        } else {
            if (a.cause === "shared_file") {
                Plotly.Lib.conf_modal.init({
                    header: "This file is locked",
                    body: "Hey " + userObj.info().un + ", this file is locked and belongs to " + a.owner.username + (a.owner.email ? " (" + a.owner.email + ")" : "") + ". For this file to be retrieved from their account, " + a.owner.username + ' needs to upgrade their account by visiting <a href="' + Plotly.Lib.plotlyurl("plans") + '">' + Plotly.Lib.plotlyurl("plans") + '</a>.<br>Questions? Email us at <a href="mailto:support@plot.ly">support@plot.ly</a>.',
                    canc_btn_txt: "",
                    conf_btn_txt: "Done"
                });
            }
        }
    },
    AccountError: function (a) {
        this.info = a;
        this.response = function () {
            if (this.info.type == "upload") {
                Plotly.Lib.conf_modal.init({
                    header: "Upgrade to upload file",
                    body: 'Upgrade your account to upload this file. <a href="' + Plotly.Lib.plotlyurl("plans") + '">Click here to learn more.</a>',
                    canc_btn_txt: "Cancel Upload",
                    conf_btn_txt: "Upgrade",
                    canc_func: function () {},
                    conf_func: function () {
                        payment_form("ind", "signed-in", "modal");
                    }
                });
            } else {
                if (this.info.type == "saveResp") {
                    Plotly.Lib.conf_modal.init({
                        header: "Upgrade to save file",
                        body: 'Upgrade your account to save this file. <a href="' + Plotly.Lib.plotlyurl("plans") + '">Click here to learn more.</a>',
                        canc_btn_txt: "Cancel Saving",
                        conf_btn_txt: "Upgrade and Save",
                        canc_func: function () {},
                        conf_func: function () {
                            payment_form("ind", "signed-in", "modal");
                        }
                    });
                }
            }
        };
    }
};
var Tabs = (function () {
    var d = 150;
    var a = {
        plot: '<i class="ploticon-plot"></i>',
        surf: "&#x3C6;",
        grid: '<i class="ploticon-grid"></i>',
        script: '<i class="ploticon-script"></i>',
        files: '<i class="ploticon-folder"></i>'
    };
    var b = 0;

    function c() {
        $(".ui-tabs-nav > li").hover(function () {
            $(this).find(".ui-icon-close").css("display", "block");
        }, function () {
            $(this).find(".ui-icon-close").css("display", "none");
        }).css({
            position: "",
            top: ""
        });
        $(".tab-tool").css("opacity", 1).addClass("ui-state-disabled").removeClass("ui-state-active");
    }
    return {
        initMinimal: function (f) {
            var g = $(f),
                h = g.find(".js-minimal-tabs-menu");
            g.find(".js-minimal-tabs-content").not(":first-child").hide();
            h.find("li:first-child").addClass("current");
            var e = g.find(".js-run-fit-btn");
            h.find("a").on("click", function () {
                $(this).parent().addClass("current");
                $(this).parent().siblings().removeClass("current");
                var i = $(this).attr("href"),
                    j = g.find(i),
                    k = $(".js-minimal-tabs-content").not(i);
                k.find(".js-has-error-tooltip").each(function () {
                    $(this).tipsy("hide");
                });
                k.hide();
                e.tipsy("hide");
                j.show();
                j.find(".js-has-error-tooltip").each(function () {
                    $(this).tipsy("show");
                });
                e.tipsy("show");
                return false;
            });
        },
        init: function () {
            var e = $("#tabs-one-line").tabs({
                tabTemplate: '<li><a href="#{href}" class="link--tool">#{label}</a><span class="ui-icon ui-icon-close">Remove Tab</span></li>',
                select: function (h, g) {
                    var i = g.panel;
                    setTimeout(resizeCenter, 500);
                    if (Comments.commentsopen()) {
                        Comments.retrievecomments(i.fid, i.tabtype);
                    }
                }
            }).find(".ui-tabs-nav > li").not(".tab-tool").sortable({
                axis: "x",
                containment: "parent"
            });
            $("#tabs-one-line").on("dblclick", "a.link--tool", function (g) {});
            c();
            this.add("files", "Files");
            $(".tab-tool, .filewell-li").find(".ui-icon-close").remove();
            var f = this;
            $(document).on("click", "#tabs-one-line span.ui-icon-close", function () {
                f.close($("li", $("#tabs-one-line")).index($(this).parent()));
            });
            $("#tabs-one-line").find(".btn").tipsy({
                gravity: "sw",
                opacity: 1,
                offset: 8
            });
            $(window).resize(function () {
                f.resize();
            });
        },
        add: function (m, j, g) {
            b++;
            hidebox();
            if (b > 2) {
                $("#dndtips").fadeOut("slow");
            }
            m = (typeof m !== "undefined") ? m : "plot";
            var f = "tab-" + b;
            var h = "#" + f;
            var i = $("#tabs-one-line");
            var l = {
                files: {
                    name: "Files",
                    init: createFilewell
                },
                plot: {
                    name: "Plot",
                    init: Plotly.Plots.newTab
                },
                grid: {
                    name: "Data",
                    init: Plotly.Grids.newGrid
                }
            };
            if (!j) {
                j = l[m].name;
            }
            i.tabs("add", h, j);
            $(h).attr("name", m).addClass("tab-panel js-tab-contents").appendTo(".middle-center");
            $(".tab-tool").appendTo(".ui-tabs-nav");
            i.tabs("select", $(".ui-corner-top").length - 1);
            var e = this.get();
            e.tabtype = m;
            e.empty = true;
            i.tabs("option", "disabled", []);
            l[m].init(f, g);
            if (Comments.commentsopen()) {
                Comments.retrievecomments(e.fid);
            }
            if (m == "plot") {
                fileDrop(e, m);
            }
            if (m == "files") {
                var k = $(".ui-tabs-nav").find("[href=" + h + "]");
                k.removeClass("link--tool").html(a[m]);
                k.parent().addClass("filewell-li");
                i.find(h).addClass("filewell");
            } else {
                this.resize();
            }
            c();
            return e;
        },
        resize: function () {
            var j = $(".ui-tabs-nav > li").not(".tab-tool");
            var f = j.length;
            var e = $($(".ui-tabs-nav > li").not(".filewell-li")[0]).offset().left,
                l;
            if ($("#signed-in").length > 0) {
                l = $("#signed-in").offset().left;
            } else {
                l = $("#signup").offset().left;
            }
            var k = $(".tab-tool").width(),
                h = parseInt($(".ui-tabs-nav > li:first-child").css("padding-right"), 10) + parseInt($(".ui-tabs-nav > li:first-child").css("padding-left"), 10),
                g = parseInt($(".ui-tabs-nav > li:first-child").css("margin-right"), 10);
            l -= 60;
            var m = l - e - k - (h + g) * (f + 1);
            var i = d * f;
            if (i >= m) {
                j.not(".filewell-li").width(m / f);
            } else {
                j.not(".filewell-li").width(d);
            }
            j.each(function (p, o) {
                var s = $(o).children("a");
                var q = s.attr("href");
                var n = $(q).attr("name");
                if (n === undefined) {
                    n = "plot";
                }
                var r = getTitle(q);
                if (typeof (r) != "string") {
                    r = n.charAt(0).toUpperCase() + n.slice(1);
                }
                if (n == "files") {
                    s.html(a[n]);
                } else {
                    s.html(a[n] + " " + r);
                }
            });
        },
        close: function (f) {
            var e = $("#tabs-one-line");
            e.tabs("remove", f);
            var g = e.tabs("option", "selected");
            if ((f == g) && (f > 0)) {
                e.tabs("select", f - 1);
            }
            this.resize();
        },
        get: function (f) {
            var g = $("#embedded-graph");
            if (g.length) {
                return g[0];
            }
            if (f) {
                var e = $(f).parents(".js-tab-contents");
                if (e.length) {
                    return e[0];
                }
            }
            return $(".js-tab-contents:visible")[0];
        },
        fresh: function (f, g, e) {
            if (e === undefined) {
                e = true;
            }
            var h = this.get();
            if (!h || h.tabtype != f || !h.empty) {
                h = this.add(f, undefined, g);
            }
            if (e) {
                $(h).find(".examples-container").show();
            }
            Examples.change(h);
            return h;
        },
        select: function (f) {
            if (typeof f == "string") {
                f = $("#" + f)[0];
            }
            var e = $(".js-tab-contents").index(f);
            $("#tabs-one-line").tabs("enable", e).tabs("select", e);
        }
    };
})();
var Examples = (function () {
    return {
        init: function () {
            var e = $(Tabs.get());
            $($("script#load-examples").html()).insertAfter(e.find(".tool-menu"));
            var b = e.find(".examples-container"),
                a = e.find(".close");
            var c = d3.select(b.get(0));
            var g = 0;
            var f, d;
            c.selectAll(".handle").on("mouseenter", function (k, h) {
                var j = this;
                f = setInterval(function (o, n) {
                    var p = c.select(".gallery-slide").node();
                    var l = p.scrollWidth;
                    var m = c.node().getBoundingClientRect().width;
                    if (p.scrollLeft >= l - m) {} else {
                        if (p.scrollLeft <= 0) {}
                    }
                    p.scrollLeft += d * 5;
                }, 10);
            }).on("mouseout", function (j, h) {
                if (d3.event.target === this) {
                    clearInterval(f);
                }
            }).on("mousemove", function (m, k) {
                var l = this.className.split(" ").indexOf("right") != -1;
                var h = this.getBoundingClientRect().width;
                var j = d3.mouse(this)[0];
                d = l ? j / h : (1 - j / h) * -1;
            });
            a.on("click", function () {
                if (b.css("display") === "none") {
                    Examples.set(this);
                    return false;
                    a.addClass("active");
                } else {
                    b.slideDown();
                    a.removeClass("active");
                }
            });
            b.find(".close").on("click", function () {
                b.slideUp(function () {
                    resizeCenter();
                });
                a.removeClass("active");
            });
        },
        set: function (c) {
            var f = Tabs.get(),
                e = f.tabtype,
                d = $(f),
                a = $(c),
                b = d.find(".examples-container");
            Examples.change(f);
            if (b.css("display") == "block") {
                b.fadeOut(function () {
                    resizeCenter();
                });
                a.removeClass("active");
            } else {
                b.fadeIn(function () {
                    resizeCenter();
                });
                a.addClass("active");
            }
        },
        configure: function (f, c) {
            if (c in ExampleData.gridConfigure == false) {
                return;
            }
            var b = ExampleData.gridConfigure[c],
                d = b.set_grid_op_args,
                e = b.rows,
                a = d[0];
            window.GridLayout["setGridOp"].apply(this, d);
            setTimeout(function () {
                $(b.opts).each(function (h, g) {
                    $(f).find(g).trigger("click");
                });
            }, 50);
            setTimeout(function () {
                var h = Object.keys(e);
                var j = e[h[0]].length;
                h.forEach(function (l, k) {
                    if (l === "G" || l === "E") {
                        GridLayout.toggleHeaders(l, true);
                    }
                });
                var g;
                for (var i = 0; i < j; i++) {
                    h.forEach(function (k) {
                        if (e[k][i]) {
                            g = (g = f.colMeta[i]["headers"]) && (g = g[k]);
                            if (g) {
                                if (Plotly.Grids.Ops[a].controlType.indexOf("pair") === -1) {
                                    g.bg = "#69738a";
                                }
                                $(g.elem).click();
                            }
                        }
                    });
                }
                Plotly.Grids.resize(f);
            }, 200);
            setTimeout(function () {
                var g = MixedType.typeTableRows(f),
                    h = b.dropdowns;
                if (!h) {
                    return;
                }
                h.forEach(function (j, i) {
                    $(g[i]).find(".dropdown-menu a").each(function (k, l) {
                        if (l.text === j) {
                            $(l).click();
                        }
                    });
                });
            }, 600);
        },
        change: function (b) {
            var a = $(b);
            a.find(".examples__thumbnails").hide();
            a.find(".js-thumb-ribbon-" + b.tabtype).show();
        },
        lookUp: function (a, b) {
            var e = Tabs.get();
            e.fid = undefined;
            e.data = undefined;
            e.layout = undefined;
            if (b == "plot") {
                e.data = undefined;
                e.layout = undefined;
                e.lw = undefined;
                e.undoqueue = undefined;
                e.undonum = undefined;
                e.autoplay = undefined;
                e.calcdata = undefined;
                var d = ExampleData.graphExamples[a + "_data"],
                    c = ExampleData.graphExamples[a + "_layout"];
                Plotly.plot(e, d, c);
            } else {
                if (b == "grid") {
                    SHOW_EXAMPLES = "grid";
                    Plotly.Grids.loadGrid(ExampleData.gridExamples[a], true);
                    Examples.configure(e, a);
                }
            }
        }
    };
})();

function handlepaste(b, c) {
    var a = b.innerHTML;
    if (c && c.clipboardData && c.clipboardData.getData) {
        console.log(c.clipboardData.types);
        if (/text\/html/.test(c.clipboardData.types)) {
            b.innerHTML = c.clipboardData.getData("text/html");
        } else {
            if (/text\/plain/.test(c.clipboardData.types)) {
                b.innerHTML = c.clipboardData.getData("text/plain");
            } else {
                b.innerHTML = "";
            }
        }
        EE = c;
        console.log(b.innerHTML);
        waitforpastedata(b, a);
        if (c.preventDefault) {
            c.stopPropagation();
            c.preventDefault();
        }
        return false;
    } else {
        b.innerHTML = "";
        waitforpastedata(b, a);
        return true;
    }
}

function waitforpastedata(c, a) {
    var b;
    if (c.childNodes && c.childNodes.length > 0) {
        processpaste(c, a);
    } else {
        b = {
            e: c,
            s: a
        };
        b.callself = function () {
            waitforpastedata(b.e, b.s);
        };
        setTimeout(b.callself, 20);
    }
}

function processpaste(c, a) {
    var b = c.innerHTML;
    c.innerHTML = a;
    parse(b);
}

function parse(d) {
    var e = Tabs.get();
    if (e.tabtype != "plot") {
        return;
    }
    var b = parsehtml(d);
    if (b.length === 0 || b[0].length === 0) {
        b = parsetext(d);
    }
    if (b.length === 0 || b[0].length === 0) {
        var c = $.cookie("csrftoken");
        $.post("/writef/", {
            clipboard: d,
            csrfmiddlewaretoken: c
        }, fileResp);
    } else {
        var a = csv_to_dict(b);
        $("#dndtips").fadeOut("fast");
        Plotly.plot(e, a);
    }
}

function getdelim(e, d, f) {
    var a = e.split(d).length;
    var b;
    for (var c in f) {
        b = (d === ",") ? e.split(f[c]).length - e.split("," + f[c]).length : e.split(f[c]).length;
        if (b > (a * 1.2)) {
            d = f[c];
        }
    }
    return d;
}

function parsetext(g) {
    var h = [];

    function b(e) {
        return e.trim();
    }
    try {
        var a = getdelim(g, "\n", ["<br>"]);
        var d = getdelim(g, ",", [" ", "\t"]);
        console.log(a, d);
        var c = g.split(a);
        for (var f in c) {
            h.push(c[f].split(d).map(b));
        }
    } catch (j) {
        console.log(j);
    }
    console.log(h);
    return [h];
}

function parsehtml(c) {
    var b = [];
    try {
        var a = $("<html>").html(c);
        $("table", a).each(function () {
            var e = [];
            var g = $(this);
            var f = g.find("tr");
            f.each(function (j) {
                var k = [];
                $row = $(this);
                var h = $row.find("td");
                h.each(function (i) {
                    datum = $(this);
                    k.push($(this).text());
                });
                e.push(k);
            });
            b.push(e);
        });
    } catch (d) {
        console.log(d);
    }
    return b;
}

function csv_to_dict(g) {
    var a = [],
        f, c, d;
    try {
        for (f in g) {
            var b = g[f][0].length;
            try {
                b = g[f][10].length;
            } catch (l) {
                try {
                    b = g[f][1].length;
                } catch (l) {
                    console.log(l);
                }
            }
            if (b > 1) {
                for (c = 1; c < b; c++) {
                    var h = {};
                    h.x = [];
                    h.y = [];
                    for (var d in g[f]) {
                        if (g[f][d].length > 1) {
                            h.x.push(clean_datum(g[f][d][0]));
                            h.y.push(clean_datum(g[f][d][c]));
                        }
                    }
                    h.type = "scatter";
                    a.push(h);
                }
            } else {
                var h = {};
                h.x = [];
                h.y = [];
                for (d in g[f]) {
                    if (g[f][d].length > 0) {
                        h.x.push(clean_datum(d));
                        h.y.push(clean_datum(g[f][d][0]));
                    }
                }
                h.type = "scatter";
                a.push(h);
            }
        }
    } catch (l) {
        console.log(l);
    }
    return a;
}

function clean_datum(d) {
    d = d.toString().replace("$", "").replace(",", "").replace("'", "").replace('"', "").replace("%", "");
    var a = d.replace(new RegExp("[0-9]", "g"), "");
    if (a !== "" && a !== ".") {
        var b = GridOperations.unix_to_mysql(Plotly.Lib.parseDate(d), 1);
        if (b !== undefined) {
            d = b;
        }
    }
    return d;
}

function PolySolver(n, k, f) {
    function j(i, o) {
        this.x = i;
        this.y = o;
    }
    j.prototype.toString = function () {
        return this.x + "," + this.y;
    };

    function d(p, s, r, o) {
        for (var t = r + 1; t < o; t++) {
            p[s][t] /= p[s][r];
        }
        p[s][r] = 1;
    }

    function h(p, t, s, v, o) {
        for (var r = 0; r < v; r++) {
            if (r != t && p[r][s] != 0) {
                for (var u = s + 1; u < o; u++) {
                    p[r][u] -= p[r][s] * p[t][u];
                }
                p[r][s] = 0;
            }
        }
    }

    function g(p) {
        var u = p.length;
        var o = p[0].length;
        var s = 0;
        var r = 0;
        var q;
        var t;
        while (s < u && r < o) {
            q = s;
            while (q < u && p[q][r] == 0) {
                q++;
            }
            if (q < u) {
                if (q != s) {
                    t = p[s];
                    p[s] = p[q];
                    p[q] = t;
                }
                if (p[s][r] != 1) {
                    d(p, s, r, o);
                }
                h(p, s, r, u, o);
                s++;
            }
            r++;
        }
    }

    function a(z, s) {
        s += 1;
        var B, t = z.length;
        var q, A, D, o, C;
        var w = 2 * s - 1;
        var v, u = Array();
        for (B = 0; B < s; B++) {
            v = Array();
            for (var x = 0; x <= s; x++) {
                v[x] = 0;
            }
            u[B] = v;
        }
        var y = Array();
        for (B = 0; B < w; B++) {
            y[B] = 0;
        }
        y[0] = t;
        for (B = 0; B < z.length; B++) {
            q = z[B];
            for (o = 1; o < w; o++) {
                y[o] += Math.pow(q.x, o);
            }
            u[0][s] += q.y;
            for (o = 1; o < s; o++) {
                u[o][s] += Math.pow(q.x, o) * q.y;
            }
        }
        for (o = 0; o < s; o++) {
            for (C = 0; C < s; C++) {
                u[o][C] = y[o + C];
            }
        }
        g(u);
        A = Array();
        for (B = 0; B < u.length; B++) {
            D = u[B];
            A[B] = D[s];
        }
        return A;
    }

    function c(u, w, v) {
        var t = [];
        for (var r = 0; r < u.length; r++) {
            var o = u[r],
                q = w[r];
            if (typeof o === "string") {
                o = Number(o.replace(/[^0-9.-]/g, ""));
            }
            if (typeof q === "string") {
                q = Number(q.replace(/[^0-9.-]/g, ""));
            }
            t[r] = new j(o, q);
        }
        var s = a(t, v);
        return s;
    }
    var b = c(n, k, f);
    var m = {
        err: "",
        params: {}
    };
    var l = ["a", "b", "c", "d", "e", "f", "g", "h", "i"];
    for (var e = 0; e <= f; e++) {
        m.params[l[e]] = b[e];
    }
    return m;
}

function FuncSolver(N) {
    if (!N) {
        N = {};
    }
    var m = N.log || false;
    var o = {};
    var ad = {
        max: "",
        min: "",
        abs: "",
        sqrt: "",
        exp: "",
        ln: "",
        log10: "",
        log2: "",
        power: "",
        pow: "",
        sin: "",
        cos: "",
        tan: "",
        cot: "",
        sec: "",
        csc: "",
        atan: "",
        asin: "",
        acos: "",
        acot: "",
        asec: "",
        acsc: "",
        sinh: "",
        cosh: "",
        tanh: "",
        coth: "",
        sech: "",
        csch: "",
        asinh: "",
        acosh: "",
        atanh: "",
        acoth: "",
        asech: "",
        acsch: "",
        sum: "",
        fact: "",
        gamma: "",
        chisq: "",
        norm: "",
        gauss: "",
        studt: "",
        pi: "",
        statcom: "",
        inverse: "",
        agauss: "",
        anorm: "",
        aerf: "",
        achisq: "",
        astudt: "",
        afishf: ""
    };
    var W = {
        pi: ""
    };
    var i = Math.PI,
        Z = i / 2,
        f = 180 / i,
        h = Math.sqrt(2);

    function an(at, ar) {
        return Math.max(at, ar);
    }

    function D(at, ar) {
        return Math.min(at, ar);
    }

    function d(ar) {
        return Math.abs(ar);
    }

    function c(ar) {
        return Math.sqrt(ar);
    }

    function H(ar) {
        return Math.exp(ar);
    }

    function y(ar) {
        return Math.log(ar);
    }

    function ak(ar) {
        return y(ar) / Math.LN10;
    }

    function w(ar) {
        return y(ar) / Math.LN2;
    }

    function e(ar, at) {
        return Math.pow(ar, at);
    }

    function a(ar, at) {
        return Math.pow(ar, at);
    }

    function ac(ar) {
        return Math.sin(ar);
    }

    function V(ar) {
        return Math.cos(ar);
    }

    function p(ar) {
        return ac(ar) / V(ar);
    }

    function U(ar) {
        return V(ar) / ac(ar);
    }

    function k(ar) {
        return 1 / V(ar);
    }

    function G(ar) {
        return 1 / ac(ar);
    }

    function am(ar) {
        return Math.atan(ar);
    }

    function C(ar) {
        return Math.asin(ar);
    }

    function s(ar) {
        return Math.acos(ar);
    }

    function q(ar) {
        return am(1 / ar);
    }

    function ai(ar) {
        return s(1 / ar);
    }

    function j(ar) {
        return C(1 / ar);
    }

    function A(ar) {
        return (H(ar) - H(-ar)) / 2;
    }

    function R(ar) {
        return (H(ar) + H(-ar)) / 2;
    }

    function ab(ar) {
        return A(ar) / R(ar);
    }

    function l(ar) {
        return 1 / ab(ar);
    }

    function K(ar) {
        return 1 / R(ar);
    }

    function r(ar) {
        return 1 / A(ar);
    }

    function X(ar) {
        return y(ar + c(ar * ar + 1));
    }

    function aa(ar) {
        return y(ar + c(ar * ar - 1));
    }

    function ao(ar) {
        return 0.5 * y((1 + ar) / (1 - ar));
    }

    function z(ar) {
        return 0.5 * y((ar + 1) / (ar - 1));
    }

    function Y(ar) {
        return y(1 / ar + c(1 / (ar * ar) + 1));
    }

    function M(ar) {
        return y(1 / ar + c(1 / (ar * ar) - 1));
    }

    function ag(ar) {
        return ar.reduce(function (at, au) {
            return at + au;
        });
    }

    function J(at) {
        if (at === 0 | at == 1) {
            return 1;
        }
        if (at < 0) {
            return J(at + 1) / (at + 1);
        }
        if (at > 1) {
            return at * J(at - 1);
        }
        var ar = (at < 0.5) ? at : 1 - at;
        ar = 1 / (1 + ar * (0.577215664819072 + ar * (-0.655878067489187 + ar * (-0.042002698827786 + ar * (0.1665389907228 + ar * (-0.042197630554869 + ar * (-0.009634403818022 + ar * (0.007285315490429 + ar * (-0.001331461501875)))))))));
        if (at > 0.5) {
            ar = at * (1 - at) * i / (ar * ac(i * at));
        }
        return ar;
    }

    function S(ar) {
        return J(ar - 1);
    }

    function F(au, av) {
        var at = "0";
        for (var ar = 0; ar < av; ar++) {
            at += "0";
        }
        return (at + au).slice(av * -1);
    }

    function af(ar, ay) {
        if (ar > 1000 | ay > 1000) {
            var aw = t((e(ar / ay, 1 / 3) + 2 / (9 * ay) - 1) / c(2 / (9 * ay))) / 2;
            return (ar > ay) ? aw : 1 - aw;
        }
        var ax = H(-0.5 * ar);
        if ((ay % 2) == 1) {
            ax = ax * c(2 * ar / i);
        }
        var au = ay;
        while (au >= 2) {
            ax = ax * ar / au;
            au = au - 2;
        }
        var av = ax,
            at = ay;
        while (av > 1e-15 * ax) {
            at += 2;
            av *= ar / at;
            ax += av;
        }
        return 1 - ax;
    }

    function t(at) {
        var ar = at * at;
        if (d(at) > 7) {
            return (1 - 1 / ar + 3 / (ar * ar)) * H(-ar / 2) / (d(at) * c(Z));
        } else {
            return af(ar, 1);
        }
    }

    function E(ar) {
        return ((ar < 0) ? ((ar < -10) ? 0 : af(ar * ar, 1) / 2) : ((ar > 10) ? 1 : 1 - af(ar * ar, 1) / 2));
    }

    function Q(ar) {
        return ((ar < 0) ? (2 * E(h * ar) - 1) : (1 - 2 * E(-h * ar)));
    }

    function ah(at, ax) {
        at = d(at);
        var ar = at / c(ax),
            av = am(ar);
        if (ax == 1) {
            return 1 - av / Z;
        }
        var aw = ac(av),
            au = V(av);
        if ((ax % 2) == 1) {
            return 1 - (av + aw * au * aj(au * au, 2, ax - 3, -1)) / Z;
        } else {
            return 1 - aw * aj(au * au, 1, ax - 3, -1);
        }
    }

    function ap(av, ax, aw) {
        var aB = aw / (ax * av + aw);
        if ((ax % 2) === 0) {
            return aj(1 - aB, aw, ax + aw - 4, aw - 2) * e(aB, aw / 2);
        }
        if ((aw % 2) === 0) {
            return 1 - aj(aB, ax, ax + aw - 4, ax - 2) * e(1 - aB, ax / 2);
        }
        var at = am(c(ax * av / aw)),
            aA = at / Z,
            ar = ac(at),
            ay = V(at);
        if (aw > 1) {
            aA = aA + ar * ay * aj(ay * ay, 2, aw - 3, -1) / Z;
        }
        if (ax == 1) {
            return 1 - aA;
        }
        var az = 4 * aj(ar * ar, aw + 1, ax + aw - 4, aw - 2) * ar * e(ay, aw) / i;
        if (aw == 1) {
            return 1 - aA + az / 2;
        }
        var au = 2;
        while (au <= (aw - 1) / 2) {
            az *= au / (au - 0.5);
            au++;
        }
        return 1 - aA + az;
    }

    function aj(ax, aw, av, at) {
        var ar = 1,
            ay = ar,
            au = aw;
        while (au <= av) {
            ar *= ax * au / (au - at);
            ay += ar;
            au += 2;
        }
        return ay;
    }

    function al(av, aw) {
        var at = 0.5,
            au = 0.25,
            ar;
        while (au > 1e-15) {
            ar = 1 / at - 1;
            at += (av(ar) > aw) ? -au : au;
            au /= 2;
        }
        return ar;
    }

    function aq(ar) {
        if (ar > 0.5) {
            return c(v(2 * (1 - ar), 1));
        } else {
            return -c(v((2 * ar, 1)));
        }
    }

    function P(ar) {
        return al(t, ar);
    }

    function n(ar) {
        return aq(ar / 2 + 0.5) / h;
    }

    function v(ar, at) {
        return al(function (au) {
            return af(au, at);
        }, ar);
    }

    function x(ar, at) {
        return al(function (au) {
            return ah(au, at);
        }, ar);
    }

    function O(au, at, ar) {
        return al(function (av) {
            return ap(av, at, ar);
        }, au);
    }

    function g(ar) {
        var at;
        if (d(ar) < 0.00005) {
            ar = 0;
        }
        at = " " + (ar + ((ar > 0) ? 0.00005 : -0.00005));
        at = at.substring(0, at.indexOf(".") + 5);
        return at.substring(at.length - 10, at.length);
    }

    function T(ar) {
        var at;
        if (d(ar) < 5e-7) {
            ar = 0;
        }
        at = " " + (ar + ((ar > 0) ? 5e-7 : -5e-7));
        at = at.substring(0, at.indexOf(".") + 7);
        return at.substring(at.length - 18, at.length);
    }

    function ae() {
        this.length = ae.arguments.length;
        for (var ar = 0; ar < this.length; ar++) {
            this[ar] = ae.arguments[ar];
        }
    }

    function L(at, ar, au) {
        return at * (au + 1) + ar;
    }

    function u(at, ar, av, au) {
        if (typeof at != "number") {
            return au;
        } else {
            return an(ar, D(av, at));
        }
    }

    function b(ax) {
        console.log("starting Iterate", ax);
        var aO = new ae(0, 0, 0, 0, 0, 0, 0, 0, 0);
        var bl = ax.params.slice(0);
        var at = new ae(1, 1, 1, 1, 1, 1, 1, 1);
        var bp = new ae(0, 0, 0, 0, 0, 0, 0, 0, 0);
        var aD = new ae(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var be;
        if ("cov" in ax && ax.cov) {
            be = ax.cov;
        } else {
            be = new ae(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        var aG = 0,
            a4 = 0,
            aL = 0;
        var ba = unescape("%0D") + unescape("%0A");
        var bn = 0,
            bm = 0,
            bk = 0,
            bj = 0,
            bi = 0;
        var bh = ax.data.length;
        var aw = ("npar" in ax) ? ax.npar : ax.params.length;
        var aQ = u(ax.nvar, 1, 8, 1);
        var a6 = bh - aw;
        var aW = x(0.05, a6);
        var aR = u(ax.pctile / 100, 0, 1, 0.5);
        var aT = ax.func;
        var aH = 0;
        var bb = {
            params: [],
            fit: [],
            res: [],
            conf_lo: [],
            conf_hi: [],
            rms: 0,
            corr: 0,
            cov: []
        };
        var aA, aE, aU, av, bc, aJ, a0, a9, aS, a3, aK, ar, a8;
        var aF = [];
        for (bm = 0; bm < aw * (aw + 1); bm++) {
            aD[bm] = 0;
        }
        for (bn = 0; bn < bh; bn++) {
            aE = ax.data[bn][0];
            aU = aT(aE, bl);
            aA = ax.data[bn][aQ];
            bc = (ax.errorform === "w") ? ax.data[bn][aQ + 1] : 1;
            var aP = aA;
            if (bc === 0) {
                bc = 0.001;
            }
            if (ax.leastabs) {
                bc *= an(c(d(aA - aU) * ((aA < aU) ? aR : (1 - aR))), 0.001 * aA);
            }
            aF.push(bc);
            for (bm = 0; bm < aw; bm++) {
                aK = bl[bm];
                ar = ((aK === 0) ? 0.0001 : aK / 1000);
                if (m && bn === 0) {
                    console.log(bn, bm, ar);
                }
                bl[bm] = aK + ar;
                var az, aC = aT(aE, bl);
                if (ax.centered) {
                    bl[bm] = aK - ar;
                    az = aT(aE, bl);
                    bp[bm] = (aC - az) / (2 * ar * bc);
                } else {
                    bp[bm] = (aC - aU) / (ar * bc);
                }
                bl[bm] = aK;
            }
            bp[aw] = (aA - aU) / bc;
            aH += bp[aw] * bp[aw];
            var aI = 0;
            for (bm = 0; bm < aw; bm++) {
                for (bk = 0; bk <= aw; bk++) {
                    aD[L(bm, bk, aw)] += bp[bm] * bp[bk];
                }
                aI += be[L(bm, bm, aw)] * bp[bm] * bp[bm];
                for (bk = bm + 1; bk < aw; bk++) {
                    aI += 2 * be[L(bm, bk, aw)] * bp[bm] * bp[bk];
                }
            }
            aI = bc * c(aI);
            var aY = aU,
                a1 = aU - aW * aI,
                a2 = aU + aW * aI;
            bb.fit.push(aY);
            bb.res.push(aP - aY);
            bb.conf_lo.push(a1);
            bb.conf_hi.push(a2);
        }
        var aX = c(aH / an(1, a6));
        if (m) {
            console.log("RMS Error = " + T(aX) + "; d.f = " + a6 + "; SSq = " + T(aH));
        }
        var aN, bo = bh * y(aH / bh) + 2 * (aw + 1);
        if (bh >= (aw + 2)) {
            aN = bo + (2 * (aw + 1) * ((aw + 1) + 1)) / (bh - (aw + 1) - 1);
        } else {
            aN = bo;
        } if (m) {
            console.log("AIC = " + T(bo) + "; AIC(corrected) = " + T(aN));
        }
        for (bn = 0; bn < aw; bn++) {
            var bf = aD[L(bn, bn, aw)];
            aD[L(bn, bn, aw)] = 1;
            for (bk = 0; bk <= aw; bk++) {
                aD[L(bn, bk, aw)] = aD[L(bn, bk, aw)] / bf;
            }
            for (bm = 0; bm < aw; bm++) {
                if (bn != bm) {
                    bf = aD[L(bm, bn, aw)];
                    aD[L(bm, bn, aw)] = 0;
                    for (bk = 0; bk <= aw; bk++) {
                        aD[L(bm, bk, aw)] -= bf * aD[L(bn, bk, aw)];
                    }
                }
            }
        }
        var au = bl.slice();

        function aZ(bq) {
            for (bn = 0; bn < aw; bn++) {
                bl[bn] = au[bn] + bq * aD[L(bn, aw, aw)];
            }
        }

        function a5(bq) {
            aH = 0;
            var br;
            for (bn = 0; bn < bh; bn++) {
                br = (ax.data[bn][aQ] - aT(ax.data[bn][0], bq)) / aF[bn];
                aH += br * br;
            }
            return c(aH / an(1, a6));
        }
        if (m) {
            console.log(ba + "Parameter Estimates...");
        }
        aZ(1);
        for (bn = 0; bn < aw; bn++) {
            at[bn] = aX * c(aD[L(bn, bn, aw)]);
            if (m) {
                console.log("p" + (bn + 1) + "=" + T(bl[bn]) + " +/- " + T(at[bn]) + "; p=" + g(ah(bl[bn] / at[bn], a6)));
            }
        }
        if (m) {
            console.log(ba + "Covariance Matrix Terms and Error-Correlations...");
        }
        var a7 = 1,
            aV = a5(bl),
            aB = aV,
            ay, aM = aV;
        if (aV > aX) {
            while (a7 > 0.01 && aB >= aX) {
                a7 /= 2;
                aZ(a7);
                aV = aB;
                aB = a5(bl);
            }
            if (aB < aX) {
                ay = a7 * (3 * aX + aV - 4 * aB) / (2 * aX + 2 * aV - 4 * aB);
                aZ(ay);
                aM = a5(bl);
                if (aM > aB) {
                    aZ(a7);
                    aM = aB;
                }
                console.log("took a smaller step than originally calculated", a7);
            } else {
                console.log("Oops - didnt find a lower RMS anywhere on the old to new parameter vector - stopping");
                aM = aX;
                bl = au;
            }
        }
        var bd;
        for (bm = 0; bm < aw; bm++) {
            for (bk = bm; bk < aw; bk++) {
                be[L(bm, bk, aw)] = aD[L(bm, bk, aw)] * aX * aX;
                if (m) {
                    bd = aD[L(bm, bk, aw)] / c(aD[L(bm, bm, aw)] * aD[L(bk, bk, aw)]);
                    var bg = ("B(" + (bm + 1) + "," + (bk + 1) + ")=");
                    if (bm != bk) {
                        bg += ("B(" + (bk + 1) + "," + (bm + 1) + ")=");
                    }
                    bd = g(bd);
                    bg += " " + be[L(bm, bk, aw)] + "; r=" + bd.substring(bd.length - 7, bd.length);
                    console.log(bg);
                }
            }
        }
        for (bn = 0; bn < 8; bn++) {
            bb.params[bn] = {
                val: bl[bn],
                err: at[bn],
                pval: T(ah(bl[bn] / at[bn], a6))
            };
        }
        bb.rms = aM;
        bb.cov = be;
        return bb;
    }

    function B(at, aw, av) {
        var ar = [],
            au;
        for (au = 0; au < at.length; au++) {
            if (av) {
                ar[au] = [at[au], aw[au], av[au]];
            } else {
                ar[au] = [at[au], aw[au]];
            }
        }
        return ar;
    }

    function I(aB, az, aC, aK, aw, at, aE) {
        if (!at) {
            at = 20;
        }
        if (!aE) {
            aE = 0.0001;
        }
        var aI = 0,
            aL = B(aB, az, aC),
            aJ = false,
            ax = 0,
            au = function (aM) {
                return function (aN) {
                    return aw(aN, aM);
                };
            },
            aF = aB.map(au(aK)),
            aG, ay, av, aD, aH, ar;
        while ((aI < at)) {
            aH = b({
                data: aL,
                params: aK,
                npar: aK.length,
                errorform: aC.length ? "w" : "",
                func: aw,
                cov: ar
            });
            if (m) {
                console.log("ITERATION");
            }
            aD = aH.params.slice(0, aK.length).map(function (aM) {
                return aM.val;
            });
            av = aB.map(au(aD));
            aG = aH.rms;
            if (aI === 0) {
                ay = aG + aE + 1;
            }
            console.log("NEWFITTER params = " + aD + "\n oldparams = " + aK + "\nrms = " + aH.rms + " prms = " + ay);
            if (!aD.every($.isNumeric)) {
                console.log("oops, non-numeric parameter... stopping.");
                Plotly.Lib.notifier("Snap! there was a problem iterating your fit", "long");
                aD = aK;
            }
            if (m) {
                console.log("SUCCESSFUL ITERATION");
            }
            aK = aD;
            ar = aH.cov;
            aF = av;
            if (Math.abs(aG - ay) < aE) {
                break;
            }
            aI++;
            ay = aG;
        }
        var aA = {
            fit: aF,
            rms: aG,
            err: aH.params.slice(0, aK.length).map(function (aM) {
                return aM.err;
            }),
            params: aK,
            iterations: aI
        };
        return aA;
    }
    o.run = I;
    return o;
}(function () {
    var g = window.AutoGuess = {};

    function b(h) {
        return Math.round(h * 10000) / 10000;
    }

    function d(h) {
        return (h[0] < h[1]) ? h[0] : h[1];
    }

    function a(h) {
        return (h[0] > h[1]) ? h[0] : h[1];
    }

    function c(i, h, l) {
        var k = l * i + (1 - l) * h,
            j = l * h + (1 - l) * i;
        return [k, j];
    }

    function f(j, i, h) {
        if (Math.abs(i - j) < h) {
            i = j + h * (i > j ? 1 : -1);
            console.log("Moving a y value so the guesses are unequal", i);
        }
        return i;
    }

    function e(q, p, l) {
        var D = q.length,
            s = q[0],
            t = q[D - 1],
            r = t - s,
            C = s + 0.1 * r,
            A = s + 0.9 * r,
            B = (C + A) / 2,
            w = Plotly.Lib.findBin(s + 0.2 * r, q) + 1,
            m = Plotly.Lib.findBin(s + 0.4 * r, q, true) + 1,
            j = Plotly.Lib.findBin(s + 0.6 * r, q) + 1,
            v = Plotly.Lib.findBin(s + 0.8 * r, q, true) + 1;
        if (m >= j) {
            m = w;
            j = v;
        }
        var k = numeric.sum(p.slice(0, w)) / (w),
            h = numeric.sum(p.slice(v)) / (D - v),
            i = v > w ? (numeric.sum(p.slice(m, j)) / (j - m)) : (k * 0.3 + h * 0.7);
        if (!l) {
            l = {};
        }
        var o = c(k, h, 0.02);
        if (l.nostraight) {
            var n = c(k, h, 0.45);
            if ((i > d(n)) && (i < a(n))) {
                i = (i < (k + h) / 2) ? d(n) : a(n);
                console.log("moving y away from centre to", i);
            }
        }
        if (l.monotonic) {
            if (i <= d(o) || i >= a(o)) {
                i = Plotly.Lib.constrain(i, d(o), a(o));
                console.log("moving y2 within bounds to", i);
            }
        }
        if (l.unequal) {
            var z = 0.02 * (a(o) - d(o));
            i = f(k, i, z);
            i = f(h, i, z);
            h = f(k, h, z);
        }
        var u = 0.00001;
        if (Math.abs(o[0] - o[1]) < u) {
            k = d(o) - 2 * 100000 * u;
            h = a(o) + 2 * 100000 * u;
            i = d(o) + 8 * 10000 * u;
            console.log("reticulating splines on tight bounds");
        }
        return {
            x: [C, B, A],
            y: [k, i, h]
        };
    }
    g.exponential = function (m, l) {
        var B = m.length;
        if (B < 3) {
            return {
                params: {},
                err: "Exponential fitting requires a minimum of 3 points"
            };
        }
        var n = e(m, l, {
                nostraight: true,
                monotonic: true
            }),
            k = n.y[0],
            j = n.y[1],
            h = n.y[2],
            z = n.x[0],
            w = n.x[1],
            v = n.x[2];
        var t = Math.pow(j - k, 2) / (h - 2 * j + k),
            s = (h - j) / (j - k);
        var r = m[s > 1 ? m.length - 1 : 0];
        for (var u = 0; u < m.length; u++) {
            m[u] -= r;
        }
        var o = {
            prefit: function (i) {
                i[1].value *= Math.exp(i[2].value * r);
            },
            postfit: function (i) {
                i[1].value /= Math.exp(i[2].value * r);
            }
        };
        var D = k - t,
            A = Math.log(s) / (w - z),
            C = t * Math.exp(-A * z);
        return {
            params: {
                a: D,
                b: C,
                c: A
            },
            err: "",
            xshift: r,
            pshift: o
        };
    };
    g.inverse = function (u, q, w) {
        var n = u.length;
        if (n < 3) {
            return {
                params: {},
                err: "Inverse fitting requires a minimum of 3 points"
            };
        }
        var m = e(u, q, {
                nostraight: true,
                unequal: true
            }),
            t = m.y[0],
            r = m.y[1],
            o = m.y[2],
            k = m.x[0],
            i = m.x[1],
            h = m.x[2];
        if (w) {
            k *= k;
            i *= i;
            h *= h;
        }
        var j = t - 2 * r + o,
            l = k - 2 * (i - k) * (r - o) / j,
            v = (2 * t * o - r * (t + o)) / j,
            s = 2 * (i - k) * (t - o) * (t - r) * (r - o) / (j * j);
        return {
            params: {
                a: s,
                x0: l,
                y0: v
            },
            err: ""
        };
    };
    g.inverse2 = function (h, i) {
        return g.inverse(h, i, true);
    };
    g.inverseSimple = function (r, n, t) {
        var l = r.length;
        if (l < 3) {
            return {
                params: {},
                err: "Inverse fitting requires a minimum of 3 points"
            };
        }
        var k = e(r, n, {
                nostraight: true,
                unequal: true
            }),
            q = k.y[0],
            o = k.y[1],
            m = k.y[2],
            j = k.x[0],
            i = k.x[1],
            h = k.x[2];
        if (t) {
            j = j * j;
            h = h * h;
        }
        var p = j * h * (m - q) / (j - h),
            s = (j * q - h * m) / (j - h);
        return {
            params: {
                a: p,
                y0: s
            },
            err: ""
        };
    };
    g.inverseSimple2 = function (h, i) {
        return g.inverseSimple(h, i, true);
    };
    g.peak = function (u, t) {
        var S, O, Q, v, o = "",
            T = "pos";
        var B = Math.min(u.length, 100),
            M = u.length / B,
            F = (u[u.length - 1] - u[0]) / (B - 1 / M),
            P = [],
            l = [],
            L, J, m, D = 0,
            q, H, r, p;
        for (L = 0; L < B; L++) {
            P.push(u[0] + F * (L + 0.5 - 0.5 / M));
            m = 0;
            for (J = D; J < u.length && u[J] < P[L] + F / 2; J++) {
                m += t[J];
            }
            H = J > D ? m / (J - D) : null;
            l.push(H);
            D = J;
            if (H !== null) {
                q = l.length - 1;
                for (J = r; J < q; J++) {
                    l[J] = p + (H - p) * (J - r) / (q - r);
                }
                r = q;
                p = H;
            }
        }
        var I = 0.1;
        l = Plotly.Lib.smooth(l, l.length * I);
        var A = l.slice().sort(),
            G = A[0],
            C = A[Math.floor((A.length - 1) / 2)],
            N = A[A.length - 1],
            k, n, E, R, K = false;
        if (C > 0.75 * N + 0.25 * G) {
            S = N;
            O = G - N;
            k = l.indexOf(G);
        } else {
            S = G;
            O = N - G;
            k = l.indexOf(N);
        }
        R = S + O / 2;
        for (L = k; L >= 0; L--) {
            if (O > 0 ? l[L] < R : l[L] > R) {
                n = P[0] + F * (L + (S + O / 2 - l[L]) / (l[L + 1] - l[L]));
                break;
            }
            if (L === 0) {
                n = P[0];
                K = true;
            }
        }
        for (L = k; L < l.length; L++) {
            if (O > 0 ? l[L] < R : l[L] > R) {
                E = P[0] + F * (L - (S + O / 2 - l[L]) / (l[L - 1] - l[L]));
                break;
            }
            if (L === l.length - 1) {
                E = P[l.length - 1];
                K = true;
            }
        }
        Q = (n + E) / 2;
        var z = E - n,
            s = l.length * I * F;
        if (K) {
            s /= 2;
        }
        v = Math.max(F * 2, z / 5, Math.sqrt(z * z - s * s) || 0);
        O *= z / v;
        return {
            params: {
                a: S,
                h: O,
                x0: Q,
                FWHM: v
            },
            err: o
        };
    };
    g.gauss = function (h, j) {
        var i = AutoGuess.peak(h, j);
        i.params.w = i.params.FWHM / Math.sqrt(8 * Math.log(2));
        delete i.params.FWHM;
        return i;
    };
}());
Plotly.FitOps = function (TD) {
    var $TD = $(TD);
    var OPTS;
    var MATH = mathjs();
    var FUNCLIB = [{
        libname: "Linear",
        variants: [{
            name: "Linear",
            func: "a + b*x",
            info: "",
            autoguess: function (x, y) {
                return PolySolver(x, y, 1);
            }
        }]
    }, {
        libname: "Polynomial",
        variants: [{
            name: "2nd order",
            func: "a + b*x + c*x^2",
            info: "",
            autoguess: function (x, y) {
                return PolySolver(x, y, 2);
            }
        }, {
            name: "3rd order",
            func: "a + b*x + c*x^2 + d*x^3",
            info: "",
            autoguess: function (x, y) {
                return PolySolver(x, y, 3);
            }
        }, {
            name: "4th order",
            func: "a + b*x + c*x^2 + d*x^3 + e*x^4",
            info: "",
            autoguess: function (x, y) {
                return PolySolver(x, y, 4);
            }
        }, {
            name: "5th order",
            func: "a + b*x + c*x^2 + d*x^3 + e*x^4 + f*x^5",
            info: "",
            autoguess: function (x, y) {
                return PolySolver(x, y, 5);
            }
        }, {
            name: "6th order",
            func: "a + b*x + c*x^2 + d*x^3 + e*x^4 + f*x^5 + g*x^6",
            info: "",
            autoguess: function (x, y) {
                return PolySolver(x, y, 6);
            }
        }]
    }, {
        libname: "Exponential",
        variants: [{
            name: "Exponential",
            func: "a + b*exp(c*x)",
            info: "",
            autoguess: AutoGuess.exponential
        }]
    }, {
        libname: "Peak",
        variants: [{
            name: "Gaussian",
            func: "a + h*exp( -(x-x0)^2/(2*w^2) )",
            info: "",
            autoguess: AutoGuess.gauss
        }, {
            name: "Gaussian FWHM",
            func: "a + h*exp( -4*log(2)*((x-x0)/FWHM)^2 )",
            info: "",
            autoguess: AutoGuess.peak
        }, {
            name: "Cauchy-Lorentz",
            func: "a + h/(1 + 4*((x-x0)/FWHM)^2)",
            info: "",
            autoguess: AutoGuess.peak
        }]
    }, {
        libname: "Inverse",
        variants: [{
            name: "1/x",
            func: "1/x",
            info: "",
            autoguess: null
        }, {
            name: "y0 + a/x",
            func: "y0 + a/x",
            info: "",
            autoguess: AutoGuess.inverseSimple
        }, {
            name: "y0 + a/(x-x0)",
            func: "y0 + a/(x-x0)",
            info: "",
            autoguess: AutoGuess.inverse
        }]
    }, {
        libname: "Inverse squared",
        variants: [{
            name: "1/x<sup>2</sup>",
            func: "1/x^2",
            info: "",
            autoguess: null
        }, {
            name: "y0 + a/x<sup>2</sup>",
            func: "y0 + a/x^2",
            info: "",
            autoguess: AutoGuess.inverseSimple2
        }, {
            name: "y0 + a/(x-x0)<sup>2</sup>",
            func: "y0 + a/(x-x0)^2",
            info: "",
            autoguess: AutoGuess.inverse2
        }]
    }];
    var ID = null,
        $FITBOX, DATA = {},
        PANELS = null,
        PC = ParamControl(MATH);

    function buildTraceList(td) {
        var i = 0,
            cd = td.calcdata,
            traceName, calcObj, tracelist = [];
        for (; i < cd.length; i++) {
            calcObj = $.extend(true, {}, cd[i][0]);
            traceName = td.data[i].name;
            calcObj.t.name = (traceName ? traceName : "Trace " + i).replace(/[\s\n\r]+/gm, " ").replace(/^([A-z0-9\-_]+[\/:])?[0-9]+[\/:]/, "");
            calcObj.t.idx = i;
            calcObj.t.tx = td.data[i].text ? "T" : "";
            if (!("guessCurve" in td.data[i] && td.data[i].guessCurve)) {
                tracelist.push([calcObj]);
            }
        }
        return tracelist;
    }

    function traceSelection(cls) {
        var $traceDropdown = $FITBOX.find(".trace-dropdown");
        $traceDropdown.css({
            "float": "none"
        });
        $traceDropdown.html("");

        function setTrace(t) {
            $FITBOX.find(".select-trace .selected-val").html($(".select-trace li > a")[t.idx].innerHTML);
        }
        var idx, tmeta, dn = $(Plotly.ToolPanel.dropdown("select-" + cls)).appendTo($traceDropdown).get(0),
            dd = d3.select(dn),
            tracelist = buildTraceList(TD);
        if (Plotly.Lib.isEmpty(DATA.uid)) {
            idx = 0;
        } else {
            TD.data.forEach(function (data, i) {
                if (data.uid === DATA.uid[0]) {
                    idx = i;
                }
            });
        }
        var traces = dd.select("ul").selectAll("li").data(tracelist).enter().append("li").append("a").attr("href", "#").on("click", function (d) {
            setTrace(d[0].t);
            updateData(d[0].t);
            PANELS.show("overview");
            d3.event.preventDefault();
        });
        traces.call(initTraceSelect);
        tmeta = tracelist[idx][0].t;
        setTrace(tmeta);
        updateData(tmeta);
    }

    function initTraceSelect(s) {
        var tw = 40,
            th = 20;
        s.append("svg").attr("width", tw).attr("height", th).append("g").attr("transform", "translate(0," + th / 2 + ")").call(Plotly.Legend.style);
        s.append("span").html(function (d) {
            return d[0].t.name + "&nbsp;";
        });
    }

    function setHeader(ev, info) {
        var coli = info.coli,
            dim = info.rowtype,
            $fitElem;
        if (dim === "x") {
            $fitElem = $FITBOX.find(".js-axis-col-x");
        } else {
            if (dim === "y") {
                $fitElem = $FITBOX.find(".js-axis-col-y");
            } else {
                if (dim === "Ey") {
                    $fitElem = $FITBOX.find(".js-axis-col-error-y");
                } else {
                    return void 0;
                }
            }
        }
        var cMeta = TD.colMeta[coli],
            colElem = cMeta.headers[dim].elem;
        if ($(colElem).hasClass("selected")) {
            $fitElem.text(cMeta.name);
            if (dim === "Ey") {
                return DATA.errorWeight = cMeta.uid;
            }
            if (updateData({
                col: cMeta,
                dim: dim
            })) {
                PANELS.show("overview");
            } else {
                PANELS.hideAll();
            }
        } else {
            if (dim === "Ey") {
                DATA.errorWeight = "";
                return $fitElem.text("Select an Ey column!");
            }
            $fitElem.text("Select a column for " + dim + " !");
            if (updateData({
                col: {},
                dim: dim
            })) {
                PANELS.show("overview");
            } else {
                PANELS.hideAll();
            }
        }
    }

    function updateData(selectedData) {
        var col;
        if (TD.tabtype === "plot") {
            DATA.name = TD.data[selectedData.idx].name;
            DATA.uid = [TD.data[selectedData.idx].uid];
            DATA.axis = TD.layout.xaxis;
            DATA.type = TD.data[selectedData.idx].type;
            DATA.orientation = TD.calcdata[selectedData.idx][0].t.orientation;
            return true;
        } else {
            if (Plotly.Lib.isEmpty(DATA)) {
                DATA.uid = ["", ""];
            }
            col = selectedData.col;
            if (selectedData.dim === "y") {
                if (Plotly.Lib.isEmpty(col)) {
                    DATA.name = "";
                    DATA.uid[1] = "";
                } else {
                    DATA.name = (col.name) ? col.name : "";
                    DATA.uid[1] = col.uid;
                }
            } else {
                if (Plotly.Lib.isEmpty(col)) {
                    DATA.uid[0] = "";
                    DATA.axis = {};
                } else {
                    DATA.uid[0] = col.uid;
                    DATA.axis = {};
                    DATA.axis = GridOperations.getColAxes(GridOperations.getColData(TD, col.coli));
                }
            } if (Plotly.Lib.isEmpty(DATA.uid[0]) || Plotly.Lib.isEmpty(DATA.uid[1])) {
                return false;
            }
            return true;
        }
    }

    function configureOverview($overview) {
        var $msgDiv = $overview.find(".js-fit-status-msg"),
            $fitList = $overview.find(".js-fit-list"),
            $fitButton = $overview.find(".js-add-fit-btn");
        $fitList.find(".fit__overview-table").empty();
        var fits = findFits(),
            numFits = fits.length;
        if (numFits) {
            fits.forEach(function (fit) {
                addNewFitItem(fit);
            });
            $fitList.show();
            $msgDiv.hide();
            if (TD.tabtype === "plot") {
                $fitButton.text("Add another fit to this trace");
            } else {
                $fitButton.text("Add another fit to these columns");
            }
        } else {
            $fitList.hide();
            var msg = (TD.tabtype === "plot") ? "You don't have any fits for this trace yet." : "You don't have any fits for these columns yet.";
            $msgDiv.text(msg);
            $msgDiv.show();
            $fitButton.text("Add fit to this trace");
        }
        $fitButton.off("click").on("click", function () {
            PANELS.show("options");
            return false;
        });
    }

    function configureResults($results, fitmeta) {
        var $fitR2 = $results.find(".js-fit-result-r2"),
            $fitRMS = $results.find(".js-fit-result-rms"),
            $fitParams = $results.find(".js-fit-result-params"),
            $fitEditBtn = $results.find(".js-fit-edit-btn"),
            $toggleAnno = $results.find(".js-toggle-fit-annotation"),
            $fitCancel = $results.find(".js-fit-cancel"),
            params = fitmeta.params.map(function (p) {
                var val = Number(p.value).toPrecision(4);
                var err = Number(p.err).toPrecision(4);
                err = isNumber(err) ? "  +/-" + err : "";
                var html = '<div class="fit__param"><b class="fit__param-name">' + p.name + '</b><span class="fit__param-equals">=</span><span class="fit__param-val">' + val + err + "</span></div>";
                return html;
            });
        var R2 = Number(fitmeta.corr);
        R2 = R2 * R2;
        if (!Plotly.Lib.isEmpty(fitmeta.corr)) {
            $fitR2.text(R2.toPrecision(4));
        }
        if (!Plotly.Lib.isEmpty(fitmeta.rms)) {
            $fitRMS.text(Number(fitmeta.rms).toPrecision(4));
        }
        if (!Plotly.Lib.isEmpty(params)) {
            $fitParams.html(params.join(""));
        }
        $fitEditBtn.off("click").on("click", function () {
            PANELS.show("options", fitmeta);
            return false;
        });
        $fitCancel.off("click").on("click", function () {
            removeOldGuessCurves();
            PANELS.show("overview");
            return false;
        });
        $toggleAnno.off("click").on("click", function () {
            toggleAnnotation(fitmeta, "R<sup>2</sup> = " + R2.toPrecision(4));
        });
        if (TD.tabtype === "plot") {
            if (findAnnoIndexbyUID(fitmeta.uid) > -1) {
                $toggleAnno.prop("checked", true);
            } else {
                $toggleAnno.prop("checked", false);
            }
        }
    }

    function configureOptions($options, fitmeta) {
        var $fitPanels = $FITBOX.find(".js-fit-panels");
        initOptionControl(fitmeta);
        OPTS.fitname.setter($options);
        OPTS.inputfunc.setter($options);
        OPTS.inputxrange.setter($options);
        OPTS.outputxrange.setter($options);
        OPTS.ninterp.setter($options);
        OPTS.errorweights.setter($options);
        var $userdefinedFuncOption = $fitPanels.find(".js-fit-user-defined-func"),
            $userdefinedFuncInput = $userdefinedFuncOption.find(".js-fit-user-input");
        var $fitRunBtn = $fitPanels.find(".js-run-fit-btn"),
            $fitCancel = $fitPanels.find(".js-fit-cancel");
        $fitPanels.find(".option__btn").off("change").on("change", function () {
            var $this = $(this),
                $thisChoiceMore = $this.parents(".option").find(".option__this-choice-more");
            if ($this.attr("type") == "radio") {
                var $otherChoicesMore = $this.parents(".option").siblings().find(".option__this-choice-more");
                $otherChoicesMore.find(".js-has-error-tooltip").removeClass("js-has-error-tooltip error__form-field").tipsy("hide");
                $fitRunBtn.tipsy("hide");
                $otherChoicesMore.hide();
                $thisChoiceMore.show();
                $thisChoiceMore.find(".js-has-error-tooltip").tipsy("show");
                $fitRunBtn.tipsy("show");
            } else {
                if ($this.prop("checked")) {
                    $fitRunBtn.tipsy("hide");
                    $thisChoiceMore.show();
                    $fitRunBtn.tipsy("show");
                } else {
                    $thisChoiceMore.find(".js-has-error-tooltip").removeClass("js-has-error-tooltip error__form-field").tipsy("hide");
                    $fitRunBtn.tipsy("hide");
                    $thisChoiceMore.hide();
                    $fitRunBtn.tipsy("show");
                }
            }
        });

        function isReqFieldEmpty($input) {
            var value = $input.val();
            if ($input.parents(".option").find(".option__btn").prop("checked") && value === "") {
                var err = "Fill this in!";
                return err;
            }
            return void 0;
        }

        function setErrorTitle($elem, tabErrorObj) {
            var newErrorTitle = buildErrorMsg(tabErrorObj);
            $elem.attr("title", newErrorTitle);
        }

        function buildErrorMsg(tabErrorObj) {
            var tabsWithErrors = Object.keys(tabErrorObj),
                numTabsWithErrors = tabsWithErrors.length;
            var errorMsg = "Before we can run your fit, please fix ",
                errorMsgList = [],
                msgThisTab;
            tabsWithErrors.forEach(function (tabName, index) {
                var numErrors = tabErrorObj[tabName];
                if (numErrors !== 0) {
                    msgThisTab = numErrors + " error";
                    if (numErrors !== 1) {
                        msgThisTab += "s";
                    }
                    msgThisTab += " in the " + tabName + " tab";
                    errorMsgList.push(msgThisTab);
                }
            });
            errorMsgList.forEach(function (msg, index) {
                if (index !== 0) {
                    errorMsg += ", ";
                    if (index == errorMsgList.length - 1) {
                        errorMsg += "and ";
                    }
                }
                errorMsg += msg;
            });
            errorMsg += "!";
            return errorMsg;
        }

        function checkFitErrors(shouldRunFit) {
            var $userdefinedFuncInput = $fitPanels.find(".js-fit-user-input");
            var err = isReqFieldEmpty($userdefinedFuncInput);
            if (err) {
                $userdefinedFuncInput.addClass("js-has-error-tooltip error__form-field");
                $userdefinedFuncInput.attr("title", err);
                if ($userdefinedFuncInput.parents(".js-minimal-tabs-content").css("display") == "block") {
                    $userdefinedFuncInput.tipsy("show");
                }
            }
            var $userParamsInUse = $fitPanels.find(".js-fit-user-defined-func").find(".js-fit-param-in-use");
            $userParamsInUse.each(function (index, elem) {
                var $input = $(elem);
                var err = isReqFieldEmpty($input);
                if (err) {
                    $input.addClass("js-has-error-tooltip error__form-field");
                    $input.attr("title", err);
                }
                if ($userParamsInUse.parents(".js-minimal-tabs-content").css("display") == "block") {
                    $input.tipsy("show");
                }
            });
            var tabErrorObj = {},
                numErrorsTotal = 0;
            var $tabMenuItems = $fitPanels.find(".js-minimal-tabs-menu li a");
            $tabMenuItems.each(function () {
                var $tabMenuItem = $(this),
                    href = $tabMenuItem.attr("href"),
                    $tab = $tabMenuItem.parents(".js-minimal-tabs-menu").siblings(".js-minimal-tabs-container").find(href);
                var tabName = $tabMenuItem.text();
                var numErrorsThisTab = $tab.find(".error__form-field").length;
                numErrorsTotal += numErrorsThisTab;
                tabErrorObj[tabName] = numErrorsThisTab;
            });
            if (numErrorsTotal === 0 && shouldRunFit) {
                $fitRunBtn.tipsy("hide");
                $(".tipsy.error__tooltip").remove();
                runFit();
                return false;
            } else {
                console.log("****** need to fix errors");
                setErrorTitle($fitRunBtn, tabErrorObj);
                $fitRunBtn.tipsy("show");
            }
            return void 0;
        }
        $fitRunBtn.tipsy({
            className: "error__tooltip",
            trigger: "manual",
            gravity: "w",
            opacity: 1
        });
        $fitRunBtn.off("click.errorcheck").on("click.errorcheck", function () {
            checkFitErrors(true);
        });
        $fitCancel.off("click").on("click", function () {
            removeOldGuessCurves();
            PANELS.show("overview");
            return false;
        });
        $FITBOX.find(".js-minimal-tabs-menu").find("li:first-child").find("a").click();
    }

    function PanelControl($elem) {
        var self = {};
        var panels = ["overview", "results", "options"];
        self.overview = $elem.find(".js-fit-overview");
        self.results = $elem.find(".js-fit-results");
        self.options = $elem.find(".js-fit-options");
        self.show = function (panel, fitmeta) {
            self.hideAll();
            configure(panel, fitmeta);
            self[panel].show();
        };
        self.hide = function (panel) {
            self[panel].hide();
        };
        self.hideAll = function () {
            panels.forEach(function (panel) {
                self[panel].hide();
            });
        };

        function configure(panel, fitmeta) {
            if (!fitmeta) {
                fitmeta = newFitmeta();
                fitmeta.parent = DATA.uid.slice(0);
                fitmeta.uid = newUID();
            }
            switch (panel) {
            case "overview":
                configureOverview(self.overview);
                break;
            case "results":
                configureResults(self.results, fitmeta);
                break;
            case "options":
                configureOptions(self.options, fitmeta);
                break;
            }
        }
        return self;
    }

    function newFitmeta() {
        return {
            fitname: "",
            parent: "",
            funcStr: "",
            inputxrange: ["", ""],
            outputxrange: ["", ""],
            ninterp: "",
            rms: "",
            corr: "",
            weight: "",
            params: []
        };
    }

    function findFits() {
        var data, fits = [];
        if (!Plotly.Lib.isEmpty(DATA.uid)) {
            data = getData(TD).filter(function (d) {
                return ("fit" in d);
            });
            fits = data.filter(function (d) {
                return uidsMatch(d.fit.parent, DATA.uid);
            });
        }
        return fits;
    }

    function addNewFitItem(fit) {
        var idx, $traces;
        var $existingFits = $FITBOX.find(".fit__overview-table");
        var $newFitItem = $($("script#load-fit-list-item").html());
        var $fitEqn = $newFitItem.find(".js-fit-object-eqn"),
            $fitViewEditBtn = $newFitItem.find(".js-fit-view-edit-btn"),
            $fitRmLink = $newFitItem.find(".js-fit-object-remove"),
            $fitGridPlotContainer = $newFitItem.find(".js-fit-gridplot-container"),
            $fitGridPlotBtn = $newFitItem.find(".js-fit-gridplot-btn");
        $fitEqn.text(fit.fit.funcStr);
        if (TD.tabtype === "plot") {
            idx = TD.data.indexOf(fit);
            $traces = $FITBOX.find(".select-trace li > a");
            $newFitItem.find(".js-fit-object-name").html($($traces[idx]).html());
            $fitGridPlotContainer.remove();
        } else {
            $fitGridPlotBtn.off("click").on("click", function () {
                gridplot(fit);
                return false;
            });
        }
        $fitViewEditBtn.off("click").on("click", function () {
            PANELS.show("results", fit.fit);
            return false;
        });
        $fitRmLink.off("click").on("click", function () {
            removeFit(fit);
            return false;
        });
        $existingFits.append($newFitItem);
    }

    function initOptionControl(fitmeta) {
        var Options = Plotly.Lib.OptionControl(fitmeta, "fitmeta");
        Options._newoption({
            name: "fitname",
            setter: function ($elem) {
                var name;
                var numfits = findFits().length;
                if (!this.fitmeta.fitname) {
                    numfits++;
                    name = DATA.name + " - fit" + ((numfits > 1) ? (" " + numfits) : "");
                } else {
                    name = this.fitmeta.fitname;
                }
                this.fitmeta.fitname = name;
            },
            getter: function () {
                var STATUS = true;
                return STATUS;
            }
        });
        Options._newoption({
            name: "inputfunc",
            setter: function ($elem) {
                this.anchor = $elem;
                this.nparams = 0;
                this.ID = "fitbox-" + TD.id + "-radio-fit-user-defined";
                var variant, lib = FUNCLIB[0],
                    whichSelected = 0,
                    initParams = this.fitmeta.params,
                    self = this,
                    paramNames, libfit;
                if (this.fitmeta.funcStr) {
                    libfit = getFuncfromLib(this.fitmeta.funcStr);
                    if (libfit.lib) {
                        whichSelected = 0;
                        lib = libfit.lib;
                        variant = libfit.variant;
                    } else {
                        whichSelected = 1;
                    }
                }
                var $radios = this.anchor.find("#" + this.ID).parents(".js-fit-option-set").find(".option__btn"),
                    $selectedRadio = $($radios[whichSelected]),
                    $unselectedRadio = $($radios[Math.abs(whichSelected - 1)]);
                $selectedRadio.prop("checked", true);
                $selectedRadio.parents(".option").find(".option__this-choice-more").show();
                $unselectedRadio.parents(".option").find(".option__this-choice-more").hide();
                var $userdefinedFuncInput = this.anchor.find(".js-fit-user-input"),
                    $fitRunBtn = this.anchor.find(".js-run-fit-btn");
                this.radios = $radios;
                var $predefinedFields = $elem.find(".js-fit-predefined-fields");
                var $userFields = $elem.find(".js-fit-user-fields");
                addParamFields($predefinedFields, 8, initParams);
                addParamFields($userFields, 8, initParams);
                $predefinedFields.children().find(".fit-param").each(function (index, elem) {
                    var $input = $(elem);
                    $input.errorTip(checkForParamValError, "n", 0, removeRunBtnTooltip);
                });
                var $userParams = $userFields.find(".fit-param");
                var $userParamsInUse = $userParams.find(".js-fit-param-in-use");
                $userParams.each(function (index) {
                    var $input = $(this);
                    $input.errorTip(checkForParamValError, "n", 0, removeRunBtnTooltip);
                });
                funcFamilyDropdown(lib, variantCB);
                if (variant) {
                    variantDropdown(lib, variant, variantCB);
                }
                var $plotParamLinks = $elem.find(".js-fit-plot-guess-curve");
                $plotParamLinks.each(function (idx, plotParamLink) {
                    var $plotParamLink = $(plotParamLink);
                    if (TD.tabtype === "grid") {
                        $plotParamLink.hide();
                    } else {
                        $plotParamLink.on("click", function () {
                            var $fields, funcStr, status = true;
                            if (idx === 0) {
                                $fields = $predefinedFields.children();
                            } else {
                                $fields = $userFields.children();
                            }
                            for (var i = 0; i < self.nparams; i++) {
                                var $field = $($fields[i]);
                                var $input = $field.find(".input");
                                var value = $input.val();
                                if (!isNumber(value)) {
                                    $input.addClass("js-has-error-tooltip error__form-field");
                                    $input.attr("title", "Guess required");
                                    status = false;
                                }
                            }
                            if (status) {
                                runFit(true);
                            }
                            return false;
                        });
                    }
                });
                var $input = this.anchor.find(".js-fit-user-input");
                $input.errorTip(checkInputForErrors, "w", 750, setParams);
                if (libfit && libfit.lib) {
                    $input.val("");
                } else {
                    $input.val(this.fitmeta.funcStr);
                } if (initParams.length > 0) {
                    if (whichSelected === 0) {
                        setParamFields($predefinedFields, initParams, false);
                        setParamFields($userFields, [], false);
                    } else {
                        setParamFields($predefinedFields, initParams, true);
                        setParamFields($userFields, initParams, false);
                    }
                }

                function checkInputForErrors($input) {
                    var value = $input.val();
                    var err = PC.exprErr(value);
                    if (value === "") {
                        return void 0;
                    }
                    if (!err) {
                        var vars = PC.getParams(value);
                        var indeps = vars.indeps;
                        if (indeps.length === 0 || indeps.indexOf("x") === -1) {
                            err = "Function must include an independent variable x!";
                        } else {
                            if (indeps.indexOf("x") > -1 && (indeps.indexOf("y") > -1 || indeps.indexOf("z") > -1)) {
                                err = "Sorry, y and z are reserved independent variables. Please use x!";
                            }
                        }
                    }
                    if (!err) {
                        return void 0;
                    } else {
                        return err;
                    }
                }

                function setParams($input) {
                    var vars = PC.getParams($input.val());
                    var indeps = vars.indeps;
                    var params = vars.params;
                    setParamFields($userFields, params);
                    removeRunBtnTooltip($input);
                    self.nparams = params.length;
                }

                function variantCB(variant) {
                    var params = PC.getParams(variant).params;
                    self.nparams = params.length;
                    $elem.find(".js-fit-variant-function").text(variant);
                    setParamFields($predefinedFields, params, true);
                }

                function addParamFields($elem, num, params) {
                    var $span, $param;
                    $elem.empty();
                    for (var i = 0; i < num; i++) {
                        $param = $(GridContent.labeled_input("input--small fit-param", "", "--", "input--small"));
                        $elem.append($param);
                    }
                    $span = $elem.find(".add-on");
                    $span.off("click").on("click", function () {
                        var $this = $(this);
                        if (!$this.hasClass("disabled")) {
                            $(this).toggleClass("selected");
                        }
                    });
                    setParamFields($elem, params, true);
                }

                function setParamFields($paramContainer, params, clear) {
                    var $paramFields = $paramContainer.children(),
                        paramName, paramVal;
                    $paramFields.each(function (i) {
                        var $this = $(this);
                        var $fieldLabel = $this.find(".add-on"),
                            $input = $this.find(".input");
                        if (i < params.length) {
                            $this.removeClass("hidden");
                            $fieldLabel.removeClass("disabled");
                            $input.removeClass("disabled");
                            $input.prop("disabled", false);
                            $input.addClass("js-fit-param-in-use");
                            if (typeof (params[i]) === "object") {
                                paramName = params[i].name;
                                $input.val(params[i].value);
                                if (params[i].hold) {
                                    $fieldLabel.click();
                                }
                            } else {
                                paramName = params[i];
                            } if (clear) {
                                $input.val("");
                            }
                            $fieldLabel.text(paramName);
                        } else {
                            if ((i >= params.length) && (i < 4)) {
                                $fieldLabel.text("--");
                                $fieldLabel.addClass("disabled");
                                $input.val("");
                                $input.removeClass("js-fit-param-in-use");
                                $input.addClass("disabled");
                                $input.prop("disabled", true);
                            } else {
                                $this.addClass("hidden");
                                $fieldLabel.text("--");
                                $input.val("");
                            }
                        }
                    });
                }
            },
            getter: function (calcdata) {
                var STATUS = true;
                var funcStr;
                var $fieldContainer, fitmeta = this.fitmeta,
                    self = this;
                var isUserDefinedChecked = this.anchor.find("#" + this.ID).prop("checked");
                if (!isUserDefinedChecked) {
                    $fieldContainer = this.anchor.find(".js-fit-predefined-fields");
                    funcStr = this.anchor.find(".js-fit-variant-function").text();
                } else {
                    $fieldContainer = this.anchor.find(".js-fit-user-fields");
                    funcStr = this.anchor.find(".js-fit-user-input").val();
                }
                fitmeta.params = [];
                var $fields = $fieldContainer.children();
                for (var i = 0; i < this.nparams; i++) {
                    var $field = $($fields[i]),
                        $fieldLabel = $field.find(".add-on");
                    var name, input, value, hold;
                    name = $fieldLabel.text();
                    hold = $fieldLabel.hasClass("selected");
                    var $input = $field.find("input");
                    value = $input.val();
                    fitmeta.params.push({
                        name: name,
                        value: value,
                        hold: hold
                    });
                    if (!isNumber(value) && value !== "") {
                        STATUS = false;
                    }
                }
                this.fitmeta.funcStr = funcStr;
                return STATUS;
            }
        });
        Options._newoption({
            name: "inputxrange",
            setter: function ($elem) {
                var checkDefault = false;
                this.anchor = $elem;
                this.ID = "fitbox-" + TD.id + "-check-fit-in-xrange";
                var xmin = this.fitmeta.inputxrange[0];
                var xmax = this.fitmeta.inputxrange[1];
                xmin = (isNumber(xmin) || isDate(xmin)) ? xmin : "";
                xmax = (isNumber(xmax) || isDate(xmax)) ? xmax : "";
                if (!Plotly.Lib.isEmpty([xmin, xmax])) {
                    checkDefault = true;
                }
                var $checkbox = this.anchor.find("#" + this.ID);
                if (checkDefault) {
                    $checkbox.prop("checked", true);
                    $checkbox.parents(".option").find(".option__this-choice-more").show();
                } else {
                    $checkbox.prop("checked", false);
                    $checkbox.parents(".option").find(".option__this-choice-more").hide();
                }
                this.checkbox = $checkbox;
                var $xminInput = $checkbox.parents(".option").find(".xmin");
                var $xmaxInput = $checkbox.parents(".option").find(".xmax");
                $xminInput.val(xmin);
                $xmaxInput.val(xmax);
                $xminInput.errorTip(checkForRangeValError, "n", 250, removeRunBtnTooltip);
                $xmaxInput.errorTip(checkForRangeValError, "n", 250, removeRunBtnTooltip);
                this.inputs = [$xminInput, $xmaxInput];
            },
            getter: function (calcdata) {
                var STATUS = true,
                    xvalues = ["", ""];
                var isChecked = this.checkbox.prop("checked");
                if (isChecked) {
                    this.inputs.forEach(function ($elem, i) {
                        var err = checkForRangeValError($elem);
                        if (err) {
                            STATUS = false;
                            return;
                        }
                        setXVals($elem, i);
                    });
                }

                function setXVals($input, i) {
                    var val = $input.val();
                    if (isNumber(val)) {
                        xvalues[i] = cleanNumber(val);
                        return;
                    }
                    if (isDate(val)) {
                        xvalues[i] = val;
                        return;
                    }
                    return;
                }
                this.fitmeta.inputxrange = xvalues;
                return STATUS;
            }
        });
        Options._newoption({
            name: "outputxrange",
            setter: function ($elem) {
                var checkDefault = false;
                this.anchor = $elem;
                this.ID = "fitbox-" + TD.id + "-check-fit-out-xrange";
                var xmin = this.fitmeta.outputxrange[0];
                var xmax = this.fitmeta.outputxrange[1];
                xmin = (isNumber(xmin) || isDate(xmin)) ? xmin : "";
                xmax = (isNumber(xmax) || isDate(xmax)) ? xmax : "";
                if (!Plotly.Lib.isEmpty([xmin, xmax])) {
                    checkDefault = true;
                }
                var $checkbox = this.anchor.find("#" + this.ID);
                if (checkDefault) {
                    $checkbox.prop("checked", true);
                    $checkbox.parents(".option").find(".option__this-choice-more").show();
                } else {
                    $checkbox.prop("checked", false);
                    $checkbox.parents(".option").find(".option__this-choice-more").hide();
                }
                this.checkbox = $checkbox;
                var $xminInput = $checkbox.parents(".option").find(".xmin");
                var $xmaxInput = $checkbox.parents(".option").find(".xmax");
                $xminInput.val(xmin);
                $xmaxInput.val(xmax);
                $xminInput.errorTip(checkForRangeValError, "n", 250, removeRunBtnTooltip);
                $xmaxInput.errorTip(checkForRangeValError, "n", 250, removeRunBtnTooltip);
                this.inputs = [$xminInput, $xmaxInput];
            },
            getter: function (calcdata) {
                var STATUS = true,
                    xvalues = ["", ""];
                var isChecked = this.checkbox.prop("checked");
                if (isChecked) {
                    this.inputs.forEach(function ($elem, i) {
                        err = checkForRangeValError($elem);
                        if (err) {
                            STATUS = false;
                            return;
                        }
                        setXVals($elem, i);
                    });
                }

                function setXVals($input, i) {
                    var val = $input.val();
                    if (isNumber(val)) {
                        xvalues[i] = cleanNumber(val);
                        return;
                    }
                    if (isDate(val)) {
                        xvalues[i] = val;
                        return;
                    }
                    return;
                }
                this.fitmeta.outputxrange = xvalues;
                return STATUS;
            }
        });
        Options._newoption({
            name: "ninterp",
            setter: function ($elem) {
                this.anchor = $elem;
                this.ID = "fitbox-" + TD.id + "-radio-fit-evenly-spaced-x";
                var n = 50;
                var whichSelected = (TD.tabtype === "plot") ? 0 : 1;
                if (DATA.type === "category") {
                    whichSelected = 1;
                }
                if (this.fitmeta.ninterp !== "") {
                    n = this.fitmeta.ninterp;
                    whichSelected = 0;
                }
                var slider = initSlider($elem[0], "", n);
                this.anchor.find("#" + this.ID).parents(".option").find(".option__this-choice-more").empty().append(slider.html);
                this.sliderval = slider.init();
                var $radios = this.anchor.find("#" + this.ID).parents(".js-fit-option-set").find(".option__btn"),
                    $selectedRadio = $($radios[whichSelected]),
                    $unselectedRadio = $($radios[Math.abs(whichSelected - 1)]);
                $selectedRadio.prop("checked", true);
                $selectedRadio.parents(".option").find(".option__this-choice-more").show();
                $unselectedRadio.parents(".option").find(".option__this-choice-more").hide();
                this.radios = $radios;
            },
            getter: function () {
                var STATUS = true;
                var val = null;
                var isEvenlySpacedChecked = $(this.radios[0]).prop("checked");
                if (isEvenlySpacedChecked) {
                    val = this.sliderval.val();
                }
                this.fitmeta.ninterp = val;
                return STATUS;
            }
        });
        Options._newoption({
            name: "errorweights",
            setter: function ($elem) {
                var that = this,
                    traceErrorBar, dataArray, spec, defaultOption = this.fitmeta.weight,
                    visible;
                that.$anchor = $elem.find("#fit-error-weights");
                that.$checkbox = that.$anchor.find("#fitbox-" + TD.id + "-check-fit-error-weights");
                that.$buttons = $(this.$anchor).find(".btn-group").children();
                that.$inputbox = $(this.$anchor).find(".inputtext");
                that.$inputbox.errorTip(checkForParamValError, "n", 0, removeRunBtnTooltip);
                if (TD.tabtype === "plot") {
                    traceErrorBar = "existing errorbars", dataArray = buildTraceList(TD).map(function (container) {
                        return container[0].t;
                    }), spec = {
                        items: dataArray.map(function (trace) {
                            if (uidsMatch(DATA.uid, TD.data[trace.idx].uid) && hasErrorsAttached(trace.idx)) {
                                if (!defaultOption) {
                                    defaultOption = "errbar";
                                }
                                return traceErrorBar;
                            } else {
                                return trace.name;
                            }
                        }),
                        callback: onDropdownSelect
                    };
                    that.$dataSelector = Plotly.Lib.dropdownSelector(spec).css({
                        "overflow-y": "inherit"
                    });
                    $(this.$anchor).find(".js-error-weight-dropdown").empty().css({
                        display: "inline-block"
                    }).append(that.$dataSelector);
                }
                if (TD.tabtype === "grid") {
                    that.$dataSelector = that.$anchor.find(".js-error-weight-selector").css({
                        display: "inline-block"
                    });
                }
                that.$inputbox.hide();
                that.$dataSelector.hide();
                if (TD.tabtype === "grid") {
                    visible = (visible = TD.colMeta[0].headers) && (visible = visible.Ey) && (visible = visible.visible);
                    if (visible) {
                        that.$buttons[2].click();
                    }
                }
                that.$buttons.click(function (ev) {
                    that.$buttons.removeClass("active");
                    $(this).addClass("active");
                    var btntxt = this.textContent;
                    switch (btntxt) {
                    case "%":
                        showInput();
                        break;
                    case "√":
                        showSqrt();
                        break;
                    case "Data":
                        showData();
                        break;
                    }
                });
                if (defaultOption) {
                    that.$checkbox.prop("checked", true);
                    that.$checkbox.parents(".option").find(".option__this-choice-more").show();
                    if (/%$/.test(defaultOption)) {
                        $(that.$buttons[0]).click();
                        that.$inputbox.val(defaultOption.substring(0, defaultOption.length - 1));
                    } else {
                        if (defaultOption === "sqrt") {
                            $(that.$buttons[1]).click();
                        } else {
                            if (defaultOption === "errbar" && TD.tabtype === "plot") {
                                $(that.$buttons[2]).click();
                                that.$dataSelector.find(".dropdown-menu").filter(function (i, item) {
                                    return item.textContent === traceErrorBar;
                                }).first().click();
                            } else {
                                if (TD.tabtype === "plot") {
                                    $(that.$buttons[2]).click();
                                    TD.data.filter(function (d, ix) {
                                        if (d.uid === defaultOption) {
                                            that.$dataSelector.find(".dropdown-menu").filter(function (i, item) {
                                                return item.textContent === d.name;
                                            }).first().click();
                                        }
                                    });
                                } else {
                                    if (TD.tabtype === "grid") {
                                        TD.colMeta.forEach(function (meta) {
                                            if (meta.uid === defaultOption) {
                                                if (meta.headers.Ey) {
                                                    $(meta.headers.Ey.elem).click();
                                                    $(that.$buttons[2]).click();
                                                }
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }
                }

                function showInput() {
                    that.$dataSelector.hide();
                    that.$inputbox.show();
                    hideErrorBar();
                }

                function showSqrt() {
                    that.$dataSelector.hide();
                    that.$inputbox.hide();
                    hideErrorBar();
                }

                function showData() {
                    that.$inputbox.hide();
                    that.$dataSelector.show();
                    showErrorBar();
                }

                function onDropdownSelect(item, i) {
                    var traceIndex = dataArray[i].idx;
                    var uid = TD.data[traceIndex].uid;
                    that.dataErrorUID = (item === traceErrorBar) ? "errbar" : uid;
                }

                function hasErrorsAttached(traceid) {
                    var trace = TD.calcdata[traceid][0];
                    return "yh" in trace && "ys" in trace;
                }

                function hideErrorBar() {
                    if (TD.tabtype !== "grid") {
                        return;
                    }
                    GridLayout.toggleHeaders("Ey", false);
                }

                function showErrorBar() {
                    if (TD.tabtype !== "grid") {
                        return;
                    }
                    GridLayout.toggleHeaders("Ey", true);
                }
            },
            getter: function () {
                var STATUS = true,
                    percentValue, errval = "";
                if (this.$checkbox.prop("checked")) {
                    this.$buttons.each(function (i, button) {
                        if ($(button).hasClass("active")) {
                            errval = button.textContent;
                        }
                    });
                    if (errval === "%") {
                        percentValue = this.$inputbox.val();
                        if (isNumber(percentValue)) {
                            errval = percentValue + "%";
                        } else {
                            errval = "";
                        }
                    }
                    if (errval === "Data") {
                        if (TD.tabtype === "plot") {
                            errval = this.dataErrorUID;
                        } else {
                            errval = DATA.errorWeight || "";
                        }
                    }
                    if (errval === "√") {
                        errval = "sqrt";
                    }
                }
                this.fitmeta.weight = errval;
                return STATUS;
            }
        });
        OPTS = Options;
    }

    function removeRunBtnTooltip($input) {
        var $tabs = $input.parents(".js-fit-options");
        if ($tabs.find(".js-has-error-tooltip").length === 0) {
            $tabs.find(".js-run-fit-btn").attr("original-title", "").tipsy("hide");
        }
    }

    function checkForParamValError($input) {
        var err, value = $input.val();
        if (isNumber(value) || value === "") {
            return void 0;
        } else {
            err = "Enter a numeric value";
            return err;
        }
    }

    function checkForRangeValError($input) {
        var value = $input.val();
        if (isNumber(value)) {
            return void 0;
        }
        if (isDate(value)) {
            return void 0;
        } else {
            var err = "Please enter a number or a date!";
            return err;
        }
    }

    function funcFamilyDropdown(fam, cb) {
        var $dropdownContainer = $FITBOX.find(".js-fit-family");
        $dropdownContainer.html(Plotly.ToolPanel.dropdown("", ""));
        var $dn = $dropdownContainer.find(".editboxselector"),
            dd = d3.select($dn[0]);

        function getFuncFamily(famname) {
            return FUNCLIB.reduce(function (p, c) {
                return (p.libname === famname) ? p : c;
            });
        }

        function setFamily(f) {
            var $elem = $dn.find(".btn-group .selected-val");
            $elem.html("<span>" + f + "</span>");
            variantDropdown(getFuncFamily(f), undefined, cb);
        }
        $dropdownContainer.find(".dropdown-toggle").addClass("dropdown-toggle--fixed-width");
        $dropdownContainer.find(".dropdown-menu").addClass("dropdown-toggle--fixed-width");
        var funcFamilies = FUNCLIB.map(function (fam) {
            return fam.libname;
        });
        setFamily((fam ? fam.libname : funcFamilies[0].libname));
        var funcFamilyLis = dd.select("ul").selectAll("li").data(funcFamilies).enter().append("li").append("a").attr("href", "#").html(function (d) {
            return d;
        }).on("click", function (d, i) {
            setFamily(d);
            d3.event.preventDefault();
        });
    }

    function variantDropdown(lib, v, cb) {
        var $dropdownContainer = $FITBOX.find(".js-fit-variant"),
            $fitVariantWrapper = $dropdownContainer.parent(".option__more-item");
        $dropdownContainer.html(Plotly.ToolPanel.dropdown("", ""));
        var variants = lib.variants.map(function (v) {
            return v.name;
        });
        var $dn = $dropdownContainer.find(".editboxselector"),
            dd = d3.select($dn[0]),
            variantName;

        function setVariant(vName) {
            var $elem = $dn.find(".btn-group .selected-val");
            $elem.html("<span>" + vName + "</span>");
            if (cb) {
                var vs = lib.variants.filter(function (v) {
                    return v.name === vName;
                });
                cb(vs[0].func);
            }
        }
        $dropdownContainer.find(".dropdown-toggle").addClass("dropdown-toggle--fixed-width");
        $dropdownContainer.find(".dropdown-menu").addClass("dropdown-toggle--fixed-width");
        if (v) {
            variantName = v.name;
        } else {
            variantName = variants[0];
        }
        setVariant(variantName);
        if (variants.length === 1) {
            $fitVariantWrapper.hide();
        } else {
            dd.select("ul").selectAll("li").data(variants).enter().append("li").append("a").attr("href", "#").html(function (d) {
                return d;
            }).on("click", function (d, i) {
                setVariant(d);
                d3.event.preventDefault();
            });
            $fitVariantWrapper.show();
        }
    }

    function initSlider(s, title, npoints, cls, cb) {
        var nmin = 0,
            nmax = 100,
            sliderVal, options = {
                value: npoints || nmin,
                min: nmin,
                max: nmax,
                step: 1,
                slide: function (e, ui) {
                    var newval = ui.value;
                    sliderVal.val(newval);
                },
                stop: function (e, ui) {
                    if (cb) {
                        cb();
                    }
                }
            },
            sliderhtml = '<div class="pickslider ' + ((cls) ? cls : "") + '"><input type="text" class="slider-val" value="' + nmin + '"/><div class="slider"></div>' + ((title && (title !== "")) ? '<div class="sublabel">' + title + "</div>" : "") + "</div>";

        function sliderinit(startval) {
            if (startval) {
                options.value = startval;
            } else {
                startval = options.value;
            }
            $(s).find(".slider").slider(options);
            sliderVal = $(s).find(".slider-val").val(startval);
            return sliderVal;
        }
        return {
            html: sliderhtml,
            init: sliderinit
        };
    }

    function getCalcData(uids) {
        var ix, iy, cols, colx, coly, x, y, name, xorig;
        var type, axis = {};
        if (!Array.isArray(uids)) {
            uids = [uids];
        }
        if (TD.tabtype == "plot") {
            TD.data.forEach(function (d, i) {
                if (d.uid === uids[0]) {
                    ix = i;
                    xorig = d.x;
                    name = d.name;
                    type = d.type;
                }
            });
            if (type === "scatter") {
                x = TD.calcdata[ix].map(function (obj) {
                    return obj.x;
                });
                y = TD.calcdata[ix].map(function (obj) {
                    return obj.y;
                });
            } else {
                if (type === "bar" || type.indexOf("histogram") > -1) {
                    x = xorig = TD.calcdata[ix].map(function (obj) {
                        return obj.p;
                    });
                    y = TD.calcdata[ix].map(function (obj) {
                        return obj.s;
                    });
                } else {
                    return {
                        err: "Fitting data of this type is not supported"
                    };
                }
            }
        } else {
            cols = getData(TD);
            cols.forEach(function (col) {
                if (col.uid === uids[0]) {
                    colx = col;
                } else {
                    if (col.uid === uids[1]) {
                        coly = col;
                        name = col.name;
                    }
                }
                return;
            });
            xorig = GridOperations.getColData(TD, colx.coli);
            x = GridOperations.getCalcData(TD, colx.coli);
            y = GridOperations.getCalcData(TD, coly.coli);
        } if (Plotly.Lib.isEmpty(x) || Plotly.Lib.isEmpty(y)) {
            return {
                err: "data related to this fit is empty"
            };
        } else {
            return {
                x: x,
                y: y,
                xorig: xorig,
                name: name,
                err: null
            };
        }
    }

    function getData(td, uids) {
        var data;
        if (!Plotly.Lib.isEmpty(uids) && !Array.isArray(uids)) {
            uids = [uids];
        }
        if (td.tabtype === "plot") {
            data = td.data;
        } else {
            data = td.colMeta;
        } if (!Plotly.Lib.isEmpty(uids)) {
            data = data.filter(function (d) {
                return (uids.indexOf(d.uid) > -1);
            });
        }
        return data;
    }

    function getErrorWeights(td, ydata, weightType) {
        var edata, cols, percent;
        if (/%$/.test(weightType)) {
            percent = Number(weightType.substring(0, weightType.length - 1)) / 100;
            if (percent > 0) {
                edata = ydata.map(function (d) {
                    return percent * Math.abs(d);
                });
            }
        } else {
            if (weightType === "sqrt") {
                edata = ydata.map(function (d) {
                    return Math.sqrt(Math.abs(d));
                });
            } else {
                if (weightType === "errbar" && td.tabtype === "plot") {
                    td.data.forEach(function (d, i) {
                        if (uidsMatch(DATA.uid, d.uid) && "yh" in td.calcdata[i][0]) {
                            edata = td.calcdata[i].map(function (obj) {
                                return (obj.yh - obj.ys) / 2;
                            });
                        }
                    });
                } else {
                    if (weightType) {
                        if (td.tabtype === "plot") {
                            td.data.forEach(function (d, i) {
                                if (uidsMatch(weightType.uid, d.uid)) {
                                    edata = td.calcdata[i].map(function (obj) {
                                        return obj.y;
                                    });
                                }
                            });
                        }
                        if (td.tabtype === "grid") {
                            cols = getData(td, weightType);
                            if (!cols) {
                                return void 0;
                            }
                            edata = GridOperations.getCalcData(td, cols[0].coli);
                        }
                    }
                }
            }
        } if (!edata) {
            edata = ydata.map(function () {
                return 1;
            });
        }
        return edata;
    }

    function newUID() {
        var data = getData(TD, null).filter(function (d) {
            return ("uid" in d);
        });
        var uids = data.map(function (d) {
            return d.uid;
        });
        return Plotly.Lib.randstr(uids);
    }

    function uidsMatch(uidx, uidy) {
        var matches;
        if (Array.isArray(uidx)) {
            if (!Array.isArray(uidy)) {
                uidy = [uidy];
            }
            matches = uidx.filter(function (ux, i) {
                return ux === uidy[i];
            });
            return matches.length === uidx.length;
        } else {
            return uidx === uidy;
        }
    }

    function getFuncfromLib(func) {
        var found = {
                lib: null,
                variant: {
                    name: "unknown",
                    func: func
                }
            },
            lfunc, ufunc = func.toUpperCase().replace(/ /g, ""),
            params = ["A", "B", "C", "D", "E", "F", "G", "H"],
            incr = 0,
            foundp = [],
            i;
        FUNCLIB.forEach(function (lib) {
            lib.variants.forEach(function (v) {
                lfunc = v.func.replace(/ /g, "").toUpperCase();
                if (lfunc === ufunc) {
                    found = {
                        lib: lib,
                        variant: v
                    };
                }
            });
        });
        return found;
    }

    function removeFit(fitobj) {
        var idx, col, fitmeta;
        if (TD.tabtype === "plot") {
            idx = TD.data.indexOf(fitobj);
            TD.data.splice(idx, 1);
            TD.calcdata = false;
            var annidx = findAnnoIndexbyUID(fitobj.uid);
            if (annidx > -1) {
                TD.layout.annotations.splice(annidx, 1);
            }
            Plotly.plot(TD).then(function () {
                traceSelection("trace");
                PANELS.show("overview");
            });
        } else {
            col = getData(TD, fitobj.uid)[0];
            if ("coli" in col) {
                GridOperations.deleteCol(TD, col.coli);
            }
            fitmeta = fitobj.fit;
            if (!Plotly.Lib.isEmpty(fitmeta.xpair) && (fitmeta.xpair.length === 6)) {
                col = getData(TD, fitmeta.xpair)[0];
                if ("coli" in col) {
                    GridOperations.deleteCol(TD, col.coli);
                }
            }
            PANELS.show("overview");
        }
    }

    function removeOldGuessCurves() {
        if (TD.tabtype !== "plot") {
            return;
        }
        var oldGuessCurves = TD.data.filter(function (d) {
            return d.guessCurve;
        });
        oldGuessCurves.forEach(function (d) {
            var idx = TD.data.indexOf(d);
            TD.data.splice(idx, 1);
            TD.calcdata = false;
            Plotly.plot(TD);
        });
    }

    function toggleAnnotation(fitmeta, txt) {
        var Aindex = findAnnoIndexbyUID(fitmeta.uid);
        if (Aindex > -1) {
            TD.layout.annotations.splice(Aindex, 1);
            return Plotly.plot(TD);
        }
        var anno = {};
        var scope = {};
        if (!txt) {
            txt = "";
        }
        fitmeta.params.forEach(function (p) {
            scope[p.name] = p.value;
        });
        anno.text = txt + "<br>y   = " + MATH.prettyprint(fitmeta.funcStr, scope, 3);
        anno.uid = fitmeta.uid;
        var cdata = getCalcData(fitmeta.uid),
            midp = Math.round(cdata.x.length / 2);
        anno.xref = "x";
        anno.yref = "y";
        anno.x = cdata.x[midp];
        anno.y = cdata.y[midp];
        anno.ax = 20;
        anno.ay = -60;
        anno.arrowhead = 2;
        anno.arrowsize = 1;
        anno.arrowwidth = 2;
        anno.arrowcolor = "#636363";
        anno.font = {
            size: 16
        };
        anno.align = "left";
        anno.opacity = 0.8;
        return Plotly.Annotations.draw(TD, undefined, anno, "add");
    }

    function findAnnoIndexbyUID(uid) {
        if ("annotations" in TD.layout && Array.isArray(TD.layout.annotations)) {
            return TD.layout.annotations.map(function (ann) {
                return ann.uid;
            }).indexOf(uid);
        } else {
            return -1;
        }
    }

    function onPopoverDestroy($elem, cb) {
        (function () {
            $.event.special.destroyed = {
                remove: function (o) {
                    if (o.handler) {
                        o.handler();
                    }
                }
            };
        })();
        $elem.bind("destroyed", function () {
            cb();
        });
    }

    function runFit(plotParamFlag) {
        var calcdata = getCalcData(OPTS._fitmeta.parent);
        if (calcdata.err) {
            console.log("DATA RETRIEVAL ERROR", calcdata.err);
            Plotly.Lib.notifier("Oops! There was a problem plotting your fit. " + calcdata.err, "long");
            delMessage("Generating Fit...");
            return;
        }
        var STATUS = true;
        OPTS.optionList.forEach(function (opt) {
            var status = opt.getter(calcdata);
            if (!status) {
                console.log("option getter failing on " + opt.name);
            }
            STATUS = STATUS && status;
        });
        if (!STATUS) {
            return;
        }
        var fitmeta = OPTS._fitmeta,
            xcalc = calcdata.x,
            ycalc = calcdata.y,
            ecalc = getErrorWeights(TD, ycalc, fitmeta.weight),
            xorig = calcdata.xorig,
            fitmetaSaved;
        if (plotParamFlag) {
            fitmetaSaved = $.extend(true, fitmeta);
        }
        var r = stripNaNs(xcalc, ycalc, ecalc),
            xinput = r.x,
            yinput = r.y,
            weights = r.w,
            xoutput = xcalc.slice(0),
            inx = cleanxlim(xinput, fitmeta.inputxrange),
            outx = cleanxlim(xinput, fitmeta.outputxrange),
            ninterp = cleanNumber(fitmeta.ninterp),
            datenormal = 100000,
            initDate;
        var z = d3.zip(xinput, yinput, weights).sort(function (a, b) {
            return a[0] - b[0];
        });
        z.forEach(function (zipped, idx) {
            xinput[idx] = zipped[0];
            yinput[idx] = zipped[1];
            weights[idx] = zipped[2];
        });
        var xo = findInsertionIndex(xinput, inx[0]);
        var xf = findInsertionIndex(xinput, inx[1]);
        if (xinput[xf] == inx[1]) {
            xf++;
        }
        xinput = xinput.slice(xo, xf);
        yinput = yinput.slice(xo, xf);
        weights = weights.slice(xo, xf);
        if (DATA.axis.type === "date") {
            initDate = xinput[0];
            xinput = numeric.sub(xinput, initDate);
            xinput = numeric.div(xinput, datenormal);
        }
        var funct = fitmeta.funcStr,
            params = fitmeta.params,
            libfit = getFuncfromLib(funct),
            lib = libfit.lib,
            variant = libfit.variant,
            order = params.length - 1,
            err = "",
            xshift = 0,
            pshift = {};
        params.forEach(function (p) {
            p.value = cleanNumber(p.value);
            if (plotParamFlag) {
                p.hold = true;
            }
        });
        if (lib && variant.autoguess && !plotParamFlag) {
            guess = variant.autoguess(xinput, yinput);
            if (guess.err) {
                err = guess.err;
            }
            xshift = guess.xshift || 0;
            pshift = guess.pshift;
            var toshift = [];
            params.forEach(function (p) {
                var guessval = guess.params[p.name];
                if (!isNumber(p.value) && isNumber(guessval) && !p.hold) {
                    p.value = guessval;
                }
            });
            if (!Plotly.Lib.isEmpty(pshift)) {
                pshift.prefit(params);
            }
        }
        var results, fit, fitter, guess, scope = {},
            freeparams = params.filter(function (p) {
                return (!p.hold);
            }),
            freeparamnames = freeparams.map(function (p) {
                return p.name;
            }),
            freeparamvals = freeparams.map(function (p) {
                return p.value;
            });
        params.forEach(function (p) {
            scope[p.name] = p.value;
        });
        var fitfunc = PC.makeEvaluator(funct, scope, freeparamnames);
        if (!plotParamFlag) {
            addMessage("Generating Fit...");
        }
        if (plotParamFlag) {
            results = {};
            results.params = [];
        }
        fitter = FuncSolver();
        results = fitter.run(xinput, yinput, weights, freeparamvals, fitfunc);
        results.corr = computeCorr(yinput, results.fit);
        params.forEach(function (pobj) {
            var idx = freeparamnames.indexOf(pobj.name);
            if (idx > -1) {
                pobj.value = results.params[idx];
                pobj.err = results.err[idx];
            }
        });
        freeparams = params.filter(function (p) {
            return (!p.hold);
        });
        freeparamvals = freeparams.map(function (p) {
            return p.value;
        });
        if (!Plotly.Lib.isEmpty(pshift)) {
            pshift.postfit(params);
        }
        var x0, x1, xaltered = false;
        if (ninterp) {
            xoutput = numeric.linspace(outx[0], outx[1], ninterp);
            xaltered = true;
        } else {
            if (!Plotly.Lib.isEmpty(fitmeta.outputxrange)) {
                var reversed;
                if (xoutput.length > 1) {
                    reversed = xcalc[0] > xcalc[1];
                }
                xoutput = xoutput.filter(function (x) {
                    return isNumber(x);
                });
                xoutput = xoutput.sort();
                x0 = findInsertionIndex(xoutput, outx[0]);
                x1 = findInsertionIndex(xoutput, outx[1]);
                if (xoutput[x1] == outx[1]) {
                    x1++;
                }
                xoutput = xoutput.slice(x0, x1);
                if (reversed) {
                    xoutput.reverse();
                }
                xaltered = true;
            }
        } if (initDate) {
            fit = xoutput.map(function (x) {
                if (isNumber(x)) {
                    return fitfunc((x - initDate) / datenormal - xshift, freeparamvals);
                } else {
                    return "";
                }
            });
        } else {
            fit = xoutput.map(function (x) {
                if (isNumber(x)) {
                    return fitfunc(x - xshift, freeparamvals);
                } else {
                    return "";
                }
            });
        } if (!xaltered) {
            xoutput = xorig;
        } else {
            xoutput = xoutput.map(DATA.axis.c2d);
        }
        fitmeta.rms = results.rms;
        fitmeta.corr = results.corr;
        fitmeta.iterations = results.iterations;
        fitmeta.params = params;
        if (plotParamFlag) {
            fitmeta = fitmetaSaved;
        }
        if (err) {
            Plotly.Lib.notifier("Oops! There was a problem plotting your fit. " + err, "long");
            delMessage("Generating Fit...");
            return;
        }
        if (numeric.all(numeric.isNaN(fit))) {
            Plotly.Lib.notifier("Oops! There was a problem plotting your fit. Try another fit type or try windowing your data with xmin and xmax.", "long");
            delMessage("Generating Fit...");
            return;
        }
        TD.changed = true;
        if (TD.tabtype === "plot") {
            if (DATA.orientation === "h") {
                plotfit(fit, xoutput, fitmeta, plotParamFlag);
            } else {
                plotfit(xoutput, fit, fitmeta, plotParamFlag);
            }
        } else {
            gridfit(xoutput, fit, fitmeta, xaltered);
        }
        setTimeout(function () {
            delMessage("Generating Fit...");
        }, 800);
    }

    function cleanxlim(xs, xlims) {
        xlims = xlims.map(function (x) {
            if (typeof (x) === "string") {
                var d = Plotly.Lib.parseDate(x);
                if (d !== null && ("getTime" in d)) {
                    return d.getTime();
                }
            }
            return x;
        });
        xlims = xlims.map(cleanNumber);
        if (!isNumber(xlims[0])) {
            xlims[0] = MATH.max(xs);
        }
        if (!isNumber(xlims[1])) {
            xlims[1] = MATH.min(xs);
        }
        if (xlims[0] > xlims[1]) {
            var mn_cp = xlims[0];
            xlims[0] = xlims[1];
            xlims[1] = mn_cp;
        }
        return xlims;
    }

    function stripNaNs(x, y, w) {
        var xf = [],
            yf = [],
            wf = [];
        for (var j = 0; j < x.length; j++) {
            if (!isNumber(x[j]) || !isNumber(y[j])) {
                x.splice(j, 1, false);
                y.splice(j, 1, false);
                if (w) {
                    w.splice(j, 1, false);
                }
            }
        }
        xf = x.filter(function (xi) {
            return xi !== false;
        });
        yf = y.filter(function (xi) {
            return xi !== false;
        });
        if (w) {
            wf = w.filter(function (xi) {
                return xi !== false;
            });
        }
        return {
            x: xf,
            y: yf,
            w: wf
        };
    }

    function plotfit(xnew, fit, fitmeta, plotParamFlag) {
        var fitData = {},
            fit_colors = ["rgb(228, 26, 28)", "rgb(55, 126, 184)", "rgb(77, 175, 74)", "rgb(52, 78, 163)", "rgb(255, 127, 0)", "rgb(66, 86, 40)", "rgb(166, 86, 40)", "rgb(247, 129, 191)", "rgb(53, 153, 153)"],
            plotDone = Promise.resolve();
        removeOldGuessCurves();
        var color, xaxis, yaxis, numfits;
        var data = TD.data.filter(function (d, i) {
            if (d.uid) {
                if (d.uid === fitmeta.parent[0]) {
                    xaxis = TD.calcdata[i][0].t.xaxis;
                    yaxis = TD.calcdata[i][0].t.yaxis;
                }
                return d.uid === fitmeta.uid;
            } else {
                return false;
            }
        })[0];
        if (!color) {
            numfits = TD.data.filter(function (data) {
                return ("fit" in data);
            }).length;
            if (numfits > 8) {
                numfits = MATH.floor(MATH.random() * 8);
            }
            color = fit_colors[numfits + 1];
        }
        if (plotParamFlag) {
            fitData.uid = newUID();
            fitData.line = {
                color: "#444",
                width: 4,
                dash: "dot"
            };
            fitData.opacity = 0.7;
            fitData.name = "Guess curve";
            fitData.x = xnew;
            fitData.y = fit;
            fitData.xaxis = xaxis;
            fitData.yaxis = yaxis;
            fitData.guessCurve = true;
            plotDone = Plotly.plot(TD, [fitData]);
        } else {
            if (data) {
                var idx = TD.data.indexOf(data);
                TD.calcdata.splice(idx, 1);
                data.x = xnew;
                data.y = fit;
                data.fit = fitmeta;
                plotDone = Plotly.plot(TD);
            } else {
                fitData.uid = fitmeta.uid;
                fitData.line = {
                    color: color,
                    width: 4
                };
                fitData.opacity = 0.5;
                fitData.name = fitmeta.fitname;
                fitData.x = xnew;
                fitData.y = fit;
                fitData.xaxis = xaxis;
                fitData.yaxis = yaxis;
                fitData.fit = fitmeta;
                plotDone = Plotly.plot(TD, [fitData]);
            }
        }
        plotDone.then(function () {
            traceSelection("trace");
            if (!plotParamFlag) {
                PANELS.show("results", fitmeta);
            }
        });
    }

    function gridfit(x, fit, fitmeta, xaltered) {
        var resultx, resulty, xMeta, yMeta;
        TD.colMeta.forEach(function (c) {
            if (c.uid === fitmeta.uid) {
                yMeta = c;
            }
            if (fitmeta.xpair && (c.uid === fitmeta.xpair)) {
                xMeta = c;
            }
        });
        if (yMeta) {
            if (xaltered && Plotly.Lib.isEmpty(fitmeta.xpair)) {
                resultx = {
                    data: x,
                    name: fitmeta.fitname.replace("fit", "newx"),
                    uid: newUID()
                };
                fitmeta.xpair = resultx.uid;
                GridOperations.deleteCol(TD, yMeta.coli);
                resulty = {
                    data: fit,
                    name: fitmeta.fitname,
                    fit: fitmeta,
                    uid: fitmeta.uid
                };
                GridOperations.addCol(TD, resultx);
                GridOperations.addCol(TD, resulty);
            } else {
                if (xaltered) {
                    GridOperations.replaceCol(TD, x, xMeta.coli);
                }
                yMeta.name = fitmeta.fitname;
                yMeta.fit = fitmeta;
                yMeta.uid = fitmeta.uid;
                GridOperations.replaceCol(TD, fit, yMeta.coli);
            }
        } else {
            if (xaltered) {
                resultx = {
                    data: x,
                    name: fitmeta.fitname.replace("fit", "newx"),
                    uid: newUID()
                };
                GridOperations.addCol(TD, resultx);
                fitmeta.xpair = resultx.uid;
            }
            resulty = {
                data: fit,
                name: fitmeta.fitname,
                fit: fitmeta,
                uid: fitmeta.uid
            };
            GridOperations.addCol(TD, resulty);
        }
        PANELS.show("results", fitmeta);
    }

    function gridplot(fitobj) {
        var data, parentGridData, fitData, parentPlotData, edata, newfitData = {},
            fitmeta = fitobj.fit,
            tdGRID = TD;
        if (TD.fid !== undefined) {
            Plotly.Grids.saveGrid(TD);
        }
        parentGridData = getCalcData(fitmeta.parent);
        if (parentGridData.err) {
            console.log("CALC DATA ERROR", parentGridData.err);
        }
        var xuid = (Plotly.Lib.isEmpty(fitmeta.xpair)) ? fitmeta.parent[0] : fitmeta.xpair;
        fitData = getCalcData([xuid, fitobj.uid]);
        if (fitData.err) {
            console.log("CALC DATA ERROR", fitData.err);
        }
        var tabindex;
        TD = Tabs.fresh("plot");
        Tabs.select(TD);
        var newFitmeta = {};
        Object.keys(fitmeta).forEach(function (key) {
            if (key === "parent") {
                newFitmeta[key] = [fitmeta[key][1]];
            } else {
                if (key === "xpair") {
                    newFitmeta[key] = "";
                } else {
                    newFitmeta[key] = fitmeta[key];
                }
            }
        });
        parentPlotData = {
            x: parentGridData.xorig,
            y: parentGridData.y,
            uid: newFitmeta.parent[0],
            name: parentGridData.name,
            type: "scatter",
            mode: "markers"
        };
        if (fitmeta.weight) {
            edata = getErrorWeights(tdGRID, parentGridData.x, fitmeta.weight);
            parentPlotData.error_y = {};
            if (edata) {
                parentPlotData.error_y.array = edata;
                if (/%$/.test(fitmeta.weight)) {
                    parentPlotData.error_y.type = "percent";
                } else {
                    if (fitmeta.weight === "sqrt") {
                        parentPlotData.error_y.type = "sqrt";
                    } else {
                        parentPlotData.error_y.type = "data";
                    }
                }
                parentPlotData.error_y.visible = true;
            }
        }
        var numfits, fit_colors = ["rgb(228, 26, 28)", "rgb(55, 126, 184)", "rgb(77, 175, 74)", "rgb(52, 78, 163)", "rgb(255, 127, 0)", "rgb(66, 86, 40)", "rgb(166, 86, 40)", "rgb(247, 129, 191)", "rgb(53, 153, 153)"];
        if (TD.data) {
            numfits = TD.data.filter(function (data) {
                return ("fit" in data);
            }).length;
        } else {
            numfits = 0;
        } if (numfits > 8) {
            numfits = MATH.floor(MATH.random() * 8);
        }
        newfitData.uid = newFitmeta.uid;
        newfitData.line = {
            color: fit_colors[numfits + 1],
            width: 6
        };
        newfitData.opacity = 0.5;
        newfitData.name = fitData.name;
        newfitData.x = fitData.xorig;
        newfitData.y = fitData.y;
        newfitData.fit = newFitmeta;
        Plotly.plot(TD, [parentPlotData, newfitData]).then(function () {
            setTimeout(function () {
                Plotly.Lib.notifier("Nice fit!", "long");
            }, 500);
            TD = tdGRID;
        });
    }

    function ParamControl(math) {
        var self = {},
            independents = ["x", "y", "z"],
            constants = ["pi", "PI"];
        self.getParams = getParams;
        self.makeEvaluator = makeEvaluator;
        self.exprErr = exprErr;
        self.math = math;

        function exprErr(expr, scope) {
            scope = scope || {};
            var err = "";
            try {
                var ps = getParams(expr),
                    params = ps.indeps.concat(ps.params);
                params.forEach(function (p) {
                    scope[p] = scope[p] || 1;
                });
                math.eval(expr, scope);
            } catch (e) {
                err = e;
            }
            return err;
        }

        function makeEvaluator(expr, scope, freeParams) {
            var param = getParams(expr),
                indeps = param.indeps;
            if (!indeps.length) {
                throw new Error("no independent variables in expression!");
            }
            freeParams = freeParams || param.params;
            if (!Array.isArray(freeParams)) {
                freeParams = [freeParams];
            }
            return function (indp, params) {
                if (!Array.isArray(indp)) {
                    indp = [indp];
                }
                if (!Array.isArray(params)) {
                    params = [params];
                }
                if (params.length !== freeParams.length) {
                    throw new Error("input parameters not equal to freeParams length");
                }
                freeParams.forEach(function (p, i) {
                    scope[p] = params[i];
                });
                indeps.forEach(function (x, i) {
                    scope[x] = indp[i];
                });
                return math.eval(expr, scope);
            };
        }

        function getParams(expr) {
            var foundIndeps = [],
                foundConstants = [],
                params = extractParams(math.parse(expr));
            independents.forEach(function (x) {
                var ix = params.indexOf(x);
                if (ix > -1) {
                    foundIndeps.push(params.splice(ix, 1)[0]);
                }
            });
            constants.forEach(function (c) {
                var ic = params.indexOf(c);
                if (ic > -1) {
                    foundConstants.push(params.splice(ic, 1)[0]);
                }
            });
            params = params.sort();
            foundIndeps = foundIndeps.sort();
            foundConstants = foundConstants.sort();
            return {
                indeps: foundIndeps,
                params: params,
                constants: foundConstants
            };
        }

        function extractParams(node) {
            var params = [];
            if ("expr" in node) {
                node = node.expr;
            }
            if ("params" in node) {
                node.params.forEach(function (node) {
                    params = params.concat(extractParams(node));
                });
            } else {
                if (node.name) {
                    params.push(node.name);
                }
            }
            return getunique(params);
        }

        function getunique(inputArray) {
            var outputArray = [];
            for (var i = 0; i < inputArray.length; i++) {
                if (outputArray.indexOf(inputArray[i]) == -1) {
                    outputArray.push(inputArray[i]);
                }
            }
            return outputArray;
        }
        return self;
    }

    function findInsertionIndex(sortedArr, val) {
        var low = 0,
            high = sortedArr.length;
        if (val < sortedArr[0]) {
            return low;
        }
        if (val > sortedArr[high - 1]) {
            return high;
        }
        var mid = -1,
            c = 0;
        while (low < high) {
            mid = (low + high) >> 1;
            if (sortedArr[mid] < val) {
                low = mid + 1;
            } else {
                if (sortedArr[mid] > val) {
                    high = mid;
                } else {
                    return mid;
                }
            }
        }
        return low;
    }

    function cleanNumber(v) {
        if (v === null || v === undefined || v === false) {
            return "";
        }
        if (isNumber(v)) {
            return Number(v);
        }
        v = v.toString().replace(/[^0-9.-]/g, "");
        if (isNumber(v)) {
            return Number(v);
        }
        return "";
    }

    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    function isDate(val) {
        if (typeof (val) === "string" && val.length > 0) {
            var d = Plotly.Lib.parseDate(val);
            if (d !== null && ("getTime" in d)) {
                d = d.getTime();
            }
            return isNumber(d);
        } else {
            return false;
        }
    }

    function computeCorr(x, y) {
        var i;
        var xy = [];
        var x2 = [];
        var y2 = [];
        for (i = 0; i < x.length; i++) {
            xy.push(x[i] * y[i]);
            x2.push(x[i] * x[i]);
            y2.push(y[i] * y[i]);
        }
        var sum_x = 0;
        var sum_y = 0;
        var sum_xy = 0;
        var sum_x2 = 0;
        var sum_y2 = 0;
        for (i = 0; i < x.length; i++) {
            sum_x += x[i];
            sum_y += y[i];
            sum_xy += xy[i];
            sum_x2 += x2[i];
            sum_y2 += y2[i];
        }
        var step1 = (x.length * sum_xy) - (sum_x * sum_y);
        var step2 = (x.length * sum_x2) - (sum_x * sum_x);
        var step3 = (x.length * sum_y2) - (sum_y * sum_y);
        var step4 = Math.sqrt(step2 * step3);
        var answer = step1 / step4;
        return answer;
    }
    return {
        initPlotFit: function (popover) {
            ID = popover;
            $FITBOX = $(popover);
            var $popoverInner = $FITBOX.find(".popover-inner");
            $popoverInner.html($("script#load-fitbox-plot").html());
            var $fitPanels = $popoverInner.find(".js-fit-panels"),
                $fitOverview = $popoverInner.find(".js-fit-overview"),
                $fitResults = $popoverInner.find(".js-fit-results"),
                $fitOptions = $popoverInner.find(".js-fit-options"),
                $tabMenu = $fitOptions.find(".js-minimal-tabs-menu");
            $fitOptions.find(".js-minimal-tabs-content").each(function (index, tabContent) {
                var $tabMenuItem = $($tabMenu.find("a")[index]);
                var tid = "fitbox-" + TD.id + "-" + index;
                $(tabContent).attr("id", tid);
                $tabMenuItem.attr("href", "#" + tid);
            });
            Tabs.initMinimal($FITBOX);
            PANELS = new PanelControl($FITBOX);
            $FITBOX.find(".option__btn").each(function () {
                var btnID = $(this).attr("id"),
                    btnNewID = "fitbox-" + TD.id + "-" + btnID,
                    $btnLabel = $FITBOX.find('label[for="' + btnID + '"]');
                $(this).attr("id", btnNewID);
                $btnLabel.attr("for", btnNewID);
            });
            TD.data.forEach(function (d) {
                if (!d.uid || (typeof d.uid !== "string") || (d.uid.length < 6)) {
                    d.uid = newUID();
                }
            });
            traceSelection("trace");
            PANELS.show("overview");
            onPopoverDestroy($FITBOX, removeOldGuessCurves);
        },
        initGridFit: function (container) {
            ID = container;
            $FITBOX = $(ID).show();
            $FITBOX.html($("script#load-fitbox-grid").html());
            $FITBOX.find(".trace-dropdown").html('<div class="js-fit-gridrow-selected"></div><div class="js-fit-gridrow-selected"></div>');
            var $fitPanels = $FITBOX.find(".js-fit-panels"),
                $fitOverview = $FITBOX.find(".js-fit-overview"),
                $fitResults = $FITBOX.find(".js-fit-results"),
                $fitOptions = $FITBOX.find(".js-fit-options"),
                $tabMenu = $fitOptions.find(".js-minimal-tabs-menu");
            $fitOptions.find(".js-minimal-tabs-content").each(function (index, tabContent) {
                var $tabMenuItem = $($tabMenu.find("a")[index]);
                var tid = "fitbox-" + TD.id + "-" + index;
                $(tabContent).attr("id", tid);
                $tabMenuItem.attr("href", "#" + tid);
            });
            Tabs.initMinimal($FITBOX);
            PANELS = new PanelControl($FITBOX);
            $FITBOX.find(".option__btn").each(function () {
                var btnID = $(this).attr("id"),
                    btnNewID = "fitbox-" + TD.id + "-" + btnID,
                    $btnLabel = $FITBOX.find('label[for="' + btnID + '"]');
                $(this).attr("id", btnNewID);
                $btnLabel.attr("for", btnNewID);
            });
            $TD.on("grid-header-click", setHeader);
            updateData({
                col: {},
                dim: "x"
            });
            updateData({
                col: {},
                dim: "y"
            });
            setTimeout(function () {
                try {
                    $(TD.colMeta[0].headers.x.elem).click();
                    $(TD.colMeta[1].headers.y.elem).click();
                } catch (e) {}
            }, 50);
            PANELS.show("overview");
        }
    };
};
(function () {
    var m = window.Plotly;
    var h = m.ToolPanel = {
        polar: {},
        cartesian: {}
    };
    h.cartesian.widgets = {};
    h.polar.widgets = {};
    h.polar.tracesBox = function (L, R) {
        var Q = "." + R + "-panel";
        var O = L.framework;
        var S = O.getConfig();
        var M = O.getLiveConfig();
        $(".spectrum-container").remove();
        var T = h.panel(R, "polar");
        var N = h.autoBinding(Q, "polar");
        N.traces.setConfig({
            traces: S.data.map(function (V, U) {
                return V.name || "Trace " + U;
            }),
            value: "all"
        }).on("formChange", function (V, W) {
            if (W === "all") {
                return;
            }
            var U = P(W);
            N.show.setValue(U.visible);
            N.showInLegend.setValue(U.visibleInLegend);
            N.dash.setValue(m.Lib.nestedProperty(U, "marker.line.dash").get());
            N.strokeSize.setValue(m.Lib.nestedProperty(U, "marker.line.width").get());
            N.traceColor.setValue(m.Lib.nestedProperty(U, "marker.color").get());
            N.traceStrokeColor.setValue(m.Lib.nestedProperty(U, "marker.line.color").get());
        });

        function P(U) {
            return M.data.filter(function (W, V) {
                return W.name === U;
            })[0];
        }

        function K(U) {
            var V = N.traces.getValue();
            var W = M.data.slice();
            W.forEach(function (Y, X) {
                if (V === "all" || Y.name == V) {
                    U.call(this, Y, X);
                }
            });
            return W;
        }
        N.traceColor.setConfig({
            value: "black"
        }).on("formChange", function (U, V) {
            O({
                data: K(function (X, W) {
                    m.Lib.nestedProperty(X, "marker.color").set(V);
                })
            });
        });
        N.traceStrokeColor.setConfig({
            value: "black"
        }).on("formChange", function (U, V) {
            O({
                data: K(function (X, W) {
                    m.Lib.nestedProperty(X, "marker.line.color").set(V);
                })
            });
        });
        N.show.setConfig({
            value: true
        }).on("formChange", function (U, V) {
            O({
                data: K(function (X, W) {
                    X.visible = V;
                })
            });
        });
        N.dash.setConfig({
            value: "solid"
        }).on("formChange", function (U, V) {
            O({
                data: K(function (X, W) {
                    m.Lib.nestedProperty(X, "marker.line.dash").set(V);
                })
            });
        });
        N.showInLegend.setConfig({
            value: true
        }).on("formChange", function (U, V) {
            O({
                data: K(function (X, W) {
                    X.showlegend = V;
                })
            });
        });
        N.strokeSize.setConfig({
            value: 1,
            min: 0,
            max: 10,
            step: 1
        }).on("formChange", function (U, V) {
            O({
                data: K(function (X, W) {
                    m.Lib.nestedProperty(X, "marker.line.width").set(V);
                })
            });
        });
    };
    h.polar.layoutBox = function (K, L) {
        var P = "." + L + "-panel";
        var M = K.framework;
        var O = M.getConfig();
        $(".spectrum-container").remove();
        $panel = h.panel(L, "polar");
        var N = h.autoBinding(P, "polar");
        N.plotColor.setConfig({
            value: O.layout.plot_bgcolor || "white"
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    plot_bgcolor: R
                }
            });
        });
        N.marginColor.setConfig({
            value: O.layout.paper_bgcolor || "white"
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    paper_bgcolor: R
                }
            });
            K.layout._paperdiv.style({
                background: R
            });
        });
        N.fontSize.setConfig({
            value: m.Lib.nestedProperty(O, "layout.font.size").get() || 12,
            min: 0,
            max: 36,
            step: 1
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    font: {
                        size: R
                    }
                }
            });
            M.setUndoPoint();
        });
        N.fontColor.setConfig({
            value: m.Lib.nestedProperty(O, "layout.font.color").get() || "black"
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    font: {
                        color: R
                    }
                }
            });
        });
        N.fontFamily.setConfig({
            value: m.Lib.nestedProperty(O, "layout.font.family").get() || "Arial"
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    font: {
                        family: R
                    }
                }
            });
        });
        N.width.setConfig({
            value: O.layout.width,
            min: 0,
            max: 1000,
            step: 1
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    width: R
                }
            });
            K.layout._paperdiv.style({
                width: R + "px"
            });
        });
        N.height.setConfig({
            value: O.layout.height,
            min: 0,
            max: 1000,
            step: 1
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    height: R
                }
            });
            K.layout._paperdiv.style({
                height: R + "px"
            });
        });
        N.padding.setConfig({
            value: m.Lib.nestedProperty(O, "layout.margin.t").get(),
            min: 0,
            max: 200,
            step: 1
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    margin: {
                        t: R,
                        r: R,
                        b: R,
                        l: R,
                        pad: R
                    }
                }
            });
        });
    };
    h.polar.axesBox = function (N, U) {
        var S = "." + U + "-panel";
        var R = N.framework;
        var V = R.getConfig();
        var O = R.getLiveConfig();
        $(".spectrum-container").remove();
        $panel = h.panel(U, "polar");
        var Q = h.autoBinding(S, "polar");
        Q.orientation.setConfig({
            value: V.layout.orientation,
            min: -360,
            max: 360,
            step: 10
        }).on("formChange", function (W, X) {
            R({
                layout: {
                    orientation: X
                }
            });
        });
        Q.direction.setConfig({
            value: V.layout.direction || "clockwise"
        }).on("formChange", function (W, X) {
            R({
                layout: {
                    direction: X
                }
            });
        });
        var T = R.getLiveScales();
        var P = T.r.range().slice();
        var M = P[1] - P[0];
        Q.radialDomainMin.setConfig({
            value: P[0],
            step: M / 100
        }).on("formChange", function (W, X) {
            R({
                layout: {
                    radialaxis: {
                        range: [X, Q.radialDomainMax.getValue()]
                    }
                }
            });
        });
        Q.radialDomainMax.setConfig({
            value: P[1],
            step: M / 100
        }).on("formChange", function (W, X) {
            R({
                layout: {
                    radialaxis: {
                        range: [Q.radialDomainMin.getValue(), X]
                    }
                }
            });
        });
        Q.radialDomainToDataExtent.on("formChange", function (W, X) {
            R({
                layout: {
                    radialaxis: {
                        range: null
                    }
                }
            });
            P = R.getLiveScales().r.domain().slice();
            Q.radialDomainMin.setValue(P[0]);
            Q.radialDomainMax.setValue(P[1]);
        });
        var L = T.t.domain().slice();
        var K = L[1] - L[0];
        Q.angularDomainMin.setConfig({
            value: L[0],
            step: K / 100
        }).on("formChange", function (W, Y) {
            var X = m.Lib.nestedProperty(O, "layout.angularaxis.endpadding").get();
            R({
                layout: {
                    angularaxis: {
                        range: [Y, Q.angularDomainMax.getValue() - X]
                    }
                }
            });
        });
        Q.angularDomainMax.setConfig({
            value: L[1],
            step: K / 100
        }).on("formChange", function (W, Y) {
            var X = m.Lib.nestedProperty(O, "layout.angularaxis.endpadding").get();
            R({
                layout: {
                    angularaxis: {
                        range: [Q.angularDomainMin.getValue(), Y - X]
                    }
                }
            });
        });
        Q.angularDomainToDataExtent.on("formChange", function (W, X) {
            R({
                layout: {
                    angularaxis: {
                        range: null
                    }
                }
            });
            L = R.getLiveScales().t.domain().slice();
            Q.angularDomainMin.setValue(L[0]);
            Q.angularDomainMax.setValue(L[1]);
        });
        Q.radialAxisOrientation.setConfig({
            value: m.Lib.nestedProperty(O, "layout.radialaxis.orientation").get(),
            min: -360,
            max: 360,
            step: 10
        }).on("formChange", function (W, X) {
            R({
                layout: {
                    radialaxis: {
                        orientation: X
                    }
                }
            });
        });
    };
    h.polar.annotationBox = function (K, L) {
        var P = "." + L + "-panel";
        var M = K.framework;
        var O = M.getConfig();
        $(".spectrum-container").remove();
        $panel = h.panel(L, "polar");
        var N = h.autoBinding(P, "polar");
    };
    h.polar.legendBox = function (K, L) {
        var P = "." + L + "-panel";
        var M = K.framework;
        var O = M.getConfig();
        $(".spectrum-container").remove();
        $panel = h.panel(L, "polar");
        var N = h.autoBinding(P, "polar");
        N.show.setConfig({
            value: O.layout.showlegend
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    showlegend: R
                }
            });
        });
        N.traceOrder.setConfig({
            value: m.Lib.nestedProperty(O, "layout.legend.traceorder").get() || "normal"
        }).on("formChange", function (Q, R) {
            M({
                layout: {
                    legend: {
                        traceorder: R
                    }
                }
            });
        });
    };
    h.makeMenu = function (L) {
        var M = L.id,
            K = $(L);
        K.prepend($("script#load-graph-toolmenu").html());
        K.find(".tool-menu__btn-list a").tipsy({
            gravity: "nw",
            opacity: 1
        });
        K.find(".js-file-upload").on("change", function () {
            fileSelected(this, "plot");
        });
        K.find(".js-graph-to-grid").on("click", function () {
            graphToGrid();
            return false;
        });
        K.find(".js-share-graph").on("click", function () {
            launchShareGraph(L);
            return false;
        });
        K.find(".js-show-comments").on("click", function () {
            toggleCommentPane();
            return false;
        });
        K.find(".js-copy-graph").on("click", function () {
            copyGraph(L);
            return false;
        });
        K.find(".js-start-graph-export").on("click", function () {
            if (h.isGL3D(L)) {
                m.Lib.notifier("3D plots are not yet exportable.</br>coming soon", "long");
                return false;
            }
            startGraphExport(Tabs.get());
            return false;
        });
        K.find(".js-toggle-theme-bar").on("click", function () {
            if (h.isPolar() || h.isGL3D(L)) {
                m.Lib.notifier("Polar Plots and 3D plots are not yet themable.</br>coming soon", "long");
            } else {
                Themes.toggle(L, this);
            }
            return false;
        });
        K.find(".js-plot-undo").on("click", function () {
            g.undo();
            return false;
        });
        K.find(".js-plot-redo").on("click", function () {
            g.redo();
            return false;
        });
        K.find(".js-save-graph").on("click", function () {
            launchSaveGraph();
            return false;
        });
        K.find(".js-fit-plot-data").on("click", function () {
            o(L, this);
            return false;
        });
        K.find(".js-view-json").on("click", function () {
            m.Plots.viewJson();
            return false;
        });
        K.find(".js-example-toggle").on("click", function () {
            if (h.isGL3D(L)) {
                m.Lib.notifier("3D plots do not play well with other plot types. Try another tab.</br>coming soon", "long");
            } else {
                Examples.set(this);
                return false;
            }
            return false;
        });
        h.bindPanelsMenuEvents(L);
        Examples.init();
        if (SHOW_EXAMPLES == "plot") {
            Examples.set();
        }
        Themes.init(L);
        if (!L.themes) {
            L.themes = {
                visible: false,
                data: []
            };
        }
        if (L.themes.visible) {
            Themes.toggle(L);
            K.find(".theme-bar").html(L.themes.bar);
        }
        K.append($("script#load-file-and-comments").html());
    };
    h.tweakMenu = function () {
        setTimeout(function () {
            var L = h.isPolar();
            var K = $(".tool-menu__btn-list").find(".js-notes-box, .js-fit-plot-data");
            K.toggle(!L);
        }, 0);
    };
    h.isPolar = function () {
        var K = Tabs.get().framework;
        return !!K && !!K.isPolar;
    };
    h.isGL3D = function (K) {
        return (K.layout && K.layout._hasGL3D) === true;
    };
    h.bindPanelsMenuEvents = function () {
        function L(R, P) {
            var O = "polar";
            var Q = h[O][P.split("-")[1] + "Box"];
            if (Q) {
                var N = $("." + P + "-panel." + O);
                M.removeClass("active");
                $('[class*="-panel"].' + O).remove();
                if (!N.length) {
                    Q.call(this, R, P);
                    $("." + P).addClass("active");
                }
            }
            return false;
        }
        var K = $(".tool-menu__btn-list:has(.js-traces-box)");
        var M = K.find('.link--tool[class*="js-"]');
        K.find(".js-traces-box").off("click").on("click", function () {
            var N = Tabs.get();
            if (h.isPolar()) {
                L(N, "js-traces-box");
            } else {
                if (h.isGL3D(N)) {
                    m.Lib.notifier("3D plot are not currently integrated with this feature.</br> coming soon ", "long");
                } else {
                    t(N, this);
                }
            }
            return false;
        });
        K.find(".js-layout-box").off("click").on("click", function () {
            var N = Tabs.get();
            if (h.isPolar()) {
                L(N, "js-layout-box");
            } else {
                if (h.isGL3D(N)) {
                    m.Lib.notifier("3D plot are not currently integrated with this feature.</br> coming soon ", "long");
                } else {
                    z(N, this);
                }
            }
            return false;
        });
        K.find(".js-axes-box").off("click").on("click", function () {
            var N = Tabs.get();
            if (h.isPolar()) {
                L(N, "js-axes-box");
            } else {
                if (h.isGL3D(N)) {
                    m.Lib.notifier("3D plot are not currently integrated with this feature.</br> coming soon ", "long");
                } else {
                    y(N, this);
                }
            }
            return false;
        });
        K.find(".js-notes-box").off("click").on("click", function () {
            var N = Tabs.get();
            if (h.isPolar()) {
                L(N, "js-notes-box");
            } else {
                if (h.isGL3D(N)) {
                    m.Lib.notifier("3D plot are not currently integrated with this feature.</br> coming soon ", "long");
                } else {
                    s(N, this);
                }
            }
            return false;
        });
        K.find(".js-legend-box").off("click").on("click", function () {
            var N = Tabs.get();
            if (h.isPolar()) {
                L(N, "js-legend-box");
            } else {
                if (h.isGL3D(N)) {
                    m.Lib.notifier("3D plot are not currently integrated with this feature.</br> coming soon", "long");
                } else {
                    e(N, this);
                }
            }
            return false;
        });
        $("#tabs-one-line").off("tabsselect.setMenu").on("tabsselect.setMenu", function (N, O) {
            h.tweakMenu();
        });
    };
    h.panel = function (K, L) {
        var P = "." + K + "-panel." + L;
        if (!$(P).empty()) {
            $(P).remove();
        }
        var N = $("#" + L + "-" + K.slice("js-".length) + "-template").text();
        $(N).appendTo("body");
        var M = $(Tabs.get()).find(".tool-menu.tool-menu--plot").get(0).getBoundingClientRect();
        var O = $(P).draggable().css({
            top: M.top + M.height
        }).show();
        O.find(".arrow").hide();
        O.find("button.close").on("click", function (R, Q) {
            $("." + K).removeClass("active");
            O.remove();
            return false;
        });
        Tabs.initMinimal(O);
        return O;
    };
    h.autoBinding = function (K, L) {
        var M = h[L].widgets;
        $(K).find("[data-widget]").each(function (R, O) {
            var S = m.util.toCamelCase($(O).data().widget);
            var Q = m.form[S];
            var P = m.util.jsHook(this);
            if (Q && P) {
                var T = Q({
                    selector: this
                }).on("formChange", function (U, V) {
                    setTimeout(function () {
                        Tabs.get().framework.setUndoPoint();
                    }, 0);
                });
                var N = m.util.toCamelCase(P.slice("js-".length));
                M[N] = T;
            }
        });
        return M;
    };
    var g = m.Queue = {};
    g.add = function (M, L, N, K) {
        if (!M.mainsite) {
            user = "";
            userobj = {
                clientoffset: 0
            };
        }
        if (!$.isArray(M.undoqueue) || !$.isNumeric(M.undonum)) {
            M.undoqueue = [];
            M.undonum = 0;
        }
        if (M.autoplay) {
            M.autoplay = false;
            return;
        }
        M.undoqueue.splice(M.undonum, M.undoqueue.length - M.undonum, {
            undo: L,
            redo: N,
            traces: K,
            user: user,
            ts: m.Lib.ms2DateTime(new Date().getTime() - userobj.clientoffset).substr(0, 19)
        });
        M.undonum++;
    };
    g.undo = function (L) {
        if (!L) {
            L = Tabs.get();
        }
        if (L.framework && L.framework.isPolar) {
            L.framework.undo();
            return;
        }
        if (!$.isNumeric(L.undonum) || L.undonum <= 0) {
            return;
        }
        L.undonum--;
        var K = L.undoqueue[L.undonum];
        b(L, K.undo, K.traces);
    };
    g.redo = function (L) {
        if (!L) {
            L = Tabs.get();
        }
        if (L.framework && L.framework.isPolar) {
            L.framework.redo();
            return;
        }
        if (!$.isNumeric(L.undonum) || L.undonum >= L.undoqueue.length) {
            return;
        }
        var K = L.undoqueue[L.undonum];
        L.undonum++;
        b(L, K.redo, K.traces);
    };

    function b(P, O, M) {
        P.autoplay = true;
        var N = {};
        for (var K in O) {
            N[K] = O[K];
        }
        if (M == "relayout") {
            m.relayout(P, N);
        } else {
            m.restyle(P, N, M);
        }
        var L = $(".popover");
        if (L.length) {
            L[0].redraw(L[0].selectedObj);
        }
    }

    function C(X, aa) {
        var M = aa.pos,
            Z = aa.cls,
            S = aa.content,
            N = aa.apply || m.relayout,
            L = aa.arg,
            U = aa.tabs || [],
            T = {};
        if ($(".popover." + Z).length) {
            return;
        }
        $(".popover").remove();
        hidebox();
        Tabs.select(X);
        if (typeof M.getBoundingClientRect == "function") {
            $(M).tooltip("hide");
            T = M.getBoundingClientRect();
        }
        if (!("x" in T)) {
            T.x = T.left + (T.width / 2);
        }
        if (!("y" in T)) {
            T.y = T.top + T.height;
        }
        var Q = $('<div class="popover bottom editbox ' + (Z === "stylebox" || Z === "errorbars" ? "stylebox" : Z) + '" style="top:0px;left:0px;display:block;"><div class="arrow"></div><div class="popover-inner"></div></div>').appendTo("body");
        var R = Z.slice(0, 1).toUpperCase() + Z.slice(1, -"box".length);
        if (R.indexOf("Annotation") != -1) {
            R = "Annotation";
        }
        var W = $('<div class="popover-content"><div class="popover__header"><div class="panel__close"><button type="button" class="close">×</button></div><div class="panel-name">' + R + '</div><div class="trace-dropdown"></div></div><ul class="js-minimal-tabs-menu minimal-tabs"></ul><div class="js-minimal-tabs-container"></div></div>').appendTo(Q.find(".popover-inner")),
            O = W.find(".js-minimal-tabs-menu"),
            V = W.find(".js-minimal-tabs-container");
        U.forEach(function (ac, ab) {
            var ad = Z + "-" + ab;
            V.append('<div id="' + ad + '" class="js-minimal-tabs-content minimal-tabs__content-panel popover-items"></div>');
            O.append('<li><a href="#' + ad + '" class="link--tool">' + ac + "</a></li>");
        });
        if (U.length) {
            Tabs.initMinimal(Q[0]);
        } else {
            V.append('<div id="' + Z + '-0" class="js-minimal-tabs-content popover-items"></div>');
        }
        Q[0].gd = X;
        Q[0].redraw = function (ab) {
            Q.find("input").tooltip("destroy");
            S(Q, ab, Z === "errorbars" ? Z : undefined);
        };
        Q[0].applyChange = function (ad) {
            var ab = Q[0].selectedObj,
                ac = ad.astr.replace(/_(x|y)/, "_?");
            if (((ac == "error_?.type") && ad.val == "data") || ac == "error_?.traceref" || ac == "error_?.tracerefminus") {
                m.ErrorBars.pushRef2GDC(Q[0].gd, ab, ad.astr, ad.val);
            }
            N(Q[0].gd, ad.astr, ad.val, ab < 0 ? null : ab);
            Q[0].redraw(ab);
        };
        S(Q, L, Z);
        var K = $(Tabs.get()).find(".tool-menu.tool-menu--plot").get(0).getBoundingClientRect();
        Q.draggable().css({
            top: K.top + K.height
        }).show();
        Q.find(".arrow").remove();
        var P = $(".tool-menu__btn-list:has(.js-traces-box)");
        P.find('.link--tool[class*="js-"]').removeClass("active").off("click.close");
        $(M).addClass("active");

        function Y() {
            $(M).removeClass("active");
            Q.find(".pickcolor").spectrum("destroy");
            Q.off("click.close");
            Q.remove();
            $(".spectrum-container").remove();
            $(".tipsy").remove();
            $(M).off("click.close");
            return false;
        }
        $(M).on("click.close", Y);
        Q.find("button.close").on("click.close", Y);
        $(".popover .dropdown-toggle").each(function (ac, ab) {
            var ad = $(ab).outerWidth();
            $(ab).next(".dropdown-menu").attr("style", function (ae, af) {
                return (af || "") + " min-width: " + ad + "px !important;";
            });
        });
    }

    function i(S, M, R, K, O) {
        var P = M.astr,
            N = M.get(),
            Q = $('<div class="editboxselector pickoption ' + (O || "") + '">' + ((R) ? ('<div class="editboxtitle">' + R + "</div>") : "") + '<div class="btn-group"></div></div>').appendTo(S),
            L = Q.find(".btn-group");
        K.forEach(function (U) {
            var T = $('<button class="btn btn--plain btn--small editboxbutton' + (N == U.val ? " active" : "") + '">' + U.name + "</button>").appendTo(L);
            if (N != U.val) {
                T.click(function () {
                    $(S).parents(".popover")[0].applyChange({
                        astr: P,
                        val: U.val
                    });
                });
            }
        });
        return Q[0];
    }
    h.dropdown = function (K, L) {
        return '<div class="editboxselector ' + K + '">' + ((L) ? ('<div class="editboxtitle">' + L + "</div>") : "") + '<div class="btn-group"><a class="btn btn--plain btn--small dropdown-toggle" data-toggle="dropdown" href="#"><span class="selected-val"></span><span class="caret"></span></a><ul class="dropdown-menu"></ul></div></div>';
    };

    function w(T, N, ae, L, aa, Q, ad) {
        var S = (L[0][0] === undefined) ? L[0].t : L[0][0].t;
        var ac = false;
        if (!aa) {
            aa = L;
            ac = true;
        }
        var W = $(h.dropdown("select-" + N, ae)).appendTo(T).get(0),
            ab = d3.select(W),
            P = $(T).parents(".popover"),
            U = {
                visible: "visible",
                mode: "mode",
                op: "opacity",
                ld: "line.dash",
                lc: "line.color",
                lw: "line.width",
                mx: "marker.symbol",
                mo: "marker.opacity",
                ms: "marker.size",
                mc: "marker.color",
                mlc: "marker.line.color",
                mlw: "marker.line.width",
                soc: "marker.outliercolor",
                solc: "marker.line.outliercolor",
                solw: "marker.line.outlierwidth"
            };

        function Y(af, ah) {
            var ag = af.select("ul").selectAll("li").data(ah).enter().append("li").append("a").on("click", function (al, ai) {
                var ak = Q || P[0].applyChange,
                    aj = {
                        popover: P,
                        d: al,
                        i: ai
                    };
                if (ad) {
                    aj.data = ad[ai];
                }
                if (U[N]) {
                    aj.astr = U[N];
                    aj.val = al[0].t[N];
                }
                ak(aj);
            });
            ag.call(H, P);
        }
        var O = (N === "mx");
        if (O) {
            ab.select("ul").classed("dropdown-menu--grid", true);
            var V = 9,
                M = [],
                K = 0;
            aa.forEach(function (af) {
                if (!M[K]) {
                    M.push([]);
                }
                M[K].push(af);
                if (M[K].length >= V) {
                    K++;
                }
            });
            var R = ab.select("ul").selectAll("li").data(M).enter().append("li");
            R.append("ul");
            R.each(function (af) {
                Y(d3.select(this), af);
            });
        } else {
            Y(ab, aa);
        } if (N != "trace" && L[0].t[N] == "various") {
            $(W).find(".btn-group .selected-val").html("Various");
        } else {
            if (!ac) {
                for (var X = 0; X < aa.length && aa[X][0].t[N] != L[0].t[N]; X++) {
                    X = X % aa.length;
                }
                try {
                    $(W).find(".btn-group .selected-val").html($(W).find(O ? "li ul li" : "li")[X].innerHTML);
                } catch (Z) {
                    console.log(Z);
                }
            }
        }
        $(W).find(".btn-group .selected-val").css({
            padding: "0px"
        });
        return W;
    }

    function I(S, Q, P, L, O, M) {
        var N = S.parents(".popover");
        var R = d3.select(S[0]).append("div").classed("pickoption", true).classed("editboxselector", true);
        if (M) {
            R.classed(M, true);
        }
        if (P) {
            R.append("div").classed("pull-left", true).classed("editboxtitle", true).html(P);
        }
        var K = R.append("div").classed("pull-left", true).classed("btn-group", true);
        K.selectAll("button").data(O).enter().append("button").classed("btn", true).classed("editboxbutton", true).classed("btn--plain", true).classed("active", function (T) {
            return T[0].t[Q] == L[0].t[Q];
        }).style("padding", "0").call(H, N).on("click", function (T) {
            if (T[0].t[Q] != L[0].t[Q]) {
                N[0].applyChange({
                    astr: Q,
                    val: T[0].t[Q]
                });
            }
        }).selectAll("svg").style("margin", "3px -5px -3px -2px");
        return R.node();
    }

    function H(L, N) {
        var K = 40,
            M = 20;
        L.append("svg").attr("width", K).attr("height", M).append("g").attr("transform", "translate(0," + M / 2 + ")").call(m.Legend.style);
        L.append("span").html(function (O) {
            return O[0].t.name + "&nbsp;";
        });
    }

    function A(T, M, Q, L, K, S) {
        var O = $(h.dropdown("select-layout", Q)).appendTo(T).get(0),
            R = d3.select(O),
            P = $(T).parents(".popover");
        O.attr = M;
        R.select("ul").selectAll("li").data(K).enter().append("li").append("a").html(function (U) {
            return U.name + "&nbsp;";
        }).on("click", function (W, U) {
            var V = S || P[0].applyChange;
            V({
                popover: P,
                astr: M,
                val: W.val,
                d: W,
                i: U
            });
        });
        for (var N = 0; N < K.length && K[N].val != L; N++) {}
        N = N % K.length;
        $(R.node()).find(".btn-group .selected-val").html($(R.node()).find("li")[N].innerHTML);
        return O;
    }

    function a(T, N, aa, R) {
        var L = N.astr,
            ab = N.get(),
            O = ["", "Arial, sans-serif", "Balto, sans-serif", "Courier New, monospace", "Droid Sans, sans-serif", "Droid Serif, serif", "Droid Sans Mono, sans-serif", "Gravitas One, cursive", "Old Standard TT, serif", "Open Sans, sans-serif", "PT Sans Narrow, sans-serif", "Raleway, sans-serif", "Times New Roman, Times, serif"];
        var X = [0, 8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 28, 32, 36];
        var U = $(h.dropdown("font-family", aa)).appendTo(T).get(0),
            Z = d3.select(U),
            Q = $(T).parents(".popover"),
            M = R || Q[0].applyChange;
        ab = ab || {
            family: "",
            size: 0,
            color: ""
        };
        var P = function (ac) {
            return (ac || "&lt;auto&gt;").replace(/^"/, "").replace(/[",].*$/, "");
        };
        var S = function (ac) {
            $(U).find(".btn-group .selected-val").first().html("<span>" + P(ac) + "</span>").css({
                "font-family": ac,
                width: "120px"
            });
        };
        U.attr = L;
        Z.select("ul").selectAll("li").data(O).enter().append("li").append("a").attr("href", "#").style("font-family", function (ac) {
            return ac;
        }).html(P).on("click", function (ad, ac) {
            S(ad);
            M({
                popover: Q,
                astr: L + ".family",
                val: ad,
                d: ad,
                i: ac
            });
            d3.event.preventDefault();
        });
        S(ab.family);
        var W = $(h.dropdown("font-size", "")).appendTo(U).get(0),
            K = d3.select(W);
        var V = function (ac) {
            return ac || "auto";
        };
        var Y = function (ac) {
            $(W).find(".btn-group .selected-val").html("<span>" + V(ac) + "</span>").css({
                "min-width": "35px"
            });
        };
        W.attr = L;
        K.select("ul").selectAll("li").data(X).enter().append("li").on("click", function (ad, ac) {
            Y(ad);
            M({
                popover: Q,
                astr: L + ".size",
                val: ad,
                d: ad,
                i: ac
            });
        }).append("a").style("font-size", function (ac) {
            return (ac || 14) + "px";
        }).html(V);
        Y(ab.size);
        B(U, {
            astr: L + ".color",
            get: function () {
                return ab.color;
            }
        }, "", aa + " Color");
        return U;
    }

    function B(N, R, Q, O, L) {
        var M = R.astr,
            P = R.get();
        var K = $('<div class="editboxselector">' + ((Q) ? ('<div class="editboxtitle">' + Q + "</div>") : "") + '<input class="pickcolor" type="text" /></div>').appendTo(N);
        K.find("input").spectrum({
            color: P,
            showInput: true,
            showInitial: false,
            showAlpha: true,
            localStorageKey: "spectrum.palette",
            showPalette: true,
            showPaletteOnly: false,
            showSelectionPalette: true,
            clickoutFiresChange: true,
            cancelText: "Cancel",
            chooseText: O ? ("Set " + O) : "OK",
            showButtons: true,
            preferredFormat: "rgb",
            maxSelectionSize: 16,
            palette: [m.Plots.defaultColors, ["rgb(0, 0, 0)", "rgb(67, 67, 67)", "rgb(102, 102, 102)", "rgb(204, 204, 204)", "rgb(217, 217, 217)", "rgb(255, 255, 255)"],
                ["rgb(152, 0, 0)", "rgb(255, 0, 0)", "rgb(255, 153, 0)", "rgb(255, 255, 0)", "rgb(0, 255, 0)", "rgb(0, 255, 255)", "rgb(74, 134, 232)", "rgb(0, 0, 255)", "rgb(153, 0, 255)", "rgb(255, 0, 255)"],
                ["rgb(230, 184, 175)", "rgb(244, 204, 204)", "rgb(252, 229, 205)", "rgb(255, 242, 204)", "rgb(217, 234, 211)", "rgb(208, 224, 227)", "rgb(201, 218, 248)", "rgb(207, 226, 243)", "rgb(217, 210, 233)", "rgb(234, 209, 220)", "rgb(221, 126, 107)", "rgb(234, 153, 153)", "rgb(249, 203, 156)", "rgb(255, 229, 153)", "rgb(182, 215, 168)", "rgb(162, 196, 201)", "rgb(164, 194, 244)", "rgb(159, 197, 232)", "rgb(180, 167, 214)", "rgb(213, 166, 189)", "rgb(204, 65, 37)", "rgb(224, 102, 102)", "rgb(246, 178, 107)", "rgb(255, 217, 102)", "rgb(147, 196, 125)", "rgb(118, 165, 175)", "rgb(109, 158, 235)", "rgb(111, 168, 220)", "rgb(142, 124, 195)", "rgb(194, 123, 160)", "rgb(166, 28, 0)", "rgb(204, 0, 0)", "rgb(230, 145, 56)", "rgb(241, 194, 50)", "rgb(106, 168, 79)", "rgb(69, 129, 142)", "rgb(60, 120, 216)", "rgb(61, 133, 198)", "rgb(103, 78, 167)", "rgb(166, 77, 121)", "rgb(91, 15, 0)", "rgb(102, 0, 0)", "rgb(120, 63, 4)", "rgb(127, 96, 0)", "rgb(39, 78, 19)", "rgb(12, 52, 61)", "rgb(28, 69, 135)", "rgb(7, 55, 99)", "rgb(32, 18, 77)", "rgb(76, 17, 48)"]
            ],
            change: function (S) {
                if (M == "mincolor" || M == "maxcolor") {
                    var T = L;
                    if (typeof (T) == "string") {
                        T = JSON.parse(T);
                    }
                    T = [
                        [0, T[0][1]],
                        [1, T[T.length - 1][1]]
                    ];
                    if (M == "mincolor") {
                        T[0][1] = S.toRgbString();
                    } else {
                        if (M == "maxcolor") {
                            T[1][1] = S.toRgbString();
                        }
                    }
                    K.parents(".popover")[0].applyChange({
                        astr: "scl",
                        val: [T]
                    });
                } else {
                    K.parents(".popover")[0].applyChange({
                        astr: M,
                        val: S.toRgbString()
                    });
                }
            }
        });
        return K[0];
    }

    function f(aa, L, W, K, M, T, X) {
        var O = L.astr,
            N = L.get();
        var V = function (ab) {
            if (ab == "various" || ab == "?") {
                return "?";
            }
            var ac = ab / Math.pow(10, M);
            if ((!$.isNumeric(ab) || ac == K[0]) && T) {
                return T;
            }
            return ac;
        };
        var S = function (ab) {
            if (T && ab == T) {
                return K[0] * Math.pow(10, M);
            }
            return ((ab == "various" || ab == "?") ? (K[0] + K[1]) / 2 : ab) * Math.pow(10, M);
        };
        var P = function (ab) {
            var ac = U.convertfrominput(ab);
            if (ac == K[0] && X) {
                ac = T;
            }
            Z.find(".slider-val").val(ab);
            Q[0].applyChange({
                astr: O,
                val: ac
            });
        };
        var U = n(K[0], K[1], T);
        var R = (N == "various" ? "?" : U.converttoinput(N));
        var Z = $('<div class="editboxselector pickslider">' + ((W) ? ('<div class="editboxtitle">' + W + "</div>") : "") + '<input type="text" class="input slider-val" value="' + R + '"/><button class="btn btn--icon slider-up" width="100%"><i class="icon-plus"></i></button><button class="btn btn--icon slider-dn" width="100%"><i class="icon-minus"></i></button><div class="slider"></div></div>').appendTo(aa);
        var Q = Z.parents(".popover");
        var Y = function (ab) {
            return function () {
                var ac = Z.children(".slider-val").val();
                if (ac == T) {
                    return;
                }
                var ad = ab(parseFloat(ac), Math.pow(10, -M));
                ad = m.Lib.constrain(ad, K[0] + Math.pow(10, -M), K[1]);
                P(ad);
            };
        };
        Z.children(".slider-up").click(Y(function (ab, ac) {
            return ab + ac;
        }));
        Z.children(".slider-dn").click(Y(function (ab, ac) {
            return ab - ac;
        }));
        Z.children(".slider").slider({
            min: S(K[0]),
            max: S(K[1]),
            value: S(N),
            slide: function (ad, ac) {
                var ab = V(ac.value);
                Z.children(".slider-val").val(ab);
            },
            stop: function (ac, ab) {
                P(V(ab.value));
            }
        });
        Z.children(".slider-val").blur(function () {
            var ac = this.value,
                ab = U.convertfrominput(ac);
            if (ac == R) {
                return;
            }
            $(this).css("border", "");
            if (ac === "") {
                this.value = R;
            } else {
                if (U.test(ac)) {
                    Z.find(".slider").slider("value", S(ab));
                    P(ac);
                } else {
                    $(this).css("border", "1px solid red");
                    $(this).tooltip({
                        placement: "right",
                        title: U.errortext
                    }).tooltip("show");
                }
            }
        });
        return Z[0];
    }

    function q(K, M, L) {
        return f(K, M, L, [-190, 180], -1, "auto", true);
    }

    function k(U, K, Q, R, S) {
        var N = K.astr,
            M = K.get(),
            P = $(U).parents(".popover"),
            T = $('<div class="editboxselector select-layout ' + (S || "") + '">' + ((Q) ? ('<div class="editboxtitle">' + Q + "</div>") : "") + '<input class="input inputtext" type="text" /></div>').appendTo(U),
            L = T.find("input");
        if (R) {
            var O = M == "various" ? "?" : (R.converttoinput ? R.converttoinput(M) : M);
            L.val(O).blur(R, function () {
                var V = this.value;
                if (V == O) {
                    return;
                }
                $(this).css("border", "");
                if (V === "") {
                    this.value = O;
                } else {
                    if (!R.test || R.test(V)) {
                        P[0].applyChange({
                            astr: N,
                            val: R.convertfrominput ? R.convertfrominput(V) : V
                        });
                    } else {
                        $(this).css({
                            border: "1px solid red"
                        }).tooltip({
                            placement: "right",
                            title: R.errortext
                        }).tooltip("show");
                    }
                }
            });
        } else {
            L.attr("disabled", true);
        }
        return T[0];
    }

    function c() {
        return {
            test: function (K) {
                return typeof (JSON.parse(K)) == "object";
            },
            errortext: "This is doesn't look like a valid array",
            converttoinput: function (K) {
                return (K === null) ? "" : JSON.stringify(K);
            },
            convertfrominput: function (K) {
                return [JSON.parse(K)];
            }
        };
    }

    function n(K, M, L) {
        return {
            test: function (N) {
                return (N == L) || ($.isNumeric(N) && N >= K && N <= M);
            },
            errortext: "Must be between " + String(K) + " and " + String(M),
            converttoinput: function (N) {
                if (N === null) {
                    return "";
                } else {
                    if (N === K && L) {
                        return L;
                    } else {
                        return String(N);
                    }
                }
            },
            convertfrominput: function (N) {
                if (N == L) {
                    return K;
                } else {
                    return Number(N);
                }
            }
        };
    }

    function E(L, K) {
        if (L == "date") {
            return {
                test: m.Lib.isDateTime,
                errortext: 'Must be a date-time (eg "2012-12-31 19:33:01.234", may be truncated)',
                converttoinput: m.Lib.ms2DateTime,
                convertfrominput: m.Lib.dateTime2ms
            };
        } else {
            if (L == "log" && !K) {
                return {
                    test: function (M) {
                        return (M > 0);
                    },
                    errortext: "Must be a positive number",
                    converttoinput: function (M) {
                        return (M === null) ? "" : String(Math.pow(10, M));
                    },
                    convertfrominput: function (M) {
                        return Math.log(Number(M) > 0 ? Number(M) : 1e-10) / Math.LN10;
                    }
                };
            } else {
                if (["linear", "category", "log", "-"].indexOf(L) != -1) {
                    return {
                        test: $.isNumeric,
                        errortext: "Must be a number",
                        converttoinput: function (M) {
                            return (M === null) ? "" : String(M);
                        },
                        convertfrominput: function (M) {
                            return Number(M);
                        }
                    };
                } else {
                    return false;
                }
            }
        }
    }

    function t(L, M, K) {
        if (!K) {
            K = 0;
        }
        if (!L.data) {
            m.Lib.notifier("No data to style<br>Upload a file to graph.");
            return;
        }
        C(L, {
            pos: M,
            cls: "stylebox",
            content: G,
            apply: m.restyle,
            arg: K,
            tabs: ["Mode", "Range/bins", "Style", "Error bars", "Color bar", "Color bar ticks"]
        });
    }

    function G(O, Q) {
        var V = O[0].gd,
            L, W = 0,
            T = $.extend(true, [], V.data),
            Z = T.map(function (ab, aa) {
                return aa;
            });
        T.forEach(function (ab, aa) {
            ab.selected = aa;
        });
        if (T.length > 1) {
            var P = {};
            T.forEach(function (ac, aa) {
                var ab = ac.type || "scatter";
                P[ab] = (P[ab] || []).concat(aa);
            });
            var U = [$.extend(true, {}, T[0], {
                    name: "All Traces",
                    type: "various",
                    selected: Z
                })],
                Y = Object.keys(P);
            if (Y.length > 1) {
                Y.forEach(function (aa) {
                    U.push($.extend(true, {}, T[P[aa][0]], {
                        name: "All " + aa,
                        type: aa,
                        selected: P[aa]
                    }));
                });
            } else {
                U[0].name += " (" + Y[0] + ")";
                U[0].type = Y[0];
            }
            T = U.concat(T);
            W = U.length;
        }
        var S = T.map(function (ab, aa) {
            ab.name = (ab.name || ("Trace " + ab.selected)).replace(/[\s\n\r]+/gm, " ").replace(/^([A-z0-9\-_]+[\/:])?[0-9]+[\/:]/, "");
            ab.text = ab.text ? "T" : "";
            if (m.Plots.isScatter(ab.type) && !ab.mode && !$.isArray(ab.selected)) {
                ab.mode = V.calcdata[ab.selected][0].t.mode;
                T.forEach(function (ac) {
                    if ($.isArray(ac.selected) && ac.selected[0] === ab.selected) {
                        ac.mode = ab.mode;
                    }
                });
            }
            return [{
                t: {
                    selected: ab.selected,
                    curve: aa,
                    name: ab.name
                }
            }];
        });
        m.Plots.setStyles({
            data: T,
            calcdata: S,
            layout: V.layout
        }, true);

        function M(aa, ac) {
            var ad = m.Lib.nestedProperty(aa, ac),
                ab = ad.get();
            if ($.isPlainObject(ab)) {
                Object.keys(ab).forEach(function (ae) {
                    M(aa, ac + "." + ae);
                });
            } else {
                if ($.isArray(ab)) {
                    ad.set("various");
                } else {
                    if (aa.selected.some(function (ae) {
                        var af = m.Lib.nestedProperty(T[ae + W], ac);
                        return af.get() !== ab;
                    })) {
                        ad.set("various");
                    }
                }
            }
        }
        if (W) {
            var K = ["name", "uid", "selected", "x", "y", "z"];
            for (L = 0; L < W; L++) {
                var N = T[L];
                Object.keys(N).forEach(function (aa) {
                    if (K.indexOf(aa) === -1) {
                        M(N, aa);
                    }
                });
            }
            m.Plots.setStyles({
                data: T,
                calcdata: S,
                layout: V.layout
            });
        }
        var X = O.find(".trace-dropdown");
        w(X.html(""), "trace", "", S, null, r, T);
        var R = 0;
        for (L = T.length - 1; L > 0; L--) {
            if (String(T[L].selected) === String(Q)) {
                R = L;
                break;
            }
        }
        r({
            popover: O,
            d: S[R],
            data: T[R],
            i: R
        });
    }

    function r(al) {
        var at = al.d,
            aL = al.data,
            Y = (aL.visible !== false),
            aA = aL.type,
            ai = at[0].t,
            aq = al.popover,
            aU = aq[0].gd,
            aH, aP = aU.layout,
            ad;
        aq.find(".select-trace .selected-val").html(aq.find(".select-trace li > a")[al.i].innerHTML);
        var aw = aL.selected;
        aq[0].selectedObj = aw;

        function aF(a5) {
            return m.Lib.nestedProperty(aL, a5);
        }

        function aJ(a5) {
            return m.Lib.nestedProperty(aP, a5);
        }
        if ($(".spectrum-container").length) {
            aq.find(".pickcolor").spectrum("destroy");
        }
        var aO = aq.find("#stylebox-0").html(""),
            ax = aq.find("#stylebox-1").html(""),
            aN = aq.find("#stylebox-2").html(""),
            a2 = aq.find("#stylebox-3").html(""),
            a4 = aq.find("#stylebox-4").html(""),
            ak = aq.find("#stylebox-5").html("");
        i(aO, aF("visible"), "Visible?", [{
            name: "Show",
            val: true
        }, {
            name: "Hide",
            val: false
        }]);
        if (Y && !m.Plots.isHeatmap(aA)) {
            i(aO, aF("showlegend"), "Legend", [{
                name: "Show",
                val: true
            }, {
                name: "Hide",
                val: false
            }]);
        }
        var an = i(aO, aF("swapxy"), "Swap", [{
            name: "X&Y data",
            val: true
        }]);
        i(an, aF("swapxyaxes"), "", [{
            name: "Data & axis config",
            val: true
        }]);
        var aK = m.Axes.list(aU, "x").map(d),
            ap = m.Axes.list(aU, "y").map(d);
        var aV = i(aO, aF("xaxis"), "Axes", aK);
        i(aV, aF("yaxis"), "", ap);
        $('<div class="editboxselector btn-group"><button class="btn btn--plain">New Axis/Subplot...</button></div>').appendTo(aV).find(".btn").click(function () {
            x(aU, aq, aw);
        });
        if (aA === "heatmap" || aA === "contour") {
            i(aO, aF("type"), "Type", [{
                name: "Heatmap",
                val: "heatmap"
            }, {
                name: "Contour map",
                val: "contour"
            }]);
        } else {
            i(aO, aF("type"), "Type", [{
                name: "Scatter",
                val: "scatter"
            }, {
                name: "Bar",
                val: "bar"
            }, {
                name: "Box",
                val: "box"
            }, {
                name: "Histogram",
                val: "histogram"
            }], "grouptop");
            i(aO, aF("type"), "2D Hist.", [{
                name: "Heatmap",
                val: "histogram2d"
            }, {
                name: "Contour map",
                val: "histogram2dcontour"
            }], "groupbottom");
        }
        f(aN, aF("opacity"), "Opacity", [0, 1], 2);
        if (["scatter", "box", undefined].indexOf(aA) != -1) {
            var av = (aA === "box"),
                aI = aL.mode;
            if (av) {
                i(aO, aF("boxpoints"), "Show Points", [{
                    name: "All",
                    val: "all"
                }, {
                    name: "None",
                    val: false
                }, {
                    name: "All outliers",
                    val: "outliers"
                }, {
                    name: "Outliers & suspected",
                    val: "suspectedoutliers"
                }]);
                i(aO, aF("boxmean"), "Show Mean", [{
                    name: "On",
                    val: true
                }, {
                    name: "With &sigma;",
                    val: "sd"
                }, {
                    name: "Off",
                    val: false
                }]);
                i(aO, m.Lib.nestedProperty(aP, "boxmode"), "Mode", [{
                    name: "Group",
                    val: "group"
                }, {
                    name: "Overlay",
                    val: "overlay"
                }]);
                f(aN, aJ("boxgap"), "Box Gap", [0, 1], 2);
                f(aN, aJ("boxgroupgap"), "Group Gap", [0, 1], 2);
                f(aN, aF("whiskerwidth"), "Whisker Width", [0, 1], 2);
            } else {
                I(aO, "mode", "Lines/Markers", at, J(ai, [{
                    mode: "none"
                }, {
                    mode: "lines"
                }, {
                    mode: "markers"
                }, {
                    mode: "lines+markers"
                }], {
                    name: ""
                }), aL.text ? "grouptop" : null);
                if (aL.text) {
                    I(aO, "mode", "&nbsp;", at, J(ai, [{
                        mode: "text"
                    }, {
                        mode: "lines+text"
                    }, {
                        mode: "markers+text"
                    }, {
                        mode: "lines+markers+text"
                    }], {
                        name: ""
                    }), "groupbottom");
                }
                i(aO, aF("fill"), "Fill To", [{
                    name: "None",
                    val: "none"
                }, {
                    name: "Y=0",
                    val: "tozeroy"
                }, {
                    name: "X=0",
                    val: "tozerox"
                }, {
                    name: "Next Y",
                    val: "tonexty"
                }, {
                    name: "Next X",
                    val: "tonextx"
                }]);
            } if (av || aL.fill != "none") {
                B(aO, aF("fillcolor"), (av ? "Fill" : "...") + " Color", "Fill Color");
            }
            if (!av && aI.indexOf("text") != -1) {
                a(aN, aF("textfont"), "Text");
                i(aN, aF("textposition"), "... Position", [{
                    name: "&#x2196;",
                    val: "top left"
                }, {
                    name: "&#x2191;",
                    val: "top center"
                }, {
                    name: "&#x2197;",
                    val: "top right"
                }], "grouptop pickgrid");
                i(aN, aF("textposition"), "&nbsp;", [{
                    name: "&#x2190;",
                    val: "middle left"
                }, {
                    name: "&#x25CB;",
                    val: "middle center"
                }, {
                    name: "&#x2192;",
                    val: "middle right"
                }], "grouptop groupbottom pickgrid");
                i(aN, aF("textposition"), "&nbsp;", [{
                    name: "&#x2199;",
                    val: "bottom left"
                }, {
                    name: "&#x2193;",
                    val: "bottom center"
                }, {
                    name: "&#x2198;",
                    val: "bottom right"
                }], "groupbottom pickgrid");
            }
            var aS;
            if (!av && (aI.indexOf("lines") !== -1 || aI === "various")) {
                aS = w(aN, "ld", "Line", at, J(ai, [{
                    ld: "solid"
                }, {
                    ld: "dot"
                }, {
                    ld: "dash"
                }, {
                    ld: "longdash"
                }, {
                    ld: "dashdot"
                }, {
                    ld: "longdashdot"
                }], {
                    mode: "lines",
                    fill: "none",
                    name: ""
                }));
                aq.find(".select-ld svg").attr("width", "70").find("path.js-line").attr("d", "M5,0h60");
                aq.find(".select-ld svg path.js-fill").attr("d", "M5,0h60v6h-60z");
            } else {
                aS = aN;
            } if (av || aI.indexOf("lines") !== -1 || aI === "various") {
                aS = w(aS, "lw", av ? "Box line" : "", at, J(ai, [{
                    lw: 0.5,
                    name: "0.5"
                }, {
                    lw: 1,
                    name: "1"
                }, {
                    lw: 2,
                    name: "2"
                }, {
                    lw: 3,
                    name: "3"
                }, {
                    lw: 4,
                    name: "4"
                }, {
                    lw: 6,
                    name: "6"
                }], {
                    mode: "lines",
                    fill: "none",
                    type: "scatter"
                }));
                B(aS, aF("line.color"), "", (av ? "Box " : "") + "Line Color");
                if (!av) {
                    i(aN, aF("line.shape"), "Shape", [{
                        name: '<div style="line-height:20px;">&nbsp;&#x2571;&nbsp;</div>',
                        val: "linear"
                    }, {
                        name: '<div style="line-height:20px;">&#x256d;&#x256f;</div>',
                        val: "spline"
                    }, {
                        name: '<div style="line-height:20px;">&nbsp;&#x23cc;</div>',
                        val: "hv"
                    }, {
                        name: '<div style="line-height:20px;">&#x23be&nbsp;</div>',
                        val: "vh"
                    }, {
                        name: '<div style="line-height:20px;transform:rotate(90deg);-webkit-transform:rotate(90deg);-moz-transform:rotate(90deg);-ms-transform:rotate(90deg);-o-transform:rotate(90deg);">&#x2517;&#x2513;</div>',
                        val: "hvh"
                    }, {
                        name: '<div style="line-height:20px;">&#x250f;&#x251b;</div>',
                        val: "vhv"
                    }]);
                    if (aL.line.shape === "spline") {
                        f(aN, aF("line.smoothing"), "Smoothing", [0, 1.3], 1);
                    }
                    i(aN, aF("connectgaps"), "Data Gaps", [{
                        name: "Connect",
                        val: true
                    }, {
                        name: "Blank",
                        val: false
                    }]);
                }
            }
            if (av ? aL.boxpoints : (aI.indexOf("markers") != -1 || aI == "various")) {
                if (ai.msarray) {
                    var af = i(aN, aF("marker.sizemode"), "Bubble Scale", [{
                        name: "Diameter",
                        val: "diameter"
                    }, {
                        name: "Area",
                        val: "area"
                    }]);
                    k(af, aF("marker.sizeref"), "&nbsp;1 px =&nbsp;", n(0, Infinity), "side-by-side");
                }
                var T = ai.mlw > 0,
                    M = [],
                    Q = [],
                    a1 = [],
                    aY = [];
                m.Drawing.symbolNames.forEach(function (a6, a5) {
                    if (T || !m.Drawing.symbolNeedLines[a5]) {
                        M.push({
                            mx: a6
                        });
                    }
                    Q.push({
                        mx: a6 + "-open"
                    });
                    if (!m.Drawing.symbolNoDot[a5]) {
                        if (T) {
                            a1.push({
                                mx: a6 + "-dot"
                            });
                        }
                        aY.push({
                            mx: a6 + "-open-dot"
                        });
                    }
                });
                var ao = w(aN, "mx", (av ? "Outlier " : "") + "Marker", at, J(ai, M.concat(Q, a1, aY), {
                    mode: "markers",
                    fill: "none",
                    name: "",
                    type: "scatter"
                }));
                d3.select(ao).selectAll("svg").attr("width", 25).selectAll(".scatterpts").attr("transform", "translate(12,0)");
                if (!ai.msarray) {
                    w(ao, "ms", "", at, J(ai, [{
                        ms: 2,
                        name: "2"
                    }, {
                        ms: 3,
                        name: "3"
                    }, {
                        ms: 4,
                        name: "4"
                    }, {
                        ms: 6,
                        name: "6"
                    }, {
                        ms: 8,
                        name: "8"
                    }, {
                        ms: 12,
                        name: "12"
                    }, {
                        ms: 16,
                        name: "16"
                    }], {
                        mode: "markers",
                        fill: "none",
                        type: "scatter"
                    }));
                }
                if (ai.mcarray) {
                    var ac = i(aN, aF("marker.cauto"), "Color Data Range", [{
                        name: "Auto",
                        val: true
                    }, {
                        name: "Manual",
                        val: false
                    }]);
                    k(ac, aF("marker.cmin"), "", n(-Infinity, Infinity));
                    k(ac, aF("marker.cmax"), "", n(-Infinity, Infinity));
                    var P = $('<div class="editboxselector"></div>').appendTo(aN);
                    for (ad in m.colorscales) {
                        v(P, "marker.colorscale", ad);
                    }
                } else {
                    B(ao, aF("marker.color"), "", "Marker Color");
                } if (!av) {
                    f(aN, aF("marker.maxdisplayed"), "... Max # Displayed", [0, 200], 0, "all");
                }
                f(aN, aF("marker.opacity"), "... Opacity", [0, 1], 2);
                if (av) {
                    f(aN, aF("jitter"), "... Jitter", [0, 1], 1);
                    f(aN, aF("pointpos"), "... Offset", [-2, 2], 1);
                }
                var O = w(aN, "mlw", "Marker line", at, J(ai, [{
                    mlw: 0,
                    name: "0"
                }, {
                    mlw: 0.5,
                    name: "0.5"
                }, {
                    mlw: 1,
                    name: "1"
                }, {
                    mlw: 2,
                    name: "2"
                }, {
                    mlw: 3,
                    name: "3"
                }], {
                    mode: "markers",
                    fill: "none",
                    type: "scatter"
                }));
                B(O, aF("marker.line.color"), "", "Marker Line Color");
            }
            if (av && ["suspectedoutliers", "various"].indexOf(aL.boxpoints) !== -1) {
                B(aN, aF("marker.outliercolor"), "Suspected Outlier Color", "Marker Color");
                var aM = w(aN, "solw", "... Line", J(at, [{}])[0][0].t, J(ai, [{
                    mlw: 0,
                    solw: 0,
                    name: "0"
                }, {
                    mlw: 0.5,
                    solw: 0.5,
                    name: "0.5"
                }, {
                    mlw: 1,
                    solw: 1,
                    name: "1"
                }, {
                    mlw: 2,
                    solw: 2,
                    name: "2"
                }, {
                    mlw: 3,
                    solw: 3,
                    name: "3"
                }], {
                    mode: "markers",
                    fill: "none",
                    mc: ai.soc,
                    mlc: ai.solc,
                    type: "scatter"
                }));
                B(aM, aF("marker.line.outliercolor"), "", "Suspected Outlier Line Color");
            }
        } else {
            if (m.Plots.isBar(aA)) {
                i(aO, aJ("barmode"), "Mode", [{
                    name: "Stack",
                    val: "stack"
                }, {
                    name: "Group",
                    val: "group"
                }, {
                    name: "Overlay",
                    val: "overlay"
                }]);
                var ag = i(aO, aF("orientation"), "Direction", [{
                    name: "Vert.",
                    val: "v"
                }, {
                    name: "Horz.",
                    val: "h"
                }]);
                i(ag, aF("orientationaxes"), "", [{
                    name: "Flip bars & axis config",
                    val: true
                }]);
                f(aN, aJ("bargap"), "Bar Gap", [0, 1], 2);
                f(aN, aJ("bargroupgap"), "Group Gap", [0, 1], 2);
                if (aA === "histogram") {
                    var ay = aL.orientation == "h" ? "y" : "x",
                        U = {
                            x: "(Y)",
                            y: "(X)"
                        }[ay];
                    counterarray = {
                        x: "yarray",
                        y: "xarray"
                    }[ay];
                    if (ai[counterarray]) {
                        i(ax, aF("histfunc"), "Bin Function", [{
                            name: "Count",
                            val: "count"
                        }, {
                            name: "&Sigma;" + U,
                            val: "sum"
                        }, {
                            name: "Avg" + U,
                            val: "avg"
                        }, {
                            name: "Min" + U,
                            val: "min"
                        }, {
                            name: "Max" + U,
                            val: "max"
                        }]);
                    }
                    i(ax, aF("histnorm"), "Normalization", [{
                        name: "None",
                        val: ""
                    }, {
                        name: "%",
                        val: "percent"
                    }, {
                        name: "p",
                        val: "probability"
                    }, {
                        name: "1/&Delta;x",
                        val: "density"
                    }, {
                        name: "p/&Delta;x",
                        val: "probability density"
                    }]);
                    i(ax, aF("autobin" + ay), "Bins", [{
                        name: "Auto",
                        val: true
                    }, {
                        name: "Manual",
                        val: false
                    }]);
                    if (aL["autobin" + ay] !== false) {
                        f(ax, aF("nbins" + ay), "Max # bins", [0, 100], 0, "auto");
                    } else {
                        var S = k(ax, aF(ay + "bins.start"), "Range", E(aP.xaxis.type, "nolog"));
                        k(S, aF(ay + "bins.end"), "", E(aP.xaxis.type, "nolog"));
                        k(ax, aF(ay + "bins.size"), "Bin size", E("linear"));
                    }
                }
                B(aN, aF("marker.color"), "Fill", "Bar Color");
                var R = w(aN, "mlw", "Border", at, J(ai, [{
                    mlw: 0,
                    name: "0"
                }, {
                    mlw: 0.5,
                    name: "0.5"
                }, {
                    mlw: 1,
                    name: "1"
                }, {
                    mlw: 2,
                    name: "2"
                }, {
                    mlw: 3,
                    name: "3"
                }], {
                    mode: "markers"
                }));
                B(R, aF("marker.line.color"), "", "Border Color");
            } else {
                if (m.Plots.isHeatmap(aA)) {
                    if (m.Plots.isHist2D(aA)) {
                        if (ai.zarray || ai.mcarray) {
                            var au = "Bin Function" + (ai.zarray ? "" : "<br>(Marker Color)");
                            i(ax, aF("histfunc"), au, [{
                                name: "Count",
                                val: "count"
                            }, {
                                name: "&Sigma;(Z)",
                                val: "sum"
                            }, {
                                name: "Avg(Z)",
                                val: "avg"
                            }, {
                                name: "Min(Z)",
                                val: "min"
                            }, {
                                name: "Max(Z)",
                                val: "max"
                            }]);
                        }
                        i(ax, aF("histnorm"), "Normalization", [{
                            name: "None",
                            val: ""
                        }, {
                            name: "%",
                            val: "percent"
                        }, {
                            name: "p",
                            val: "probability"
                        }, {
                            name: "1/&Delta;A",
                            val: "density"
                        }, {
                            name: "p/&Delta;A",
                            val: "probability density"
                        }]);
                        i(ax, aF("autobinx"), "X bins", [{
                            name: "Auto",
                            val: true
                        }, {
                            name: "Manual",
                            val: false
                        }]);
                        if (aL.autobinx !== false) {
                            f(ax, aF("nbinsx"), "Max # X bins", [0, 100], 0, "auto");
                        } else {
                            var aR = k(ax, aF("xbins.start"), "X range", E(aP.xaxis.type, "nolog"));
                            k(aR, aF("xbins.end"), "", E(aP.xaxis.type, "nolog"));
                            k(ax, aF("xbins.size"), "X bin size", E("linear"));
                        }
                        i(ax, aF("autobiny"), "Y bins", [{
                            name: "Auto",
                            val: true
                        }, {
                            name: "Manual",
                            val: false
                        }]);
                        if (aL.autobiny !== false) {
                            f(ax, aF("nbinsy"), "... Max #", [0, 100], 0, "auto");
                        } else {
                            var aC = k(ax, aF("ybins.start"), "Y range", E(aP.yaxis.type, "nolog"));
                            k(aC, aF("ybins.end"), "", E(aP.yaxis.type, "nolog"));
                            k(ax, aF("ybins.size"), "Y bin size", E("linear"));
                        }
                    } else {
                        if (aL.xtype !== "noarray") {
                            i(ax, aF("xtype"), "X Values", [{
                                name: "Array",
                                val: "array"
                            }, {
                                name: "Scaled",
                                val: "scaled"
                            }]);
                        }
                        if (aL.xtype !== "array") {
                            var am = k(ax, aF("x0"), "x0 / dx", E(aP.xaxis.type, "nolog"));
                            k(am, aF("dx"), "", E("linear"));
                        }
                        if (aL.ytype !== "noarray") {
                            i(ax, aF("ytype"), "Y Values", [{
                                name: "Array",
                                val: "array"
                            }, {
                                name: "Scaled",
                                val: "scaled"
                            }]);
                        }
                        if (aL.ytype !== "array") {
                            var Z = k(ax, aF("y0"), "y0 / dy", E(aP.yaxis.type, "nolog"));
                            k(Z, aF("dy"), "", E("linear"));
                        }
                    } if (m.Plots.isContour(aA)) {
                        i(ax, aF("autocontour"), "Contours", [{
                            name: "Auto",
                            val: true
                        }, {
                            name: "Manual",
                            val: false
                        }]);
                        if (aL.autocontour !== false) {
                            f(ax, aF("ncontours"), "... Max #", [0, 100], 0, "auto");
                        } else {
                            var K = k(ax, aF("contours.start"), "... Range", E("linear"));
                            k(K, aF("contours.end"), "", E("linear"));
                            k(ax, aF("contours.size"), "... Size", E("linear"));
                        }
                    }
                    if (!m.Plots.isContour(aA) || aL.contours.coloring === "heatmap") {
                        var aj = i(ax, aF("zauto"), "Z range", [{
                            name: "Auto",
                            val: true
                        }, {
                            name: "Manual",
                            val: false
                        }]);
                        k(aj, aF("zmin"), "", E("linear"));
                        k(aj, aF("zmax"), "", E("linear"));
                    }
                    var az = $('<div class="editboxselector"></div>').appendTo(aN);
                    for (ad in m.colorscales) {
                        v(az, "colorscale", ad);
                    }
                    var aT = aL.colorscale;
                    if (typeof aT === "string") {
                        try {
                            aT = m.colorscales[aT] || JSON.parse(aT);
                        } catch (ar) {
                            aT = m.defaultColorscale;
                        }
                    }
                    var V = aT[0][1],
                        aG = aT[aT.length - 1][1];
                    var ae = B(aN, {
                        astr: "mincolor",
                        get: function () {
                            return V;
                        }
                    }, "Min/max color", "Min color", aT);
                    B(ae, {
                        astr: "maxcolor",
                        get: function () {
                            return aG;
                        }
                    }, "", "Max color", aT);
                    var a0 = k(aN, aF("colorscale"), "Scale", c());
                    i(a0, aF("reversescale"), "", [{
                        name: "Normal",
                        val: false
                    }, {
                        name: "Reversed",
                        val: true
                    }]);
                    if (m.Plots.isContour(aA)) {
                        i(aN, aF("contours.coloring"), "Coloring", [{
                            name: "Fill",
                            val: "fill"
                        }, {
                            name: "Heatmap",
                            val: "heatmap"
                        }, {
                            name: "Lines",
                            val: "lines"
                        }, {
                            name: "None",
                            val: "none"
                        }]);
                        if (aL.contours.coloring === "fill") {
                            i(aN, aF("contours.showlines"), "Lines", [{
                                name: "Show",
                                val: true
                            }, {
                                name: "Hide",
                                val: false
                            }]);
                        }
                        if (aL.contours.showlines !== false) {
                            var a3 = w(aN, "ld", "Line", at, J(ai, [{
                                ld: "solid"
                            }, {
                                ld: "dot"
                            }, {
                                ld: "dash"
                            }, {
                                ld: "longdash"
                            }, {
                                ld: "dashdot"
                            }, {
                                ld: "longdashdot"
                            }], {
                                mode: "lines",
                                fill: "none",
                                name: "",
                                type: "scatter"
                            }));
                            $(a3).find(".select-ld svg").attr("width", "70").find("path.js-line").attr("d", "M5,0h60");
                            $(a3).find(".select-ld svg path.js-fill").attr("d", "M5,0h60v6h-60z");
                            w(a3, "lw", "", at, J(ai, [{
                                lw: 0.5,
                                name: "0.5"
                            }, {
                                lw: 1,
                                name: "1"
                            }, {
                                lw: 2,
                                name: "2"
                            }, {
                                lw: 3,
                                name: "3"
                            }, {
                                lw: 4,
                                name: "4"
                            }, {
                                lw: 6,
                                name: "6"
                            }], {
                                mode: "lines",
                                fill: "none",
                                type: "scatter"
                            }));
                            if (aL.contours.coloring !== "lines") {
                                B(a3, aF("line.color"), "", "Line Color");
                            }
                            f(aN, aF("line.smoothing"), "Smoothing", [0, 1.3], 1);
                        }
                    } else {
                        i(aN, aF("zsmooth"), "Smooth color", [{
                            name: "Fast",
                            val: "fast"
                        }, {
                            name: "Off",
                            val: false
                        }, {
                            name: "Best",
                            val: "best"
                        }]);
                    } if (Y) {
                        i(a4, aF("showscale"), "Color bar", [{
                            name: "Show",
                            val: true
                        }, {
                            name: "Hide",
                            val: false
                        }]);
                    }
                    if (Y && aL.showscale) {
                        a(a4, aF("colorbar.titlefont"), "Title Font");
                        i(a4, aF("colorbar.titleside"), "Title Side", [{
                            name: "Right",
                            val: "right"
                        }, {
                            name: "Top",
                            val: "top"
                        }, {
                            name: "Bottom",
                            val: "bottom"
                        }]);
                        var aE = k(a4, aF("colorbar.thickness"), "Thickness", n(0, aL.colorbar.thicknessmode === "fraction" ? 2 : 500));
                        i(aE, aF("colorbar.thicknessmode"), "", [{
                            name: "Pixels",
                            val: "pixels"
                        }, {
                            name: "Plot fraction",
                            val: "fraction"
                        }]);
                        var aD = k(a4, aF("colorbar.len"), "Length", n(0, aL.colorbar.lengthmode === "fraction" ? 2 : 2000));
                        i(aD, aF("colorbar.lenmode"), "", [{
                            name: "Pixels",
                            val: "pixels"
                        }, {
                            name: "Plot fraction",
                            val: "fraction"
                        }]);
                        var aQ = B(a4, aF("colorbar.outlinecolor"), "Outline", "Outline Color");
                        f(aQ, aF("colorbar.outlinewidth"), "", [0, 10], 1);
                        i(a4, aF("colorbar.xanchor"), "Horz anchor", [{
                            name: "Left",
                            val: "left"
                        }, {
                            name: "Center",
                            val: "center"
                        }, {
                            name: "Right",
                            val: "right"
                        }]);
                        i(a4, aF("colorbar.yanchor"), "Vert anchor", [{
                            name: "Top",
                            val: "top"
                        }, {
                            name: "Middle",
                            val: "middle"
                        }, {
                            name: "Bottom",
                            val: "bottom"
                        }]);
                        f(a4, aF("colorbar.xpad"), "Horz padding", [0, 50], 0);
                        f(a4, aF("colorbar.ypad"), "Vert padding", [0, 50], 0);
                        var X = B(a4, aF("colorbar.bordercolor"), "Border", "Border Color");
                        f(X, aF("colorbar.borderwidth"), "", [0, 10], 1);
                        B(a4, aF("colorbar.bgcolor"), "Background", "Background Color");
                        a(ak, aF("colorbar.tickfont"), "Tick Font");
                        i(ak, aF("colorbar.autotick"), "Values", [{
                            name: "Auto",
                            val: true
                        }, {
                            name: "Manual",
                            val: false
                        }]);
                        if (aL.colorbar.autotick) {
                            f(ak, aF("colorbar.nticks"), "Max #", [0, 50], 0, "auto");
                        } else {
                            k(ak, aF("colorbar.tick0"), "Reference", E("linear"));
                            k(ak, aF("colorbar.dtick"), "Spacing", E("linear"));
                        }
                        i(ak, aF("colorbar.ticks"), "Position", [{
                            name: "Outside",
                            val: "outside"
                        }, {
                            name: "Inside",
                            val: "inside"
                        }, {
                            name: "None",
                            val: ""
                        }]);
                        if (aL.colorbar.ticks !== "") {
                            f(ak, aF("colorbar.ticklen"), "Length", [1, 20], 0);
                            f(ak, aF("colorbar.tickwidth"), "Width", [0.1, 10], 1);
                            B(ak, aF("colorbar.tickcolor"), "Color", "Tick Color");
                        }
                        i(ak, aF("colorbar.showticklabels"), "Tick Labels", [{
                            name: "On",
                            val: true
                        }, {
                            name: "Off",
                            val: false
                        }]);
                        if (aL.colorbar.showticklabels !== false) {
                            q(ak, aF("colorbar.tickangle"), "Angle");
                            i(ak, aF("colorbar.exponentformat"), "Exponents", [{
                                name: "000",
                                val: "none"
                            }, {
                                name: "e+6",
                                val: "e"
                            }, {
                                name: "E+6",
                                val: "E"
                            }, {
                                name: "&times;10<sup>6</sup>",
                                val: "power"
                            }, {
                                name: "k/M/G",
                                val: "SI"
                            }, {
                                name: "k/M/B",
                                val: "B"
                            }]);
                            i(ak, aF("colorbar.showexponent"), "Show Exp", [{
                                name: "All",
                                val: "all"
                            }, {
                                name: "First",
                                val: "first"
                            }, {
                                name: "Last",
                                val: "last"
                            }, {
                                name: "None",
                                val: "none"
                            }]);
                        }
                    }
                }
            }
        } if (m.Plots.isScatter(aA) || m.Plots.isBar(aA)) {
            var aa = function (a5) {
                    var a7 = "";
                    try {
                        a7 = aU.calcdata[a5][0].t.name;
                    } catch (a6) {}
                    return a7 || "Trace " + String(a5);
                },
                aX = aU.calcdata.map(function (a6, a5) {
                    return {
                        ye_tref: String(a5),
                        ye_trefminus: String(a5),
                        xe_tref: String(a5),
                        xe_trefminus: String(a5),
                        name: aa(a5)
                    };
                }),
                aZ, N;
            i(a2, aF("error_y.visible"), "Y Errors", [{
                name: "Show",
                val: true
            }, {
                name: "Hide",
                val: false
            }]);
            if (aL.error_y.visible !== false) {
                aZ = i(a2, aF("error_y.type"), "Value", [{
                    name: "%",
                    val: "percent"
                }, {
                    name: "+/-",
                    val: "constant"
                }, {
                    name: "&#8730;",
                    val: "sqrt"
                }, {
                    name: "Data",
                    val: "data"
                }]);
                var aB = aL.error_y.type,
                    L = aL.error_y.symmetric;
                if (aB !== "sqrt") {
                    N = i(a2, aF("error_y.symmetric"), "Minus value", [{
                        name: "Same as +",
                        val: true
                    }, {
                        name: "Different",
                        val: false
                    }]);
                    if (aB === "percent") {
                        k(aZ, aF("error_y.value"), "", n(0, Infinity));
                        if (!L) {
                            k(N, aF("error_y.valueminus"), "", n(0, Infinity));
                        }
                    } else {
                        if (aB === "constant") {
                            k(aZ, aF("error_y.value"), "", n(0, Infinity));
                            if (!L) {
                                k(N, aF("error_y.valueminus"), "", n(0, Infinity));
                            }
                        } else {
                            if (aB === "data") {
                                m.ErrorBars.styleBoxDrop(aZ, "ye_tref", "", at, J(ai, aX), "", false);
                                if (!L) {
                                    m.ErrorBars.styleBoxDrop(N, "ye_trefminus", "", at, J(ai, aX), "", false);
                                }
                            }
                        }
                    }
                }
                var aW = m.ErrorBars.styleBoxDrop(a2, "ye_tkns", "Line", at, J(ai, [{
                    ye_tkns: 0.5,
                    name: "0.5"
                }, {
                    ye_tkns: 1,
                    name: "1"
                }, {
                    ye_tkns: 2,
                    name: "2"
                }, {
                    ye_tkns: 3,
                    name: "3"
                }, {
                    ye_tkns: 4,
                    name: "4"
                }, {
                    ye_tkns: 6,
                    name: "6"
                }]), "", "stroke-width", true);
                B(aW, aF("error_y.color"), "", "error bar color");
                m.ErrorBars.styleBoxDrop(a2, "ye_w", "Width", at, J(ai, [{
                    ye_w: 0,
                    name: "0"
                }, {
                    ye_w: 2,
                    name: "2"
                }, {
                    ye_w: 4,
                    name: "4"
                }, {
                    ye_w: 6,
                    name: "6"
                }, {
                    ye_w: 8,
                    name: "8"
                }, {
                    ye_w: 10,
                    name: "10"
                }, {
                    ye_w: 12,
                    name: "12"
                }]), "", "", false);
            }
            i(a2, aF("error_x.visible"), "X Errors", [{
                name: "Show",
                val: true
            }, {
                name: "Hide",
                val: false
            }]);
            if (aL.error_x.visible !== false) {
                aZ = i(a2, aF("error_x.type"), "Value", [{
                    name: "%",
                    val: "percent"
                }, {
                    name: "+/-",
                    val: "constant"
                }, {
                    name: "&#8730;",
                    val: "sqrt"
                }, {
                    name: "Data",
                    val: "data"
                }]);
                var ah = aL.error_x.type,
                    W = aL.error_x.symmetric;
                if (ah !== "sqrt") {
                    N = i(a2, aF("error_x.symmetric"), "Minus value", [{
                        name: "Same as +",
                        val: true
                    }, {
                        name: "Different",
                        val: false
                    }]);
                    if (ah === "percent") {
                        k(aZ, aF("error_x.value"), "", n(0, Infinity));
                        if (!W) {
                            k(N, aF("error_x.valueminus"), "", n(0, Infinity));
                        }
                    } else {
                        if (ah === "constant") {
                            k(aZ, aF("error_x.value"), "", n(0, Infinity));
                            if (!W) {
                                k(N, aF("error_x.valueminus"), "", n(0, Infinity));
                            }
                        } else {
                            if (ah === "data") {
                                m.ErrorBars.styleBoxDrop(aZ, "xe_tref", "", at, J(ai, aX), "", false);
                                if (!W) {
                                    m.ErrorBars.styleBoxDrop(N, "xe_trefminus", "", at, J(ai, aX), "", false);
                                }
                            }
                        }
                    }
                }
                i(a2, aF("error_x.copy_ystyle"), "Style", [{
                    name: "Copy Y",
                    val: true
                }, {
                    name: "Independent",
                    val: false
                }]);
                if (aL.error_x.copy_ystyle === false) {
                    var ab = m.ErrorBars.styleBoxDrop(a2, "xe_tkns", "Line", at, J(ai, [{
                        xe_tkns: 0.5,
                        name: "0.5"
                    }, {
                        xe_tkns: 1,
                        name: "1"
                    }, {
                        xe_tkns: 2,
                        name: "2"
                    }, {
                        xe_tkns: 3,
                        name: "3"
                    }, {
                        xe_tkns: 4,
                        name: "4"
                    }, {
                        xe_tkns: 6,
                        name: "6"
                    }]), "", "stroke-width", true);
                    B(ab, aF("error_x.color"), "", "error bar color");
                    m.ErrorBars.styleBoxDrop(a2, "xe_w", "Width", at, J(ai, [{
                        xe_w: 0,
                        name: "0"
                    }, {
                        xe_w: 2,
                        name: "2"
                    }, {
                        xe_w: 4,
                        name: "4"
                    }, {
                        xe_w: 6,
                        name: "6"
                    }, {
                        xe_w: 8,
                        name: "8"
                    }, {
                        xe_w: 10,
                        name: "10"
                    }, {
                        xe_w: 12,
                        name: "12"
                    }]), "", "", false);
                }
            }
        }
        aq.find('a[href="#stylebox-1"]').closest("li").css("display", ax.find("div").length ? "" : "none");
        aq.find('a[href="#stylebox-2"]').closest("li").css("display", aN.find("div").length ? "" : "none");
        aq.find('a[href="#stylebox-3"]').closest("li").css("display", a2.find("div").length ? "" : "none");
        aq.find('a[href="#stylebox-4"]').closest("li").css("display", a4.find("div").length ? "" : "none");
        aq.find('a[href="#stylebox-5"]').closest("li").css("display", ak.find("div").length ? "" : "none");
    }

    function v(M, L, O) {
        var K = $('<button class="editboxbutton gradient active ' + O + '"></button></div>').appendTo(M),
            N = m.colorscales[O];
        K.click(function () {
            M.parents(".popover")[0].applyChange({
                astr: L,
                val: [N]
            });
        });
    }

    function J(K, Q, P) {
        if ($.isPlainObject(Q)) {
            Q = [Q];
        }
        var L = [],
            M, N;
        for (M in Q) {
            var O = {};
            for (N in K) {
                O[N] = (N in Q[M]) ? Q[M][N] : K[N];
            }
            for (N in P) {
                O[N] = P[N];
            }
            L.push([{
                t: O
            }]);
        }
        return L;
    }

    function z(K, L) {
        C(K, {
            pos: L,
            cls: "layoutbox",
            content: p,
            tabs: ["General", "Margins"]
        });
    }

    function p(N) {
        var M = N[0].gd,
            Q = M.layout,
            P = N.find(".trace-dropdown").html(""),
            K = N.find("#layoutbox-0").html(""),
            O = N.find("#layoutbox-1").html("");

        function L(S) {
            return m.Lib.nestedProperty(Q, S);
        }
        a(K, L("font"), "Global Font");
        a(K, L("titlefont"), "Title Font");
        i(K, L("autosize"), "Autosize", [{
            name: "On",
            val: true
        }, {
            name: "Off",
            val: false
        }]);
        k(K, L("width"), "Width", n(10, 10000));
        k(K, L("height"), "Height", n(10, 10000));
        B(K, L("plot_bgcolor"), "Plot Color", "Plot Color");
        i(K, L("separators"), "# Format", [{
            name: "1,234.0",
            val: ".,"
        }, {
            name: "1.234,0",
            val: ",."
        }, {
            name: "1 234.0",
            val: ". "
        }, {
            name: "1 234,0",
            val: ", "
        }, {
            name: "1234.0",
            val: "."
        }]);
        if (M.shouldshowsources) {
            i(K, L("hidesources"), "Source links", [{
                name: "Show",
                val: false
            }, {
                name: "Hide",
                val: true
            }]);
        }
        B(O, L("paper_bgcolor"), "Margin Color", "Margin Color");
        k(O, L("margin.t"), "&nbsp;", n(0, 1000), "inputcenter");
        var R = k(O, L("margin.l"), "Margins", n(0, 1000));
        k(R, L("margin.r"), "", n(0, 1000));
        k(O, L("margin.b"), "&nbsp;", n(0, 1000), "inputcenter");
        i(O, L("margin.autoexpand"), "Auto Expand", [{
            name: "On",
            val: true
        }, {
            name: "Off",
            val: false
        }]);
        f(O, L("margin.pad"), "Plot Padding", [0, 20], 0);
    }

    function y(M, N, L) {
        C(M, {
            pos: N,
            cls: "axesbox",
            content: K,
            arg: L || "allaxes",
            tabs: ["Range", "Lines", "Ticks", "Labels", "Layout"]
        });

        function K(R, Q) {
            var T = M.layout;
            var S = [{
                    name: "All Axes",
                    val: "allaxes"
                }].concat(m.Axes.list(M).map(function (V) {
                    return {
                        name: V._id.charAt(0).toUpperCase() + " Axis" + (V._id.length > 1 ? " " + V._id.substr(1) : ""),
                        val: V._name
                    };
                })),
                O = R.find(".trace-dropdown").html("");
            R[0].axes = S;
            var P = {},
                U = 0;
            S.forEach(function (V, W) {
                if (V.val == Q) {
                    P = V;
                    U = W;
                }
            });
            if (Q) {
                R[0].axis = Q;
            } else {
                Q = R[0].axis;
            }
            A(O, "", "", P, S, j);
            O.append('<button class="btn btn--plain btn--neighbor js-axes-button js-new-axis"><i class="icon-plus"></i></button><button class="btn btn--plain btn--neighbor js-axes-button js-delete-axis"><i class="icon-minus"></i></button>');
            O.find(".js-delete-axis").click(function (Z) {
                var W = R[0].selectedObj,
                    V = W.charAt(0),
                    Y = m.Axes.list(M, V);
                if (W == "allaxes") {
                    return m.Lib.notifier("Select a single axis to remove");
                }
                if (Y.length == 1) {
                    return m.Lib.notifier("Cannot remove the last " + V.toUpperCase() + " axis.");
                }
                var X = [];
                (M.data || []).forEach(function (ab, aa) {
                    if (ab[V + "axis"] == T[W]._id) {
                        X.push(aa);
                    }
                });
                if (X.length) {
                    m.restyle(M, V + "axis", Y[0]._name, X);
                }
                m.relayout(M, W, null);
                R[0].redraw();
            });
            O.find(".js-new-axis").click(function () {
                x(M, R);
            });
            j({
                popover: R,
                d: P,
                i: U
            });
        }
    }

    function j(at) {
        var ay = at.d,
            ap = at.popover,
            aw = ap.find("#axesbox-0").html(""),
            X = ap.find("#axesbox-1").html(""),
            ai = ap.find("#axesbox-2").html(""),
            K = ap.find("#axesbox-3").html(""),
            ab = ap.find("#axesbox-4").html(""),
            P = ay.val,
            Z = ap[0].gd,
            V = Z.layout,
            aq = ap[0].axes,
            ax, ar;
        ap.find(".trace-dropdown .selected-val").html(ap.find(".trace-dropdown li > a")[at.i].innerHTML);

        function af(aA, aD) {
            if (!aD) {
                aD = P;
            }
            if (aD == aq[0].val) {
                var aF = af(aA, aq[1].val);
                if ($.isPlainObject(aF)) {
                    var aE = Object.keys(aF);
                    for (ax = 0; ax < aE.length; ax++) {
                        var aC = aE[ax];
                        aF[aC] = af(aA + "." + aC, aD);
                    }
                } else {
                    for (ax = 2; ax < aq.length; ax++) {
                        if (af(aA, aq[ax].val) != aF) {
                            return null;
                        }
                    }
                }
                return aF;
            } else {
                var aB = m.Lib.nestedProperty(V, aD + "." + aA).get();
                if (aB == "-" && aA == "type") {
                    return "linear";
                } else {
                    return aB;
                }
            }
        }

        function al(aA, aB) {
            if (typeof aB === "undefined") {
                aB = af(aA);
            }
            return {
                astr: P + "." + aA,
                get: function () {
                    return aB;
                }
            };
        }
        ap[0].axis = P;
        ap[0].selectedObj = P;
        var N = al("type"),
            S = af("type"),
            M = P.charAt(0),
            ao = m.Axes.list(Z, M).filter(function (aA) {
                return aA._id != m.Axes.name2id(P);
            }),
            an = m.Axes.list(Z, {
                x: "y",
                y: "x"
            }[M]);
        i(aw, al("type"), "Type", [{
            name: "Linear",
            val: "linear"
        }, {
            name: "Log",
            val: "log"
        }, {
            name: "DateTime",
            val: "date"
        }, {
            name: "Category",
            val: "category"
        }]);
        var W = i(aw, al("autorange"), "Autorange", [{
            name: "On",
            val: true
        }, {
            name: "Off",
            val: false
        }]);
        i(W, al("rangemode"), "", [{
            name: "Normal",
            val: "normal"
        }, {
            name: "With Zero",
            val: "tozero"
        }, {
            name: "Non-negative",
            val: "nonnegative"
        }]);
        var ad = k(aw, al("range[0]"), "Range", E(S));
        k(ad, al("range[1]"), "", E(S));
        i(ad, al("reverse"), "", [{
            name: "Reverse",
            val: true
        }]);
        var aa = al("showline");
        var ak = i(X, aa, "Axis Line", [{
            name: "On",
            val: true
        }, {
            name: "Off",
            val: false
        }]);
        if (aa.get() !== false) {
            B(ak, al("linecolor"), "", "Line Color");
            f(ak, al("linewidth"), "", [0.1, 10], 1);
        }
        i(X, al("mirror"), "Mirror", [{
            name: "On",
            val: true
        }, {
            name: "With Ticks",
            val: "ticks"
        }, {
            name: "Off",
            val: false
        }].concat(an.length > 1 ? [{
            name: "All",
            val: "all"
        }, {
            name: "All + Ticks",
            val: "allticks"
        }] : []));
        var ae = al("showgrid");
        var ah = i(X, ae, "Grid Lines", [{
            name: "On",
            val: true
        }, {
            name: "Off",
            val: false
        }]);
        if (ae.get() !== false) {
            B(ah, al("gridcolor"), "", "Grid Color");
            f(ah, al("gridwidth"), "", [0.1, 10], 1);
        }
        var O = al("zeroline");
        var am = i(X, O, "Zero Line", [{
            name: "On",
            val: true
        }, {
            name: "Off",
            val: false
        }]);
        if (O.get() !== false) {
            B(am, al("zerolinecolor"), "", "Zero Line Color");
            f(am, al("zerolinewidth"), "", [0.1, 10], 1);
        }
        var Q = al("autotick"),
            ag = Q.get(),
            T = [{
                name: "Auto",
                val: true
            }];
        if (["linear", "-", "category"].indexOf(S) != -1) {
            T.push({
                name: "Manual",
                val: false
            });
        }
        i(ai, Q, "Values", T);
        if (ag && S !== "category") {
            f(ai, al("nticks"), "Max #", [0, 50], 0, "auto");
        } else {
            if (!ag && ["linear", "-", "category"].indexOf(S) != -1) {
                k(ai, al("tick0"), "Reference", E(S));
                k(ai, al("dtick"), "Spacing", E(S));
            }
        }
        var az = al("ticks");
        i(ai, az, "Position", [{
            name: "Outside",
            val: "outside"
        }, {
            name: "Inside",
            val: "inside"
        }, {
            name: "None",
            val: ""
        }]);
        if (az.get() !== "") {
            f(ai, al("ticklen"), "Length", [1, 20], 0);
            f(ai, al("tickwidth"), "Width", [0.1, 10], 1);
            B(ai, al("tickcolor"), "Color", "Tick Color");
        }
        a(K, al("titlefont"), "Title Font");
        a(K, al("tickfont"), "Tick Font");
        var L = al("showticklabels");
        i(K, L, "Tick Labels", [{
            name: "On",
            val: true
        }, {
            name: "Off",
            val: false
        }]);
        if (L.get() !== false) {
            q(K, al("tickangle"), "Angle");
            if (S === "linear" || S === "log") {
                i(K, al("exponentformat"), "Exponents", [{
                    name: "000",
                    val: "none"
                }, {
                    name: "e+6",
                    val: "e"
                }, {
                    name: "E+6",
                    val: "E"
                }, {
                    name: "&times;10<sup>6</sup>",
                    val: "power"
                }, {
                    name: "k/M/G",
                    val: "SI"
                }, {
                    name: "k/M/B",
                    val: "B"
                }]);
                i(K, al("showexponent"), "Show Exp", [{
                    name: "All",
                    val: "all"
                }, {
                    name: "First",
                    val: "first"
                }, {
                    name: "Last",
                    val: "last"
                }, {
                    name: "None",
                    val: "none"
                }]);
            } else {
                if (S === "date") {
                    k(K, al("tickformat"), "Custom date format", "freeform");
                    k(K, al("hoverformat"), "Hover format", "freeform");
                }
            }
        }
        if (M != "a" && an.length) {
            var ac = al("anchor"),
                R = ac.get();
            var Y = i(ab, ac, "Anchor to", [{
                name: "Free",
                val: "free"
            }].concat(an.map(d)));
            i(Y, al("side", af("side") || {
                x: "bottom",
                y: "left"
            }[M]), "", M == "x" ? [{
                name: "Bottom",
                val: "bottom"
            }, {
                name: "Top",
                val: "top"
            }] : [{
                name: "Left",
                val: "left"
            }, {
                name: "Right",
                val: "right"
            }]);
            if (R === "free") {
                f(ab, al("position", af("position") || 0), "Position", [0, 1], 2);
            }
            var U = al("overlaying");
            if (ao.length) {
                i(ab, U, "Overlaying", [{
                    name: "None",
                    val: false
                }].concat(ao.filter(function (aA) {
                    return !aA.overlaying;
                }).map(d)));
            }
            if (!(U.get() && ao.length)) {
                var av = af("domain[0]"),
                    au = af("domain[1]");
                var aj = f(ab, al("domain[0]"), "Span", [0, Math.min(0.98, au - 0.01)], 2);
                f(aj, al("domain[1]"), "", [Math.max(0.02, av + 0.01), 1], 2);
            }
        } else {
            ab.html("<p>Select a single axis to edit its layout properties</p>");
        }
    }

    function d(K) {
        return {
            name: K._id.toUpperCase(),
            val: K._id
        };
    }

    function l(N, K) {
        var L = K + "axis",
            M = 1;
        while (N.layout[L]) {
            M++;
            L = K + "axis" + M;
        }
        return L.replace("axis", "");
    }

    function x(Q, L, M) {
        if ($.isNumeric(M)) {
            M = [M];
        }
        var R = $("#newAxesModal"),
            S = m.Axes.getSubplots(Q),
            N = M && M.length ? Q.data[M[0]] : "",
            T = N && ("For trace: " + N.name + (M.length > 1 ? (" and " + (M.length - 1) + " more") : "")),
            K = R.find("#new-axes-base-subplot").html(""),
            P = N ? N.xaxis + N.yaxis : S[0];
        R.find("#new-axes-tracename").text(T);
        if (S.length > 1) {
            var O = K.html('<p>Based on: <div class="btn-group"></div></p>').find(".btn-group");
            S.forEach(function (U) {
                $('<button class="btn" data-subplotid="' + U + '">' + U.toUpperCase() + "</button>").appendTo(O).toggleClass("active", U == P).click(function () {
                    $(this).parent().find(".btn").removeClass("active");
                    $(this).addClass("active");
                });
            });
        }
        R.find("#new-axes-go").unbind("click.plotly").bind("click.plotly", function () {
            var V = R.find('input[name="new-axes"]:checked').val(),
                ae = (K.find(".active").attr("data-subplotid") || "xy").match(/^(x[0-9]*)(y[0-9]*)$/),
                Y = Q.layout[m.Axes.id2name(ae[1])],
                X = Q.layout[m.Axes.id2name(ae[2])],
                ab = function (ag) {
                    return (1 - ag) * Y.domain[0] + ag * Y.domain[1];
                },
                aa = function (ag) {
                    return (1 - ag) * X.domain[0] + ag * X.domain[1];
                },
                W = l(Q, "x"),
                Z = l(Q, "y"),
                af, ad, ac = {},
                U = {};
            if (V == "right-y") {
                ad = m.Axes.defaultAxis({
                    overlaying: X._id,
                    side: "right",
                    anchor: Y._id
                });
            } else {
                if (V == "stacked-y") {
                    ad = m.Axes.defaultAxis({
                        anchor: Y._id,
                        domain: [aa(0.55), aa(1)]
                    });
                    ac[X._name + ".domain[1]"] = aa(0.45);
                } else {
                    if (V == "free-y") {
                        ad = m.Axes.defaultAxis({
                            overlaying: X._id,
                            side: "left",
                            anchor: "free",
                            position: ab(0)
                        });
                        ac[Y._name + ".domain[0]"] = ab(0.1);
                    } else {
                        if (V == "top-x") {
                            af = m.Axes.defaultAxis({
                                overlaying: Y._id,
                                side: "top",
                                anchor: X._id
                            });
                        } else {
                            if (V == "side-x") {
                                af = m.Axes.defaultAxis({
                                    anchor: X._id,
                                    domain: [ab(0.55), ab(1)]
                                });
                                ac[Y._name + ".domain[1]"] = ab(0.45);
                            } else {
                                if (V == "free-x") {
                                    af = m.Axes.defaultAxis({
                                        overlaying: Y._id,
                                        side: "bottom",
                                        anchor: "free",
                                        position: aa(0)
                                    });
                                    ac[X._name + ".domain[0]"] = aa(0.1);
                                } else {
                                    if (V == "stacked-subplot") {
                                        af = m.Axes.defaultAxis({
                                            anchor: Z,
                                            domain: Y.domain.slice()
                                        });
                                        ad = m.Axes.defaultAxis({
                                            anchor: W,
                                            domain: [aa(0.55), aa(1)]
                                        });
                                        ac[X._name + ".domain[1]"] = aa(0.45);
                                    } else {
                                        if (V == "side-subplot") {
                                            af = m.Axes.defaultAxis({
                                                anchor: Z,
                                                domain: [ab(0.55), ab(1)]
                                            });
                                            ad = m.Axes.defaultAxis({
                                                anchor: W,
                                                domain: X.domain.slice()
                                            });
                                            ac[Y._name + ".domain[1]"] = ab(0.45);
                                        } else {
                                            if (V == "inset-subplot") {
                                                af = m.Axes.defaultAxis({
                                                    anchor: Z,
                                                    domain: [ab(0.6), ab(0.95)]
                                                });
                                                ad = m.Axes.defaultAxis({
                                                    anchor: W,
                                                    domain: [aa(0.6), aa(0.95)]
                                                });
                                            } else {
                                                console.log("unrecognized axtype");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } if (af) {
                ac[m.Axes.id2name(W)] = af;
                U.xaxis = W;
            }
            if (ad) {
                ac[m.Axes.id2name(Z)] = ad;
                U.yaxis = Z;
            }
            m.relayout(Q, ac).then(function () {
                if (M) {
                    m.restyle(Q, U, M);
                }
            });
            L[0].redraw(M || (af && m.Axes.id2name(W)) || (ad && m.Axes.id2name(Z)));
        });
        R.modal("show");
    }

    function e(K, L) {
        m.Legend.draw(K);
        C(K, {
            pos: L,
            cls: "legendbox",
            content: F
        });
    }

    function F(O) {
        var N = O[0].gd,
            Q = N.layout,
            P = O.find(".trace-dropdown").html(""),
            L = O.find("#legendbox-0").html("");

        function M(R) {
            return m.Lib.nestedProperty(Q, R);
        }
        i(L, M("showlegend"), "Visible?", [{
            name: "Show",
            val: true
        }, {
            name: "Hide",
            val: false
        }]);
        i(L, M("legend.traceorder"), "Trace order", [{
            name: "Normal",
            val: "normal"
        }, {
            name: "Reversed",
            val: "reversed"
        }]);
        a(L, M("legend.font"), "Font");
        B(L, M("legend.bgcolor"), "Background", "Legend Background");
        var K = B(L, M("legend.bordercolor"), "Border", "Legend Border");
        f(K, M("legend.borderwidth"), "", [0, 10], 1);
        i(L, M("legend.xanchor"), "Horz anchor", [{
            val: "auto",
            name: "Auto"
        }, {
            val: "left",
            name: "Left"
        }, {
            val: "center",
            name: "Center"
        }, {
            val: "right",
            name: "Right"
        }]);
        i(L, M("legend.yanchor"), "Vert anchor", [{
            val: "auto",
            name: "Auto"
        }, {
            val: "top",
            name: "Top"
        }, {
            val: "middle",
            name: "Middle"
        }, {
            val: "bottom",
            name: "Bottom"
        }]);
    }

    function s(M, O, N) {
        var L = M.layout.annotations || [];
        if (!$.isNumeric(N) || N > L.length) {
            N = L.length;
        }

        function K(T, R) {
            var P = T.find(".trace-dropdown").html(""),
                U = M.layout.annotations || [];
            if (U.length) {
                var S = [D(M)],
                    Q = $(h.dropdown("select-ann")).appendTo(P),
                    V = d3.select(Q[0]);
                S.push.apply(S, U);
                V.select("ul").selectAll("li").data(S).enter().append("li").on("click", u).append("a").html(function (Y, X) {
                    var W = Y.text.replace(/<br>/, " ");
                    return (X ? (X + ": ") : "") + W.substr(0, 16) + (W.length > 16 ? "..." : "");
                });
                u.call(Q.find("li")[R], S[R], R);
            } else {
                T.find("#annotationstyles-0,#annotationstyles-1").html('<p>Click "<b>+</b>" to add an annotation</p>');
            }
            P.append('<button class="btn btn--plain btn--neighbor js-new-ann"><i class="icon-plus"></i></button><button class="btn btn--plain btn--neighbor js-delete-ann"><b><i class="icon-minus"></i></b></button>');
            P.find(".js-delete-ann").click(function (X) {
                var W = T[0].selectedObj - 1;
                m.relayout(M, "annotations[" + W + "]", "remove");
                T.remove();
                s(M, O, W + 1);
                m.Lib.pauseEvent(X);
            });
            P.find(".js-new-ann").click(function (W) {
                m.Annotations.add(M);
                T.remove();
                s(M, O);
                m.Lib.pauseEvent(W);
            });
        }
        C(M, {
            pos: O,
            cls: "annotationstyles",
            content: K,
            arg: N,
            tabs: ["General", "Text"]
        });
    }

    function D(M) {
        var O = {},
            N = M.layout.annotations;
        for (var L = 0; L < N.length; L++) {
            for (var K in N[L]) {
                if (O[K] === undefined) {
                    O[K] = N[L][K];
                } else {
                    if (O[K] != N[L][K]) {
                        O[K] = "various";
                    }
                }
            }
        }
        O.text = "All Annotations";
        return O;
    }

    function u(X, S) {
        var W = $(this).parents(".popover"),
            L = $(this).parents(".btn-group");
        L.find(".selected-val").html(L.find("li")[S].innerHTML);
        W[0].selectedObj = S;
        if ($(".spectrum-container").length) {
            W.find(".pickcolor").spectrum("destroy");
        }

        function V(ac) {
            var ad = ac._id,
                ab = ad.charAt(0).toUpperCase() + " axis" + (ad.length > 1 ? (" " + ad.substr(1)) : "");
            return {
                name: ab,
                val: ad
            };
        }

        function Q(ab) {
            return {
                name: ab.toUpperCase(),
                val: ab
            };
        }
        var K = $(".annotation-complex-ref").length ? $(".annotation-complex-ref").filter(function () {
            return $(this).css("display") == "block";
        }).length > 0 : ((X.xref == "paper") != (X.yref == "paper"));
        var T = W.find("#annotationstyles-0").html(""),
            U = W.find("#annotationstyles-1").html(""),
            Z = "annotations[" + (S - 1) + "].",
            aa = W[0].gd,
            P = [{
                name: "Page",
                val: "paper"
            }].concat(m.Axes.list(aa, "x").map(V)),
            N = [{
                name: "Page",
                val: "paper"
            }].concat(m.Axes.list(aa, "y").map(V)),
            O = [{
                name: "Page",
                val: "paper"
            }].concat(m.Axes.getSubplots(aa).map(Q));
        if (P.length == 2) {
            P[1].name = "Data";
        }
        if (N.length == 2) {
            N[1].name = "Data";
        }
        if (O.length == 2) {
            O[1].name = "Data";
        }

        function M(ab, ac) {
            if (typeof ac === "undefined") {
                ac = X[ab];
            }
            return {
                astr: Z + ab,
                get: function () {
                    return ac;
                }
            };
        }
        i(T, M("ref", (X.xref + X.yref).replace("paperpaper", "paper")), "Move with", O, "annotation-simple-ref");
        i(T, M("xref"), "Move X with", P, "annotation-complex-ref");
        i(T, M("yref"), "Move Y with", N, "annotation-complex-ref");
        $(".annotation-complex-ref").toggle(K);
        $(".annotation-simple-ref").append("<a>Advanced...</a>").find("a").click(function () {
            $(".annotation-complex-ref").toggle();
        });
        f(T, M("opacity"), "Opacity", [0, 1], 2);
        var Y = i(T, M("showarrow"), "Arrow", [{
            name: "Show",
            val: true
        }, {
            name: "Hide",
            val: false
        }]);
        if (X.showarrow) {
            B(Y, M("arrowcolor", X.arrowcolor || X.bordercolor || "#444"), "", "Arrow Color");
            f(Y, M("arrowwidth"), "", [0, 10], 1);
            A(T, Z + "arrowhead", "Arrowhead", X.arrowhead, m.Annotations.allArrowheads());
            m.Annotations.allArrowheads(T);
            $("[data-arrowhead]").parents(".selected-val").css({
                padding: "0px"
            });
            f(T, M("arrowsize"), "... Scale", [0.3, 3], 1);
        } else {
            i(T, M("xanchor"), "Horz anchor", [{
                val: "auto",
                name: "Auto"
            }, {
                val: "left",
                name: "Left"
            }, {
                val: "center",
                name: "Center"
            }, {
                val: "right",
                name: "Right"
            }]);
            i(T, M("yanchor"), "Vert anchor", [{
                val: "auto",
                name: "Auto"
            }, {
                val: "top",
                name: "Top"
            }, {
                val: "middle",
                name: "Middle"
            }, {
                val: "bottom",
                name: "Bottom"
            }]);
        }
        a(U, M("font"), "Font");
        i(U, M("align"), "Alignment", [{
            val: "left",
            name: '<i class="icon-align-left"></i>'
        }, {
            val: "center",
            name: '<i class="icon-align-center"></i>'
        }, {
            val: "right",
            name: '<i class="icon-align-right"></i>'
        }]);
        var R = B(U, M("bordercolor", X.bordercolor || "rgba(0,0,0,0)"), "Border", "Border Color");
        f(R, M("borderwidth"), "", [0, 10], 1);
        B(U, M("bgcolor"), "Background", "Background Color");
        f(U, M("borderpad"), "Padding", [0, 10], 1);
        q(U, M("textangle"), "Angle");
    }

    function o(L, N, K) {
        if (!L.data) {
            m.Lib.notifier("No data to fit<br>Upload a file to graph.");
            return false;
        }
        if (h.isPolar() || h.isGL3D(L)) {
            m.Lib.notifier("Fitting does not currently work with Polar Plots or 3D plots.", "long");
            return false;
        }
        var M = m.FitOps(L);
        C(L, {
            pos: N,
            cls: "fitbox",
            content: M.initPlotFit
        });
        return false;
    }
}());
"use strict";

function startGraphExport(c) {
    var j = $("#exportModal"),
        d = Plotly.Lib.fullFid((typeof c == "object") ? c.fid : c),
        a = d.split(":")[0],
        b = d ? fileNodes(d) : $(""),
        g = graphTitleText(c),
        e = j.find('input[name="export-size"]:checked').val(),
        h = j.find("#export-width"),
        f = j.find("#export-height");
    $(".download-format input").change(function () {
        if (typeSelected === "png") {
            j.find("#extra-resolution-option").removeClass("muted");
            j.find("#extra-resolution-checkbox").prop("disabled", false);
            j.find("#extra-resolution-option .radio__descrip").text("");
        } else {
            j.find("#extra-resolution-option").addClass("muted");
            j.find("#extra-resolution-checkbox").prop("disabled", true);
            j.find("#extra-resolution-option .radio__descrip").text("Only applies to PNG");
        }
    });
    $("#extra-resolution-option label").tipsy({
        gravity: "n"
    });
    j.find(".slider").slider({
        value: 3,
        min: 0,
        max: 10,
        step: 0.25,
        slide: function (l, k) {
            j.find(".slider-val").val(k.value);
        }
    });
    modalFilename(j, b, {
        filetype: "plot",
        title: g
    });
    j.modal("show");
    j.find("#include-url").prop("checked", false);
    if (b.attr("data-wr") == "1") {
        j.find("#include-url").attr("disabled", false).closest("div").removeClass("muted").find(".radio__descrip").text("");
    } else {
        j.find("#include-url").attr("disabled", true).closest("div").addClass("muted").find(".radio__descrip").text("Plot must be public to do this!");
    }
    j.find(".export__size-input").unbind("focus.share").bind("focus.share", function () {
        j.find('[value="choose"]').attr("checked", true);
    });

    function i() {
        if (!h.val() || e == "screen") {
            h.val(c.layout.width);
        }
        if (!f.val() || e == "screen") {
            f.val(c.layout.height);
        }
    }
    i();
    j.find('[value="screen"]').unbind("click.share").bind("click.share", i);
}

function sendToDrive() {
    alert("Stay tuned, Export to Drive is coming soon...");
}

function graphExport() {
    if (signedin() === false) {
        Plotly.Lib.notifier("You must be signed in<br>to export plots.");
        return;
    }
    var l = $("#exportModal"),
        j = l.find('input[name="download-format"]:checked').val(),
        g = l.find('input[name="export-size"]:checked').val(),
        f = l.find("#include-url").is(":checked"),
        i = l.find("#extra-resolution-checkbox").is(":checked"),
        k = Number(l.find("#export-width").val()),
        e = l.find("#export-height").val(),
        d = Tabs.get(),
        m = d.layout,
        c = Plotly.Lib.fullFid(d.fid),
        a = getgraphinfo(c).url,
        n = {},
        b;
    if (g === "choose") {
        n.width = k || e / 0.75;
        n.height = e || k * 0.75;
    } else {
        if (g === "screen") {
            n.width = m.width;
            n.height = m.height;
        }
    } if (i) {
        b = parseFloat(l.find(".slider-val").val());
    } else {
        b = 1;
    }
    n._thinTex = (j === "pdf" || j === "eps");
    n._forexport = true;
    if (f && a) {
        n.annotations = [{
            align: "right",
            ref: "paper",
            showarrow: false,
            text: a,
            x: 1,
            y: -(m._size.b - m.font.size / 4 - 2) / m._size.h
        }];
    }
    cloneGraphOffscreen(d, n).then(function (h) {
        var o = fileNodes(c).children("a").first().text() || graphTitleText(d);
        o = o.replace(/[ ]/g, "_").replace(/[^a-zA-Z 0-9`~!@#$%\^\(\)\-_\+,]+/g, "");
        o = Plotly.util.html_entity_decode(o);
        Plotly.Lib.notifier("High five!<br>We're processing your image,<br>it will download shortly.", "long");
        addMessage("Exporting Plot...", false);
        $.fileDownload("/svgtopdf/", {
            successCallback: function (p) {
                delMessage("Exporting Plot...");
            },
            failCallback: function (p) {
                delMessage("Exporting Plot...");
                Plotly.Lib.notifier("Uh oh, an error occurred on the server.<br>Try again soon or try exporting to a different file type.", "long");
            },
            data: {
                svg: encodeURIComponent(h),
                type: j,
                title: encodeURIComponent(o),
                scale: b
            }
        });
    });
}

function graphTitleText(a) {
    return $("<p>" + (a.layout.title || "Untitled") + "</p>").text().replace(/[^a-zA-Z 0-9`~!@#$%\^\(\)\-_\+,]+/g, "");
}

function scrapesvg(e, c) {
    var f = e.layout,
        a = f._paper.insert("rect", ":first-child").call(Plotly.Drawing.setRect, 0, 0, f.width, f.height).call(Plotly.Drawing.fillColor, f.paper_bgcolor);
    if (c.thumbnail) {
        $(e).find("svg text").remove();
    }
    var b = d3.select(e).select("svg");
    b.selectAll("text").attr({
        "data-unformatted": null
    }).each(function () {
        var g = d3.select(this);
        if (g.style("visibility") == "hidden") {
            g.remove();
            return;
        }
        var h = g.style("font-family");
        if (h && h.indexOf('"') != -1) {
            g.style("font-family", h.replace(/"/g, '"'));
        }
    });
    if (c._thinTex) {
        b.selectAll("#MathJax_SVG_glyphs path").attr("stroke-width", 0);
    }
    b.node().setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns", "http://www.w3.org/2000/svg");
    b.node().setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
    var d = new XMLSerializer().serializeToString(b.node());
    d = Plotly.util.html_entity_decode(d);
    d = Plotly.util.xml_entity_encode(d);
    a.remove();
    return d;
}

function buildpng(e, g, d) {
    var i = {
        width: 300,
        height: 150
    };
    if (g) {
        var b = Plotly.util.imageExporter().imageFormat("png").outputType("url").debugLevel(0).sourceSize({
            width: i.width,
            height: i.height
        }).targetSize({
            width: i.width,
            height: i.height
        }).on("success", function (j) {
            console.log("client img success");
            g(j);
        }).on("error", function (j) {
            console.log("error", j);
            if (d) {
                d(e);
            }
        });
        b(e);
        return;
    } else {
        var c = document.createElement("canvas");
        var h = 500;
        var f = 300;
        c.setAttribute("width", h);
        c.setAttribute("height", f);
        c.setAttribute("style", "position: absolute; right: " + (h * 2) + "px;");
        document.body.appendChild(c);
        canvg(c, e);
        var a = c.toDataURL("image/png");
        return a;
    }
}

function countPlotPoints(b) {
    var a = 0;
    $(b.data).each(function (d, c) {
        if ("x" in c) {
            a += c.x.length;
        } else {
            if ("y" in c) {
                a += c.y.length;
            }
        }
    });
    return a;
}

function grabSVG(d, b) {
    var a = d3.select("body").append("div").classed("plot-clone", true).node();
    var c = d.querySelector(".svg-container").querySelector("svg");
    var f = d3.select(d).select(".svg-container svg");
    f.selectAll("text").attr({
        "data-unformatted": null
    });
    a.appendChild(f.node().cloneNode(true));
    var e = new XMLSerializer().serializeToString(a.firstChild);
    e = Plotly.util.html_entity_decode(e);
    return e;
}

function cloneGraphOffscreen(d, i) {
    var b = d.sourcelist || [];
    if (d.framework && d.framework.isPolar) {
        d = d.framework.getConfig();
    }
    if (!i) {
        i = {};
    }
    var f = $('<div id="hidden-div" style="position:absolute;left:-5000px;bottom:-5000px;"></div>').appendTo("body");
    var e = f.get(0),
        c = {
            autosize: false,
            _forexport: true
        },
        g = [],
        h = {},
        a = [];
    if (i.thumbnail) {
        $.extend(c, {
            width: 300,
            height: 150,
            margin: {
                l: 1,
                r: 1,
                t: 1,
                b: 1,
                pad: 0
            }
        });
        c.borderwidth = 0;
        c.bordercolor = "";
        c.xaxis = {
            title: "",
            showline: false
        };
        c.yaxis = {
            title: "",
            showline: false
        };
        c.title = "";
        c.showlegend = false;
        c.annotations = null;
        g = d.data.filter(function (k, j) {
            return !k.visible;
        }).map(function (k, j) {
            return {
                name: j,
                showscale: false
            };
        });
    } else {
        e.sourcelist = b;
    } if (i.width) {
        c.width = i.width;
    }
    if (i.height) {
        c.height = i.height;
    }
    if (i._forexport) {
        c._forexport = i._forexport;
    }
    $.extend(true, h, d.layout, c);
    $.extend(true, a, d.data, g);
    (i.annotations || []).forEach(function (j) {
        if (!h.annotations) {
            h.annotations = [];
        }
        h.annotations.push(j);
    });
    return Plotly.plot(e, a, h).then(function () {
        var j = scrapesvg(e, i);
        f.remove();
        return (j);
    }, function (j) {
        f.remove();
        throw j;
    });
}

function shareInfo(g) {
    var f = g.closest("li"),
        c = f.parents("li[data-shared]"),
        h = Plotly.Lib.fullFid(f.attr("id")),
        d = ["Owned by: " + h.split(":")[0]],
        b = function (e) {
            var i = $(e).attr("data-shared") || "";
            return i.split(",").map(function (j) {
                return j.split(":")[0];
            }).join(", ");
        },
        a = b(f);
    if (a) {
        d.push("Shared with: " + a);
    }
    c.each(function () {
        d.push("Folder <b>" + $(this).children("a").text().trim() + "</b> shared with: " + b(this));
    });
    g.popover({
        content: d.join("<br />"),
        title: f.children("a").text().trim(),
        animation: false,
        placement: "left",
        trigger: "manual"
    }).popover("show");
}

function launchShareGraph(a) {
    return saveGraph(a).then(function (b) {
        shareLink(a);
    }).done();
}

function launchShareGrid() {
    var a = Tabs.get();
    return Plotly.Grids.saveGrid(a).then(function (b) {
        shareLink(a);
    }).done();
}

function shareLink(e) {
    Tabs.select(e);
    var l = $("#sharingModal");
    var f = Plotly.Lib.fullFid((typeof e == "object") ? e.fid : e);
    var b = f.split(":")[0];
    var c = getgraphinfo(f);
    var a = fileNodes(f);
    console.log("shareLink --> node", a[0]);
    if (a.attr("fid") == -1) {
        console.log("could not find a node for this file!", f);
        Plotly.Lib.notifier("Oh snap! Something went wrong. Try saving this file first", "long");
        throw "Could not find node for this file: " + String(f);
    }
    var i = a.attr("data-wr") == "1";
    var h = a.attr("rel");
    var g = a.first().parents("li[data-shared]");
    l.modal("show");
    l.find("#collab-error").html("");
    l.find(".activefid").val(f);
    l.find(".modal__msg").remove();
    l.attr("data-newshare", "[]");
    l.attr("data-gid", "");
    l.find(".collab__notify-message textarea").val("");
    l.find(".collab__student-info input").val("");
    l.find(".share__embed").toggle(h != "grid");
    l.find(".share__facebook").unbind("click").on("click", function () {
        facebook(c.publicUrl, c.img_url);
        console.log("******** book of faces", c.publicUrl);
        return false;
    });
    l.find(".share__twitter").unbind("click").on("click", function () {
        twitter(c.publicUrl);
        console.log("********* tweet tweet", c.publicUrl);
        return false;
    });
    l.find(".share__gplus").unbind("click").on("click", function () {
        gplus(c.publicUrl);
        console.log("********* google plusize", c.publicUrl);
        return false;
    });
    l.find(".share__embed").unbind("click").on("click", function () {
        showEmbedCodeModal(c.publicUrl, {
            width: 800,
            height: 600
        });
        console.log("********* embed the world", c.publicUrl);
        return false;
    });
    var m = l.find(".collab__sharee-list").html(""),
        k = l.find(".collab__sharee-adder").html("");
    var j = '<input type="text" class="input collab__add-field"placeholder="Enter a username or email" /><button class="btn btn--small btn--plain btn--input-neighbor" type="button">Add collaborator</button><div class="collab__adder-spinny"></div>';
    m.append('<div class="collab__sharee"><i class="icon-user"></i><span class="collab__sharee-name">' + b + '</span><span class="collab__sharee-permiss">is owner</span><span class="collab__sharee-remove-fake">&times;</span></div>');
    var d = a.attr("data-shared");
    $(j).appendTo(".collab__sharee-adder");
    k.find("button").unbind("click.share").bind("click.share", function () {
        addSharees(k, f);
    });
    k.unbind("keydown.share").bind("keydown.share", function (n) {
        if (n.which == 13) {
            if ($("input.collab__add-field").is(":focus")) {
                addSharees(k, f);
            } else {
                if (!$("#sharingModal textarea").is($(document.activeElement))) {
                    $("#sharingModal").modal("hide");
                }
            }
            n.preventDefault();
            return false;
        }
    });
    l.one("hidden", function () {
        if (!l.is(":visible")) {
            addShareesOnHide(k, f);
        }
    });
    if (d) {
        showSharees(d.split(","), f, false);
    }
    g.each(function () {
        var n = $(this).attr("data-shared").split(",");
        showSharees(n, Plotly.Lib.fullFid(this.id), true);
    });
    l.find(".world-readable,.world-links").toggle(h != "fold");
    l.find(".plot-only").toggle(h == "plot");
    if (h != "fold") {
        if (i) {
            sharingLinkShowPublic(c);
        } else {
            sharingLinkShowPrivate(c);
        }
    }
    modalFilename(l, a);
    l.find(".modal__footer button").unbind("click.share").bind("click.share", function () {
        l.modal("hide");
    });
    l.find(".privacy-toggle--public").unbind("click").on("click", function () {
        togSharingStatus(true);
    });
    l.find(".privacy-toggle--private").unbind("click").on("click", function () {
        togSharingStatus(false);
    });
    $(".collab__notify-email input").change(function () {
        $(".collab__notify-message textarea").toggle();
    });
    $(".collab__is-student input").change(function () {
        if ($(this).prop("checked")) {
            $(".collab__notify-message").removeClass("full-width");
            $(".collab__student-info").show();
        } else {
            $(".collab__student-info").hide();
            $(".collab__notify-message").addClass("full-width");
        }
    });
    l.find(".collab__add-field").typeahead("destroy").typeahead([{
        name: "myorbit",
        prefetch: {
            url: "/getusers/",
            ttl: 1800000
        },
        template: "<p><strong>{{value}}</strong>&nbsp;{{email}}</p>",
        engine: Hogan,
        limit: 5
    }]);
}

function sharingLinkShowPrivate(b) {
    var a = $("#sharingModal");
    $(".privacy-toggle--private").addClass("active");
    $(".privacy-toggle--public").removeClass("active");
    $(".share__options").find(".modal--half").removeClass("link--tool");
    $(".share__options").find(".modal--half").addClass("block__options");
    $(".share__options").find(".modal--half").addClass("muted");
    a.find(".share__facebook").unbind("click");
    a.find(".share__twitter").unbind("click");
    a.find(".share__gplus").unbind("click");
    a.find(".share__embed").unbind("click");
    a.find(".is-private").show();
    a.find(".is-public").hide();
    if (b) {
        a.find(".share__url-field").val(b.privateUrl).select();
    }
}

function sharingLinkShowPublic(b) {
    var a = $("#sharingModal");
    $(".privacy-toggle--public").addClass("active");
    $(".privacy-toggle--private").removeClass("active");
    $(".share__options").find(".modal--half").addClass("link--tool");
    $(".share__options").find(".modal--half").removeClass("block__options");
    $(".share__options").find(".modal--half").removeClass("muted");
    a.find(".share__facebook").unbind("click").on("click", function () {
        facebook(b.publicUrl, b.img_url);
        console.log("******** book of faces", b.publicUrl);
        return false;
    });
    a.find(".share__twitter").unbind("click").on("click", function () {
        twitter(b.publicUrl);
        console.log("********* tweet tweet", b.publicUrl);
        return false;
    });
    a.find(".share__gplus").unbind("click").on("click", function () {
        gplus(b.publicUrl);
        console.log("********* google plusize", b.publicUrl);
        return false;
    });
    a.find(".share__embed").unbind("click").on("click", function () {
        showEmbedCodeModal(b.publicUrl, {
            width: 800,
            height: 600
        });
        console.log("********* embed the world", b.publicUrl);
        return false;
    });
    a.find(".is-public").show();
    a.find(".is-private").hide();
    if (b) {
        a.find(".share__url-field").val(b.publicUrl).select();
    }
}

function modalFilename(d, c, a) {
    if (!a) {
        a = {};
    }
    var b = (c.attr("data-filename") || "").trim() || a.title || "Untitled",
        g = c.attr("rel") || a.filetype || "plot";
    if (g == "plot" && b == "Click to enter Plot title") {
        b = "Untitled Plot";
    }
    var e = {
        plot: "ploticon-plot",
        grid: "ploticon-grid",
        fold: "ploticon-folder"
    };
    d.find(".filename__icon").attr("class", "filename__icon " + e[g]);
    var f = d.find(".fn");
    f.text(b);
}

function addShareesOnHide(b, d) {
    var a = $("input.collab__add-field").val();
    var c = $("#sharingModal .collab__notify-email input").is(":checked");
    if (a) {
        addSharees(b, d, function () {
            if (c) {
                emailSharees();
            }
        });
    } else {
        if (c) {
            emailSharees();
        }
    }
}

function emailSharees() {
    var d = $(".collab__notify-message textarea").val();
    var c = {
        name: $("#student-info-name").val(),
        date: $("#student-info-date").val(),
        project: $("#student-info-project").val(),
        period: $("#student-info-period").val()
    };
    var e = false;
    $.each(c, function (g, f) {
        if (f) {
            e = true;
            return false;
        }
    });
    var a = JSON.parse($("#sharingModal").attr("data-newshare"));
    var b = $("#sharingModal").attr("data-gid");
    if (a.length) {
        $.post("/emsharees", {
            payload: JSON.stringify({
                gid: b,
                users_added: a,
                msg: (d ? d : ""),
                student_info: (e ? c : "")
            })
        });
    }
}

function modalMsg(a, c) {
    var b = '<div class="tooltip-alert">' + a + "</div>";
    c.find(".fn").after(b).fadeIn();
    $(".fn").on("keydown", function () {
        $(".tooltip-alert").remove();
    });
}

function showSharees(a, c, b) {
    console.log("****************** sharees", a);
    a.forEach(function (h) {
        if (!h) {
            return;
        }
        var g = h.split(":");
        if (g.length == 1) {
            g.push("edit");
        }
        var f = '<div class="collab__sharee"><i class="icon-user"></i><span class="collab__sharee-name">' + g[0] + '</span><span class="collab__sharee-permiss">can ' + g[1] + "</span>";
        var e = f;
        if (b) {
            e += '<span class="collab__sharee-note">Shared via <i class="ploticon-folder"></i>' + fileNodes(c).attr("data-filename") + "</span></div>";
            $(".collab__sharee-list").append($(e));
        } else {
            e += '<button class="collab__sharee-remove close" type="button">&times;</button></div>';
            var d = $(e).appendTo(".collab__sharee-list");
            console.log("******************** $userRow", d);
            d.find(".close").click(function () {
                delSharee(d, g[0], c);
            });
        }
    });
}

function togSharingStatus(f) {
    var h = $("#sharingModal"),
        c = Plotly.Lib.fullFid(h.find(".activefid").val()),
        e = h.find("#wr-error"),
        a = c.split(":")[0],
        i;
    if (a !== userobj.user) {
        e.text("You didn't create the share, so you can't edit it.");
        return;
    }
    if (!f) {
        subscriptions.wr_access(c, function b() {
            d();
        }, function g() {});
    } else {
        d();
    }

    function d() {
        var j = {
            readable: f,
            fid: c
        };
        console.log("proceed_to_wr --> posting payload", j);
        $.post("/worldreadable/", j, function (k) {
            k = JSON.parse(k);
            if (k.err) {
                Plotly.Lib.notifier("Whoopsy, there was an error toggling the privacy of the graph: " + k.err, "long");
                return;
            }
            var l = getgraphinfo(c);
            if (f) {
                console.log("***************** MARKED PUBLIC");
                sharingLinkShowPublic(l);
            } else {
                console.log("***************** MARKED PRIVATE");
                sharingLinkShowPrivate(l);
            }
            i = treeId2FileFabric(whichFileTreeIsVisible());
            i.redrawOne(k.node);
            updateTSRel();
            $(".js-tab-contents").each(function () {
                if (Plotly.Lib.fullFid(this.fid) == c) {
                    this.world_readable = f;
                }
            });
        });
    }
}

function delSharee(a, e, d) {
    var c = $("#sharingModal #collab-error"),
        b = {
            usrs_to_rm: e,
            gid: d,
            csrfmiddlewaretoken: $.cookie("csrftoken")
        };
    $.post("/rmusers/", b, function (f) {
        f = JSON.parse(f);
        c.text(f.err || "");
        f.users_removed.forEach(function (h) {
            if (h == e) {
                a.remove();
                var g = fileNodes(d);
                $(g).each(function (m, n) {
                    console.log("rmusers callback", n);
                    var k = $(n);
                    var o = k.attr("data-shared") || "";
                    var l = new RegExp("(^|,)" + e + "(:[^,]*)?(,|$)", "g");
                    var j = o.replace(l, ",").replace(/(^,*|,*$)/g, "");
                    if (j) {
                        k.attr("data-shared", j);
                    } else {
                        k.removeAttr("data-shared");
                    }
                });
            } else {
                console.log("removed wrong user???", h);
            }
        });
    });
}

function addSharees(a, d, e) {
    Plotly.Lib.startspin($(".collab__adder-spinny")[0], "tiny");
    $(".collab__adder-spinny .spinner").css({
        left: "0px",
        top: "5px"
    });
    var c = $("#sharingModal #collab-error"),
        b = a.find(".collab__add-field").val();
    a.find(".collab__add-field").typeahead("setQuery", "");
    $.post("/verifyusers/", {
        users: b
    }, function (g) {
        g = JSON.parse(g);
        console.log("verifyusers: ", g);
        c.text(g.err || "");
        var f = {
            usrs_to_add: g.validusers.join(),
            gid: d,
            csrfmiddlewaretoken: $.cookie("csrftoken")
        };
        if (!f.usrs_to_add.length) {
            Plotly.Lib.killspin($(".collab__adder-spinny")[0]);
            return;
        }
        $.post("/addusers/", f, function (l) {
            Plotly.Lib.killspin($(".collab__adder-spinny")[0]);
            l = JSON.parse(l);
            if (l.err) {
                c.text(c.text() + " " + l.err);
            }
            var j = fileNodes(d);
            $.each(function (n, o) {
                var p = $(o).attr("data-shared") || "";
                if (p) {
                    p += ",";
                }
                $(o).attr("data-shared", p + l.users_added.join(","));
            });
            var h = JSON.parse($("#sharingModal").attr("data-newshare"));
            for (var k in l.users_added) {
                h.push(l.users_added[k]);
            }
            $("#sharingModal").attr("data-newshare", JSON.stringify(h));
            $("#sharingModal").attr("data-gid", d);
            showSharees(l.users_added, d, false);
            var m = $(".collab__sharee-list")[0].scrollHeight;
            $(".collab__sharee-list").animate({
                scrollTop: m
            }, 2000);
            if (e) {
                e();
            }
        });
    });
}

function getgraphinfo(g) {
    var c = {
            url: "",
            img_url: ""
        },
        f = Plotly.Lib.fullFid(typeof g == "object" ? g.fid : g),
        h = f.split(":")[0],
        b = f.split(":")[1],
        d = window.location;
    try {
        c.url = (d.origin || (d.protocol + "//" + d.host)) + "/~" + f.replace(":", "/");
        c.img_url = fileNodes(f).attr("data-imgurl");
        c.privateUrl = (d.origin || (d.protocol + "//" + d.host)) + "/" + b + "/~" + h;
        c.publicUrl = (d.origin || (d.protocol + "//" + d.host)) + "/~" + h + "/" + b;
    } catch (a) {
        console.log(a);
    }
    return c;
}

function facebook(b, d) {
    var c = $("#sharingModal").find(".fn").text();
    if (!b || !d || (typeof b == "object")) {
        var a = getgraphinfo(b || Tabs.get());
        b = a.url;
        d = a.img_url;
    }
    window.open("https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(b), "facebook-share-dialog", "width=626,height=436");
}

function twitter(b) {
    console.log("tweet! ", b);
    if (typeof b !== "string") {
        b = getgraphinfo(b || Tabs.get()).url;
    }
    var c = "Just made this graph in Plotly:";
    var a = "http://twitter.com/home?status=" + encodeURIComponent(c + " " + b);
    window.open(a, "_blank", "width=600,height=400");
    window.focus();
}

function gplus(b) {
    var a = "//plus.google.com/u/0/share?url=" + encodeURIComponent(b);
    window.open(a, "_blank", "width=600,height=400");
    window.focus();
}

function showEmbedCodeModal(b, a) {
    updateEmbedCodeModal({
        options: getSuggestedSizesForPlot(a.width, a.height),
        graphUrl: b,
        selectedIndex: 0
    });
    $("#embedCodeModal").modal("show");
    window.setTimeout(function () {
        ZeroClipboard.config({
            moviePath: $("#zeroclipboard-url").val(),
            forceHandCursor: true
        });
        var c = new ZeroClipboard(document.getElementById("embedCodeModal-copycode")),
            d;
        c.on("mouseover", function () {
            d.tipsy("show");
        });
        c.on("mouseout", function () {
            d.tipsy("hide");
        });
        c.on("load", function () {
            d = $(c.elements()[0]).tipsy({
                gravity: "n"
            });
            c.on("complete", function () {
                var e = d.data("tipsy").$tip.find(".tipsy-inner");
                e.text("Copied!");
            });
        });
        c.on("noflash", function () {
            $("#embedCodeModal-copycode-msg").show();
        });
    }, 1000);
}

function updateEmbedCodeModal(c) {
    var a = updateEmbedCodeModal.tmpl,
        b = $("#embedCodeModal");
    if (c) {
        c.getCode = false;
        updateEmbedCodeModal.data = c;
    } else {
        c = updateEmbedCodeModal.data;
    } if (!a) {
        updateEmbedCodeModal.tmpl = Plotly.util.tmpl($("#tmpl-embedCodeModal").html());
        updateEmbedCodeModal.iframeTmpl = Plotly.util.tmpl($("#tmpl-embedCodeModal-iframeshare").html());
        a = updateEmbedCodeModal.tmpl;
    }
    c.iframe = updateEmbedCodeModal.iframeTmpl({
        size: c.options[c.selectedIndex],
        url: Plotly.Lib.stripTrailingSlash(c.graphUrl)
    }).trim();
    b.html(a(c));
    b.find("[data-embedwidth]").on("click", function (e) {
        var d = e.currentTarget.getAttribute("data-embedwidth");
        c.options.forEach(function (g, f) {
            if (g.width == d) {
                c.selectedIndex = f;
            }
        });
        updateEmbedCodeModal();
    });
    b.find("#embedCodeModal-textarea").tipsy({
        gravity: "s"
    });
}

function getSuggestedSizesForPlot(d, a) {
    var b = [],
        e = [800, 640, 560, 460],
        c;
    d = parseInt(d, 10) || 800;
    a = parseInt(a, 10) || 600;
    c = d / a;
    e.forEach(function (h, g) {
        var f = Math.round(h / c);
        b[g] = {
            width: h,
            height: f
        };
    });
    if (e.indexOf(d) === -1) {
        b = [{
            width: d,
            height: a
        }].concat(b);
    }
    return b;
}

function createFilewell(a) {
    var c = $("#" + a)[0],
        b = $(c);
    b.append($("script#load-filewell").html());
    $(Tabs.get()).find(".link--tool").tipsy({
        gravity: "n",
        opacity: "1"
    });
    $(".js-thumbnail-ribbon-label").click(function (d) {
        if ($(".js-thumbnail-sample-ribbon").css("display") == "block") {
            $(".js-thumbnail-sample-ribbon").slideUp();
            $(".js-thumbnail-ribbon-label").removeClass("active");
        } else {
            $(".js-thumbnail-sample-ribbon").slideDown();
            $(".js-thumbnail-ribbon-label").addClass("active");
        }
    });
    return c;
}

function filesResize(d) {
    var c = $(d),
        a = c.find(".filewell-container");
    var b = c.innerHeight() - parseInt(a.css("padding-top"), 10) - parseInt(a.css("padding-bottom"), 10) - a.find(".js-filewell-nav-and-tools").outerHeight(true) - c.find(".js-filewell-examples").outerHeight(true);
    c.find(".files-container-outer").css("height", b);
}

function toggleTree(a) {
    var b = ["private", "shared"],
        c = "";
    if ($(".js-filewell-label-thumbnails").hasClass("active")) {
        c = "-thumbnails";
    }
    $(b).each(function (e, d) {
        $(".js-files-tree-container-" + d + c).css({
            display: (d == a) ? "block" : "none"
        });
        $(".js-filewell-label-" + d).toggleClass("active", (d == a));
    });
    Tabs.select("tab-1");
    jQuery(document).trigger("_updateCheckboxStatus");
}

function toggleTreeMode(c) {
    var b = ["", "thumbnails"],
        a = "private";
    if ($(".js-filewell-label-shared").hasClass("active")) {
        a = "shared";
    }
    $(b).each(function (e, d) {
        $(".js-files-tree-container-" + a + ((d !== "") ? "-" : "") + d).css({
            display: (d == c) ? "block" : "none"
        });
        $(".js-filewell-label-" + ((d !== "") ? d : "list")).toggleClass("active", (d == c));
    });
    Tabs.select("tab-1");
}

function whichFileTreeIsVisible() {
    var a = ["private", "shared"],
        c = ".js-files-tree-container-";
    for (var b = 0; b < a.length; b++) {
        if ($(c + a[b]).css("display") == "block" || $(c + a[b] + "-thumbnails").css("display") == "block") {
            return a[b] + "tree";
        }
    }
}

function treeci(e, d, a, c) {
    console.log("treeci --> params (fid, action, data)", e, d, c);
    var b;
    if (Object.prototype.toString.call(e) === "[object Array]") {
        e = JSON.stringify(e);
    }
    b = {
        action: d,
        fid: e
    };
    switch (d) {
    case "rename":
        b.fn = c;
        break;
    case "mv":
        if (c == "ff-root") {
            c = -1;
        }
        b.pid = c;
        break;
    case "saveThumbnail":
        b.imgData = c.imgData;
        b.render_on_server = c.render_on_server;
        break;
    default:
        console.log("treeci - how did we get here?");
    }
    $.post("/treeci/", b, treeresp);
}

function treeresp(a) {
    a = JSON.parse(a);
    console.log("treeresp", a);
    if (a.err) {
        return;
    }
    if (a.action == "rename") {
        if (!("fid" in a && a.fn)) {
            console.log("treeresp rename missing fid or fn, returning");
            return;
        }
        fileTabs(a.fid).each(function () {
            this.fn = a.fn;
            set_title(this, a.fn);
        });
    } else {
        if (a.action == "mv") {
            if (!a.move || !("fid" in a) || !("pid" in a) || !a.move.attr || a.move.attr.id != a.fid) {
                console.log("inconsistent move, redrawing all", a);
                refreshFileTrees();
            } else {
                refreshFileTrees();
            }
        } else {
            if (a.action == "rm") {
                if (!a.fid) {
                    console.log("rm with no fids returned, redrawing all", a);
                    refreshFileTrees();
                } else {
                    console.log("removed files", a.fid);
                }
            } else {
                if (a.action === "saveThumbnail") {
                    if (a.imgstatus === 200 || a.imgstatus === 230) {
                        if (a.imgData.substr(0, 10) !== "data:image") {
                            a.imgData = "data:image/png;base64," + a.imgData;
                        }
                        FF_PRIVATE.redrawOne(a.node);
                    }
                }
            }
        }
    }
}

function pullfile(h) {
    console.log("pullfile --> row", h);
    var c = $(h);
    var g = c.attr("id").toString();
    var f = $(c.children()[1]).text();
    var e = c.attr("rel");
    var a = whichFileTreeIsVisible();
    var b = treeId2FileFabric(a);
    if (e == "fold") {
        pullFolderContents(g, a, f, b);
    } else {
        var d = {
            fid: Plotly.Lib.fullFid(g),
            ft: e,
            origin: a
        };
        if (a == "sharedtree") {
            d.fowner = c.attr("name");
        }
        pullf(d);
    }
}

function fid2pid(d, c) {
    d = d.replace(":", "\\:");
    var a = $("#" + d).attr("rel");
    if (a == "fold") {
        return d.replace("\\:", ":");
    }
    try {
        return $.jstree._reference("#" + c)._get_parent($("#" + d)).attr("id");
    } catch (b) {
        return -1;
    }
}

function fileDrop(b, c, a) {
    if (typeof a == "undefined") {
        a = "hover";
    }
    if (a) {
        b.ondragover = function () {
            $(this).addClass(a);
            return false;
        };
        b.ondragleave = function () {
            $(this).removeClass(a);
        };
    }
    b.ondrop = function (d) {
        $(this).removeClass("hover");
        d.preventDefault();
        files = d.dataTransfer.files;
        writeData(files, c);
    };
}

function fileSelected(a, c) {
    var b = a.files;
    if (b.length > 0) {
        writeData(b, c, 0);
    }
}

function writeData(d, e, b) {
    function c() {}
    if (!signedin()) {
        return false;
    }
    subscriptions.save_access(a);

    function a(j) {
        mixpanel.track("file upload", {
            referrer: document.referrer
        });
        hidebox();
        addMessage("Loading File");
        $("#dndtips").fadeOut("slow");
        if (!e) {
            e = "";
        }
        if (!b) {
            b = 0;
        }
        var h = d[b],
            g = h.name;
        var i = new XMLHttpRequest();
        i.open("POST", "/writef/", true);
        i.setRequestHeader("X-File-Name", encodeURI(g));
        i.setRequestHeader("Type", e);
        i.setRequestHeader("Content-type", "application/octet-stream");
        i.setRequestHeader("world_readable", JSON.stringify(j));
        i.onreadystatechange = function () {
            try {
                if (i.readyState == 4) {
                    if (i.status == 200) {
                        res = JSON.parse(i.responseText);
                        console.log(res);
                        if (res.err) {
                            if (res.err == "AccountError") {
                                throw new subscriptions.AccountError({
                                    type: "upload"
                                });
                            } else {
                                throw new c();
                            }
                        } else {
                            if (b < d.length - 1) {
                                writeData(d, e, b + 1);
                            }
                            if (res.fn !== undefined) {
                                $pt = $("#privatetree");
                                if ("type" in res) {
                                    e = res.type;
                                } else {
                                    e = "grid";
                                    console.log("no file type returned: assuming grid");
                                } if (e == "plot") {
                                    e = "grid";
                                }
                                if (res.node) {
                                    FF_PRIVATE.addItems(JSON.stringify([res.node]), "first");
                                } else {
                                    console.log("writef sent back no node?", res);
                                }
                            }
                            fileResp(res);
                        }
                    } else {
                        throw new c();
                    }
                }
            } catch (f) {
                if (f instanceof subscriptions.AccountError) {
                    f.response();
                } else {
                    if (f instanceof c) {
                        if (typeof res != "undefined" && res) {
                            console.log(res.err);
                        }
                        Plotly.Lib.notifier("Snap! There was an issue decoding your file.<br><br>If no graph appears, try copying and pasting your data onto the graph.", "long");
                    }
                }
                delMessage("Loading File");
            }
        };
        i.send(h);
    }
}

function jumpToTab(b, c) {
    var a = false;
    $(".js-tab-contents").each(function (e, d) {
        if (Plotly.Lib.fullFid(this.fid) == Plotly.Lib.fullFid(b) && (!c || this.tabtype == c) && this.fid !== undefined) {
            $("#tabs-one-line").tabs("enable", e).tabs("select", e);
            a = true;
        }
    });
    return a;
}

function pullf(a) {
    if (jumpToTab(a.fid, a.ft)) {
        return;
    }
    a.csrfmiddlewaretoken = $.cookie("csrftoken");
    if (a.mode !== "thumbnails" && a.mode !== "userprofile") {
        addMessage("Loading File");
    }
    if (a.fid !== undefined) {
        if (a.fid.toString().indexOf("jstree-sample") >= 0) {
            Tabs.fresh("grid");
            Examples.lookUp(a.fid.toString().replace("jstree-sample-", ""), "grid");
            return false;
        }
    }
    $.post("/pullf/", a, fileResp);
}

function fileResp(c) {
    if (typeof c == "string") {
        c = JSON.parse(c);
    }
    var b = c.ref_fids || [];
    try {
        hidebox();
    } catch (d) {}
    var i = c.type,
        g = c.mode,
        h;
    if (c.err) {
        console.log(c.err);
        delMessage("Loading File");
        if (c.err === "AccountError") {
            subscriptions.pullf_access(f, c);
        } else {
            if (("src" in c) && (c.src != "gdrive")) {
                Plotly.Lib.notifier("There was an error connecting to Google Drive. Please try again.");
            } else {
                if (g == "userprofile" && "fid" in c) {
                    $('.thumbnail__robot-target[data-idlocal="' + c.fid + '"]').remove();
                }
            }
        }
        delMessage("Loading File");
        return;
    } else {
        f();
    }

    function a(e) {
        if (c.fn === undefined) {
            c.fn = i.charAt(0).toUpperCase() + i.slice(1);
        }
        e.fid = c.fid;
        e.ts = c.ts;
        e.fn = c.fn;
        e.world_readable = c.world_readable;
        e.readonly = c.readonly;
        e.changed = false;
        e.img_url = c.imgurl;
        if (b) {
            e.ref_fids = b;
        }
    }

    function f() {
        var k, j;
        if (i == "array") {
            if (c.array.length === 0) {
                Tabs.add("grid", c.fn, g);
            } else {
                var l = Math.min(c.array.length, 4);
                for (var e = 0; e < l; e++) {
                    c.array[e].mode = g;
                    c.array[e].ref_fids = (c.array[e].ref_fids || []).concat(b);
                    fileResp(c.array[e]);
                }
            }
            return;
        } else {
            if (i == "grid") {
                h = Tabs.fresh("grid", g);
                a(h);
                Plotly.Grids.loadGrid(c);
            } else {
                if (i == "plot") {
                    k = ("data" in c) ? c.data : [];
                    j = ("layout" in c) ? c.layout : "";
                    if (g == "thumbnails") {
                        buildpng({
                            data: k,
                            layout: j
                        }, ThumbnailRobot.saveImg);
                        return false;
                    } else {
                        if (g == "userprofile") {
                            graph_lookup[c.fid] = {};
                            graph_lookup[c.fid].data = k;
                            graph_lookup[c.fid].layout = j;
                            $('.thumbnail__robot-target[data-idlocal="' + c.fid + '"]').removeClass("thumbnail-loading");
                            return false;
                        } else {
                            h = Tabs.fresh("plot");
                            a(h);
                            mixpanel.track("Whoa, I made a graph", {
                                referrer: document.referrer
                            });
                            if (j.autosize) {
                                j.autosize = "initial";
                            }
                            h.fid = c.fid;
                            h.fn = c.fn;
                            Plotly.plot(h, k, j).then(function () {
                                Plotly.Plots.redrawText(h);
                            });
                        }
                    }
                } else {
                    delMessage("Loading File");
                    console.log("File response received with unknown type!");
                    return;
                }
            }
        } if (k && k[0] && "stream" in k[0]) {
            h.layout._isStream = true;
            NODE.StreamHead(h, {
                host: ENV.WEBSOCKET_HOST,
                port: ENV.WEBSOCKET_PORT
            }).beginStreaming();
        }
        set_title(h, c.fn);
        delMessage("Loading File");
        $(".alert-info").fadeOut("slow");
    }
}

function launchSaveGraph() {
    var a = Tabs.get();
    return saveGraph(a).then(function (b) {
        if (b.saved && b.isNew) {
            shareLink(a);
        }
    }).done();
}

function requireProperFilename(a) {
    return requireAuth().then(function (b) {
        if (a.fn === undefined) {
            return requireTabNamed(a);
        }
        return Promise.resolve();
    });
}

function saveGraphAs(a) {
    if (!a) {
        a = Tabs.get();
    }
    markFileAsNew(a, "plot");
    return saveGraph(a);
}

function copyGraph(c) {
    if (!c) {
        c = Tabs.get();
    }
    if (c.data === undefined) {
        c.data = [];
    }
    var b = Tabs.add("plot"),
        a = JSON.parse(Plotly.Plots.graphJson(c, false, "keepall"));
    if (c.layout && c.layout._isStream) {
        Plotly.Lib.purgeStream(a);
    }
    Plotly.plot(b, a.data, a.layout).then(function () {
        if (c.fn) {
            b.fn = c.fn + " (copy)";
        }
        b.changed = true;
        return saveGraph(b).done();
    });
}

function markFileAsNew(b, a) {
    b.fid = undefined;
    b.ts = undefined;
    if (a == "plot") {
        b.img_url = undefined;
    }
    b.world_readable = undefined;
    b.changed = true;
}

function saveGraph(b) {
    if (!b) {
        b = Tabs.get();
    }
    if (b && b.framework && b.framework.isPolar) {
        var a = b.framework.getConfig();
        b.data = a.data;
        b.layout = a.layout;
    }
    console.log("saveGraph() called");
    return requireProperFilename(b).then(function () {
        return new Promise(function (c, d) {
            _saveGraph(b, c, d);
        });
    });
}

function _saveGraph(e, c, f) {
    mixpanel.track("clicked save graph", {
        referrer: document.referrer
    });
    if (e.data === undefined) {
        e.data = [];
    }
    var d = e.fn || e.layout.title;
    if (d == "Click to enter Plot title" || !d) {
        d = "Untitled Plot";
    }
    var a = (d == "Plot" || d.indexOf("Untitled Plot") > -1);
    var h = e.fid;
    if (!graphChangesPending(e)) {
        Plotly.Lib.notifier("No changes pending. No need to save.");
        return c({
            changes: false,
            saved: true,
            isNew: false
        });
    }
    var g = e.world_readable === undefined ? false : e.world_readable;
    if (fileShouldSaveAsNew(e)) {
        subscriptions.save_access(b.bind(null, g));
    } else {
        b(g);
    }

    function b(l) {
        var k = "Saving File" + (l && fileShouldSaveAsNew(e) ? ". This file is publicly available." : "");
        addMessage(k);
        var i = fileShouldSaveAsNew(e);
        var j = {
            data: Plotly.Plots.graphJson(e),
            ftreq: "plot",
            fid: Plotly.Lib.fullFid(h),
            fn: d,
            ts: e.ts,
            imgData: "",
            world_readable: JSON.stringify(l),
            csrfmiddlewaretoken: $.cookie("csrftoken")
        };
        if (e.ref_fids) {
            j.ref_fids = e.ref_fids.join(",");
        }
        if (a) {
            delete j.fn;
        }
        console.log("posting save", j);
        $.post("/save/", j, function (n) {
            saveResp(n, e);
            delMessage(k);
            c({
                changes: true,
                saved: true,
                isNew: i
            });
            var m = JSON.parse(n);
            var o = m.fid;
            cloneGraphOffscreen(e, {
                thumbnail: true,
                size: {
                    width: 300,
                    height: 150
                }
            }).then(function (q) {
                var p = treeId2FileFabric(whichFileTreeIsVisible());

                function t(u) {
                    treeci(o, "saveThumbnail", p, {
                        imgData: u,
                        render_on_server: false
                    });
                }

                function r(u) {
                    treeci(o, "saveThumbnail", p, {
                        imgData: u,
                        render_on_server: true
                    });
                }
                try {
                    buildpng(q, t, r);
                } catch (s) {
                    r(q);
                }
            });
        });
    }
}

function graphChangesPending(a) {
    return (a.changed !== false || !a.img_url || fileShouldSaveAsNew(a) || String(a.fid).indexOf("_") != -1);
}

function fileShouldSaveAsNew(a) {
    return (a.fid === undefined || a.readonly);
}

function graphToGrid(f) {
    var d, c = Tabs.get();
    if (!c.data) {
        Tabs.add("grid");
        return;
    }
    if (c.framework && c.framework.isPolar) {
        var b = c.data[0].type;
        var e = c.data[0].mode;
        if (b === "scatter" && e === "lines") {
            f = "Polar line plot";
        } else {
            if (b === "scatter" && e === "markers") {
                f = "Polar dot plot";
            } else {
                if (b === "area") {
                    f = "Polar area chart";
                } else {
                    if (b === "bar") {
                        f = "Polar bar chart";
                    }
                }
            }
        }
    } else {
        if (f === undefined) {
            d = c.data[0].type;
            var g = {
                heatmap: "Make heatmap",
                bar: "Bar chart",
                box: "Box plot",
                histogram: "Histogram",
                histogram2d: "2D Histogram",
                scatter: "Scatter plot"
            };
            if (d in g) {
                f = g[d];
            }
        }
    } if (c.layout._isStream) {
        var a = {
            data: Plotly.Plots.graphJson(c, true, "keepdata"),
            ft: "grid",
            mode: f
        };
        pullf(a);
    } else {
        if (c.fid !== undefined && c.fid !== "") {
            pullf({
                fid: c.fid,
                ft: "grid",
                mode: f
            });
        } else {
            var a = {
                data: Plotly.Plots.graphJson(c, true),
                ft: "grid",
                mode: f
            };
            if (c.ref_fids) {
                a.ref_fids = c.ref_fids.join(",");
            }
            pullf(a);
        }
    }
}

function saveResp(f, i) {
    console.log("SAVE RESP");
    try {
        if (i === undefined) {
            i = Tabs.get();
        }
        i.changed = false;
        var c = JSON.parse(f);
        if (c.err === "AccountError") {
            throw new subscriptions.AccountError({
                type: "saveResp"
            });
        }
        if (c.err) {
            console.log(c.err);
        }
        if (c.fid !== undefined && i.fid != c.fid) {
            if (i.fid !== undefined) {
                var a = Plotly.Lib.fullFid(i.fid).split(":")[0],
                    g = Plotly.Lib.fullFid(c.fid).split(":")[0],
                    d = "Check it - we made a new copy of this file.";
                if (a != g) {
                    if (a == user) {
                        d += "<br>You own the original,<br>";
                    } else {
                        d += "<br>" + a + " owns the original,<br>";
                    } if (g == user) {
                        d += "The copy is yours.";
                    } else {
                        d += g + " owns the copy.";
                    }
                    Plotly.Lib.notifier(d, "long");
                }
            }
            i.fid = String(c.fid);
        }
        if (c.ts) {
            i.ts = c.ts;
        }
        if (c.img_url) {
            i.img_url = c.img_url;
        }
        if (c.fn) {
            i.fn = c.fn;
            set_title(i, i.fn);
        }
        if ("world_readable" in c) {
            i.world_readable = c.world_readable;
        }
        i.ref_fids = [];
        var b = (String(c.fid).indexOf(":") >= 0) ? FF_SHARED : FF_PRIVATE;
        console.log("saveResp --> createOrUpdateOne", c, b);
        b.createOrUpdateOne(c.node, "first");
        updateTSRel();
        $(i).find(".comments__new-comment-input").on("keyup", function () {
            Comments.enableSubmit();
        });
    } catch (h) {
        console.log("saveResp() caught an error", h);
        if (h instanceof subscriptions.AccountError) {
            h.response();
            delMessage("Saving File" + (i.world_readable ? ". This file is publicly available." : ""));
        }
    }
}

function fileNodes(b) {
    if (String(b) == "-1") {
        return $("#privatetree");
    }
    b = Plotly.Lib.fullFid(b);
    var a = $("tr.ff-table-row").filter(function () {
        return Plotly.Lib.fullFid(this.id) == b;
    });
    if (a.length) {
        return a;
    } else {
        return $("#privatetree");
    }
}

function fileTabs(a) {
    a = Plotly.Lib.fullFid(a);
    return $(".js-tab-contents").filter(function (c, b) {
        return Plotly.Lib.fullFid(this.fid) == a;
    });
}

function launchCreateDirectory() {
    return requireAuth().then(function () {
        return updateRenameDialog(null, "", true).then(function (a) {
            createNewFolder(a);
        }).done();
    });
}

function launchRenameFromFilewell(e, b, f) {
    var a = b.getCheckedItems()[0];
    var c = $(a).attr("data-filename");
    var d = (f == "fold");
    return requireAuth().then(function () {
        return updateRenameDialog(e, c, d).then(function (g) {
            b.renameCell(e, "data", g);
            treeci(e, "rename", b, g);
            return g;
        }).done();
    });
}

function requireTabNamed(b) {
    var a = tdProposedFilename(b);
    return updateRenameDialog(b.fid, a, false).then(function (c) {
        b.fn = c;
    });
}

function launchRenameTab() {
    var b = Tabs.get();
    var a = tdProposedFilename(b);
    return requireAuth().then(function () {
        return updateRenameDialog(b.fid, a, false).then(function (c) {
            b.fn = c;
        });
    });
}

function tdProposedFilename(c) {
    var a = "";
    if (c && c.fn) {
        a = c.fn;
    } else {
        if (c.layout && c.layout.title) {
            var b = c.layout.title;
            if (b != "Click to enter Plot title") {
                a = c.layout.title;
            }
        }
    }
    return a;
}

function updateRenameDialog(g, b, d) {
    var f = $("#renameFileModal"),
        c = $("#tmpl-renameFileModal").html(),
        a = Plotly.util.tmpl(c);
    var e = {};
    e.name = b;
    e.fid = g;
    e.is_folder = d || false;
    e.caption = "";
    f.html(a(e));
    f.modal("show").css("overflow", "visible");
    return new Promise(function (h, i) {
        f.off("hidden").on("hidden", function (j) {
            i("Dialog closed");
        });
        f.find(".js-rename").on("click", function () {
            var j = f.find('input[name="fname"]').val();
            if (j.length === 0) {
                delMessage();
                addMessage("Invalid name");
                return;
            }
            f.modal("hide");
            return h(j);
        });
    });
}

function createThumbnailItem(q, e) {
    var i = q.attr["data-imgurl"],
        j = q.data,
        h = q.pid,
        s = q.created,
        g = q.attr.id,
        f = q.attr["data-wr"],
        o = q.attr["data-caption"].replace('"', "&quot;"),
        r = q.sharing,
        a = q.attr["data-imgts"];
    if (e === "user_profiles") {
        if (profileEditable() === false && q.visible === 0) {
            return "";
        }
    }
    var c = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    mo = c[Number(s.split("-")[1]) - 1];
    var k = s.split("-")[0];
    var b = mo + " " + k;
    if ($(".js-thumbnail-month-label").text().indexOf(b) >= 0) {
        b = "";
    }
    var n = function (t) {
        var d = document.createElement("DIV");
        d.innerHTML = t;
        return d.textContent || d.innerText || "";
    };
    var l = "";
    if (e === "user_profiles") {
        l = " thumbnail-loading";
    }
    if (i === null || i === "") {
        i = "/static/img/imagenotfound.png";
    }
    if (a === null || a === "") {
        var m = d3.time.format("%Y-%m-%d %H:%M:%S");
        a = m(new Date());
    }
    var p = '<li class="thumbnail__robot-target photo' + l + '" data-idlocal="' + g + '" data-parents="' + h + '" data-timestamp="' + s + '" data-caption="' + o + '" data-imgts="' + a + '" data-world_readable="' + f + '" data-filename="' + j + '"><div class="js-thumbnail-month-label plot-date month-label">' + b + '</div><time class="plot-date" data-ts="' + s + '" style="display:none;"><span class="tsrel">' + s + '</span></time><div class="thumbnail-container"><img src="' + i + '"><div class="js-plot-stats plot-stats" style="display:none;"><span class="js-plot-views">' + r + "</span></div></div>";
    p = p + "</li>";
    return p;
}

function thumbnailview(c, h, g) {
    var f = {
        privatetree: ".js-files-tree-container-private-thumbnails",
        sharedtree: ".js-files-tree-container-shared-thumbnails",
        "user-profile": ".js-files-tree-container-user-profile-thumbnails"
    };
    var e = $(".thumbnailview-" + c);
    if (e.length == 0) {
        if (g !== "user_profiles") {
            $(f[c]).empty();
        }
        var a = '<div class="thumbnailview-' + c + ' text--center"><ul class="flush photo-feed"></ul></div>';
        e = $(f[c]).append(a);
    }
    for (var b = 0; b < h.length; b++) {
        if (h[b].attr.rel == "plot") {
            e.find("ul").append(createThumbnailItem(h[b], g));
        }
    }
    thumbnailOnClickAndHover();
}

function thumbnailOnClickAndHover() {
        $(".thumbnail__robot-target img").unbind("click").click(function () {
            var c = $(this).closest("li"),
                e = c.attr("data-idlocal"),
                b = c.attr("data-caption"),
                d = c.find("time").text(),
                a = c.find(".js-plot-views").text();
            if (Boolean($("#plotlyUserProfileMarker").length) && c.hasClass("thumbnail-loading") == false) {
                console.log("opening lightbox");
                var g = purgePlotContainer();
                $(".plotlyDialogLayer").show();
                delayedPlot(g, e);
                g.fid = e;
                var f = window.location.pathname.split("/")[1];
                history.pushState(null, null, "/" + f + "/" + e);
                setPlotCaption(b, e);
                $(".js-lightbox-graph-timestamp").text(d);
                $(".js-lightbox-graph-views").text(a);
                plotDimensionCheck();
                setTimeout(function () {
                    console.log("disable_scroll");
                    disable_scroll();
                }, 800);
            } else {
                pullf({
                    fid: e
                });
            }
        });
        $(".thumbnail__robot-target").unbind("hover").hover(function () {
            $(this).find(".js-thumbnail-month-label").hide();
            $(this).find("time").fadeIn();
            $(this).find(".js-plot-stats").fadeIn();
        }, function () {
            $(this).find("time").hide();
            $(this).find(".js-plot-stats").hide();
            $(this).find(".js-thumbnail-month-label").fadeIn();
        });
    }
    (function () {
        var h = window.Comments = {};
        var d = $("<p>&#9733;</p>").text(),
            e = $("<p>&#9734;</p>").text();
        h.upcmmts = function (j) {
            var l = JSON.parse(j).c,
                k = $(f());

            function i(o, m, n) {
                n = '<div class="alert alert-plotly">New Comment!</div>' + n;
                c(n, o, m);
            }
            l.forEach(function (n) {
                var m = n.split(":::");
                if (m.length > 2) {
                    var q = m[0],
                        o = m[1],
                        p = m.slice(2, m.length).join(":::");
                    if (!k.find('.comments-container [data-cid="' + q + '""]').length) {
                        i(q, o, p);
                    }
                }
            });
        };

        function f() {
            var j;
            try {
                j = Tabs.get();
            } catch (i) {
                j = $("#comment-block")[0];
            }
            return j;
        }
        h.commentsopen = function () {
            var i = f();
            return ($(i).find(".comments-container").css("display") === "block");
        };
        h.retrievecomments = function (l, j) {
            if (l === undefined) {
                return;
            }
            var m = f();
            if (!j) {
                j = m.tabtype;
            }

            function i(p) {
                var n = $(m).find(".comments__inbox");
                n.html(k(p)).scrollTop(n[0].scrollHeight);
                delMessage("Loading Comments");
            }

            function k(p) {
                var n = "";
                p.forEach(function (o) {
                    n += g(o);
                });
                return n;
            }
            addMessage("Loading Comments");
            $.post("/getcmmts/", {
                fid: l
            }, function (n) {
                n = JSON.parse(n);
                if (n.err) {
                    console.log(n.err);
                }
                if (!n.pl.length) {
                    return;
                }
                i(n.pl.reverse());
            });
        };
        h.enableSubmit = function () {
            var k = $(f()),
                i = k.find(".js-comment-input").val().replace("<br>", "").replace(" ", ""),
                j = k.find(".comments__submit");
            if (i.length) {
                j.removeClass("disabled");
            } else {
                j.addClass("disabled");
            }
        };
        h.postcomment = function () {
            var p = f(),
                n = $(p),
                m = p.fid,
                o = p.tabtype;
            if (m === "" || m === undefined) {
                Plotly.Lib.notifier("Save this " + o + " to<br>comment on it.");
                return;
            }
            var j = n.find(".js-comment-input").val();
            if (!j.trim()) {
                return;
            }
            var l = b();
            c(j, l);
            var k = $.cookie("csrftoken");
            var i = {
                fid: m,
                comment: j,
                csrfmiddlewaretoken: k,
                tempcid: l
            };
            console.log("POSTING COMMENT WITH tempcid " + l);
            $.post("/mkcmmt/", i, function (q) {
                q = JSON.parse(q);
                if (q.err !== "") {
                    console.log(q.err);
                }
                var r = q.tempcid,
                    t = q.cid,
                    s = n.find('.comments__inbox [data-cid="' + r + '"]');
                s.attr("data-cid", t);
                n.find(".comments__submit").removeClass("disabled");
            });
            setTimeout(function () {
                n.find(".js-comment-input").val("");
            }, 400);
        };

        function c(j, i, k) {
            requireAuth().then(function (n) {
                var o = $(f()),
                    m = o.find(".comments__inbox");
                if (k === undefined) {
                    k = userObj.info().un;
                }
                var l = {
                    author: k,
                    avatar: userObj.info().avatar_url,
                    cid: i,
                    comment: j
                };
                var p = g(l);
                if (!m.find(".comments__comment").length) {
                    m.html(p).fadeIn("slow");
                } else {
                    $(p).appendTo(m).fadeIn("slow", function () {
                        m.scrollTop(m[0].scrollHeight);
                    });
                }
            });
        }

        function g(i) {
            var j = (userObj.info().un === i.author);
            return '<div class="comments__comment" data-cid="' + i.cid + '"><div class="comments__avatar"><img class="plot__user-icon" src="' + i.avatar + '"></img></div><div class="comments__body"><a href="/~' + i.author + '" class="link--bold link--impt comments__author js-comment-author">' + i.author + '</a><p class="comments__comment-text">' + i.comment + '</p><span class="comments__ts">' + (i.created || "") + "</span>" + (j ? ('<a class="comments__trash" onclick="Comments.delcmmt(this)" ><i class="icon-trash"></i></a>') : "") + "</div></div>";
        }

        function b() {
            if (!signedin()) {
                return;
            }
            return Math.floor(Math.random() * (-10000000));
        }
        h.delcmmt = function (i) {
            var j = $(i).parents(".comments__comment"),
                k = j.attr("data-cid");
            if (Number(k) < 0) {
                return;
            }
            j.slideUp(function () {
                j.remove();
            });
            $.post("/delcmmt/", {
                cid: k
            }, function (l) {
                l = JSON.parse(l);
                if (l.err) {
                    console.log(l.err);
                }
            });
        };
        h.retrieveStars = function (i, j) {
            if (j === undefined) {
                j = user;
            }
            $.post("/retrieve_likes/", {
                fid: i
            }, function (l) {
                l = JSON.parse(l);
                if (l.err) {
                    console.log(l.err);
                }
                var k = l.fans;
                if (k.indexOf(j) !== -1) {
                    $(".js-star-machine").addClass("is-starred");
                }
                $(".js-like-list").attr("data-fans", JSON.stringify(k));
                a();
            });
        };

        function a() {
            var i = JSON.parse($(".js-like-list").attr("data-fans")),
                j = "";

            function l(m) {
                return '<a class="ll-name-link" href="/~' + m + '">' + m + "</a>";
            }
            if (i.length) {
                j = '<span class="ll-star">' + d + "</span>";
                if (i.length === 1) {
                    j += l(i[0]) + " likes this";
                } else {
                    if (i.length === 2) {
                        j += l(i[0]) + " and " + l(i[1]) + " like this";
                    } else {
                        if (i.length === 3) {
                            j += l(i[0]) + ", " + l(i[1]) + ", and" + l(i[2]) + " like this";
                        } else {
                            var k = i.length - 3;
                            j += l(i[0]) + ", " + l(i[1]) + ", " + l(i[2]) + ", and " + k + " others like this";
                        }
                    }
                }
            }
            $(".js-like-list").html(j);
        }
        $(".js-star-machine").click(function (i) {
            console.log("click .js-starmachine");
            requireAuth().then(function (k) {
                if (k.alreadySignedIn) {
                    j();
                } else {
                    $("#signupModal").modal("hide");
                    getuser(true).then(j);
                }

                function j() {
                    var o = $(i.target).closest(".js-star-machine"),
                        l = $(".js-star-machine"),
                        r = f().fid,
                        m = user,
                        q = {
                            state: "liked",
                            fid: r
                        },
                        p = JSON.parse($(".js-like-list").attr("data-fans"));
                    if (m === undefined) {
                        return;
                    }
                    console.log("star machine click", o[0], l);
                    if (o.hasClass("is-starred")) {
                        l.removeClass("is-starred");
                        q.state = "unliked";
                        var n = p.indexOf(m);
                        if (n > -1) {
                            p.splice(n, 1);
                        }
                    } else {
                        l.addClass("is-starred");
                        p.unshift(m);
                    }
                    $.post("/like_chart/", q, function (s) {
                        s = JSON.parse(s);
                        if (s.err) {
                            console.log(s.err);
                        }
                    });
                    $(".js-like-list").attr("data-fans", JSON.stringify(p));
                    a();
                }
            }, function (j) {
                if (j.message === "ClosedModal") {
                    Plotly.Lib.notifier("You must be signed-in to star graphs!");
                }
                throw (j);
            }).done();
            return false;
        });
        h.TESTC = [
            [{
                comment: "(:",
                author: "jackp",
                avatar: "https://plotly_profiles.s3.amazonaws.com/6.jpg?Signature=aT1WClqg4R8uebPjMD5sxK6ODiE%3D&amp;Expires=1490710715&amp;AWSAccessKeyId=AKIAIBZ7BBOARABGY22Q",
                cid: 23
            }, {
                comment: "In mathematics, deconvolution is an algorithm-based process used to reverse the effects of convolution on recorded data.[1] The concept of deconvolution is widely used in the techniques of signal processing and image processing. Because these techniques are in turn widely used in many scientific and engineering disciplines, deconvolution finds many applications. In general, the object of deconvolution is to find the solution of a convolution equation of the form:",
                author: "chris",
                avatar: "https://plotly_profiles.s3.amazonaws.com/6.jpg?Signature=aT1WClqg4R8uebPjMD5sxK6ODiE%3D&amp;Expires=1490710715&amp;AWSAccessKeyId=AKIAIBZ7BBOARABGY22Q",
                cid: 26
            }, {
                comment: "Hey, what's going on at this point?",
                author: "carmel",
                avatar: "https://plotly_profiles.s3.amazonaws.com/6.jpg?Signature=aT1WClqg4R8uebPjMD5sxK6ODiE%3D&amp;Expires=1490710715&amp;AWSAccessKeyId=AKIAIBZ7BBOARABGY22Q",
                cid: 28
            }, {
                comment: "In the subfield of numerical analysis, a sparse matrix is a matrix populated primarily with zeros (Stoer & Bulirsch 2002, p. 619) as elements of the table.",
                author: "matt",
                avatar: "https://plotly_profiles.s3.amazonaws.com/6.jpg?Signature=aT1WClqg4R8uebPjMD5sxK6ODiE%3D&amp;Expires=1490710715&amp;AWSAccessKeyId=AKIAIBZ7BBOARABGY22Q",
                cid: 32
            }, {
                comment: "I think this was the sample that was dropped",
                author: "barack",
                avatar: "https://plotly_profiles.s3.amazonaws.com/6.jpg?Signature=aT1WClqg4R8uebPjMD5sxK6ODiE%3D&amp;Expires=1490710715&amp;AWSAccessKeyId=AKIAIBZ7BBOARABGY22Q",
                cid: 89
            }, {
                comment: "Can you guys meet in the conf room in 10?",
                author: "red",
                avatar: "https://plotly_profiles.s3.amazonaws.com/6.jpg?Signature=aT1WClqg4R8uebPjMD5sxK6ODiE%3D&amp;Expires=1490710715&amp;AWSAccessKeyId=AKIAIBZ7BBOARABGY22Q",
                cid: 99
            }, {
                comment: "Jeff, can you rerun these samples?",
                author: "elliot",
                avatar: "https://plotly_profiles.s3.amazonaws.com/6.jpg?Signature=aT1WClqg4R8uebPjMD5sxK6ODiE%3D&amp;Expires=1490710715&amp;AWSAccessKeyId=AKIAIBZ7BBOARABGY22Q",
                cid: 101
            }]
        ];
    }());

function getnotifs() {
    $.ajax({
        url: "/getnotifs/",
        type: "POST",
        data: {
            csrfmiddlewaretoken: $.cookie("csrftoken")
        },
        timeout: 1000,
        success: upnotifs,
        error: function (b, c, a) {
            if (c === "timeout") {
                console.log("notifs - got timeout");
            } else {
                console.log(b, a);
            }
        }
    });
}

function upnotifs(a) {
    if (a.err) {
        console.log(a.err);
    }
    var b = JSON.parse(a).n;
    if (b && b.length > $(".notifs__box li.notif").length) {
        sessionStorage.setItem("notifications", JSON.stringify(b));
        setTimeout(loadnotifs, 200);
    }
}

function loadnotifs() {
    $numNotifs = $("#js-num-notifs");
    $(".notifs__box").html("");
    var c = "<ul>",
        a = 0,
        b = JSON.parse(sessionStorage.getItem("notifications"));
    if (b === null || b.length === 0) {
        return '<div style="padding:10px;">No notifications.</div>';
    }
    $(b).each(function (e, d) {
        if (d.state == "unread") {
            a++;
        }
        var f = {
            comment: notif_cmmt,
            project: notif_proj,
            plotly: notif_plotly
        };
        c += f[d.tag](d);
    });
    c += "</ul>";
    $(".notifs__box").append(c);
    $numNotifs.text(a);
    if (a > 0) {
        $numNotifs.addClass("link--impt-inv");
    } else {
        $numNotifs.removeClass("link--impt-inv");
    }
    return c;
}

function loadfilecmmts(a, b) {
    $.post("/notifci/", {
        nid: b,
        action: "read"
    }, notifresp);
    if (Plotly.Lib.fullFid(a) != Plotly.Lib.fullFid(Tabs.get().fid)) {
        pullf({
            fid: a
        });
    }
    newcomment(a);
}

function notif_cmmt(a) {
    var c = a.fn.replace(/<(?:.|\n)*?>/gm, "").trim();
    var b = '<li class="notif ' + a.state + '" data-ts="' + a.ts + '">' + closetab(a) + '<div class="notif__icon notif__icon--comment"><i class="icon-comment"></i></div><div class="notif__message"><p class="notif__content ' + a.state + '"><b>' + a.un + "<b>" + a.un + '</b> commented on <a class="' + a.state + '" onclick="loadfilecmmts(\'' + a.fid + "','" + a.nid + "')\">" + c + "</a></span></p>" + notif_ts(a) + "</div>" + notif_footer(a) + "</li>";
    return b;
}

function notif_proj(a) {
    var c = a.fn.replace(/<(?:.|\n)*?>/gm, "").trim();
    var b = '<li class="notif ' + a.state + '" data-ts="' + a.ts + '">' + closetab(a) + '<div class="notif__icon notif__icon--add"><i class="icon-plus"></i></div><div class="notif__message"><p class="notif__content ' + a.state + '"><b>' + a.un + '</b> added you to <a class="' + a.state + '" onclick="showProj(\'' + a.un + ":" + a.fid + "')\">" + c + "</a></p>" + notif_ts(a) + "</div>" + notif_footer(a) + "</li>";
    return b;
}

function closetab(a) {
    return '<div class="notif__close-tab" data-nid="' + a.nid + '" onclick="rm_notif (this)"><i class="icon-remove"></i></div>';
}

function rm_notif(a) {
    $("#js-num-notifs").text(Number($("#js-num-notifs").text()) - 1);
    $(a).parent().fadeOut().remove();
    var b = $(a).data("nid");
    o = JSON.parse(sessionStorage.getItem("notifications"));
    $(o).each(function (d, c) {
        if (c.nid == b) {
            o.splice(d, 1);
        }
    });
    sessionStorage.setItem("notifications", JSON.stringify(o));
    console.log("NOTIF TO DELETE", b);
    $.post("/notifci/", {
        nid: b,
        action: "rm"
    }, notifresp);
}

function notifresp(a) {
    if (a.err) {
        console.log(a.err);
    }
}

function notif_ts(a) {
    return '<span class="notif__content--ts">' + a.ts + "</span>";
}

function notif_footer(a) {
    return "";
}

function showProj(c) {
    console.log("showProj", c);
    toggleTree("shared");
    var b = $("#" + c.replace(":", "\\:"));
    $("#sharedtree").scrollTop(b.position().top - 20);
    var d = fileNodes(c).attr("rel");
    if (d == "plot" || d == "grid" || d == "script") {
        var a = {
            fid: c,
            ft: d
        };
        pullf(a);
    }
}

function notif_plotly(a) {
    var b = '<li class="notif ' + a.state + '" data-ts="' + a.ts + '"><span>' + a.msg + "</span></li>";
    return b;
}
testn = [{
    nid: 1234,
    un: "MattS",
    tag: "comment",
    fid: "jackp:925",
    fn: "Intel Stock data",
    state: "unread",
    ts: "30 sec ago"
}, {
    nid: 431,
    un: "GregM",
    tag: "comment",
    fid: "jackp:959",
    fn: "Bio stuff",
    state: "unread",
    ts: "1 day ago"
}, {
    nid: 4321,
    un: "ChrisP",
    tag: "project",
    fid: "jackp:970",
    fn: "Projectzzz",
    state: "unread",
    ts: "3 days ago"
}, {
    nid: 3543,
    tag: "plotly",
    msg: "Welcome to Notifications! You'll receive messages when someone shares with you, or comments on your work.",
    state: "read",
    ts: "1 week ago"
}];
var GridLayout = GridLayout || {};
GridLayout.selectVariable = function (d, c, b, a) {
    return function () {
        var h = this,
            g = $(h),
            k = d3.rgb(g.css("background-color")).toString(),
            j = $(d),
            e = d.colMeta[a]["headers"][b];
        e.bg = k;
        if (k == "#ffffff") {
            if (e.control === "radio") {
                GridLayout.clearHeaderRow(d, b, h);
            }
            e.bg = GridLayout.fillInVariableDiv(d, e, h, b);
        } else {
            if (e.control === "pair") {
                var f = GridLayout.getNextColor(d, k, b);
                g.css({
                    background: f
                });
                e.bg = f;
                if (f === "#ffffff") {
                    g.removeClass("selected");
                } else {
                    g.addClass("selected");
                }
                GridLayout.cleanUpPalette(d);
            } else {
                g.css({
                    background: "white"
                }).removeClass("selected");
                e.bg = "#ffffff";
            }
        }
        var i = GridLayout.getHeaderRowColors(d);
        if (c in MixedType.allowed_mixed_types) {
            MixedType.refreshTypes(d, i);
        }
        if (!i.length) {
            j.find(".js-run-btn").addClass("disabled");
        } else {
            j.find(".js-run-btn").removeClass("disabled");
        }
        j.trigger("grid-header-click", {
            coli: a,
            rowtype: b
        });
    };
};
GridLayout.getNextColor = function (f, e, d) {
    if (f.palette === undefined) {
        f.palette = [];
    }
    var b = f.palette.indexOf(e);
    if (f.palette.indexOf("#ffffff") == -1) {
        f.palette.push("#ffffff");
    }
    var a = (b == f.palette.length - 1) ? f.palette[0] : f.palette[b + 1];
    if (d == "x") {
        a = this.xColors(f, a);
    }
    if (e == a) {
        this.getNextColor(f, a, d);
    }
    return a;
};
GridLayout.xColors = function (d, a) {
    function c(f) {
        var e = Plotly.Plots.defaultColors,
            g = [];
        jQuery.grep(e, function (h) {
            if (jQuery.inArray(h, f) == -1) {
                g.push(h);
            }
        });
        return g[0];
    }
    var b = this.getHeaderRowColors(d);
    if (b.indexOf(a) >= 0) {
        a = c(b);
        if (d.palette.indexOf(a) == -1) {
            d.palette.push(a);
        }
    }
    return a;
};
GridLayout.cleanUpPalette = function (c) {
    var a = this.getHeaderRowColors(c);
    for (var b = 0; b < c.palette.length; b++) {
        if (a.indexOf(c.palette[b]) == -1) {
            c.palette.splice(b, 1);
            b = b - 1;
        }
    }
};
GridLayout.getHeaderRowColors = function (b, a) {
    return $.unique(b.HotGrid.getHeaderMeta("bg", a).filter(function (c) {
        return (c && c !== "#ffffff");
    }));
};
GridLayout.clearHeaderRow = function (c, b, a) {
    c.colMeta.forEach(function (e) {
        var h = e.headers;
        if (!(b in h && "elem" in h[b])) {
            return;
        }
        var g = h[b]["elem"],
            d = $(g).removeClass("selected"),
            f = d.css({
                background: "white"
            });
        h[b].bg = "#ffffff";
    });
};
GridLayout.fillInVariableDiv = function (f, j, e, d, g) {
    var i = "#69738a";
    if (g !== undefined) {
        i = g;
    }
    if (j.control === "pair") {
        var a = this.getHeaderRowColors(f, d).length;
        var h = (d === "x") ? "y" : "x";
        var b = this.getHeaderRowColors(f, h).length;
        if (!f.palette) {
            f.palette = [];
        }
        if (a == 0 || b == 0) {
            f.palette = [];
            this.clearHeaderRow(f, d);
            i = Plotly.Plots.defaultColors[0];
            if (f.palette.indexOf(i) == -1) {
                f.palette.push(i);
            }
        } else {
            var k = d3.rgb($(e).css("background-color")).toString();
            i = this.getNextColor(f, k, d);
        }
    }
    $(e).css({
        background: i
    }).addClass("selected");
    return i;
};
GridLayout.toggleErrorSym = function () {
    var e = Tabs.get(),
        d = e.colMeta[0].headers,
        b = d["Ex-"].visible,
        c = d.Ey.visible,
        a = d.Ex.visible;
    if (a !== c) {
        a = c = true;
    }
    GridLayout.toggleHeaders(["Ex-", "Ey-"], false);
    GridLayout.toggleHeaders(["Ey"], b ? true : !c);
    GridLayout.toggleHeaders(["Ex"], b ? true : !a);
};
GridLayout.toggleErrorAsym = function () {
    var c = Tabs.get(),
        b = c.colMeta[0].headers,
        a = b["Ex-"].visible;
    GridLayout.toggleHeaders(["Ex", "Ey", "Ex-", "Ey-"], !a);
};
GridLayout.toggleHeaders = function (b, a) {
    var d = Tabs.get(),
        c = d.colMeta[0].headers;
    if (!Array.isArray(b)) {
        b = [b];
    }
    if (a !== undefined) {
        Object.keys(c).filter(function (e) {
            return b.indexOf(e) > -1;
        }).forEach(function (e) {
            c[e].visible = !a;
        });
    }
    d.colMeta.forEach(function (f, e) {
        var g = f.headers;
        Object.keys(g).filter(function (h) {
            return b.indexOf(h) > -1;
        }).forEach(function (h) {
            if (c[h].visible) {
                $(g[h].elem).hide();
            } else {
                $(g[h].elem).show();
            }
        });
    });
    Object.keys(c).filter(function (e) {
        return b.indexOf(e) > -1;
    }).forEach(function (e) {
        if (c[e].visible) {
            GridLayout.clearHeaderRow(d, e);
            c[e].visible = false;
            $(c[e].cornerElem).hide();
        } else {
            c[e].visible = true;
            $(c[e].cornerElem).show();
        }
    });
};
GridLayout.selectAllCols = function (b) {
    var f = Tabs.get(),
        d = f.HotGrid.countCols() - f.HotGrid.countEmptyCols(true),
        a, e;
    for (var c = 0; c < d; c++) {
        e = f.colMeta[c].headers;
        if (b in e) {
            e[b].bg = "#69738a";
            a = $(e[b].elem);
            if (!a.hasClass("selected")) {
                a.click();
            }
        }
    }
};
GridLayout.setGridOp = function (f, h, c) {
    var d = Tabs.get(),
        a = $(d),
        j = a.find(".grid-op-container");
    if (typeof (c) === "string") {
        c = a.find(c)[0];
    }
    var i = $(c),
        e = i.parents(".dropdown-menu"),
        g = e.length > 0,
        b = $("#btn-makeaplot");
    if (g) {
        e.parent("li").removeClass("open");
    }
    if (j.css("display") != "none" && f == Plotly.Grids.getOp(d)) {
        if (h) {
            j.slideLeftHide(function () {
                GridLayout.clearGridOp(d, f);
            });
            i.removeClass("active");
            b.removeClass("active");
        }
    } else {
        if (j.css("display") != "none") {
            a.find(".link--tool.active").removeClass("active");
            i.addClass("active");
            b.addClass("active");
            GridLayout.clearGridOp(d, f);
            GridLayout.changeGridOp(d, f);
        } else {
            i.addClass("active");
            b.addClass("active");
            GridLayout.clearGridOp(d, f);
            GridLayout.changeGridOp(d, f);
            j.slideLeftShow(function () {
                Plotly.Grids.resize(d);
            });
        }
    }
};
GridLayout.clearGridOp = function (c, g) {
    var a = $(c),
        j = a.find(".grid-op-container"),
        f = j.find(".js-run-btn"),
        e = j.find(".f_rhs"),
        h = j.find(".fselect"),
        b = j.find(".grid-op__descrip"),
        i = j.find(".js-grid-op-settings-main"),
        d = j.find(".js-grid-op-settings-extra");
    f.css("display", "inline-block");
    e.remove();
    h.remove();
    b.html("");
    i.html("");
    d.remove();
    f.text("");
    c._gridOperation = undefined;
    if (g === "Transpose" || g === "Linear scale") {
        f.removeClass("disabled");
    } else {
        f.addClass("disabled");
    }
    Plotly.Grids.resize(c);
};
GridLayout.changeGridOp = function (g, i) {
    var e = $(g),
        o = e.find(".grid-op-container"),
        m = o.find(".f_rhs"),
        k = o.find(".fselect"),
        a = o.find(".grid-op__descrip").show(),
        h = o.find(".grid-op__types-table").empty().show(),
        c = o.find(".js-grid-op-settings-main").show(),
        q = o.find(".js-run-btn").show(),
        d = o.find(".js-grid-op-fit-container"),
        j, r;
    var p = Plotly.Grids.Ops[i].description;
    p = p ? p : "";
    a.html(p);
    var b = c.html();
    var f = i;
    if (["Bar chart", "Line plot", "Scatter plot", "Histogram", "Box plot", "Bubble chart", "3d scatter plot"].indexOf(i) >= 0) {
        f = "plot_extra_opts";
    }
    switch (f) {
    case "Linear scale":
        GridContent.linspace(c);
        break;
    case "Run":
        GridContent.insertExpression(g, c, "function");
        break;
    case "Replace":
        GridContent.insertExpression(g, c, "regex");
        break;
    case "Filter":
        GridContent.insertExpression(g, c, "filter");
        break;
    case "plot_extra_opts":
        GridContent.plot_extra_opts(g, c, i);
        break;
    case "Perform T-Test":
        GridContent.ttestopts(g, c);
        break;
    case "Statistics":
        GridContent.statsopts(g, c);
        break;
    case "Make heatmap":
        GridContent.hmap_opts(c);
        break;
    default:
        break;
    }
    var l = GridContent.extraSettingsHTML();
    if (i == "Box plot") {
        r = $(l).insertBefore(c);
        r.html(GridContent.selectAllBtnHTML("Select all columns", "y"));
    } else {
        if (["Make heatmap", "3d surface plot"].indexOf(i) > -1) {
            r = $(l).insertAfter(c);
            r.html(GridContent.selectAllBtnHTML("Select all columns", "z"));
        }
    }
    q.text(i);
    g._gridOperation = i;
    if (i == "Fit") {
        h.hide();
        a.hide();
        c.hide();
        q.hide();
        GridLayout.clearHeaderRow(g, "x");
        GridLayout.clearHeaderRow(g, "y");
        GridLayout.clearHeaderRow(g, "Ey");
        GridLayout.toggleHeaders(["Ey"], false);
        var n = Plotly.FitOps(g);
        n.initGridFit(d);
    } else {
        d.hide();
    }
    g.HotGrid.refreshColMeta(i);
    Plotly.Grids.resize(g);
    j = GridLayout.getHeaderRowColors(g);
    if (i in MixedType.allowed_mixed_types) {
        h.append(MixedType.initTypeTable(g, i));
        MixedType.refreshTypes(g, j);
    }
    if (j.length) {
        q.removeClass("disabled");
    }
};
GridLayout.makeGridToolMenu = function (e, d) {
    if (d === undefined) {
        d = "";
    }
    var c = $(e);
    c.prepend($("script#load-grid-toolmenu").html());
    c.find(".tool-menu__btn-list a").tipsy({
        gravity: "nw",
        opacity: 1
    });
    c.find(".js-file-upload").on("change", function () {
        fileSelected(this, "grid");
    });
    c.find(".js-save-grid").on("click", function () {
        Plotly.Grids.launchSaveGrid();
        return false;
    });
    c.find(".js-copy-grid").on("click", function () {
        Plotly.Grids.copyGrid();
        return false;
    });
    c.find(".js-download-csv").on("click", function () {
        Plotly.Grids.launchDownloadGrid();
        return false;
    });
    c.find(".js-share-grid").on("click", function () {
        launchShareGrid();
        return false;
    });
    c.find(".js-show-comments").on("click", function () {
        toggleCommentPane();
        return false;
    });
    c.find(".js-grid-undo").on("click", function () {
        e.HotGrid.undo();
        return false;
    });
    c.find(".js-grid-redo").on("click", function () {
        e.HotGrid.redo();
        return false;
    });
    c.find(".js-plot-line").on("click", function () {
        GridLayout.setGridOp("Line plot", true, this);
        return false;
    });
    c.find(".js-plot-scatter").on("click", function () {
        GridLayout.setGridOp("Scatter plot", true, this);
        return false;
    });
    c.find(".js-plot-bar").on("click", function () {
        GridLayout.setGridOp("Bar chart", true, this);
        return false;
    });
    c.find(".js-plot-bubble").on("click", function () {
        GridLayout.setGridOp("Bubble chart", true, this);
        return false;
    });
    c.find(".js-plot-area").on("click", function () {
        GridLayout.setGridOp("Area plot", true, this);
        return false;
    });
    c.find(".js-plot-heatmap").on("click", function () {
        GridLayout.setGridOp("Make heatmap", true, this);
        return false;
    });
    c.find(".js-plot-hist").on("click", function () {
        GridLayout.setGridOp("Histogram", true, this);
        return false;
    });
    c.find(".js-plot-2d-hist").on("click", function () {
        GridLayout.setGridOp("2D Histogram", true, this);
        return false;
    });
    c.find(".js-plot-polar-line").on("click", function () {
        GridLayout.setGridOp("Polar line plot", true, this);
        return false;
    });
    c.find(".js-plot-polar-dot").on("click", function () {
        GridLayout.setGridOp("Polar dot plot", true, this);
        return false;
    });
    c.find(".js-plot-polar-bar").on("click", function () {
        GridLayout.setGridOp("Polar bar chart", true, this);
        return false;
    });
    c.find(".js-plot-polar-area").on("click", function () {
        GridLayout.setGridOp("Polar area chart", true, this);
        return false;
    });
    c.find(".js-plot-fit").on("click", function () {
        GridLayout.setGridOp("Fit", true, this);
        return false;
    });
    c.find(".js-plot-box").on("click", function () {
        GridLayout.setGridOp("Box plot", true, this);
        return false;
    });
    c.find(".js-plot-3dscatter").on("click", function () {
        GridLayout.setGridOp("3d scatter plot", true, this);
        return false;
    });
    c.find(".js-plot-3dsurface").on("click", function () {
        GridLayout.setGridOp("3d surface plot", true, this);
        return false;
    });
    c.find(".js-grid-find-replace").on("click", function () {
        GridLayout.setGridOp("Replace", false, this);
        return false;
    });
    c.find(".js-grid-filter").on("click", function () {
        GridLayout.setGridOp("Filter", false, this);
        return false;
    });
    c.find(".js-grid-x-vals").on("click", function () {
        GridLayout.setGridOp("Linear scale", false, this);
        return false;
    });
    c.find(".js-grid-interpolate").on("click", function () {
        GridLayout.setGridOp("Interpolate", false, this);
        return false;
    });
    c.find(".js-grid-transpose").on("click", function () {
        GridLayout.setGridOp("Transpose", false, this);
        return false;
    });
    c.find(".js-grid-date-time").on("click", function () {
        GridLayout.setGridOp("Convert", false, this);
        return false;
    });
    c.find(".js-grid-apply-func").on("click", function () {
        GridLayout.setGridOp("Run", false, this);
        return false;
    });
    c.find(".js-grid-deriv").on("click", function () {
        GridLayout.setGridOp("Take derivative", false, this);
        return false;
    });
    c.find(".js-grid-integrate").on("click", function () {
        GridLayout.setGridOp("Integrate", false, this);
        return false;
    });
    c.find(".js-grid-fit").on("click", function () {
        GridLayout.setGridOp("Fit", false, this);
        return false;
    });
    c.find(".js-grid-basic-stats").on("click", function () {
        GridLayout.setGridOp("Statistics", false, this);
        return false;
    });
    c.find(".js-grid-chi-sq").on("click", function () {
        GridLayout.setGridOp("Perform Chi-squared Test", false, this);
        return false;
    });
    c.find(".js-grid-t-test").on("click", function () {
        GridLayout.setGridOp("Perform T-Test", false, this);
        return false;
    });
    c.find(".js-grid-anova").on("click", function () {
        GridLayout.setGridOp("Perform a one-way ANOVA", false, this);
        return false;
    });
    c.find(".js-example-toggle").on("click", function () {
        Examples.set(this);
        return false;
    });
    Examples.init();
    if (SHOW_EXAMPLES == "grid") {
        Examples.set();
    }
    var a = '<div class="grid-op-container js-context-id-' + e.id + '" style="display:' + (d !== "" ? "inline-block" : "none") + '"><div class="action-panel"><div class="action-panel__close"><button type="button" class="close">&times;</button></div><div class="action-panel__inner"><div class="grid-op__types-table"></div><p class="grid-op__descrip"></p><div class="grid-op__settings js-grid-op-settings-main"></div><a class="grid-op__btn btn btn--med btn--cta js-run-btn disabled"></a><div class="js-grid-op-fit-container" style="display: none;"></div></div></div>';
    c.append(a);
    c.append($("script#load-file-and-comments").html());
    $('<div class="grid-container"><div class="gridcols"></div></div>').appendTo($(e).find(".file-and-comments"));
    var b = c.find(".grid-op-container");
    b.find(".close").on("click", function () {
        c.find(".link--tool.active").removeClass("active");
        b.slideLeftHide(function () {
            GridLayout.clearGridOp(e, Plotly.Grids.getOp(e));
        });
    });
    b.find(".js-run-btn").on("click", Plotly.Grids.runOp);
};
var GridContent = GridContent || {};
GridContent.insertExpression = function (h, c, g) {
    var d = "";
    var e, b, f, a;
    if (g == "function") {
        e = this.labeled_input("f_rhs", "sin(x)*cos(y)", "f(x)");
        b = this.fexamples();
        f = "120px";
    } else {
        if (g == "filter") {
            e = this.labeled_input("filter_regex", "Enter a filter term", '<i class="icon-filter"></i>');
        } else {
            e = "";
            b = this.rexamples();
            f = "220px";
        }
    } if (g != "filter") {
        a = {
            items: b,
            callback: function (i) {
                var j = $(h).find(".f_rhs").val();
                $(h).find(".f_rhs").val(j + i);
            }
        };
        d = Plotly.Lib.dropdownSelector(a);
    }
    c.append(e);
    c.append(d);
};
GridContent.linspace = function (a) {
    a.append(this.labeled_input("lin", "0", "x<sub>o</sub>") + this.labeled_input("lin", "0", "x<sub>f</sub>") + this.labeled_input("lin", "0", "n"));
};
GridContent.labeled_input = function (h, j, i, f) {
    var d, g, a, b, c = Tabs.get().tabtype;
    if ((i == "xmin" || i == "xmax" || i == "f(x)") && c == "grid") {
        d = ' style="margin-top: 10px;"';
    }
    if (j === undefined) {
        g = "";
    } else {
        g = ' placeholder="' + j + '"';
    } if (f === undefined) {
        b = "";
    } else {
        b = " " + f;
    }
    var e = '<div class="input-prepend"' + d + '><span class="add-on' + b + '">' + i + '</span><input class="input ' + h + '" type="text"' + g + "></div>";
    return e;
};
GridContent.extraSettingsHTML = function () {
    return '<div class="grid-op__settings js-grid-op-settings-extra"></div>';
};
GridContent.selectAllBtnHTML = function (a, b) {
    var c = "";
    c = "GridLayout.selectAllCols('" + b + "');";
    return '<a class="grid-op__btn btn btn--small btn--plain" onclick="' + c + '">' + a + "</a>";
};
GridContent.ttestopts = function (c, b) {
    var a = {
        items: ["Assume equal variances", "Assume unequal variances"],
        cls: "js-grid-stat-dropdown",
        callback: function (e, d) {
            if (d === 0) {
                c._tTestType = "ttest_ind";
            }
            if (d === 1) {
                c._tTestType = "ttest_rel";
            }
        }
    };
    b.append(Plotly.Lib.dropdownSelector(a));
};
GridContent.statsopts = function (c, b) {
    var a = {
        items: ["Inferential (N-1)", "Descriptive"],
        cls: "js-grid-stat-dropdown",
        callback: function (e, d) {
            if (d === 0) {
                c._ddof = 1;
            }
            if (d === 1) {
                c._ddof = 0;
            }
        }
    };
    b.append(Plotly.Lib.dropdownSelector(a));
};
GridContent.plot_extra_opts = function (f, b, h) {
    var d = function (k) {
        return '<div class="grid-op__btn-label">' + k + "</div>";
    };
    var c = function () {
        if (["Box plot", "Histogram", "Bubble chart", "3d scatter plot"].indexOf(h) > -1) {
            return "";
        }
        return '<a class="btn btn--small btn--plain js-error-bars" href="#"            onclick="GridLayout.toggleErrorSym()">Error Bars</a>            <a class="btn btn--small btn--plain js-error-bars-asym" href="#"            onclick="GridLayout.toggleErrorAsym()">Asymmetric Errors</a>';
    };
    var j = function () {
        return '<a class="btn btn--small btn--plain js-group-by" href="#"            onclick="GridLayout.toggleHeaders(\'G\')">Group By</a>';
    };
    var g = function () {
        if (h == "Bubble chart" && h == "3d scatter plot") {
            return "";
        }
        var l = $(".js-tab-contents").toArray(),
            m = {};
        var k = {
            cls: "plot-tab-list",
            items: l.filter(function (o) {
                return o.tabtype === "plot";
            }).map(function (r) {
                var p = l.indexOf(r);
                var o = r.fn || "";
                var q = "tab " + p + ": " + o;
                m[q] = r.id;
                return q;
            }),
            callback: function (o) {
                f._insertIntoPlot = m[o];
            }
        };
        k.items.unshift("Make a new plot");
        var n = $('<div class="grid-op__btn-group"><div class="grid-op__btn-group-inner">' + d("INSERT INTO") + "</div></div>");
        n.find(".grid-op__btn-group-inner").append(Plotly.Lib.dropdownSelector(k));
        return n;
    };
    var e = function () {
        if (h !== "Bubble chart" && h !== "3d scatter plot") {
            return "";
        }
        return '<a class="btn btn--small btn--plain js-size-by" href="#"            onclick="GridLayout.toggleHeaders(\'S\')">Size By</a>';
    };
    var a = function () {
        if (h != "Bubble chart" && h !== "3d scatter plot") {
            return "";
        }
        return '<a class="btn btn--small btn--plain js-hover-text" href="#"            onclick="GridLayout.toggleHeaders(\'T\')">Text</a>';
    };
    var i = function () {
        if (h != "2D Histogram") {
            return "";
        }
        return '<a class="btn btn--small btn--plain js-hover-text" href="#"            onclick="GridLayout.toggleHeaders(\'Z\')">Z-Column</a>';
    };
    b.append('<div class="grid-op__btn-group"><div class="grid-op__btn-group-inner">' + d("OPTIONS") + c() + j() + e() + a() + "</div></div>");
    b.append(g());
};
GridContent.hmap_opts = function (a) {
    var b = '<div class="grid-op__btn-group"><div class="grid-op__btn-group-inner js-x-axis-opts" data-toggle="buttons-radio"><div class="grid-op__btn-label">X-AXIS</div><button type="button" class="btn btn--small btn--plain active" value="1">Default</button><button type="button" class="btn btn--small btn--plain js-column-names" value="2">Column names</button><button type="button" class="btn btn--small btn--plain js-first-row" value="3">First row</button></div></div>';
    a.append(b);
};
GridContent.fexamples = function () {
    return ["abs", "acos", "asin", "atan", "atan2", "ceil", "cos", "exp", "floor", "log", "max", "min", "pow", "random", "round", "sin", "sqrt", "tan"];
};
GridContent.rexamples = function () {
    return ["1971 (13) &#8594; 1971", "1971 [13] &#8594; 1971"];
};
var GridOperations = GridOperations || {};
GridOperations.integrate = function (g) {
    var c, e = [],
        f = g.HotGrid.getMetaByColor(true, "x")[0],
        b = g.HotGrid.getMetaByColor(true, "f")[0],
        a = GridOperations.getCalcData(g, f.coli, true),
        d = GridOperations.getCalcData(g, b.coli, true);
    for (c = 0; c < a.length; c++) {
        if (c !== a.length - 1) {
            e.push((a[c + 1] - a[c]) * (d[c + 1] + d[c]) / 2);
        } else {
            e.push(e[c - 1] + d[c]);
        } if (e.length > 1) {
            e[e.length - 1] = e[e.length - 1] + e[e.length - 2];
        }
    }
    return GridOperations.addCol(g, {
        data: e,
        name: "Integral"
    });
};
GridOperations.derivative = function (h, g) {
    var d = [],
        e = h.HotGrid.getMetaByColor(true, "t")[0],
        f = h.HotGrid.getMetaByColor(true, "x")[0],
        c = GridOperations.getCalcData(h, e.coli, true),
        a = GridOperations.getCalcData(h, f.coli, true);
    for (var b = 0; b < c.length; b++) {
        if (b === 0) {
            d.push((a[b + 1] - a[b]) / (c[b + 1] - c[b]));
        } else {
            if (b === c.length - 1) {
                d.push((a[b] - a[b - 1]) / (c[b] - c[b - 1]));
            } else {
                d.push((a[b + 1] - a[b - 1]) / (2 * (c[b + 1] - c[b])));
            }
        }
    }
    return GridOperations.addCol(h, {
        data: d,
        name: "Derivative"
    });
};
GridOperations.interpolate = function (h, g) {
    var f = h.HotGrid.getMetaByColor(true, "x")[0],
        d = h.HotGrid.getMetaByColor(true, "y")[0],
        b = h.HotGrid.getMetaByColor(true, "x2")[0],
        a = GridOperations.getCalcData(h, f.coli, true),
        e = GridOperations.getCalcData(h, d.coli, true),
        c = GridOperations.getCalcData(h, b.coli, true);
    GridOperations.addCol(h, {
        data: numeric.spline(a, e).at(c),
        name: g
    });
};
GridOperations.runMath = function (td) {
    var Math = mathjs(),
        expr = $(td).find(".f_rhs").val().toLowerCase(),
        xMeta = td.HotGrid.getMetaByColor(true, "x")[0],
        yMeta = td.HotGrid.getMetaByColor(true, "y")[0],
        xlen = Infinity,
        ylen = Infinity,
        xcoli = 0,
        ycoli = 0,
        result = [],
        r, x, y;
    try {
        Math.eval(expr, {
            x: 1,
            y: 1
        });
    } catch (e) {
        return Plotly.Lib.notifier(e);
    }
    if (xMeta) {
        x = GridOperations.getCalcData(td, xMeta.coli, true);
        xlen = x.length;
        xcoli = xMeta.coli;
    }
    if (yMeta) {
        y = GridOperations.getCalcData(td, yMeta.coli, true);
        ylen = y.length;
        ycoli = yMeta.coli;
    }
    var len = Math.min(xlen, ylen);
    var newcoli = Math.max(xcoli, ycoli) + 1;
    if (expr.substr(0, 1) == "=") {
        expr = expr.substr(1);
    }
    for (var i = 0; i < len; i++) {
        r = Math.eval(expr, {
            x: (xMeta) ? x[i] : 0,
            y: (yMeta) ? y[i] : 0
        });
        result.push((r !== null) ? r : 0);
    }
    return GridOperations.addCol(td, {
        data: result,
        name: expr,
        coli: newcoli
    });
};
GridOperations.linearScale = function (e, d) {
    var a = $(e).find(".lin"),
        c = e.HotGrid.getMetaByColor(true, "x")[0],
        b = numeric.linspace($(a[0]).val(), $(a[1]).val(), $(a[2]).val());
    GridOperations.addCol(e, {
        data: b,
        name: d
    });
};
GridOperations.basicStats = function (e) {
    var c = e._ddof,
        b = [],
        d = e.HotGrid.getMetaByColor(true, "s"),
        a = [];
    d.forEach(function (f) {
        b.push(f.name);
        a.push(GridOperations.getCalcData(e, f.coli, false));
    });
    GridOperations.post2gridops(e, {
        operation: "Statistics",
        data: a,
        colnames: b,
        ddof: c
    });
};
GridOperations.tTest = function (d) {
    var a = d._tTestType,
        b = d.HotGrid.getMetaByColor(true, "a")[0],
        c = d.HotGrid.getMetaByColor(true, "b")[0];
    GridOperations.post2gridops(d, {
        operation: a,
        data: {
            a: GridOperations.getCalcData(d, b.coli, false),
            b: GridOperations.getCalcData(d, c.coli, false)
        }
    });
};
GridOperations.chi2Test = function (c) {
    var a = c.HotGrid.getMetaByColor(true, "obs")[0],
        b = c.HotGrid.getMetaByColor(true, "exp")[0];
    GridOperations.post2gridops(c, {
        operation: "chisquare",
        data: {
            f_obs: GridOperations.getCalcData(c, a.coli, false),
            f_exp: GridOperations.getCalcData(c, b.coli, false)
        }
    });
};
GridOperations.anova = function (d) {
    var c = d.HotGrid.getMetaByColor(true, "A"),
        a = [],
        b = [];
    if (c.length < 2) {
        Plotly.Lib.notifier("Please select at least two columns for ANOVA.");
        return;
    }
    c.forEach(function (e) {
        b.push(e.name);
        a.push(GridOperations.getCalcData(d, e.coli, false));
    });
    GridOperations.post2gridops(d, {
        operation: "ANOVA",
        data: a,
        colnames: b
    });
};
GridOperations.post2gridops = function (d, a) {
    var c = "Computing";
    addMessage(c);
    var b = {
        payload: JSON.stringify(a)
    };
    $.post("/gridops", b, function (g) {
        delMessage(c);
        var f = JSON.parse(g);
        if (f.err === "") {
            for (var e in f.data) {
                GridOperations.addCol(d, {
                    data: f.data[e].result,
                    name: f.data[e].label
                });
            }
        } else {
            Plotly.Lib.notifier("An error occurred on the server.");
        }
    });
};
GridOperations.filterRows = function (a) {
    var l, j = $(".filter_regex").val();
    if (j === "" || j === null || j === undefined) {
        return;
    }
    try {
        l = new RegExp(j);
    } catch (d) {
        Plotly.Lib.notifier("Could not parse regular expression");
        return;
    }
    var h = a.HotGrid.getData(),
        c = [],
        m = [],
        f = a.HotGrid.getMetaByColor(true, "x")[0],
        g = a.HotGrid.getDataAtCol(f.coli),
        k = a.HotGrid.countRows() - a.HotGrid.countEmptyRows();
    for (var b = 0; b < k; b++) {
        if (!l.test(g[b])) {
            m.push(h[b].map(function () {
                return null;
            }));
        } else {
            c.push(h[b].slice(0));
        }
    }
    a.HotGrid.populateFromArray(0, 0, c.concat(m));
};
GridOperations.convertTimeStamp = function (d) {
    var a = d.HotGrid.getMetaByColor(true, "t")[0],
        c = GridOperations.getColData(d, a.coli),
        b;
    if (!isNaN(c[0])) {
        b = c.map(GridOperations.unix_to_mysql);
    } else {
        b = c.map(function (f) {
            var e = Plotly.Lib.dateTime2ms(f);
            if (e === false) {
                return f;
            } else {
                return e;
            }
        });
    }
    GridOperations.replaceCol(d, b, a.coli);
};
GridOperations.unix_to_mysql = function (a) {
    if (a === null) {
        return "";
    }
    if (a.length === 10) {
        a += "000";
    }
    var b = new Date(Number(a));
    if (isNaN(b.getTime())) {
        return a;
    } else {
        return d3.time.format("%Y-%m-%d %H:%M:%S.%L")(b);
    }
};
GridOperations.trimArray = function (b) {
    var c = b.length;
    while (c >= 0) {
        c--;
        if (!(b[c] === "" || b[c] === null || b[c] === undefined)) {
            break;
        }
    }
    return b.slice(0, c + 1);
};
GridOperations.transpose = function (g) {
    function j(i, p) {
        if (i === "headers") {
            return {};
        } else {
            return p;
        }
    }
    var l, o, n, m, f, a, e, h = g.id,
        b = g.colMeta[0].isTransposed,
        d = /^Col\d*$/,
        c = g.HotGrid.activeCols();
    if (!b) {
        l = g.HotGrid.getData();
        e = g.colMeta.map(function (i) {
            return i.name;
        }).slice(0, c + 1);
        a = e.some(function (i) {
            return !d.test(i);
        });
        if (a) {
            l.unshift(e);
        }
        o = numeric.transpose(l).slice(0, c + 1);
        m = JSON.stringify(g.colMeta.slice(0, c + 1), j);
        sessionStorage.setItem(h + "-original-meta", m);
        f = sessionStorage.getItem(h + "-transposed-meta");
        if (f === null) {
            n = [];
            for (var k = 0; k < o.length; k++) {
                n.push(g.HotGrid.genNewColMeta(k));
            }
        } else {
            n = JSON.parse(f);
        } if (a) {
            n[0].name = "row headers";
        }
        n[0].isTransposed = true;
    } else {
        l = g.HotGrid.getData();
        o = numeric.transpose(l);
        if (g.colMeta[0].name === "row headers") {
            o.shift();
        }
        m = JSON.stringify(g.colMeta, j);
        sessionStorage.setItem(h + "-transposed-meta", m);
        f = sessionStorage.getItem(h + "-original-meta");
        if (f === null) {
            n = [];
            for (var k = 0; k < o.length; k++) {
                n.push({
                    name: "Col" + (k + 1),
                    uid: GridOperations.newUID(g),
                    width: 100,
                    headers: {}
                });
            }
        } else {
            n = JSON.parse(f);
        }
        delete n[0]["isTransposed"];
    }
    g.colMeta = n;
    g.HotGrid.loadData(o);
};
GridOperations.groupColumns = function (l, x, A, w, m, i, s, h, t, v, u, k, c) {
    var b = Plotly.Lib.fullFid(l.fid),
        o = this.getColData(l, i.coli).map(function (d) {
            return d.toString().trim();
        }),
        a = w ? GridOperations.getColData(l, w.coli) : [],
        r = m ? GridOperations.getColData(l, m.coli) : [],
        j = s ? GridOperations.getColData(l, s.coli) : [],
        z = h ? GridOperations.getColData(l, h.coli) : [],
        e = t ? GridOperations.getColData(l, t.coli) : [],
        f = v ? GridOperations.getColData(l, v.coli) : [],
        y = u ? GridOperations.getColData(l, u.coli) : [],
        q = k ? GridOperations.getColData(l, k.coli) : [],
        g = c ? GridOperations.getColData(l, c.coli) : [],
        n = {};
    o.forEach(function (B) {
        if (B in n) {
            return;
        }
        var d = {},
            C = "?" + i.uid + "=" + JSON.stringify(B);
        if (x.type === "box") {
            d.ysrc = b + ":" + w.uid + C;
        } else {
            if (x.type === "histogram") {
                d.xsrc = b + ":" + w.uid + C;
            } else {
                d.xsrc = b + ":" + w.uid + C;
                d.ysrc = b + ":" + m.uid + C;
            }
        } if (c) {
            d.zsrc = b + ":" + c.uid + C;
        }
        if (j.length) {
            d.error_x = {
                array: [],
                arraysrc: b + ":" + s.uid + C
            };
            if (e.length) {
                d.error_x.arrayminus = [];
                d.error_x.arrayminussrc = b + ":" + t.uid + C;
            }
        }
        if (z.length) {
            d.error_y = {
                array: [],
                arraysrc: b + ":" + h.uid + C
            };
            if (f.length) {
                d.error_y.arrayminus = [];
                d.error_y.arrayminussrc = b + ":" + v.uid + C;
            }
        }
        if (y.length) {
            d.marker = {
                size: [],
                sizeref: GridOperations.normalizeSizeByCol(y),
                sizemode: "area",
                sizesrc: b + ":" + u.uid + C
            };
        }
        if (q.length) {
            d.text = [];
            d.textsrc = b + ":" + k.uid + C;
        }
        $.extend(true, d, x);
        d.name = B;
        n[B] = d;
    });
    o.forEach(function (d, B) {
        if ("box" === x.type) {
            n[d].y.push(a[B]);
        } else {
            n[d].x.push(a[B]);
            if (r.length) {
                n[d]["y"].push(r[B]);
            }
            if (g.length) {
                n[d]["z"].push(g[B]);
            }
        } if (j.length) {
            n[d].error_x.array.push(j[B]);
            if (e.length) {
                n[d].error_x.arrayminus.push(e[B]);
            }
        }
        if (z.length) {
            n[d].error_y.array.push(z[B]);
            if (f.length) {
                n[d].error_y.arrayminus.push(f[B]);
            }
        }
        if (y.length) {
            n[d].marker.size.push(y[B]);
        }
        if (q.length) {
            n[d].text.push(q[B]);
        }
    });
    for (var p in n) {
        A.push(n[p]);
    }
};
GridOperations.plotPairs = function (c, h) {
    var d = Plotly.Lib.fullFid(c.fid),
        g = [],
        m = false,
        j = {
            yaxis: {},
            xaxis: {}
        },
        o, k, i;
    var a, f;
    var n = Plotly.Grids.Ops[h]["rowlabels"];
    var l = h === "Box plot" ? "y" : "x";
    var b = c.HotGrid.getMetaByColor(true, l);
    if (b.length === 0) {
        Plotly.Lib.notifier("Select an x column to plot.");
        return;
    }
    b.forEach(function (G) {
        k = G.name;
        var p = G.headers;
        var z = p[l].bg,
            t = p[l].plottype,
            A = Plotly.Grids.GridOp2PlotType(t),
            y = GridOperations.getColData(c, G.coli),
            q = d + ":" + G.uid,
            H, w = h === "Box plot" ? "x" : "y",
            r = c.HotGrid.getMetaByColor(z, w),
            B = c.HotGrid.getMetaByColor(z, "z"),
            u = c.HotGrid.getMetaByColor(z, "G")[0],
            C = c.HotGrid.getMetaByColor(z, "Ex")[0],
            s = c.HotGrid.getMetaByColor(z, "Ey")[0],
            D = c.HotGrid.getMetaByColor(z, "Ex-")[0],
            F = c.HotGrid.getMetaByColor(z, "Ey-")[0],
            E = c.HotGrid.getMetaByColor(z, "S")[0],
            v = c.HotGrid.getMetaByColor(z, "T")[0];
        if (y.length === 0) {
            return;
        }
        if (A && ["histogram", "box"].indexOf(A.type) > -1) {
            H = (A.type === "histogram") ? $.extend({}, {
                x: [],
                name: k
            }, A) : $.extend({}, {
                y: [],
                name: k
            }, A);
            if (u) {
                GridOperations.groupColumns(c, H, g, G, [], u, C, s, D, F, E, v);
                return;
            }
            if (A.type === "histogram") {
                if (d && k) {
                    H.xsrc = q;
                }
                H.x = y;
            } else {
                if (d && k) {
                    H.ysrc = q;
                }
                H.y = y;
            }
            g.push(H);
            return;
        }
        r.forEach(function (x) {
            i = x.name;
            var J = {
                x: [],
                y: [],
                name: i
            };
            J = $.extend({}, J, A);
            if (u && h !== "3d scatter plot") {
                GridOperations.groupColumns(c, J, g, G, x, u, C, s, D, F, E, v);
                o = true;
                return;
            }
            var I = d + ":" + x.uid,
                K = GridOperations.getColData(c, x.coli);
            if (K.length === 0) {
                return;
            }
            if (h !== "3d scatter plot") {
                J.x = y;
                J.y = K;
                J.xsrc = q;
                J.ysrc = I;
                if (C) {
                    J.error_x = {
                        array: GridOperations.getColData(c, C.coli),
                        arraysrc: d + ":" + C.uid
                    };
                    if (D) {
                        J.error_x.arrayminus = GridOperations.getColData(c, D.coli);
                        J.error_x.arrayminussrc = d + ":" + D.uid;
                    }
                }
                if (s) {
                    J.error_y = {
                        array: GridOperations.getColData(c, s.coli),
                        arraysrc: d + ":" + s.uid
                    };
                    if (F) {
                        J.error_y.arrayminus = GridOperations.getColData(c, F.coli);
                        J.error_y.arrayminussrc = d + ":" + F.uid;
                    }
                }
                if (E) {
                    m = true;
                    J.marker = {
                        size: GridOperations.getColData(c, E.coli),
                        sizesrc: d + ":" + E.uid,
                        sizemode: "area"
                    };
                    J.marker.sizeref = GridOperations.normalizeSizeByCol(J.marker.size);
                }
                if (v) {
                    J.text = GridOperations.getColData(c, v.coli);
                    J.textsrc = d + ":" + v.uid;
                }
                if (h.indexOf("Polar") != -1) {
                    J = {
                        t: y,
                        tsrc: q,
                        r: K,
                        rsrc: I,
                        name: i
                    };
                    if (h === "Polar line plot") {
                        J.type = "scatter";
                        J.mode = "lines";
                    } else {
                        if (h === "Polar dot plot") {
                            J.type = "scatter";
                            J.mode = "markers";
                        } else {
                            if (h === "Polar area chart") {
                                J.type = "area";
                            } else {
                                if (h === "Polar bar chart") {
                                    J.type = "bar";
                                }
                            }
                        }
                    }
                    j = {};
                    if (typeof y[0] === "string") {
                        j.angularAxis = {
                            domain: null
                        };
                    } else {
                        j.angularAxis = {
                            domain: [0, 360]
                        };
                    } if (g.length > 1) {
                        j.barmode = "stack";
                    }
                }
                g.push(J);
            } else {
                B.forEach(function (P) {
                    var O = P.name;
                    var N = {
                        x: [],
                        y: [],
                        z: [],
                        name: O,
                        type: "scatter3d",
                        mode: "markers"
                    };
                    N = $.extend({}, N, A);
                    if (u) {
                        GridOperations.groupColumns(c, N, g, G, x, u, C, s, D, F, E, v, P);
                        o = true;
                        return;
                    }
                    var L = d + ":" + P.uid,
                        M = GridOperations.getColData(c, P.coli);
                    if (K.length === 0) {
                        return;
                    }
                    N.x = y;
                    N.y = K;
                    N.z = M;
                    N.xsrc = q;
                    N.ysrc = I;
                    N.zsrc = L;
                    if (E) {
                        m = true;
                        N.marker = {
                            size: GridOperations.getColData(c, E.coli),
                            sizesrc: d + ":" + E.uid,
                            sizemode: "area"
                        };
                        N.marker.sizeref = GridOperations.normalizeSizeByCol(N.marker.size);
                    }
                    if (v) {
                        N.text = GridOperations.getColData(c, v.coli);
                        N.textsrc = d + ":" + v.uid;
                    }
                    g.push(N);
                });
            }
        });
    });
    a = c._insertIntoPlot;
    if (a) {
        var e = document.getElementById(a);
        if (e !== null) {
            Plotly.plot(e, g, j);
            e.changed = true;
            if (d || c.ref_fids) {
                if (!e.ref_fids) {
                    e.ref_fids = [];
                }
                if (d) {
                    e.ref_fids.push(d);
                } else {
                    e.ref_fids = e.ref_fids.concat(c.ref_fids);
                }
            }
            return Tabs.select(e);
        }
    } else {
        if (g.length === 1) {
            if (k && k.indexOf("Col") !== 0 && j.xaxis) {
                j.xaxis.title = k;
            }
            if (i && i.indexOf("Col") !== 0 && j.xaxis) {
                j.yaxis.title = i;
            }
        }
    } if (m) {
        j.hovermode = "closest";
    }
    if (o) {
        j.barmode = "group";
    }
    if (g.length) {
        fileResp({
            type: "plot",
            data: g,
            layout: j,
            ref_fids: [d]
        });
    } else {
        Plotly.Lib.notifier("Make sure to match the colors of x and y column pairs", "long");
    }
};
GridOperations.normalizeSizeByCol = function (b) {
    var a = Plotly.Lib.aggNums(Math.max, null, b);
    return a ? a / 3600 : 1;
};
GridOperations.getColData = function (b, a) {
    return this.trimArray(b.HotGrid.getDataAtCol(a));
};
GridOperations.getRowData = function (b, a) {
    return b.HotGrid.getDataAtRow(a);
};
GridOperations.getCalcData = function (e, d, b) {
    var c = GridOperations.getColData(e, d);
    var a = GridOperations.getColAxes(c);
    c = c.map(a.d2c);
    if (b) {
        c = c.map(function (f) {
            return isNaN(f) ? 0 : f;
        });
    }
    return c.map(a.d2c);
};
GridOperations.getColAxes = function (b) {
    var a = {};
    a.type = Plotly.Axes.autoType(b);
    Plotly.Axes.setConvert(a);
    return a;
};
GridOperations.mapgrid = function (h, m) {
    var a = Plotly.Lib.fullFid(h.fid),
        b = h.HotGrid.getMetaByColor(true, "z");
    if (!b.length) {
        Plotly.Lib.notifier("Woah there cowgirl!<br>Select some Z data<br>to plot.");
        return;
    }
    var j = b.map(function (i) {
        return i.coli;
    }).map(function (i) {
        return GridOperations.getCalcData(h, i).filter(function (k) {
            return k !== undefined;
        });
    });
    var q = a + ":",
        c = [],
        f = h.colMeta.slice(0, h.colMeta.length - h.HotGrid.countEmptyCols(true));
    if (b.length < f.length) {
        if (b.length >= Math.floor(f.length * 0.8)) {
            q += "-";
            c = f.filter(function (i) {
                var k = (k = i.headers) && (k = k.z) && (k = k.bg);
                return !k || k == "#ffffff";
            });
        } else {
            c = b;
        }
        q += c.map(function (i) {
            return i.uid;
        }).join(",");
    }
    var t = Math.max.apply(null, j.map(function (i) {
        return i.length;
    }));
    if (j[0].length < t) {
        for (var s = j[0].length; s < t; s++) {
            j[0].push(null);
        }
    }
    j = j[0].map(function (k, v) {
        return j.map(function (i) {
            return i[v];
        });
    });
    var n, r, g = "",
        u = [{
            type: "heatmap",
            z: j,
            zsrc: q
        }],
        l = {
            showlegend: false
        };
    var p = h.HotGrid.getMetaByColor(true, "y")[0];
    if (p) {
        n = GridOperations.trimArray(GridOperations.getColData(h, p.coli));
        g = a + ":" + p.uid;
        if (n[0] === undefined || n[0] === "" || n[0] === null) {
            n = n.splice(1);
        }
        u[0].y = n;
        u[0].ysrc = g;
    } else {
        l.yaxis = {
            autorange: "reversed"
        };
    }
    var d = Number($(h).find(".js-x-axis-opts").find("button.active").val());
    var o = [],
        e = "";
    if (d === 2) {
        o = b.map(function (i) {
            return i.name;
        });
    } else {
        if (Number(d) == 3) {
            o = GridOperations.trimArray(GridOperations.getRowData(0));
        }
    } if (o.length && (o[0] === "" || o[0] === null)) {
        o = o.splice(1);
    }
    if (o.length) {
        u[0].x = o;
        if (e) {
            u[0].xsrc = e;
        }
    }
    if (m === "2d Histogram") {
        u = [{
            type: "histogram2d",
            x: j,
            y: n,
            autobinx: true,
            autobiny: true
        }];
        if (q) {
            u[0].xsrc = q;
        }
        if (g) {
            u[0].ysrc = g;
        }
    }
    if (m === "3d surface plot") {
        u[0].type = "surface";
    }
    fileResp({
        type: "plot",
        data: u,
        layout: l,
        ref_fids: [Plotly.Lib.fullFid(h.fid)]
    });
};
GridOperations.addCol = function (d, i) {
    var c = (i.coli !== undefined) ? i.coli : d.HotGrid.activeCols(),
        a = i.name ? i.name.trim() : "Col" + c,
        b = i.width || 100,
        e = i.uid || GridOperations.newUID(d),
        f = i.fit || "",
        h = i.data,
        g = d.colMeta;
    if (Plotly.Lib.isEmpty(h)) {
        console.log("WARNING, ATTEMPTED TO ADD EMPTY COLUMN");
        return;
    }
    d.HotGrid.alter("insert_col", c);
    d.HotGrid.spliceCol.apply(d.HotGrid, [c, 0, h.length].concat(h));
    d.HotGrid.updateColMeta({
        name: a,
        uid: e,
        fit: f,
        width: b,
        headers: {}
    }, c);
    d.HotGrid.refreshColMeta(Plotly.Grids.getOp(d));
    d.HotGrid.refreshMetaIndices(d);
    d.HotGrid.render();
    return;
};
GridOperations.deleteCol = function (b, a) {
    b.HotGrid.alter("remove_col", a);
    return;
};
GridOperations.replaceCol = function (d, a, c) {
    var b = d.HotGrid.countRows() - d.HotGrid.countEmptyRows();
    d.HotGrid.spliceCol.apply(d.HotGrid, [c, 0, b].concat(a));
};
GridOperations.findAndReplace = function (d) {
    var b = $(".fselect")[0].selectedIndex,
        c = d.HotGrid.getMetaByColor(true, "r"),
        a;
    if (b == 0) {
        b = new RegExp(/\s*\(.*?\)\s*/g);
    } else {
        b = new RegExp(/\s*\[.*?\]\s*/g);
    }
    c.forEach(function (g) {
        var e = GridOperations.getColData(d, g.coli);
        for (var f = 0; f < e.length; f++) {
            d.HotGrid.setDataAtCell(f, g.coli, e[f].replace(b, ""));
        }
    });
    return;
};
GridOperations.newUID = function (c) {
    var b = (b = c.HotGrid) && (b = b.colMeta),
        a;
    if (Array.isArray(b)) {
        a = b.map(function (d) {
            return d.uid;
        });
    }
    return Plotly.Lib.randstr(a);
};
GridOperations.editHeaderName = function (c, b, d, f) {
    var g = c.colMeta[b],
        j = g.name,
        h = $(f).find(".colHeader"),
        a = $('<input class="grid-edit-header" value="' + j + '"></input>'),
        e, i;
    h.replaceWith(a);
    d.deselectCell();
    a.focus();
    a.focusout(function (k) {
        g.name = i = $(this).val();
        g.width = Math.max(i.length * 11, 100);
        d.render();
    });
    a.keyup(function (k) {
        if (k.keyCode == 13) {
            g.name = i = $(this).val();
            g.width = Math.max(i.length * 11, 100);
            d.render();
        }
    });
};
GridOperations.sortCol = function (d, a, f, b) {
    function i(n, k, m) {
        var l;
        switch (m) {
        case "date":
            l = function (p, o) {
                return Plotly.Lib.dateTime2ms(p[n]) - Plotly.Lib.dateTime2ms(o[n]);
            };
            break;
        case "category":
            l = function (p, o) {
                if (p[n] > o[n]) {
                    return -1;
                }
                if (p[n] < o[n]) {
                    return 1;
                } else {
                    return 0;
                }
            };
            break;
        case "linear":
            l = function (p, o) {
                return Number(p[n]) - Number(o[n]);
            };
            break;
        default:
            l = function (p, o) {
                return p[n] > o[n];
            };
            break;
        }
        if (k === "ascending") {
            return function (p, o) {
                return l(p, o);
            };
        } else {
            return function (p, o) {
                return l(o, p);
            };
        }
    }
    var e = f.getData(),
        h = GridOperations.getColData(d, a),
        j = f.countRows() - f.countEmptyRows(true),
        c = e.slice(0, j),
        g = Plotly.Axes.autoType(h);
    c.sort(i(a, b, g));
    f.populateFromArray(0, 0, c);
};
GridOperations.duplicateCol = function (e, d, a) {
    var b = e.colMeta[d].name + "_copy",
        c = a.getDataAtCol(d).slice(0);
    return GridOperations.addCol(e, {
        data: c,
        name: b,
        coli: d + 1
    });
};
GridOperations.showHideCol = function (e, c, a) {
    var b = 16;
    var d = e.colMeta[c];
    if (d.width <= b + 1) {
        d.width = Math.max(d.name.length * 11, 100);
    } else {
        d.width = b;
    }
    a.render();
};
var MixedType = {
    allowed_mixed_types: {
        "Scatter plot": ["Scatter plot", "Line plot", "Bar chart", "Histogram", "Area plot"],
        "Line plot": ["Line plot", "Scatter plot", "Bar chart", "Histogram", "Area plot"],
        "Area plot": ["Area plot", "Bar chart", "Scatter plot", "Line plot", "Histogram"],
        "Bar chart": ["Bar chart", "Scatter plot", "Line plot", "Area plot"],
        "2D Histogram": ["2D Histogram", "Scatter plot"]
    },
    typeTableRows: function (a) {
        return $(a).find("table.eqndiv-xypairs .mixed-type-row");
    },
    refreshTypes: function (e, a) {
        var d = this.typeTableRows(e);
        var c = this;
        var b = $(e).find(".color-block").toArray().map(function (f) {
            return f.style.background;
        }).map(function (f) {
            return d3.rgb(f).toString();
        });
        _.difference(a, b).forEach(function (f) {
            c.addType(e, f, d);
        });
        _.difference(b, a).forEach(function (f) {
            c.removeType(e, f, d);
        });
    },
    isDefaultRow: function (a) {
        return "#dddddd" === d3.rgb($(a).find(".color-block").css("background-color")).toString();
    },
    addType: function (d, a, b) {
        if (!b) {
            b = this.typeTableRows(d);
        }
        if (b.length === 1 && this.isDefaultRow(b[0])) {
            $(b[0]).find(".color-block").css({
                "background-color": a
            });
        } else {
            var c = this.newRow(d, Plotly.Grids.getOp(d), a).appendTo(b.parent());
        }
    },
    removeType: function (c, a, b) {
        a = d3.rgb(a).toString();
        if (a === "#dddddd") {
            return;
        }
        if (!b) {
            b = this.typeTableRows(c);
        }
        if (b.length === 1) {
            $(b[0]).find(".color-block").css({
                "background-color": "#dddddd"
            });
            return;
        }
        b.each(function (f, d) {
            var e = d3.rgb($(d).find("td").css("background-color")).toString();
            if (e == a) {
                $(d).fadeOut().delay(200).remove();
            }
        });
    },
    setRunButton: function (d) {
        var b = this.typeTableRows(d);
        var a = $(d).find(".js-run-btn");
        var c = _.uniq(b.map(function (e, f) {
            return $(f).find(".js-dropdown-text").text();
        }));
        if (c.length === 1) {
            a.text(c[0]);
        } else {
            if (c.length > 1) {
                a.text("Mixed types");
            }
        }
    },
    applyTypes: function (b) {
        var a = this;
        a.typeTableRows(b).each(function (c, d) {
            a.applyType(b, d);
        });
    },
    applyType: function (f, e) {
        var a = $(e),
            d = a.find(".js-dropdown-text").text(),
            b = d3.rgb(a.find(".color-block").css("background-color")).toString(),
            c = Plotly.Grids.Ops[d].rowlabels;
        c.forEach(function (g) {
            var h = f.HotGrid.getMetaByColor(b, g);
            h.forEach(function (i) {
                i.headers[g].plottype = d;
            });
        });
    },
    initTypeTable: function (c, b) {
        var a = $('<table class="eqndiv-xypairs"><tr><th></th><th class="grid-op__btn-label">TYPE</th></tr></table>');
        this.newRow(c, b).insertAfter(a.find("tr").first());
        return a;
    },
    newRow: function (e, d, b) {
        if (!b) {
            b = "#ddd";
        }
        var c = $('<tr class="mixed-type-row"><td class="color-block color-placeholder"></td><td class="js-mixed-type-dropdown"></td></tr>');
        var a = {
            items: this.allowed_mixed_types[d],
            callback: this.setRunButton.bind(this, e)
        };
        c.find(".js-mixed-type-dropdown").append(Plotly.Lib.dropdownSelector(a));
        c.find(".color-block").css({
            "background-color": b
        });
        return c;
    }
};
Plotly.Grids = {};
Plotly.Grids.Ops = {
    Integrate: {
        rowlabels: ["x", "f"],
        controlType: ["radio", "radio"],
        extralabels: [],
        description: "Take integral with respect to x, ie &#8747; f(x) dx. Click column selection boxes to indicate x and f(x).",
        runAction: GridOperations.integrate,
        requireSave: false
    },
    "Take derivative": {
        rowlabels: ["t", "x"],
        controlType: ["radio", "radio"],
        extralabels: [],
        description: "Take derivative with respect to t, ie &#8706;x / &#8706;t. Click column selection boxes to indicate x and t.",
        runAction: GridOperations.derivative,
        requireSave: false
    },
    Transpose: {
        rowlabels: [],
        controlType: [],
        description: "Transpose your data. Useful if you have rows that you want to graph as columns.",
        extralabels: [],
        runAction: GridOperations.transpose,
        requireSave: false
    },
    "Scatter plot": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: ["G", "Ex", "Ex-", "Ey", "Ey-"],
        description: "Click the column headers to choose x and y columns to graph. Use the different colors to match x columns with y columns.",
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "Line plot": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: ["G", "Ex", "Ex-", "Ey", "Ey-"],
        description: "Click the column headers to choose x and y columns to graph. Use the different colors to match x columns with y columns.",
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "Bar chart": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: ["G", "Ex", "Ex-", "Ey", "Ey-"],
        description: 'Click the column headers to choose x and y columns to graph, then click "Bar chart." The x column can be text or numbers. Use the different colors to match x columns with y columns.',
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "Bubble chart": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: ["G", "S", "T"],
        description: 'Click the column headers to choose x and y columns to graph. Then choose a "Size By" column to make the size of each point proportional to the row in this column. The optional "Text" column adds hover or floating text to each point.',
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "Area plot": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: [],
        description: 'Click the column headers to choose x and y columns to graph, then click "Area plot." The area between lines will be filled.',
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    Histogram: {
        rowlabels: ["x"],
        controlType: [""],
        extralabels: ["G"],
        description: 'Click the column headers to choose a column to bin in a histogram, then click "Histogram." You can change the binning dynamically in the generated plot.',
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "2D Histogram": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: [],
        description: 'Click the column headers to choose 2 columns to bin in a histogram, then click "2D Histogram." You can change the binning dynamically in the plot.',
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "Box plot": {
        rowlabels: ["y"],
        controlType: [""],
        extralabels: ["G"],
        description: "Click the column headers to choose columns to show the distribution of values as box plots.",
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "Make heatmap": {
        rowlabels: ["z", "y"],
        controlType: ["", "radio"],
        extralabels: [],
        description: 'Choose columns to display in a heatmap, then click "Make heatmap." Option 1: Choose a column as the y-axis. Option 2: Choose column names or the first row to be the x-axis.',
        runAction: GridOperations.mapgrid,
        requireSave: true
    },
    "Linear scale": {
        rowlabels: [],
        controlType: [],
        extralabels: [],
        description: "Create a column of x data. xo is the first value, xf is the last value, n is the number of values between xo and xf.",
        runAction: GridOperations.linearScale,
        requireSave: false
    },
    Replace: {
        rowlabels: ["r"],
        controlType: [""],
        extralabels: [],
        description: 'Choose columns to remove bracket or parenthetical citations, then click "Replace."',
        runAction: GridOperations.findAndReplace,
        requireSave: false
    },
    Run: {
        rowlabels: ["x", "y"],
        controlType: ["radio", "radio"],
        extralabels: [],
        description: 'Choose x and y columns as function variables, write an expression, then click "Run."',
        runAction: GridOperations.runMath,
        requireSave: false
    },
    Convert: {
        rowlabels: ["t"],
        controlType: ["radio"],
        extralabels: [],
        description: "Toggle conversion between UNIX timestamps (milliseconds since 19:00 Dec. 31, 1969) and a readable date / time that Plotly can graph.",
        runAction: GridOperations.convertTimeStamp,
        requireSave: false
    },
    Fit: {
        rowlabels: ["x", "y"],
        controlType: ["radio", "radio"],
        extralabels: ["Ey"],
        description: "",
        requireSave: false
    },
    Interpolate: {
        rowlabels: ["x", "y", "x2"],
        controlType: ["radio", "radio", "radio"],
        extralabels: [],
        description: "Create an interpolated y column from existing x-y pairs and a new x column. Useful for combining data from different sources",
        runAction: GridOperations.interpolate,
        requireSave: false
    },
    Filter: {
        rowlabels: ["x"],
        controlType: ["radio"],
        extralabels: [],
        description: "Filter out all data not containing the character, word, number, date or Regex entered in the filter box. The search will be perfomed down all cells in the selected column.",
        runAction: GridOperations.filterRows,
        requireSave: false
    },
    "Perform T-Test": {
        rowlabels: ["a", "b"],
        controlType: ["radio", "radio"],
        extralabels: [],
        description: "Perform the two-sided test for the null hypothesis that 2 independent samples have identical average (expected) values. Choose a and b columns as the sets of independent samples.",
        runAction: GridOperations.tTest,
        requireSave: false
    },
    "Perform Chi-squared Test": {
        rowlabels: ["obs", "exp"],
        controlType: ["radio", "radio"],
        extralabels: [],
        description: 'Test the null hypothesis that the observed catagorical data is consistent with a particular theoretical distribution. Choose "obs" and "exp" columns as the sets of observed and expected frequency distributions. Assume k-1 degrees of freedom.',
        runAction: GridOperations.chi2Test,
        requireSave: false
    },
    "Perform a one-way ANOVA": {
        rowlabels: ["A"],
        controlType: [""],
        extralabels: [],
        description: "The one-way ANOVA tests the null hypothesis that two or more groups have the sample population mean. Select two or more columns as the groups of samples.",
        runAction: GridOperations.anova,
        requireSave: false
    },
    Statistics: {
        rowlabels: ["s"],
        controlType: [""],
        extralabels: [],
        description: "Select any number of columns, select 'Inferential' or 'Descriptive', and click \"Statistics\" to compute basic statistics.&#13;&#10;&#13;&#10;",
        runAction: GridOperations.basicStats,
        requireSave: false
    },
    "Polar line plot": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: [],
        description: "Click the column headers to choose x and y columns to graph. Use the different colors to match x columns with y columns.",
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "Polar area chart": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: [],
        description: "Click the column headers to choose x and y columns to graph. Use the different colors to match x columns with y columns.",
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "Polar dot plot": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: [],
        description: "Click the column headers to choose x and y columns to graph. Use the different colors to match x columns with y columns.",
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "Polar bar chart": {
        rowlabels: ["x", "y"],
        controlType: ["pair", "pair"],
        extralabels: [],
        description: "Click the column headers to choose x and y columns to graph. Use the different colors to match x columns with y columns.",
        runAction: GridOperations.plotPairs,
        requireSave: true
    },
    "3d surface plot": {
        rowlabels: ["z"],
        controlType: [""],
        extralabels: [],
        description: "Make a surface from a table of values. Rows are the y positions and columns are x positions. The values are used to determine the height and color or the surface ",
        runAction: GridOperations.mapgrid,
        requireSave: true
    },
    "3d scatter plot": {
        rowlabels: ["x", "y", "z"],
        controlType: ["pair", "pair", "pair"],
        extralabels: ["G", "S", "T"],
        description: "Click the column headers to choose x, y and z columns to graph. Each row of the selected x, y and z column determines a point <x,y,z> in 3d space. More than one grouping of data may be chosen by selecting another set of x,y,z columns. Grouping data and marker size data can be chosen as well by choosing the options below and selecting the columns containing the grouping or sizing data.",
        runAction: GridOperations.plotPairs,
        requireSave: true
    }
};
Plotly.Grids.newGrid = function (b, g) {
    var d;
    if (typeof (b) === "string") {
        d = $("#" + b)[0];
    } else {
        d = b;
    }
    GridLayout.makeGridToolMenu(d, g);
    $('a[href$="#' + d.id + '"]').on("click", function (k) {
        var l = Plotly.Grids.getOp(d);
        if (!l) {
            return;
        }
        var e = $(d).find(".js-grid-op-settings-main").empty();
        GridContent.plot_extra_opts(d, e, l);
        k.stopPropagation();
    });
    Plotly.Grids.initHOT(d);
    var f = {
        "Line plot": ".js-plot-line",
        "Scatter plot": ".js-plot-scatter",
        "Bar chart": ".js-plot-bar",
        "Box plot": ".js-plot-line",
        "Area plot": ".js-plot-area",
        Histogram: ".js-plot-hist",
        "Make heatmap": ".js-plot-heatmap",
        "2D Histogram": ".js-plot-2d-hist",
        "Polar line plot": ".js-plot-polar-line",
        "Polar dot plot": ".js-plot-polar-dot",
        "Polar bar chart": ".js-plot-polar-bar",
        "Polar area chart": ".js-plot-polar-area"
    };
    if (g) {
        try {
            var i = g.split("-"),
                a = i[0].trim(),
                j = (i[1] || "").trim(),
                c = f[a];
            setTimeout(function () {
                GridLayout.setGridOp(a, false, c);
                if (j == "New") {
                    for (var e = 0; e < 4; e++) {
                        $(d).find(".gridcols th").eq(e + 1).find(".selectiondiv:visible").eq(e).click();
                    }
                }
            }, 100);
        } catch (h) {
            console.log(h);
        }
    } else {
        GridLayout.setGridOp("Line plot", false, f["Line plot"]);
        setTimeout(function () {
            var e = $(d).find(".gridcols th");
            e.eq(1).find(".selectiondiv:visible").eq(0).click();
            e.eq(2).find(".selectiondiv:visible").eq(1).click();
        }, 100);
    }
};
Plotly.Grids.initHOT = function (n) {
    n.colMeta = [];
    var d = $(n).find(".gridcols");
    d.handsontable({
        data: [
            []
        ],
        readOnly: false,
        contextMenu: t(),
        minSpareRows: 4,
        minSpareCols: 2,
        minRows: 50,
        minCols: 20,
        width: c,
        height: r,
        colWidths: u,
        manualColumnMove: true,
        manualColumnResize: true,
        rowHeaders: true,
        colHeaders: f,
        afterCreateCol: b,
        afterRemoveCol: k,
        afterColumnMove: q,
        afterGetColHeader: v,
        afterColumnResize: i
    });
    n.HotGrid = d.handsontable("getInstance");
    n.HotGrid.colMeta = n.colMeta;
    var a;
    var e;

    function c() {
        if (a === void 0) {
            B();
        }
        return a;
    }

    function r() {
        if (e === void 0) {
            B();
        }
        return e;
    }

    function C() {
        B();
        n.HotGrid.render();
    }

    function B() {
        var F = $(n).find(".grid-container");
        var G = F.offset();
        a = F.width();
        e = F.height();
    }

    function f(F) {
        var G = (G = n.colMeta[F]) && (G = G.name);
        if (!G) {
            G = "Col" + (F + 1);
        }
        return G;
    }

    function v(G, J) {
        var F = this;
        var H = j(G),
            L = s(),
            I = w();
        I.click(function (N) {
            N.preventDefault();
            N.stopImmediatePropagation();
            $(".header-dropdown-menu").hide();
            L.show();
            L.position({
                my: "left top",
                at: "left bottom",
                of: I,
                within: F.rootElement
            });
            $(n).off("click.header-dropdown-menu.hide");
            $(n).one("click.header-dropdown-menu.hide", function () {
                L.hide();
            });
        });
        L.on("click", "li", function () {
            p(G, $(this).data("colcmd"), F, J);
        });
        J.firstChild.appendChild(I[0]);
        J.appendChild(L[0]);
        var M = Plotly.Grids.getOp(n);
        if (n.colMeta[G] === undefined) {
            console.log("UNDEFINED META IN AFTERHEADERS!");
            n.colMeta[G] = z(G);
            x(M);
        }
        E($(J.firstChild), H, M);
        J.firstChild.querySelector("span").addEventListener("click", function () {
            n.HotGrid.selectCell(0, 0, n.HotGrid.countRows() - n.HotGrid.countEmptyRows() - 1, 0);
        });
        var K;
        if (G === F.colOffset()) {
            K = $(F.rootElement).find(".htCore thead tr th").first();
            h(K, M);
        }
    }

    function E(F, I, M) {
        if (M === undefined || M === "") {
            return;
        }
        var G, H, J = n.colMeta[I].headers,
            L = Object.keys(J),
            K = n.colMeta[0].headers;
        L.forEach(function (O, N) {
            var Q = J[O];
            var P = Q.bg || "#ffffff";
            G = '<div class="selectiondiv"></div>', H = $(G).click(GridLayout.selectVariable(n, M, O, I)).css("background-color", P).html("choose as <b>" + O + "</b>").appendTo(F);
            Q.elem = H[0];
            if (P !== "#ffffff") {
                H.addClass("selected");
            }
            if ("visible" in K[O]) {
                H.toggle(K[O].visible);
            }
        });
        n.colMeta[I].headers = J;
    }

    function h(F, I) {
        F.find(".relative").html('<i class="ploticon-axes"></i>').css("transform", "rotate(90deg)").click(function () {
            GridOperations.transpose(n);
        });
        if (!I) {
            return;
        }
        var G = n.colMeta[0].headers,
            H = Object.keys(G);
        H.forEach(function (K) {
            var J = G[K],
                L = $('<div class="varlabels">' + K + "</div>");
            L.appendTo(F);
            J.cornerElem = L[0];
            if ("visible" in G[K]) {
                L.toggle(G[K].visible);
            }
        });
    }

    function s(F, H) {
        var G = [{
            iconImage: "/static/img/glyphicons_halflings/png/glyphicons_halflings_060_pencil.png",
            title: "Rename",
            command: "edit"
        }, {
            iconImage: "/static/img/glyphicons_halflings/png/glyphicons_halflings_092_up_arrow.png",
            title: "Sort Asc",
            command: "sortasc"
        }, {
            iconImage: "/static/img/glyphicons_halflings/png/glyphicons_halflings_093_down_arrow.png",
            title: "Sort Desc",
            command: "sortdesc"
        }, {
            iconImage: "/static/img/glyphicons_halflings/png/glyphicons_halflings_097_plus.png",
            title: "Duplicate",
            command: "duplicate"
        }, {
            iconImage: "/static/img/glyphicons_halflings/png/glyphicons_halflings_104_eye_open.png",
            title: "Show/Hide",
            command: "showhide"
        }];

        function I(K) {
            return '<div class="header-dropdown-menuitem"><div class="header-dropdown-menuicon" style="background-image: url(https://plot.ly' + K.iconImage + ');"></div><span>' + K.title + "<span></div>";
        }
        var J = $("<ul></ul>").addClass("header-dropdown-menu");
        $.each(G, function (L, K) {
            var M = $("<li></li>").data("colcmd", K.command).html(I(K));
            J.append(M);
        });
        return J;
    }

    function w() {
        return $("<button></button>").addClass("header-dropdown").html("\u25BC");
    }

    function p(I, H, F, G) {
        switch (H) {
        case "edit":
            GridOperations.editHeaderName(n, I, F, G);
            break;
        case "sortasc":
            GridOperations.sortCol(n, I, F, "ascending");
            break;
        case "sortdesc":
            GridOperations.sortCol(n, I, F, "descending");
            break;
        case "duplicate":
            GridOperations.duplicateCol(n, I, F);
            break;
        case "showhide":
            GridOperations.showHideCol(n, I, F);
            break;
        }
    }

    function t() {
        return {
            items: {
                row_above: {},
                row_below: {},
                hsep1: "---------",
                col_left: {},
                col_right: {},
                hsep2: "---------",
                remove_row: {},
                remove_col: {},
                hsep3: "---------",
                useRowasHeader: {
                    name: "Use row as col headers",
                    callback: m
                },
                moveHeadersRowAbove: {
                    name: "Insert col headers above row",
                    callback: A
                }
            }
        };
    }

    function j(F) {
        if (n.HotGrid) {
            return Handsontable.PluginHooks.execute(n.HotGrid, "modifyCol", F);
        } else {
            return F;
        }
    }

    function m(F, G) {
        var H = G.start.row();
        var I = n.HotGrid.getDataAtRow(H);
        n.colMeta.forEach(function (K, J) {
            if (J >= I.length) {
                return;
            }
            K.name = I[J];
        });
        n.HotGrid.render();
    }

    function A(F, G) {
        var H = G.start.row();
        var I = n.colMeta.map(function (J) {
            return J.name;
        }).slice(0, n.HotGrid.activeCols());
        n.HotGrid.alter("insert_row", H);
        n.HotGrid.populateFromArray(H, 0, [I]);
        n.HotGrid.render();
    }

    function D() {
        var F = n.HotGrid;
        return F.countCols() - F.countEmptyCols(true);
    }

    function b(F, H) {
        var I;
        if (F === undefined) {
            return;
        }
        for (var G = 0; G < H; G++) {
            n.colMeta.splice(F + G, 0, z(F + G));
        }
        o();
        x(Plotly.Grids.getOp(n));
    }

    function k(F, H) {
        for (var G = 0; G < H; G++) {
            n.colMeta.splice(F, 1);
        }
        o();
    }

    function q(G, F) {
        o();
    }

    function z(F) {
        return {
            name: isNaN(F) ? F : "Col" + (F + 1),
            uid: GridOperations.newUID(n),
            coli: F,
            width: 100,
            headers: {}
        };
    }

    function y(H, G) {
        var I = this.colMeta[G];
        for (var F in H) {
            if (!Plotly.Lib.isEmpty(H[F])) {
                I[F] = H[F];
            }
        }
    }

    function u(F) {
        var G = (G = n.colMeta[F]) && (G = G.width);
        return G ? Math.min(G, 300) : 100;
    }

    function i(G, F) {
        n.colMeta[G].width = F;
    }

    function o() {
        var G;
        if (!n.HotGrid) {
            return;
        }
        for (var F = 0; F < D(); F++) {
            G = j(F);
            n.colMeta[G].coli = F;
        }
    }

    function g(F, G) {
        return n.colMeta.filter(function (H) {
            var I = (I = H.headers) && (I = I[G]) && (I = I.bg);
            return (F === true) ? (I && I !== "#ffffff") : (I === F);
        });
    }

    function l(J, H) {
        var G = [],
            I = Plotly.Grids.getOp(n);
        if (!I) {
            return G;
        }
        var F = Plotly.Grids.Ops[I]["rowlabels"];
        if (H) {
            G = n.colMeta.map(function (K) {
                var L = K.headers;
                return L[H] ? L[H][J] : false;
            });
        } else {
            n.colMeta.forEach(function (K) {
                var L = K.headers;
                G = G.concat(F.map(function (M) {
                    return L[M] ? L[M][J] : false;
                }));
            });
        }
        return G.filter(function (K) {
            return (K) ? true : false;
        });
    }

    function x(K) {
        if (K === undefined || K === "") {
            return;
        }
        var I = Plotly.Grids.Ops[K]["rowlabels"],
            H = Plotly.Grids.Ops[K]["controlType"],
            F = (["Box plot", "Histogram", "Fit"].indexOf(K) > -1) ? "radio" : "pair",
            G = Plotly.Grids.Ops[K]["extralabels"].sort(),
            J = K;
        n.colMeta.forEach(function (O, L) {
            var N = O.headers,
                M = {};
            I.forEach(function (Q, P) {
                var R = (R = N[Q]) && (R = R.bg);
                R = R || "#ffffff";
                if (R !== "#ffffff") {
                    if (K === "Make heatmap") {
                        R = "#69738a";
                    } else {
                        if (H[P] === "" || H[P] === "radio") {
                            R = "#69738a";
                        } else {
                            if (H[P] === "pair" && R === "#69738a") {
                                R = "#1f77b4";
                            }
                        }
                    }
                }
                M[Q] = {
                    plottype: J,
                    control: H[P],
                    bg: R
                };
            });
            G.forEach(function (Q, P) {
                var R = (R = N[Q]) && (R = R.bg);
                R = R || "#ffffff";
                M[Q] = {
                    plottype: J,
                    control: F,
                    bg: R || "#ffffff"
                };
                if (L === 0) {
                    if (Q in N) {
                        M[Q].visible = N[Q].visible || false;
                    } else {
                        M[Q].visible = false;
                    }
                }
            });
            O.headers = M;
        });
    }
    n.HotGrid.resize = C;
    n.HotGrid.getHeaderMeta = l;
    n.HotGrid.getMetaByColor = g;
    n.HotGrid.refreshMetaIndices = o;
    n.HotGrid.genNewColMeta = z;
    n.HotGrid.refreshColMeta = x;
    n.HotGrid.activeCols = D;
    n.HotGrid.updateColMeta = y;
    return n;
};
Plotly.Grids.runOp = function () {
    var c = Tabs.get(),
        b = Plotly.Grids.getOp(c);
    if (b === "Mixed types") {
        b = "Line plot";
    }
    MixedType.applyTypes(c);
    var a = Plotly.Grids.Ops[b]["runAction"];
    if (Plotly.Grids.Ops[b]["requireSave"] && c.fn) {
        Plotly.Grids.saveGrid(c);
    }
    a(c, b);
    return;
};
Plotly.Grids.getOp = function (a) {
    return a._gridOperation;
};
Plotly.Grids.saveGridAs = function (a) {
    if (!a) {
        a = Tabs.get();
    }
    markFileAsNew(a, "grid");
    Plotly.Grids.saveGrid(a);
};
Plotly.Grids.copyGrid = function (b) {
    if (!b) {
        b = Tabs.get();
    }
    b.empty = false;
    var a = Plotly.Grids.loadGrid(JSON.parse(Plotly.Grids.gridJson(b)));
    if (b.fn) {
        a.fn = b.fn + " (copy)";
    }
    a.changed = true;
    Plotly.Grids.saveGrid(a);
};
Plotly.Grids.launchSaveGrid = function () {
    var a = Tabs.get();
    return Plotly.Grids.saveGrid(a).then(function (b) {
        if (b.saved && b.isNew) {
            shareLink(a);
        }
    }).done();
};
Plotly.Grids.launchDownloadGrid = function () {
    var a = Tabs.get();
    return Plotly.Grids.saveGrid(a).then(function (b) {
        Plotly.Grids.downloadGrid(a);
    }).done();
};
Plotly.Grids.saveGrid = function (a) {
    if (!a) {
        a = Tabs.get();
    }
    console.log("saveGrid() called");
    return requireProperFilename(a).then(function () {
        return new Promise(function (b, c) {
            Plotly.Grids._saveGrid(a, b, c);
        });
    });
};
Plotly.Grids.downloadGrid = function (b) {
    WARN_ON_LEAVE = false;
    addMessage("Exporting Data");
    var a = Plotly.Grids.gridJson(b);
    $.fileDownload("/exportcsv/", {
        prepareCallback: function (c) {},
        successCallback: function (c) {
            delMessage("Exporting Data");
        },
        failCallback: function (c, d) {
            delMessage("Exporting Data");
            Plotly.Lib.notifier("Uh oh, an error occurred on the server.<br>Try again soon or get in touch at support@plot.ly.", "long");
        },
        data: {
            data: encodeURIComponent(a),
            fn: (b.fn ? b.fn : "")
        }
    });
};
Plotly.Grids._saveGrid = function (e, b, c) {
    var d = e.world_readable === undefined ? false : e.world_readable;
    if (fileShouldSaveAsNew(e)) {
        subscriptions.save_access(a.bind(null, d));
    } else {
        a(d);
    }

    function a(i) {
        var h = "Saving File" + (i && e.fid === undefined ? ". This file is publicly available." : "");
        addMessage(h);
        var f = fileShouldSaveAsNew(e);
        var g = {
            data: Plotly.Grids.gridJson(e),
            ftreq: "grid",
            fid: Plotly.Lib.fullFid(e.fid),
            ts: e.ts,
            fn: e.fn,
            world_readable: i,
            csrfmiddlewaretoken: $.cookie("csrftoken")
        };
        if (e.ref_fids) {
            g.ref_fids = e.ref_fids.join(",");
        }
        $.post("/save/", g, function (j) {
            saveResp(j, e);
            b({
                changes: true,
                saved: true,
                isNew: f
            });
            delMessage(h);
        });
    }
};
Plotly.Grids.gridJson = function (e) {
    var c, d = e.HotGrid.countCols() - e.HotGrid.countEmptyCols(true),
        b = {
            cols: {},
            meta: {}
        };
    for (var a = 0; a < d; a++) {
        c = e.colMeta[a];
        b.cols[c.name] = {
            data: GridOperations.getColData(e, c.coli).map(function (f) {
                return (f === null || f === undefined) ? "" : f;
            }),
            width: c.width || 100,
            order: c.coli,
            uid: c.uid,
            fit: c.fit
        };
    }
    return JSON.stringify(b);
};
Plotly.Grids.loadGrid = function (m, e) {
    function g(y) {
        var j = y,
            t, w = [];
        for (t in y) {
            if (y.hasOwnProperty(t)) {
                w.push(t);
            }
        }
        w = w.sort();
        var u = [];
        for (var v in w) {
            var s = y[w[v]].order;
            if (s === undefined) {
                s = -1;
            }
            u.push({
                key: w[v],
                order: s
            });
        }
        u = u.sort(function (z, i) {
            return z.order - i.order;
        });
        var x = [];
        for (t in u) {
            x.push(u[t].key);
        }
        return x;
    }
    var o = m.cols,
        f = e ? Tabs.get() : Tabs.fresh("grid"),
        k, h;
    f.empty = false;
    var c = [],
        a = [],
        l = [],
        p = [],
        d = g(o);
    var n = f.HotGrid.colMeta = f.colMeta = [];
    var b;
    for (k = 0; k < d.length; k++) {
        n[k] = {};
        b = d[k];
        n[k].name = b.trim().length ? b.trim() : "Col" + k;
        n[k].width = ("width" in o[b] && !isNaN(o[b].width)) ? o[b].width : Math.max(n[k].name.length * 11, 100);
        n[k].uid = ("uid" in o[b] && o[b].uid.length) ? o[b].uid : GridOperations.newUID(f);
        n[k].fit = (o[b].hasOwnProperty("fit")) ? o[b].fit : "";
        n[k].headers = {};
    }
    var r = [];
    for (k = 0; k < d.length; k++) {
        var q = o[d[k]].hasOwnProperty("data") ? o[d[k]].data : o[d[k]];
        for (h = 0; h < q.length; h++) {
            if (!r[h]) {
                r[h] = [];
            }
            r[h][k] = q[h];
        }
    }
    f.HotGrid.loadData(r);
    f.HotGrid.refreshMetaIndices(f);
    delMessage("Loading File");
    return;
};
Plotly.Grids.resize = function (a) {
    setFileAndCommentsSize(a);
    if ("HotGrid" in a) {
        a.HotGrid.resize();
    }
};
Plotly.Grids.GridOp2PlotType = function (b) {
    var a = {
        "Scatter plot": {
            type: "scatter",
            mode: "markers"
        },
        "Bubble chart": {
            type: "scatter",
            mode: "markers"
        },
        "Line plot": {
            type: "scatter"
        },
        "Bar chart": {
            type: "bar"
        },
        "Area plot": {
            type: "scatter",
            fill: "tonexty",
            mode: "lines"
        },
        Histogram: {
            type: "histogram"
        },
        "2d histogram": {
            type: "histogram2d"
        },
        "Box plot": {
            type: "box"
        }
    };
    return a[b];
};

function are_cookies_enabled() {
    var a = (navigator.cookieEnabled) ? true : false;
    if (typeof navigator.cookieEnabled == "undefined" && !a) {
        document.cookie = "testcookie";
        a = (document.cookie.indexOf("testcookie") != -1) ? true : false;
    }
    if (!a) {
        var b = "Cookies are not enabled in your browser. Plotly will not work properly without cookies, and you won't be able to sign in or sign up. Please enable cookies for Plotly, then refresh this page.";
        if (typeof calltoaction === "undefined") {
            alert(b);
        } else {
            calltoaction('<img src="/static/img/glyphicons/png/glyphicons_078_warning_sign.png"/><br><br>' + b, "Cool, got it", "");
        }
    }
    return a;
}

function isUserSignedIn() {
    if (typeof (user) !== "undefined" && user) {
        return true;
    }
    return false;
}

function signedin(a) {
    if (isUserSignedIn()) {
        return true;
    }
    if (!a) {
        requireAuth().done();
    }
    return false;
}

function pwreset() {
    addMessage("Loading password reset...");
    $.ajax({
        type: "POST",
        url: "/checkpw/",
        data: {},
        dataType: "json",
        async: false,
        success: function (a) {
            delMessage("Loading password reset...");
            console.log(a);
            url = "/accounts/password/reset/";
            window.open(url, "_blank");
        }
    });
}
$("#loginModal").on("show", function () {
    if (!are_cookies_enabled()) {
        return false;
    }
    setTimeout(function () {
        $("#login-username").focus();
    }, 500);
});
$("#signupModal").on("show", function () {
    if (!are_cookies_enabled()) {
        return false;
    }
    setTimeout(function () {
        $("#signup-email").focus();
    }, 500);
});
$("#submituser").on("click", submituser);

function submituser(a) {
    $("#submituser").off("click", submituser);
    a.preventDefault();
    $("#signupform").submit();
}
$(document).ajaxError(function (d, c, a, b) {
    console.log("--- AJAX failure ---");
    var f = JSON.stringify(a);
    if (f.indexOf("/getnotifs/") == -1) {
        try {
            Raven.captureException(Error(JSON.stringify(b)), {
                tags: {
                    ajaxurl: a.url
                }
            });
        } catch (g) {
            console.log(g);
        }
    }
});

function launchCreateAccount() {
    return requireAuth().done();
}

function launchSignIn() {
    return requireAuth().done();
}

function requireAuth(a) {
    var a = a || {};
    a.suggestOnly = a.suggestOnly || false;
    return startAuthDialog(a).then(function (b) {
        return concludeAuth(b);
    });
}

function startAuthDialog(a) {
    if (isUserSignedIn()) {
        return Promise.resolve({
            alreadySignedIn: true,
            createdAccount: false,
            signedIn: false
        });
    } else {
        if (a.suggestOnly) {
            var b = Plotly.Storage.notificationMemoryGet("signup");
            if (b.last !== null && b.last < 86400) {
                return Promise.resolve({
                    alreadySignedIn: false,
                    createdAccount: false,
                    signedIn: false
                });
            }
        }
    }
    $("#createresp").html("");
    $("#submituser").show();
    $("#signupModal").modal("show");
    Plotly.Storage.notificationMemoryViewed("signup");
    if (a.email) {
        $("#signupModal #signup-email").val(a.email);
    }
    return new Promise(function (c, d) {
        $("#signupModal").on("hidden.incompleteAuth", function () {
            $("#signupModal").off("hidden.incompleteAuth");
            d(new Error("ClosedModal"));
        });
        hookSocialAuthButtons(c, d);
        hookCreateAccountForm(c, d);
        hookSignInForm(c, d);
    });
}

function hookSocialAuthButtons(a, b) {
    $("a.link--social").each(function (c, e) {
        var d = $(e).attr("data-social-url");
        $(e).on("click", function () {
            launchsocialauth(d, a, b);
        });
    });
}

function hookCreateAccountForm(a, b) {
    $("#signupform").off("submit").on("submit", function () {
        $(".js--signup-error").remove();
        $("#createloading").html('<p style="color:#3a87ad;">Loading...</p>');
        var d = $.cookie("csrftoken");
        var c = $(this).serialize();
        c += "&csrfmiddlewaretoken=" + encodeURIComponent(d);
        console.log("sign up values", c);
        console.log("--- SENDING SIGN UP TO SERVER ---");
        $.post("/mkacct/", c, function (f) {
            var h = JSON.parse(f).err;
            console.log("--- SIGN UP RETURNED FROM SERVER ---");
            var i = $("#signup-email").val();
            mixpanel.track("sign up response", {
                resp: f,
                email: i
            });
            $("#createloading").html("");
            if (h) {
                mixpanel.track("Error signing up", {
                    err: h,
                    "$username": $("#signup-username").val(),
                    "$email": $("#signup-email").val()
                });
                $("#signupModal .error--inline").remove();
                var e = h.toLowerCase(),
                    g;
                if (e.indexOf("username") != -1) {
                    g = $("#signup-username");
                } else {
                    if (e.indexOf("email") != -1) {
                        g = $("#signup-email");
                    } else {
                        if (e.indexOf("password") != -1) {
                            g = $("#signup-pw");
                        } else {
                            if (e.indexOf("first name") != -1) {
                                g = $("#first_name");
                            } else {
                                if (e.indexOf("last name") != -1) {
                                    g = $("#last_name#");
                                } else {
                                    if (e.indexOf("the server encountered an error") != -1) {
                                        h = "Uh oh, there was an error signing up. We'll be working on this. Want to try again?";
                                        g = $("#pw2");
                                    } else {
                                        g = $("#pw2");
                                    }
                                }
                            }
                        }
                    }
                }
                $(g).after('<span class="js--signup-error error--inline">' + h + "</span>");
                $(g).parents("div.control-group").addClass("error");
                return;
            }
            console.log("no error in signup...");
            $("#submituser").on("click", submituser);
            mixpanel.track("User signed up", {
                origin: "website"
            });
            setTimeout(function () {
                a({
                    alreadySignedIn: false,
                    createdAccount: true,
                    signedIn: true
                });
            }, 1000);
        });
        return false;
    });
}

function hookSignInForm(a, b) {
    $("#loginform").off("submit").on("submit", function () {
        console.log("loginform submitted");
        mixpanel.track("User logged in");
        $(".error--inline").html("");
        var e = $.cookie("csrftoken");
        var c = $(this).serialize();
        c += "&csrfmiddlewaretoken=" + encodeURIComponent(e);
        $("#login-pw").after('<div class="signinloading style="color:#3a87ad!important;">Loading...</div>');

        function d(f) {
            f += 1;
            $.post("/signin/", c, function (i) {
                Plotly.Lib.killspin();
                delMessage();
                $(".signinloading").remove();
                $(".error--inline").remove();
                var j = JSON.parse(i).err;
                if (j) {
                    console.log(j);
                    var h = j.toLowerCase();
                    var g;
                    if (h.indexOf("traceback") != -1) {
                        g = $("#login-pw");
                        j = "Error signing in. Are you sure your info is correct?";
                    } else {
                        if (h.indexOf("username") != -1) {
                            g = $("#login-username");
                        } else {
                            if (h.indexOf("password") != -1) {
                                g = $("#login-pw");
                            } else {
                                g = $("#login-pw");
                            }
                        }
                    }
                    g.after('<span class="error--inline">' + j + "</span>");
                    g.parents("div.control-group").addClass("error");
                    console.log("error signing in: " + j);
                } else {
                    $.post("/is_auth/", function (m) {
                        var l = JSON.parse(m);
                        var k = l.is_auth;
                        if (k) {
                            setTimeout(function () {
                                a({
                                    alreadySignedIn: false,
                                    createdAccount: false,
                                    signedIn: true
                                });
                            }, 1000);
                            return;
                        }
                        if (f < 5) {
                            console.log("try: ", f);
                            d(f);
                        } else {
                            console.log("si error");
                            $("#loginModal").modal("hide");
                            b(new Error("AuthenticationError"));
                            return;
                        }
                    });
                }
            });
        }
        d(0);
        return false;
    });
}

function launchsocialauth(a, b, c) {
    console.log(a);
    var e = window.open(a, "Sign into Plotly", "height=600,width=600,modal=yes,alwaysRaised=yes");
    var d = window.setInterval(function () {
        if (e.closed !== false) {
            window.clearInterval(d);
            console.log("POP UP CLOSED");
            $.post("/is_auth/", function (f) {
                var g = JSON.parse(f);
                if (!g.is_auth) {
                    return;
                }
                return b({
                    alreadySignedIn: false,
                    createdAccount: false,
                    signedIn: true
                });
            });
        }
    }, 200);
}
$("#first_name").validate({
    expression: "if (VAL) return true; else return false;",
    message: "Please enter a first name."
});
$("#last_name").validate({
    expression: "if (VAL) return true; else return false;",
    message: "Please enter a last name."
});
var emailre = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
$("#email").validate({
    expression: "if (emailre.test(VAL)) return true; else return false;",
    message: "Not a valid email! Try again."
});
var unre = /^[.a-zA-Z0-9_-]+$/;
$("#un").validate({
    expression: "if (VAL.length > 3 && unre.text(VAL)) return true; else return false;",
    message: 'Please enter a username > 3 characters. Only letters, numbers, "-", ".", "@", and "_" are allowed.'
});
$("#signup-pw").validate({
    expression: "if (VAL.length > 3 && VAL) return true; else return false;",
    message: "Passwords must be > 3 characters."
});
$("#pw2").validate({
    expression: "if ((VAL == jQuery('#signup-pw').val()) && VAL) return true; else return false;",
    message: "Passwords must match."
});
$("#loginuser").off("click").on("click", function (a) {
    a.preventDefault();
    $("#loginform").submit();
    return false;
});

function concludeAuth(b) {
    var a = $("#signupModal");
    a.off("hidden.incompleteAuth");
    if (b.alreadySignedIn) {
        return b;
    }
    if (Boolean($("#plotlyMainMarker").length)) {
        getuser("notree");
        userSettings.init(function () {
            Raven.setUser({
                username: userObj.info().un
            });
        });
        a.modal("hide");
        if (b.createdAccount) {
            Plotly.Lib.notifier("High Five! You're good to go.");
        }
        return b;
    }
    if (!b.signedIn) {
        return b;
    }
    if (window.location.pathname == "/") {
        if (b.createdAccount) {
            a.find("#createloading").html('<p style="color:#3a87ad;">Thanks for signing up! Redirecting you to your new account...</p>');
            window.setTimeout(function () {
                window.location.replace(ENV.HOMEPAGE);
            }, 1000);
        } else {
            window.location.replace(ENV.HOMEPAGE);
        }
    } else {
        if (b.createdAccount) {
            a.find("#createloading").html('<p style="color:#3a87ad;">Thanks for signing up! Reloading with your new account...</p>');
            window.setTimeout(function () {
                location.reload();
            }, 1000);
        } else {
            location.reload();
        }
    }
    return b;
}

function resend_activation(c) {
    var a = $("#loginform .error--inline"),
        b = "Aw, snap! An error occurred. Try again soon or get in touch at support@plot.ly.";
    a.text("Sending...");
    $.post("/resend_activation/", {
        un: c
    }, function (d) {
        var e = JSON.parse(d);
        if (e.err) {
            a.html(b);
        } else {
            a.html("Sent! Check " + e.em + " for an activation email.<br>Questions? support@plot.ly");
        }
    }).fail(function () {
        a.text(b);
    });
}

function swapModal(a, b) {
    $("#" + a).modal("hide");
    $("#" + b).modal("show");
}
$("#submitcomment").on("click", function (b) {
    WARN_ON_LEAVE = false;
    b.preventDefault();
    delMessage();
    var a = $.trim($("#commentbox").val());
    if (a.length < 3) {
        addMessage("Please, enter your message");
        return false;
    }
    $("#commentform").submit();
});
$("#commentform").on("submit", function () {
    var c = $("#commentbox").val(),
        a = JSON.stringify($.browser),
        b = $.cookie("csrftoken");
    addMessage("Sending Feedback");
    $.post("/feedback/", {
        comment: c,
        csrfmiddlewaretoken: b,
        browser: a,
        user: user
    }, function () {
        $("#feedbackModal").modal("hide");
        delMessage("Sending Feedback");
    });
    return false;
});
$(window).click(function (a) {
    if ($("#usermenu").css("display") == "block") {
        console.log(a);
        $("#usermenu").hide();
    }
    if ($(".tipsy.tipsy-ne").css("display") == "block" && $(a.target).closest('div:not(".notif-content")').hasClass("tipsy-inner") === false && $(a.target).closest("div").hasClass("notif-content") === false && $(a.target).closest("div").attr("id") != "notif-bell") {
        $("#notif-bell").tipsy("hide");
    }
});
$("#usermenu").click(function (a) {
    a.stopPropagation();
});

function getuser(a) {
    return new Promise(function (b, c) {
        return _getuser(a, b, c);
    });
}

function _getuser(c, a, b) {
    $.post("/getuser/", {}, function (f) {
        var g = f;
        userobj = JSON.parse(f);
        user = userobj.user;
        if (userobj.err) {
            console.log(userobj.err);
        }
        if (userobj.servertime && userobj.utcnow) {
            userobj.clientoffset = new Date().getTime() - Plotly.Lib.dateTime2ms(userobj.servertime);
            userobj.utcoffset = new Date().getTime() - Plotly.Lib.dateTime2ms(userobj.utcnow);
        }
        var i = userobj.plan,
            l = userobj.last4,
            d = ($("#plotlyMainMarker").length > 0),
            k = "";
        if (d && user) {
            k = '<li class="pos-rel"><a href="#" class="link--default link--blocky notifs__bell"><span id="js-num-notifs" class="notif__num">0</span></a><div class="notifs__box"></div></li>';
            $("#signup").parent("li").remove();
            var j = $("#toolsignin").parent("li");
            j.html('<div id="signed-in" class="dropdown"><a id="username" class="link--default link--blocky dropdown-toggle" data-toggle="dropdown" data-target="#" href="/">' + user + '<span class="caret user-caret"></span></a><ul id="usermenu" class="dropdown-menu dropdown-menu--right-align" role="menu"><li><a href="/~' + user + '" target="_blank"><i class="icon icon-user"></i> Profile</a></li><li><a href="#" onclick="userSettings.show();"><i class="icon icon-gear"></i> Settings</a></li><li><a href="/signout"><i class="icon icon-signout"></i> Sign out</a></li></ul></div>');
            $(k).insertBefore(j);
        } else {
            if ($("#signup").parent("li").length > 0 && $("#toolsignin").parent("li").length > 0 && user) {
                $("#signup").parent("li").remove();
                $("#toolsignin").parent("li").html('<div class="dropdown"><a id="username" class="link--default link--blocky dropdown-toggle" data-toggle="dropdown" data-target="#" href="/">' + user + '<span class="caret user-caret"></span></a><ul id="usermenu" class="dropdown-menu dropdown-menu--right-align" role="menu"><li><a href="/plot">Access Plotly</a></li><li><a href="/signout">Sign out</a></li></ul></div>');
            }
        }
        $(".currentPlan").val(i);
        $(".cc_msg").text("Card to be charged: xxxx-xxxx-xxxx-" + l);
        $("#userdiv").show();
        if (d) {
            $(".notifs__bell").on("click", function (m) {
                m.preventDefault();
                $(".notifs__box").toggle();
                $("li.notif").hover(function () {
                    $(this).children(".notif__close-tab").addClass("hover");
                }, function () {
                    $(this).children(".notif__close-tab").removeClass("hover");
                });
            });
            $(document).mouseup(function (m) {
                if ($(".notifs__box").has(m.target).length === 0 && !$(".notifs__bell").has(m.target).length) {
                    $(".notifs__box").hide();
                }
            });
            try {
                console.log("notree value", c);
                if (!c) {
                    $("#privatetree").jstree("refresh");
                    $("#sharedtree").jstree("refresh");
                }
            } catch (h) {}
            if (user) {
                try {
                    mixpanel.identify(user);
                    mixpanel.name_tag(user);
                    mixpanel.register_once({
                        $email: userobj.email,
                        $username: user,
                        date_joined: userobj.date_joined
                    });
                } catch (h) {
                    console.log(h);
                }
            }
        }
        a();
        if ($(".avatar-container").length > 0) {
            $("#username").unbind("click").click(function () {
                $("#usermenu").show();
            });
        }
        if (window.refreshFileTrees) {
            refreshFileTrees();
            fileFabricListenters();
        }
    });
}
Plotly.STATUS_MSGS = [];

function addMessage(b, a) {
    Plotly.STATUS_MSGS.push(b);
    $("#statustab").show().find("p").text(Plotly.STATUS_MSGS.join("... "));
    window.setTimeout(function () {
        if (a || typeof (a) === "undefined") {
            delMessage(b);
        }
    }, 4000);
}

function delMessage(b) {
    if (!b) {
        Plotly.STATUS_MSGS = [];
    }
    for (var a = 0; a < Plotly.STATUS_MSGS.length; a++) {
        if (Plotly.STATUS_MSGS[a] == b) {
            Plotly.STATUS_MSGS.splice(a, 1);
            break;
        }
    }
    if (Plotly.STATUS_MSGS.length) {
        $("#statustab").show().find("p").text(Plotly.STATUS_MSGS.join(" "));
    } else {
        $("#statustab").hide();
    }
}
userobj = {
    user: "",
    clientoffset: 0,
    utcoffset: 0
};

function updateTSRel() {
    $(".tsrel").each(function () {
        var c = $(this),
            a = c.parents("[data-ts], [data-rev-ts]").first(),
            i, e;
        if (a.length === 0) {
            return;
        }
        if (a.data("ts")) {
            i = Plotly.Lib.dateTime2ms(a.data("ts")) + userobj.utcoffset;
        } else {
            i = Plotly.Lib.dateTime2ms(a.data("rev-ts")) + userobj.clientoffset;
        }
        var b = Math.round((new Date().getTime() - i) / 60000),
            j = Math.floor(b / 60),
            k = Math.floor(j / 24);
        if (b < 60) {
            e = b + " min" + (b > 1 ? "s" : "") + " ago";
        } else {
            if (j < 24) {
                e = j + " hour" + (j > 1 ? "s" : "") + " ago";
            } else {
                if (k < 31) {
                    e = k + " day" + (k > 1 ? "s" : "") + " ago";
                } else {
                    var g = new Date().getFullYear(),
                        h = new Date(i),
                        f = h.getFullYear();
                    e = d3.time.format("%b %d")(new Date(i)).replace(" 0", " ");
                    if (g != f) {
                        e += ", " + f;
                    }
                }
            }
        }
        c.html(e);
    });
}
LIT = false;

function litebox() {
    var d = Tabs.get(),
        b = d3.select(d);

    function e(i, f, g, k) {
        try {
            var h = $(d).find(i).offset();
            $('<div class="litebox"><p>' + f + "</p></div>").appendTo(d).css({
                top: h.top + k,
                left: h.left + g
            });
        } catch (j) {
            console.log(j);
        }
    }
    if (!LIT) {
        LIT = true;
        b.selectAll(".nwdrag,.nedrag,.swdrag,.sedrag").attr("stroke", "rgba(0,0,255,1)").attr("stroke-width", 3).style("fill", "rgba(0,0,255,0.2)").style("opacity", 0.3);
        b.selectAll(".ndrag,.sdrag,.edrag,.wdrag").attr("stroke", "rgba(255,0,0,1)").attr("stroke-width", 3).style("fill", "rgba(255,0,0,0.2)").style("opacity", 0.3);
        b.selectAll(".nsdrag,.ewdrag").attr("stroke", "rgba(70,136,71,1)").attr("stroke-width", 3).style("fill", "rgba(70,136,71,0.2)").style("opacity", 0.3);
        b.selectAll(".legend rect").attr("stroke", "rgba(192,152,83,1)").attr("stroke-width", 5);
        var a = 30;
        var c = -165;
        e(".nwdrag", '<font color="#3A87AD">Drag in blue box to zoom</font>', a, -50);
        e(".nedrag", '<font color="#3A87AD">Drag in blue box to zoom</font>', c, -50);
        e(".sedrag", '<font color="#3A87AD">Drag in blue box to zoom</font><br><font color="#B94A48">Click in red box to set x<br>Drag in red box to zoom x</font>', c, -110);
        e(".swdrag", '<font color="#3A87AD">Drag in blue box to zoom</font><br><font color="#B94A48">Click in red box to set x/y<br>Drag in red box to zoom x/y</font>', a, -110);
        e(".nsdrag", '<font color="#468847">Scroll in green</font> <font color="#B94A48">or red boxes to zoom</font><br><font color="#468847">Drag in green<br>boxes to pan<br>Double-click<br>to autoscale x or y</font>', a, -40);
        e(".gtitle", '<font color="#999999">On the graph:<br><i class="icon-resize-small"></i> Drag or scroll to zoom<br><i class="icon-move"></i> Shift-drag to pan<br><i class="icon-wrench"></i> Ctrl/Alt/&#8984;-drag for more options<br><i class="icon-fullscreen"></i> Double-click to autoscale<br></font><br>', -20, 10);
        e(".legend rect", '<font color="#C09853">Click legend text to edit<br>Drag legend to move</font>', -175, -40);
        $("#closelitebox").fadeIn();
    } else {
        hidebox();
    }
}

function hidebox() {
    LIT = false;
    var a = Tabs.get();
    $(".litebox").fadeOut().remove();
    $("#closelitebox").fadeOut();
    d3.select(a).selectAll(".drag").style("fill", "black").style("opacity", 0).attr("stroke-width", 0);
    if (a && a.layout && a.layout.showlegend) {
        Plotly.Legend.draw(a);
    }
}